Require Import Picinae_riscv.
Require Import NArith.

Definition __global_pointer : N := 0x80080800.
Definition __global_size : N := 2048.
Definition __stack_pointer : N :=
    (* Section 4.4.2. RAM Layout - 
        The stack starts at the very end of the RAM at address ORIGIN(ram) + LENGTH(ram) - 4.
        The stack grows downwards.*)
    (* https://cdn.hackaday.io/files/1741677451560928/NEORV32.pdf *)
    (2 ^ 32) - 4.

Definition lifted_RTOSDemo (a : addr) : N :=
    match a with
    (* <_start> *)
    | 0x80000000 => 0x00081197 (* auipc gp,0x81  *)
    | 0x80000004 => 0x80018193 (* add gp,gp,-2048 # 80080800 <__global_pointer$>  *)
    | 0x80000008 => 0xf1402573 (* csrr a0,mhartid  *)
    | 0x8000000c => 0x00000593 (* li a1,0  *)
    | 0x80000010 => 0x06b51663 (* bne a0,a1,8000007c <secondary>  *)
    | 0x80000014 => 0x00096117 (* auipc sp,0x96  *)
    | 0x80000018 => 0xcda10113 (* add sp,sp,-806 # 80095cee <_stack_top>  *)
    | 0x8000001c => 0x00015517 (* auipc a0,0x15  *)
    | 0x80000020 => 0xd4050513 (* add a0,a0,-704 # 80014d5c <_data_lma>  *)
    | 0x80000024 => 0x00080597 (* auipc a1,0x80  *)
    | 0x80000028 => 0xfdc58593 (* add a1,a1,-36 # 80080000 <pxCriticalNesting>  *)
    | 0x8000002c => 0x85418613 (* add a2,gp,-1964 # 80080054 <_bss>  *)
    | 0x80000030 => 0x00c5fc63 (* bgeu a1,a2,80000048 <_start+0x48>  *)
    | 0x80000034 => 0x00052283 (* lw t0,0(a0)  *)
    | 0x80000038 => 0x0055a023 (* sw t0,0(a1)  *)
    | 0x8000003c => 0x00450513 (* add a0,a0,4  *)
    | 0x80000040 => 0x00458593 (* add a1,a1,4  *)
    | 0x80000044 => 0xfec5e8e3 (* bltu a1,a2,80000034 <_start+0x34>  *)
    | 0x80000048 => 0x85418513 (* add a0,gp,-1964 # 80080054 <_bss>  *)
    | 0x8000004c => 0x00096597 (* auipc a1,0x96  *)
    | 0x80000050 => 0xb4058593 (* add a1,a1,-1216 # 80095b8c <_ebss>  *)
    | 0x80000054 => 0x00b57863 (* bgeu a0,a1,80000064 <_start+0x64>  *)
    | 0x80000058 => 0x00052023 (* sw zero,0(a0)  *)
    | 0x8000005c => 0x00450513 (* add a0,a0,4  *)
    | 0x80000060 => 0xfeb56ce3 (* bltu a0,a1,80000058 <_start+0x58>  *)
    | 0x80000064 => 0x00000513 (* li a0,0  *)
    | 0x80000068 => 0x00000593 (* li a1,0  *)
    | 0x8000006c => 0x00000613 (* li a2,0  *)
    | 0x80000070 => 0x090000ef (* jal 80000100 <main>  *)
    | 0x80000074 => 0x10500073 (* wfi  *)
    | 0x80000078 => 0xffdff06f (* j 80000074 <_start+0x74>  *)
    (* <secondary> *)
    | 0x8000007c => 0x10500073 (* wfi  *)
    | 0x80000080 => 0xffdff06f (* j 8000007c <secondary>  *)
    (* <main> *)
    | 0x80000100 => 0x800137b7 (* lui a5,0x80013  *)
    | 0x80000104 => 0x60078793 (* add a5,a5,1536 # 80013600 <freertos_vector_table>  *)
    | 0x80000108 => 0x0017e793 (* or a5,a5,1  *)
    | 0x8000010c => 0x30579073 (* csrw mtvec,a5  *)
    | 0x80000110 => 0x5741206f (* j 80012684 <main_full>  *)
    (* <prvSearchForNameWithinSingleList> *)
    | 0x80000114 => 0x00052783 (* lw a5,0(a0)  *)
    | 0x80000118 => 0x00078a63 (* beqz a5,8000012c <prvSearchForNameWithinSingleList+0x18>  *)
    | 0x8000011c => 0x00c52703 (* lw a4,12(a0)  *)
    | 0x80000120 => 0x00850613 (* add a2,a0,8  *)
    | 0x80000124 => 0x00c00813 (* li a6,12  *)
    | 0x80000128 => 0x00c71663 (* bne a4,a2,80000134 <prvSearchForNameWithinSingleList+0x20>  *)
    | 0x8000012c => 0x00000513 (* li a0,0  *)
    | 0x80000130 => 0x00008067 (* ret  *)
    | 0x80000134 => 0x00c72503 (* lw a0,12(a4)  *)
    | 0x80000138 => 0x00000793 (* li a5,0  *)
    | 0x8000013c => 0x00f506b3 (* add a3,a0,a5  *)
    | 0x80000140 => 0x0346c883 (* lbu a7,52(a3)  *)
    | 0x80000144 => 0x00f586b3 (* add a3,a1,a5  *)
    | 0x80000148 => 0x0006c683 (* lbu a3,0(a3)  *)
    | 0x8000014c => 0x01169863 (* bne a3,a7,8000015c <prvSearchForNameWithinSingleList+0x48>  *)
    | 0x80000150 => 0x00068a63 (* beqz a3,80000164 <prvSearchForNameWithinSingleList+0x50>  *)
    | 0x80000154 => 0x00178793 (* add a5,a5,1  *)
    | 0x80000158 => 0xff0792e3 (* bne a5,a6,8000013c <prvSearchForNameWithinSingleList+0x28>  *)
    | 0x8000015c => 0x00472703 (* lw a4,4(a4)  *)
    | 0x80000160 => 0xfc9ff06f (* j 80000128 <prvSearchForNameWithinSingleList+0x14>  *)
    | 0x80000164 => 0xfe050ce3 (* beqz a0,8000015c <prvSearchForNameWithinSingleList+0x48>  *)
    | 0x80000168 => 0x00008067 (* ret  *)
    (* <prvAddNewTaskToReadyList> *)
    | 0x8000016c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80000170 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80000174 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80000178 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000017c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80000180 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80000184 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80000188 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000018c => 0x00050413 (* mv s0,a0  *)
    | 0x80000190 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80000194 => 0x80080a37 (* lui s4,0x80080  *)
    | 0x80000198 => 0x004a2783 (* lw a5,4(s4) # 80080004 <xCriticalNesting>  *)
    | 0x8000019c => 0x00178793 (* add a5,a5,1  *)
    | 0x800001a0 => 0x00fa2223 (* sw a5,4(s4)  *)
    | 0x800001a4 => 0x8881a703 (* lw a4,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x800001a8 => 0xc6418493 (* add s1,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x800001ac => 0x00170713 (* add a4,a4,1  *)
    | 0x800001b0 => 0x88e1a423 (* sw a4,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x800001b4 => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800001b8 => 0x10071c63 (* bnez a4,800002d0 <prvAddNewTaskToReadyList+0x164>  *)
    | 0x800001bc => 0x88a1ac23 (* sw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800001c0 => 0x8881a703 (* lw a4,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x800001c4 => 0x00100793 (* li a5,1  *)
    | 0x800001c8 => 0x04f71a63 (* bne a4,a5,8000021c <prvAddNewTaskToReadyList+0xb0>  *)
    | 0x800001cc => 0xc6418913 (* add s2,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x800001d0 => 0x0b448a93 (* add s5,s1,180  *)
    | 0x800001d4 => 0x00090513 (* mv a0,s2  *)
    | 0x800001d8 => 0x01490913 (* add s2,s2,20  *)
    | 0x800001dc => 0x1d9020ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800001e0 => 0xff2a9ae3 (* bne s5,s2,800001d4 <prvAddNewTaskToReadyList+0x68>  *)
    | 0x800001e4 => 0xc5018513 (* add a0,gp,-944 # 80080450 <xDelayedTaskList1>  *)
    | 0x800001e8 => 0x1cd020ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800001ec => 0xc3c18513 (* add a0,gp,-964 # 8008043c <xDelayedTaskList2>  *)
    | 0x800001f0 => 0x1c5020ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800001f4 => 0xc2818513 (* add a0,gp,-984 # 80080428 <xPendingReadyList>  *)
    | 0x800001f8 => 0x1bd020ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800001fc => 0xc1418513 (* add a0,gp,-1004 # 80080414 <xTasksWaitingTermination>  *)
    | 0x80000200 => 0x1b5020ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x80000204 => 0xc0018513 (* add a0,gp,-1024 # 80080400 <xSuspendedTaskList>  *)
    | 0x80000208 => 0x1ad020ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x8000020c => 0xc5018a93 (* add s5,gp,-944 # 80080450 <xDelayedTaskList1>  *)
    | 0x80000210 => 0x8951aa23 (* sw s5,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000214 => 0xc3c18913 (* add s2,gp,-964 # 8008043c <xDelayedTaskList2>  *)
    | 0x80000218 => 0x8921a823 (* sw s2,-1904(gp) # 80080090 <pxOverflowDelayedTaskList>  *)
    | 0x8000021c => 0x86c1a783 (* lw a5,-1940(gp) # 8008006c <uxTaskNumber>  *)
    | 0x80000220 => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000224 => 0x00178793 (* add a5,a5,1  *)
    | 0x80000228 => 0x86f1a623 (* sw a5,-1940(gp) # 8008006c <uxTaskNumber>  *)
    | 0x8000022c => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x80000230 => 0x04f42023 (* sw a5,64(s0)  *)
    | 0x80000234 => 0x00100793 (* li a5,1  *)
    | 0x80000238 => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x8000023c => 0x00c7e7b3 (* or a5,a5,a2  *)
    | 0x80000240 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000244 => 0x01400793 (* li a5,20  *)
    | 0x80000248 => 0x02f70733 (* mul a4,a4,a5  *)
    | 0x8000024c => 0x00440693 (* add a3,s0,4  *)
    | 0x80000250 => 0x00e487b3 (* add a5,s1,a4  *)
    | 0x80000254 => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80000258 => 0x00872603 (* lw a2,8(a4)  *)
    | 0x8000025c => 0x00e42423 (* sw a4,8(s0)  *)
    | 0x80000260 => 0x00c42623 (* sw a2,12(s0)  *)
    | 0x80000264 => 0x00d62223 (* sw a3,4(a2)  *)
    | 0x80000268 => 0x00d72423 (* sw a3,8(a4)  *)
    | 0x8000026c => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80000270 => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x80000274 => 0x00170713 (* add a4,a4,1  *)
    | 0x80000278 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x8000027c => 0x004a2783 (* lw a5,4(s4)  *)
    | 0x80000280 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80000284 => 0x00fa2223 (* sw a5,4(s4)  *)
    | 0x80000288 => 0x00079463 (* bnez a5,80000290 <prvAddNewTaskToReadyList+0x124>  *)
    | 0x8000028c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80000290 => 0x87c1a783 (* lw a5,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x80000294 => 0x00078c63 (* beqz a5,800002ac <prvAddNewTaskToReadyList+0x140>  *)
    | 0x80000298 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x8000029c => 0x02c7a703 (* lw a4,44(a5)  *)
    | 0x800002a0 => 0x02c42783 (* lw a5,44(s0)  *)
    | 0x800002a4 => 0x00f77463 (* bgeu a4,a5,800002ac <prvAddNewTaskToReadyList+0x140>  *)
    | 0x800002a8 => 0x00000073 (* ecall  *)
    | 0x800002ac => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800002b0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800002b4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800002b8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800002bc => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800002c0 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800002c4 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x800002c8 => 0x02010113 (* add sp,sp,32  *)
    | 0x800002cc => 0x00008067 (* ret  *)
    | 0x800002d0 => 0x87c1a703 (* lw a4,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x800002d4 => 0x02c52783 (* lw a5,44(a0)  *)
    | 0x800002d8 => 0xf40712e3 (* bnez a4,8000021c <prvAddNewTaskToReadyList+0xb0>  *)
    | 0x800002dc => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800002e0 => 0x02c72703 (* lw a4,44(a4)  *)
    | 0x800002e4 => 0xf2e7ece3 (* bltu a5,a4,8000021c <prvAddNewTaskToReadyList+0xb0>  *)
    | 0x800002e8 => 0x88a1ac23 (* sw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800002ec => 0xf31ff06f (* j 8000021c <prvAddNewTaskToReadyList+0xb0>  *)
    (* <prvAddCurrentTaskToDelayedList> *)
    | 0x800002f0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800002f4 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800002f8 => 0x8841a983 (* lw s3,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x800002fc => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80000300 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80000304 => 0x8941aa03 (* lw s4,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000308 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000030c => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80000310 => 0x00050493 (* mv s1,a0  *)
    | 0x80000314 => 0x8901aa83 (* lw s5,-1904(gp) # 80080090 <pxOverflowDelayedTaskList>  *)
    | 0x80000318 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x8000031c => 0x8981a503 (* lw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000320 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80000324 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80000328 => 0x06078023 (* sb zero,96(a5)  *)
    | 0x8000032c => 0x00450513 (* add a0,a0,4  *)
    | 0x80000330 => 0x00058913 (* mv s2,a1  *)
    | 0x80000334 => 0x125020ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80000338 => 0x02051263 (* bnez a0,8000035c <prvAddCurrentTaskToDelayedList+0x6c>  *)
    | 0x8000033c => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000340 => 0x8801a683 (* lw a3,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000344 => 0x02c7a603 (* lw a2,44(a5)  *)
    | 0x80000348 => 0x00100793 (* li a5,1  *)
    | 0x8000034c => 0x00c797b3 (* sll a5,a5,a2  *)
    | 0x80000350 => 0xfff7c793 (* not a5,a5  *)
    | 0x80000354 => 0x00d7f7b3 (* and a5,a5,a3  *)
    | 0x80000358 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x8000035c => 0xfff00793 (* li a5,-1  *)
    | 0x80000360 => 0x06f49a63 (* bne s1,a5,800003d4 <prvAddCurrentTaskToDelayedList+0xe4>  *)
    | 0x80000364 => 0x06090863 (* beqz s2,800003d4 <prvAddCurrentTaskToDelayedList+0xe4>  *)
    | 0x80000368 => 0xc0018793 (* add a5,gp,-1024 # 80080400 <xSuspendedTaskList>  *)
    | 0x8000036c => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80000370 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000374 => 0x00872603 (* lw a2,8(a4)  *)
    | 0x80000378 => 0x00e6a423 (* sw a4,8(a3)  *)
    | 0x8000037c => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000380 => 0x00c6a623 (* sw a2,12(a3)  *)
    | 0x80000384 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000388 => 0x00468693 (* add a3,a3,4  *)
    | 0x8000038c => 0x00d62223 (* sw a3,4(a2)  *)
    | 0x80000390 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000394 => 0x00468693 (* add a3,a3,4  *)
    | 0x80000398 => 0x00d72423 (* sw a3,8(a4)  *)
    | 0x8000039c => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800003a0 => 0x00f72a23 (* sw a5,20(a4)  *)
    | 0x800003a4 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x800003a8 => 0x00170713 (* add a4,a4,1  *)
    | 0x800003ac => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x800003b0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800003b4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800003b8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800003bc => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800003c0 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800003c4 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800003c8 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x800003cc => 0x02010113 (* add sp,sp,32  *)
    | 0x800003d0 => 0x00008067 (* ret  *)
    | 0x800003d4 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800003d8 => 0x8981a583 (* lw a1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800003dc => 0x009984b3 (* add s1,s3,s1  *)
    | 0x800003e0 => 0x0097a223 (* sw s1,4(a5)  *)
    | 0x800003e4 => 0x00458593 (* add a1,a1,4  *)
    | 0x800003e8 => 0x0334f663 (* bgeu s1,s3,80000414 <prvAddCurrentTaskToDelayedList+0x124>  *)
    | 0x800003ec => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800003f0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800003f4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800003f8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800003fc => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80000400 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80000404 => 0x000a8513 (* mv a0,s5  *)
    | 0x80000408 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8000040c => 0x02010113 (* add sp,sp,32  *)
    | 0x80000410 => 0x7f80206f (* j 80002c08 <vListInsert>  *)
    | 0x80000414 => 0x000a0513 (* mv a0,s4  *)
    | 0x80000418 => 0x7f0020ef (* jal 80002c08 <vListInsert>  *)
    | 0x8000041c => 0x8681a703 (* lw a4,-1944(gp) # 80080068 <xNextTaskUnblockTime>  *)
    | 0x80000420 => 0xf8e4f8e3 (* bgeu s1,a4,800003b0 <prvAddCurrentTaskToDelayedList+0xc0>  *)
    | 0x80000424 => 0x8691a423 (* sw s1,-1944(gp) # 80080068 <xNextTaskUnblockTime>  *)
    | 0x80000428 => 0xf89ff06f (* j 800003b0 <prvAddCurrentTaskToDelayedList+0xc0>  *)
    (* <prvResetNextTaskUnblockTime> *)
    | 0x8000042c => 0x8941a783 (* lw a5,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000430 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x80000434 => 0x00069863 (* bnez a3,80000444 <prvResetNextTaskUnblockTime+0x18>  *)
    | 0x80000438 => 0xfff00713 (* li a4,-1  *)
    | 0x8000043c => 0x86e1a423 (* sw a4,-1944(gp) # 80080068 <xNextTaskUnblockTime>  *)
    | 0x80000440 => 0x00008067 (* ret  *)
    | 0x80000444 => 0x8941a703 (* lw a4,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000448 => 0x00c72703 (* lw a4,12(a4)  *)
    | 0x8000044c => 0x00072703 (* lw a4,0(a4)  *)
    | 0x80000450 => 0xfedff06f (* j 8000043c <prvResetNextTaskUnblockTime+0x10>  *)
    (* <prvTaskIsTaskSuspended> *)
    | 0x80000454 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80000458 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000045c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80000460 => 0x00050413 (* mv s0,a0  *)
    | 0x80000464 => 0x00051c63 (* bnez a0,8000047c <prvTaskIsTaskSuspended+0x28>  *)
    | 0x80000468 => 0x000015b7 (* lui a1,0x1  *)
    | 0x8000046c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000470 => 0xcde58593 (* add a1,a1,-802 # cde <__stack_size+0xb80>  *)
    | 0x80000474 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000478 => 0x619110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000047c => 0x01442703 (* lw a4,20(s0)  *)
    | 0x80000480 => 0xc0018793 (* add a5,gp,-1024 # 80080400 <xSuspendedTaskList>  *)
    | 0x80000484 => 0x00000513 (* li a0,0  *)
    | 0x80000488 => 0x02f71a63 (* bne a4,a5,800004bc <prvTaskIsTaskSuspended+0x68>  *)
    | 0x8000048c => 0x02842703 (* lw a4,40(s0)  *)
    | 0x80000490 => 0xc2818793 (* add a5,gp,-984 # 80080428 <xPendingReadyList>  *)
    | 0x80000494 => 0x02f70463 (* beq a4,a5,800004bc <prvTaskIsTaskSuspended+0x68>  *)
    | 0x80000498 => 0x02071263 (* bnez a4,800004bc <prvTaskIsTaskSuspended+0x68>  *)
    | 0x8000049c => 0x05c44703 (* lbu a4,92(s0)  *)
    | 0x800004a0 => 0x00100793 (* li a5,1  *)
    | 0x800004a4 => 0x00f70c63 (* beq a4,a5,800004bc <prvTaskIsTaskSuspended+0x68>  *)
    | 0x800004a8 => 0x05d44703 (* lbu a4,93(s0)  *)
    | 0x800004ac => 0x00f70863 (* beq a4,a5,800004bc <prvTaskIsTaskSuspended+0x68>  *)
    | 0x800004b0 => 0x05e44503 (* lbu a0,94(s0)  *)
    | 0x800004b4 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x800004b8 => 0x00a03533 (* snez a0,a0  *)
    | 0x800004bc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800004c0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800004c4 => 0x01010113 (* add sp,sp,16  *)
    | 0x800004c8 => 0x00008067 (* ret  *)
    (* <prvDeleteTCB> *)
    | 0x800004cc => 0x05f54783 (* lbu a5,95(a0)  *)
    | 0x800004d0 => 0x02079863 (* bnez a5,80000500 <prvDeleteTCB+0x34>  *)
    | 0x800004d4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800004d8 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800004dc => 0x00050413 (* mv s0,a0  *)
    | 0x800004e0 => 0x03052503 (* lw a0,48(a0)  *)
    | 0x800004e4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800004e8 => 0x0a4060ef (* jal 8000658c <vPortFree>  *)
    | 0x800004ec => 0x00040513 (* mv a0,s0  *)
    | 0x800004f0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800004f4 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800004f8 => 0x01010113 (* add sp,sp,16  *)
    | 0x800004fc => 0x0900606f (* j 8000658c <vPortFree>  *)
    | 0x80000500 => 0x00100713 (* li a4,1  *)
    | 0x80000504 => 0xfee78ce3 (* beq a5,a4,800004fc <prvDeleteTCB+0x30>  *)
    | 0x80000508 => 0x00200713 (* li a4,2  *)
    | 0x8000050c => 0x00e78c63 (* beq a5,a4,80000524 <prvDeleteTCB+0x58>  *)
    | 0x80000510 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80000514 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000518 => 0x94758593 (* add a1,a1,-1721 # 1947 <__stack_size+0x17e9>  *)
    | 0x8000051c => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000520 => 0x5711106f (* j 80012290 <vAssertCalled>  *)
    | 0x80000524 => 0x00008067 (* ret  *)
    (* <prvCheckTasksWaitingTermination> *)
    | 0x80000528 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000052c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80000530 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80000534 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80000538 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000053c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80000540 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80000544 => 0x80080437 (* lui s0,0x80080  *)
    | 0x80000548 => 0xc1418913 (* add s2,gp,-1004 # 80080414 <xTasksWaitingTermination>  *)
    | 0x8000054c => 0x88c1a783 (* lw a5,-1908(gp) # 8008008c <uxDeletedTasksWaitingCleanUp>  *)
    | 0x80000550 => 0x02079263 (* bnez a5,80000574 <prvCheckTasksWaitingTermination+0x4c>  *)
    | 0x80000554 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80000558 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000055c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80000560 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80000564 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80000568 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000056c => 0x02010113 (* add sp,sp,32  *)
    | 0x80000570 => 0x00008067 (* ret  *)
    | 0x80000574 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80000578 => 0x00442783 (* lw a5,4(s0) # 80080004 <xCriticalNesting>  *)
    | 0x8000057c => 0x00178793 (* add a5,a5,1  *)
    | 0x80000580 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x80000584 => 0x00c92783 (* lw a5,12(s2)  *)
    | 0x80000588 => 0x00c7aa03 (* lw s4,12(a5)  *)
    | 0x8000058c => 0x004a0513 (* add a0,s4,4  *)
    | 0x80000590 => 0x6c8020ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80000594 => 0x8881a783 (* lw a5,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x80000598 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x8000059c => 0x88f1a423 (* sw a5,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x800005a0 => 0x88c1a783 (* lw a5,-1908(gp) # 8008008c <uxDeletedTasksWaitingCleanUp>  *)
    | 0x800005a4 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800005a8 => 0x88f1a623 (* sw a5,-1908(gp) # 8008008c <uxDeletedTasksWaitingCleanUp>  *)
    | 0x800005ac => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800005b0 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800005b4 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x800005b8 => 0x00079463 (* bnez a5,800005c0 <prvCheckTasksWaitingTermination+0x98>  *)
    | 0x800005bc => 0x30046073 (* csrs mstatus,8  *)
    | 0x800005c0 => 0x000a0513 (* mv a0,s4  *)
    | 0x800005c4 => 0xf09ff0ef (* jal 800004cc <prvDeleteTCB>  *)
    | 0x800005c8 => 0xf85ff06f (* j 8000054c <prvCheckTasksWaitingTermination+0x24>  *)
    (* <prvIdleTask> *)
    | 0x800005cc => 0xff010113 (* add sp,sp,-16  *)
    | 0x800005d0 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800005d4 => 0xf55ff0ef (* jal 80000528 <prvCheckTasksWaitingTermination>  *)
    | 0x800005d8 => 0xffdff06f (* j 800005d4 <prvIdleTask+0x8>  *)
    (* <prvInitialiseNewTask.constprop.0> *)
    | 0x800005dc => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800005e0 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x800005e4 => 0x00050a13 (* mv s4,a0  *)
    | 0x800005e8 => 0x03082503 (* lw a0,48(a6)  *)
    | 0x800005ec => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800005f0 => 0x00261913 (* sll s2,a2,0x2  *)
    | 0x800005f4 => 0x01612023 (* sw s6,0(sp)  *)
    | 0x800005f8 => 0x00090613 (* mv a2,s2  *)
    | 0x800005fc => 0x00058b13 (* mv s6,a1  *)
    | 0x80000600 => 0x0a500593 (* li a1,165  *)
    | 0x80000604 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80000608 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000060c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80000610 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80000614 => 0x00078993 (* mv s3,a5  *)
    | 0x80000618 => 0x00080413 (* mv s0,a6  *)
    | 0x8000061c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80000620 => 0x00068a93 (* mv s5,a3  *)
    | 0x80000624 => 0x00070493 (* mv s1,a4  *)
    | 0x80000628 => 0x120130ef (* jal 80013748 <memset>  *)
    | 0x8000062c => 0x03042783 (* lw a5,48(s0)  *)
    | 0x80000630 => 0xffc90913 (* add s2,s2,-4  *)
    | 0x80000634 => 0x01278933 (* add s2,a5,s2  *)
    | 0x80000638 => 0xff097913 (* and s2,s2,-16  *)
    | 0x8000063c => 0x020b0663 (* beqz s6,80000668 <prvInitialiseNewTask.constprop.0+0x8c>  *)
    | 0x80000640 => 0x00000713 (* li a4,0  *)
    | 0x80000644 => 0x00c00693 (* li a3,12  *)
    | 0x80000648 => 0x00eb07b3 (* add a5,s6,a4  *)
    | 0x8000064c => 0x0007c783 (* lbu a5,0(a5)  *)
    | 0x80000650 => 0x00e40633 (* add a2,s0,a4  *)
    | 0x80000654 => 0x02f60a23 (* sb a5,52(a2)  *)
    | 0x80000658 => 0x00078663 (* beqz a5,80000664 <prvInitialiseNewTask.constprop.0+0x88>  *)
    | 0x8000065c => 0x00170713 (* add a4,a4,1  *)
    | 0x80000660 => 0xfed714e3 (* bne a4,a3,80000648 <prvInitialiseNewTask.constprop.0+0x6c>  *)
    | 0x80000664 => 0x02040fa3 (* sb zero,63(s0)  *)
    | 0x80000668 => 0x00800793 (* li a5,8  *)
    | 0x8000066c => 0x0097fc63 (* bgeu a5,s1,80000684 <prvInitialiseNewTask.constprop.0+0xa8>  *)
    | 0x80000670 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000674 => 0x76600593 (* li a1,1894  *)
    | 0x80000678 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x8000067c => 0x415110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000680 => 0x00800493 (* li s1,8  *)
    | 0x80000684 => 0x00440513 (* add a0,s0,4  *)
    | 0x80000688 => 0x02942623 (* sw s1,44(s0)  *)
    | 0x8000068c => 0x04942423 (* sw s1,72(s0)  *)
    | 0x80000690 => 0x544020ef (* jal 80002bd4 <vListInitialiseItem>  *)
    | 0x80000694 => 0x01840513 (* add a0,s0,24  *)
    | 0x80000698 => 0x53c020ef (* jal 80002bd4 <vListInitialiseItem>  *)
    | 0x8000069c => 0x00900793 (* li a5,9  *)
    | 0x800006a0 => 0x409787b3 (* sub a5,a5,s1  *)
    | 0x800006a4 => 0x00842823 (* sw s0,16(s0)  *)
    | 0x800006a8 => 0x00f42c23 (* sw a5,24(s0)  *)
    | 0x800006ac => 0x02842223 (* sw s0,36(s0)  *)
    | 0x800006b0 => 0x000a8613 (* mv a2,s5  *)
    | 0x800006b4 => 0x000a0593 (* mv a1,s4  *)
    | 0x800006b8 => 0x00090513 (* mv a0,s2  *)
    | 0x800006bc => 0x65c120ef (* jal 80012d18 <pxPortInitialiseStack>  *)
    | 0x800006c0 => 0x00a42023 (* sw a0,0(s0)  *)
    | 0x800006c4 => 0x00098463 (* beqz s3,800006cc <prvInitialiseNewTask.constprop.0+0xf0>  *)
    | 0x800006c8 => 0x0089a023 (* sw s0,0(s3)  *)
    | 0x800006cc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800006d0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800006d4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800006d8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800006dc => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800006e0 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800006e4 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x800006e8 => 0x00012b03 (* lw s6,0(sp)  *)
    | 0x800006ec => 0x02010113 (* add sp,sp,32  *)
    | 0x800006f0 => 0x00008067 (* ret  *)
    (* <xTaskCreateStatic> *)
    | 0x800006f4 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x800006f8 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x800006fc => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80000700 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80000704 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80000708 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000070c => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80000710 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80000714 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80000718 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x8000071c => 0x00050913 (* mv s2,a0  *)
    | 0x80000720 => 0x00058993 (* mv s3,a1  *)
    | 0x80000724 => 0x00060a13 (* mv s4,a2  *)
    | 0x80000728 => 0x00068a93 (* mv s5,a3  *)
    | 0x8000072c => 0x00070b13 (* mv s6,a4  *)
    | 0x80000730 => 0x00078493 (* mv s1,a5  *)
    | 0x80000734 => 0x00080413 (* mv s0,a6  *)
    | 0x80000738 => 0x00079a63 (* bnez a5,8000074c <xTaskCreateStatic+0x58>  *)
    | 0x8000073c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000740 => 0x4f300593 (* li a1,1267  *)
    | 0x80000744 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000748 => 0x349110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000074c => 0x00041a63 (* bnez s0,80000760 <xTaskCreateStatic+0x6c>  *)
    | 0x80000750 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000754 => 0x4f400593 (* li a1,1268  *)
    | 0x80000758 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x8000075c => 0x335110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000760 => 0x06400793 (* li a5,100  *)
    | 0x80000764 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80000768 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000076c => 0x00f70a63 (* beq a4,a5,80000780 <xTaskCreateStatic+0x8c>  *)
    | 0x80000770 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000774 => 0x4fc00593 (* li a1,1276  *)
    | 0x80000778 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x8000077c => 0x315110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000780 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80000784 => 0x04040663 (* beqz s0,800007d0 <xTaskCreateStatic+0xdc>  *)
    | 0x80000788 => 0x04048463 (* beqz s1,800007d0 <xTaskCreateStatic+0xdc>  *)
    | 0x8000078c => 0x06400613 (* li a2,100  *)
    | 0x80000790 => 0x00000593 (* li a1,0  *)
    | 0x80000794 => 0x00040513 (* mv a0,s0  *)
    | 0x80000798 => 0x7b1120ef (* jal 80013748 <memset>  *)
    | 0x8000079c => 0x00200793 (* li a5,2  *)
    | 0x800007a0 => 0x04f40fa3 (* sb a5,95(s0)  *)
    | 0x800007a4 => 0x00090513 (* mv a0,s2  *)
    | 0x800007a8 => 0x02942823 (* sw s1,48(s0)  *)
    | 0x800007ac => 0x00040813 (* mv a6,s0  *)
    | 0x800007b0 => 0x00810793 (* add a5,sp,8  *)
    | 0x800007b4 => 0x000b0713 (* mv a4,s6  *)
    | 0x800007b8 => 0x000a8693 (* mv a3,s5  *)
    | 0x800007bc => 0x000a0613 (* mv a2,s4  *)
    | 0x800007c0 => 0x00098593 (* mv a1,s3  *)
    | 0x800007c4 => 0xe19ff0ef (* jal 800005dc <prvInitialiseNewTask.constprop.0>  *)
    | 0x800007c8 => 0x00040513 (* mv a0,s0  *)
    | 0x800007cc => 0x9a1ff0ef (* jal 8000016c <prvAddNewTaskToReadyList>  *)
    | 0x800007d0 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x800007d4 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x800007d8 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x800007dc => 0x02412483 (* lw s1,36(sp)  *)
    | 0x800007e0 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x800007e4 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x800007e8 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x800007ec => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x800007f0 => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x800007f4 => 0x03010113 (* add sp,sp,48  *)
    | 0x800007f8 => 0x00008067 (* ret  *)
    (* <xTaskCreate> *)
    | 0x800007fc => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80000800 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80000804 => 0x00050993 (* mv s3,a0  *)
    | 0x80000808 => 0x00261513 (* sll a0,a2,0x2  *)
    | 0x8000080c => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80000810 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80000814 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80000818 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000081c => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80000820 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80000824 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80000828 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000082c => 0x00058a13 (* mv s4,a1  *)
    | 0x80000830 => 0x00060913 (* mv s2,a2  *)
    | 0x80000834 => 0x00068a93 (* mv s5,a3  *)
    | 0x80000838 => 0x00070b13 (* mv s6,a4  *)
    | 0x8000083c => 0x00078b93 (* mv s7,a5  *)
    | 0x80000840 => 0x2d9050ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80000844 => 0x08050463 (* beqz a0,800008cc <xTaskCreate+0xd0>  *)
    | 0x80000848 => 0x00050493 (* mv s1,a0  *)
    | 0x8000084c => 0x06400513 (* li a0,100  *)
    | 0x80000850 => 0x2c9050ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80000854 => 0x00050413 (* mv s0,a0  *)
    | 0x80000858 => 0x06050663 (* beqz a0,800008c4 <xTaskCreate+0xc8>  *)
    | 0x8000085c => 0x06400613 (* li a2,100  *)
    | 0x80000860 => 0x00000593 (* li a1,0  *)
    | 0x80000864 => 0x6e5120ef (* jal 80013748 <memset>  *)
    | 0x80000868 => 0x00040813 (* mv a6,s0  *)
    | 0x8000086c => 0x000b8793 (* mv a5,s7  *)
    | 0x80000870 => 0x000b0713 (* mv a4,s6  *)
    | 0x80000874 => 0x000a8693 (* mv a3,s5  *)
    | 0x80000878 => 0x00090613 (* mv a2,s2  *)
    | 0x8000087c => 0x000a0593 (* mv a1,s4  *)
    | 0x80000880 => 0x00098513 (* mv a0,s3  *)
    | 0x80000884 => 0x02942823 (* sw s1,48(s0)  *)
    | 0x80000888 => 0xd55ff0ef (* jal 800005dc <prvInitialiseNewTask.constprop.0>  *)
    | 0x8000088c => 0x00040513 (* mv a0,s0  *)
    | 0x80000890 => 0x8ddff0ef (* jal 8000016c <prvAddNewTaskToReadyList>  *)
    | 0x80000894 => 0x00100513 (* li a0,1  *)
    | 0x80000898 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x8000089c => 0x02812403 (* lw s0,40(sp)  *)
    | 0x800008a0 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x800008a4 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x800008a8 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x800008ac => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x800008b0 => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x800008b4 => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x800008b8 => 0x00c12b83 (* lw s7,12(sp)  *)
    | 0x800008bc => 0x03010113 (* add sp,sp,48  *)
    | 0x800008c0 => 0x00008067 (* ret  *)
    | 0x800008c4 => 0x00048513 (* mv a0,s1  *)
    | 0x800008c8 => 0x4c5050ef (* jal 8000658c <vPortFree>  *)
    | 0x800008cc => 0xfff00513 (* li a0,-1  *)
    | 0x800008d0 => 0xfc9ff06f (* j 80000898 <xTaskCreate+0x9c>  *)
    (* <vTaskDelete> *)
    | 0x800008d4 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800008d8 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800008dc => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800008e0 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800008e4 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800008e8 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800008ec => 0x01412423 (* sw s4,8(sp)  *)
    | 0x800008f0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x800008f4 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x800008f8 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x800008fc => 0x00050413 (* mv s0,a0  *)
    | 0x80000900 => 0x00178793 (* add a5,a5,1  *)
    | 0x80000904 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80000908 => 0x00051463 (* bnez a0,80000910 <vTaskDelete+0x3c>  *)
    | 0x8000090c => 0x8981a403 (* lw s0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000910 => 0x00440993 (* add s3,s0,4  *)
    | 0x80000914 => 0x00098513 (* mv a0,s3  *)
    | 0x80000918 => 0x340020ef (* jal 80002c58 <uxListRemove>  *)
    | 0x8000091c => 0x02051c63 (* bnez a0,80000954 <vTaskDelete+0x80>  *)
    | 0x80000920 => 0x02c42683 (* lw a3,44(s0)  *)
    | 0x80000924 => 0x01400713 (* li a4,20  *)
    | 0x80000928 => 0x02e68733 (* mul a4,a3,a4  *)
    | 0x8000092c => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80000930 => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80000934 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80000938 => 0x00079e63 (* bnez a5,80000954 <vTaskDelete+0x80>  *)
    | 0x8000093c => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000940 => 0x00100793 (* li a5,1  *)
    | 0x80000944 => 0x00d797b3 (* sll a5,a5,a3  *)
    | 0x80000948 => 0xfff7c793 (* not a5,a5  *)
    | 0x8000094c => 0x00c7f7b3 (* and a5,a5,a2  *)
    | 0x80000950 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000954 => 0x02842783 (* lw a5,40(s0)  *)
    | 0x80000958 => 0x00078663 (* beqz a5,80000964 <vTaskDelete+0x90>  *)
    | 0x8000095c => 0x01840513 (* add a0,s0,24  *)
    | 0x80000960 => 0x2f8020ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80000964 => 0x86c1a783 (* lw a5,-1940(gp) # 8008006c <uxTaskNumber>  *)
    | 0x80000968 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000096c => 0x86f1a623 (* sw a5,-1940(gp) # 8008006c <uxTaskNumber>  *)
    | 0x80000970 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000974 => 0x87c1a703 (* lw a4,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x80000978 => 0x08070a63 (* beqz a4,80000a0c <vTaskDelete+0x138>  *)
    | 0x8000097c => 0x08879863 (* bne a5,s0,80000a0c <vTaskDelete+0x138>  *)
    | 0x80000980 => 0x00098593 (* mv a1,s3  *)
    | 0x80000984 => 0xc1418513 (* add a0,gp,-1004 # 80080414 <xTasksWaitingTermination>  *)
    | 0x80000988 => 0x254020ef (* jal 80002bdc <vListInsertEnd>  *)
    | 0x8000098c => 0x88c1a783 (* lw a5,-1908(gp) # 8008008c <uxDeletedTasksWaitingCleanUp>  *)
    | 0x80000990 => 0x00178793 (* add a5,a5,1  *)
    | 0x80000994 => 0x88f1a623 (* sw a5,-1908(gp) # 8008008c <uxDeletedTasksWaitingCleanUp>  *)
    | 0x80000998 => 0x00100713 (* li a4,1  *)
    | 0x8000099c => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x800009a0 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800009a4 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x800009a8 => 0x00079463 (* bnez a5,800009b0 <vTaskDelete+0xdc>  *)
    | 0x800009ac => 0x30046073 (* csrs mstatus,8  *)
    | 0x800009b0 => 0x00071663 (* bnez a4,800009bc <vTaskDelete+0xe8>  *)
    | 0x800009b4 => 0x00040513 (* mv a0,s0  *)
    | 0x800009b8 => 0xb15ff0ef (* jal 800004cc <prvDeleteTCB>  *)
    | 0x800009bc => 0x87c1a783 (* lw a5,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x800009c0 => 0x02078663 (* beqz a5,800009ec <vTaskDelete+0x118>  *)
    | 0x800009c4 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800009c8 => 0x02879263 (* bne a5,s0,800009ec <vTaskDelete+0x118>  *)
    | 0x800009cc => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800009d0 => 0x00078c63 (* beqz a5,800009e8 <vTaskDelete+0x114>  *)
    | 0x800009d4 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800009d8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800009dc => 0x91658593 (* add a1,a1,-1770 # 916 <__stack_size+0x7b8>  *)
    | 0x800009e0 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800009e4 => 0x0ad110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800009e8 => 0x00000073 (* ecall  *)
    | 0x800009ec => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800009f0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800009f4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800009f8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800009fc => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80000a00 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80000a04 => 0x02010113 (* add sp,sp,32  *)
    | 0x80000a08 => 0x00008067 (* ret  *)
    | 0x80000a0c => 0x8881a783 (* lw a5,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x80000a10 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80000a14 => 0x88f1a423 (* sw a5,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x80000a18 => 0xa15ff0ef (* jal 8000042c <prvResetNextTaskUnblockTime>  *)
    | 0x80000a1c => 0x00000713 (* li a4,0  *)
    | 0x80000a20 => 0xf7dff06f (* j 8000099c <vTaskDelete+0xc8>  *)
    (* <eTaskGetState> *)
    | 0x80000a24 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80000a28 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80000a2c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80000a30 => 0x00050413 (* mv s0,a0  *)
    | 0x80000a34 => 0x00051c63 (* bnez a0,80000a4c <eTaskGetState+0x28>  *)
    | 0x80000a38 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80000a3c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000a40 => 0x9c258593 (* add a1,a1,-1598 # 9c2 <__stack_size+0x864>  *)
    | 0x80000a44 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000a48 => 0x049110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000a4c => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000a50 => 0x00000513 (* li a0,0  *)
    | 0x80000a54 => 0x06878863 (* beq a5,s0,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000a58 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80000a5c => 0x8941a603 (* lw a2,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000a60 => 0x8901a683 (* lw a3,-1904(gp) # 80080090 <pxOverflowDelayedTaskList>  *)
    | 0x80000a64 => 0x80080737 (* lui a4,0x80080  *)
    | 0x80000a68 => 0x00472703 (* lw a4,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x80000a6c => 0x01442783 (* lw a5,20(s0)  *)
    | 0x80000a70 => 0x02842583 (* lw a1,40(s0)  *)
    | 0x80000a74 => 0x00071463 (* bnez a4,80000a7c <eTaskGetState+0x58>  *)
    | 0x80000a78 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80000a7c => 0xc2818713 (* add a4,gp,-984 # 80080428 <xPendingReadyList>  *)
    | 0x80000a80 => 0x00100513 (* li a0,1  *)
    | 0x80000a84 => 0x04e58063 (* beq a1,a4,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000a88 => 0x00200513 (* li a0,2  *)
    | 0x80000a8c => 0x02c78c63 (* beq a5,a2,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000a90 => 0x02d78a63 (* beq a5,a3,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000a94 => 0xc0018713 (* add a4,gp,-1024 # 80080400 <xSuspendedTaskList>  *)
    | 0x80000a98 => 0x02e79e63 (* bne a5,a4,80000ad4 <eTaskGetState+0xb0>  *)
    | 0x80000a9c => 0x02842783 (* lw a5,40(s0)  *)
    | 0x80000aa0 => 0x02079263 (* bnez a5,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000aa4 => 0x05c44703 (* lbu a4,92(s0)  *)
    | 0x80000aa8 => 0x00100793 (* li a5,1  *)
    | 0x80000aac => 0x00f70c63 (* beq a4,a5,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000ab0 => 0x05d44703 (* lbu a4,93(s0)  *)
    | 0x80000ab4 => 0x00f70863 (* beq a4,a5,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000ab8 => 0x05e44703 (* lbu a4,94(s0)  *)
    | 0x80000abc => 0x00f70463 (* beq a4,a5,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000ac0 => 0x00300513 (* li a0,3  *)
    | 0x80000ac4 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80000ac8 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80000acc => 0x01010113 (* add sp,sp,16  *)
    | 0x80000ad0 => 0x00008067 (* ret  *)
    | 0x80000ad4 => 0xc1418713 (* add a4,gp,-1004 # 80080414 <xTasksWaitingTermination>  *)
    | 0x80000ad8 => 0x00400513 (* li a0,4  *)
    | 0x80000adc => 0xfee784e3 (* beq a5,a4,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000ae0 => 0xfe0782e3 (* beqz a5,80000ac4 <eTaskGetState+0xa0>  *)
    | 0x80000ae4 => 0x00100513 (* li a0,1  *)
    | 0x80000ae8 => 0xfddff06f (* j 80000ac4 <eTaskGetState+0xa0>  *)
    (* <uxTaskPriorityGet> *)
    | 0x80000aec => 0x30047073 (* csrc mstatus,8  *)
    | 0x80000af0 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80000af4 => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80000af8 => 0x00051463 (* bnez a0,80000b00 <uxTaskPriorityGet+0x14>  *)
    | 0x80000afc => 0x8981a503 (* lw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000b00 => 0x02c52503 (* lw a0,44(a0)  *)
    | 0x80000b04 => 0x00079463 (* bnez a5,80000b0c <uxTaskPriorityGet+0x20>  *)
    | 0x80000b08 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80000b0c => 0x00008067 (* ret  *)
    (* <vTaskPrioritySet> *)
    | 0x80000b10 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80000b14 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80000b18 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80000b1c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80000b20 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80000b24 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80000b28 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80000b2c => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80000b30 => 0x00800793 (* li a5,8  *)
    | 0x80000b34 => 0x00050413 (* mv s0,a0  *)
    | 0x80000b38 => 0x00b7fe63 (* bgeu a5,a1,80000b54 <vTaskPrioritySet+0x44>  *)
    | 0x80000b3c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80000b40 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000b44 => 0xadc58593 (* add a1,a1,-1316 # adc <__stack_size+0x97e>  *)
    | 0x80000b48 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000b4c => 0x744110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000b50 => 0x00800593 (* li a1,8  *)
    | 0x80000b54 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80000b58 => 0x800809b7 (* lui s3,0x80080  *)
    | 0x80000b5c => 0x0049a783 (* lw a5,4(s3) # 80080004 <xCriticalNesting>  *)
    | 0x80000b60 => 0x00178793 (* add a5,a5,1  *)
    | 0x80000b64 => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x80000b68 => 0x00041463 (* bnez s0,80000b70 <vTaskPrioritySet+0x60>  *)
    | 0x80000b6c => 0x8981a403 (* lw s0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000b70 => 0x04842783 (* lw a5,72(s0)  *)
    | 0x80000b74 => 0x0ef58063 (* beq a1,a5,80000c54 <vTaskPrioritySet+0x144>  *)
    | 0x80000b78 => 0x10b7fa63 (* bgeu a5,a1,80000c8c <vTaskPrioritySet+0x17c>  *)
    | 0x80000b7c => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000b80 => 0x00000493 (* li s1,0  *)
    | 0x80000b84 => 0x00868863 (* beq a3,s0,80000b94 <vTaskPrioritySet+0x84>  *)
    | 0x80000b88 => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000b8c => 0x02c72483 (* lw s1,44(a4)  *)
    | 0x80000b90 => 0x00b4b4b3 (* sltu s1,s1,a1  *)
    | 0x80000b94 => 0x02c42a03 (* lw s4,44(s0)  *)
    | 0x80000b98 => 0x01478463 (* beq a5,s4,80000ba0 <vTaskPrioritySet+0x90>  *)
    | 0x80000b9c => 0x00ba7463 (* bgeu s4,a1,80000ba4 <vTaskPrioritySet+0x94>  *)
    | 0x80000ba0 => 0x02b42623 (* sw a1,44(s0)  *)
    | 0x80000ba4 => 0x01842783 (* lw a5,24(s0)  *)
    | 0x80000ba8 => 0x04b42423 (* sw a1,72(s0)  *)
    | 0x80000bac => 0x0007c863 (* bltz a5,80000bbc <vTaskPrioritySet+0xac>  *)
    | 0x80000bb0 => 0x00900793 (* li a5,9  *)
    | 0x80000bb4 => 0x40b787b3 (* sub a5,a5,a1  *)
    | 0x80000bb8 => 0x00f42c23 (* sw a5,24(s0)  *)
    | 0x80000bbc => 0x01400713 (* li a4,20  *)
    | 0x80000bc0 => 0x02ea0733 (* mul a4,s4,a4  *)
    | 0x80000bc4 => 0xc6418693 (* add a3,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80000bc8 => 0xc6418913 (* add s2,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80000bcc => 0x00d70733 (* add a4,a4,a3  *)
    | 0x80000bd0 => 0x01442683 (* lw a3,20(s0)  *)
    | 0x80000bd4 => 0x06e69c63 (* bne a3,a4,80000c4c <vTaskPrioritySet+0x13c>  *)
    | 0x80000bd8 => 0x00440a93 (* add s5,s0,4  *)
    | 0x80000bdc => 0x000a8513 (* mv a0,s5  *)
    | 0x80000be0 => 0x078020ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80000be4 => 0x00051e63 (* bnez a0,80000c00 <vTaskPrioritySet+0xf0>  *)
    | 0x80000be8 => 0x8801a703 (* lw a4,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000bec => 0x00100793 (* li a5,1  *)
    | 0x80000bf0 => 0x014797b3 (* sll a5,a5,s4  *)
    | 0x80000bf4 => 0xfff7c793 (* not a5,a5  *)
    | 0x80000bf8 => 0x00e7f7b3 (* and a5,a5,a4  *)
    | 0x80000bfc => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000c00 => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x80000c04 => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000c08 => 0x00100793 (* li a5,1  *)
    | 0x80000c0c => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x80000c10 => 0x00c7e7b3 (* or a5,a5,a2  *)
    | 0x80000c14 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000c18 => 0x01400793 (* li a5,20  *)
    | 0x80000c1c => 0x02f70733 (* mul a4,a4,a5  *)
    | 0x80000c20 => 0x00e907b3 (* add a5,s2,a4  *)
    | 0x80000c24 => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80000c28 => 0x00872683 (* lw a3,8(a4)  *)
    | 0x80000c2c => 0x00e42423 (* sw a4,8(s0)  *)
    | 0x80000c30 => 0x00d42623 (* sw a3,12(s0)  *)
    | 0x80000c34 => 0x0156a223 (* sw s5,4(a3)  *)
    | 0x80000c38 => 0x01572423 (* sw s5,8(a4)  *)
    | 0x80000c3c => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80000c40 => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x80000c44 => 0x00170713 (* add a4,a4,1  *)
    | 0x80000c48 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80000c4c => 0x00048463 (* beqz s1,80000c54 <vTaskPrioritySet+0x144>  *)
    | 0x80000c50 => 0x00000073 (* ecall  *)
    | 0x80000c54 => 0x0049a783 (* lw a5,4(s3)  *)
    | 0x80000c58 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80000c5c => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x80000c60 => 0x00079463 (* bnez a5,80000c68 <vTaskPrioritySet+0x158>  *)
    | 0x80000c64 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80000c68 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80000c6c => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80000c70 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80000c74 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80000c78 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80000c7c => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80000c80 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x80000c84 => 0x02010113 (* add sp,sp,32  *)
    | 0x80000c88 => 0x00008067 (* ret  *)
    | 0x80000c8c => 0x8981a483 (* lw s1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000c90 => 0x408484b3 (* sub s1,s1,s0  *)
    | 0x80000c94 => 0x0014b493 (* seqz s1,s1  *)
    | 0x80000c98 => 0xefdff06f (* j 80000b94 <vTaskPrioritySet+0x84>  *)
    (* <vTaskResume> *)
    | 0x80000c9c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80000ca0 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80000ca4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80000ca8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80000cac => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80000cb0 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80000cb4 => 0x00050413 (* mv s0,a0  *)
    | 0x80000cb8 => 0x00051c63 (* bnez a0,80000cd0 <vTaskResume+0x34>  *)
    | 0x80000cbc => 0x000015b7 (* lui a1,0x1  *)
    | 0x80000cc0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000cc4 => 0xd2258593 (* add a1,a1,-734 # d22 <__stack_size+0xbc4>  *)
    | 0x80000cc8 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000ccc => 0x5c4110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000cd0 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000cd4 => 0x0a878463 (* beq a5,s0,80000d7c <vTaskResume+0xe0>  *)
    | 0x80000cd8 => 0x0a040263 (* beqz s0,80000d7c <vTaskResume+0xe0>  *)
    | 0x80000cdc => 0x30047073 (* csrc mstatus,8  *)
    | 0x80000ce0 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80000ce4 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80000ce8 => 0x00040513 (* mv a0,s0  *)
    | 0x80000cec => 0x00178793 (* add a5,a5,1  *)
    | 0x80000cf0 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80000cf4 => 0xf60ff0ef (* jal 80000454 <prvTaskIsTaskSuspended>  *)
    | 0x80000cf8 => 0x06050863 (* beqz a0,80000d68 <vTaskResume+0xcc>  *)
    | 0x80000cfc => 0x00440993 (* add s3,s0,4  *)
    | 0x80000d00 => 0x00098513 (* mv a0,s3  *)
    | 0x80000d04 => 0x755010ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80000d08 => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x80000d0c => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000d10 => 0x00100793 (* li a5,1  *)
    | 0x80000d14 => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x80000d18 => 0x00c7e7b3 (* or a5,a5,a2  *)
    | 0x80000d1c => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000d20 => 0x01400693 (* li a3,20  *)
    | 0x80000d24 => 0x02d706b3 (* mul a3,a4,a3  *)
    | 0x80000d28 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80000d2c => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80000d30 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80000d34 => 0x0086a603 (* lw a2,8(a3)  *)
    | 0x80000d38 => 0x00d42423 (* sw a3,8(s0)  *)
    | 0x80000d3c => 0x00c42623 (* sw a2,12(s0)  *)
    | 0x80000d40 => 0x01362223 (* sw s3,4(a2)  *)
    | 0x80000d44 => 0x0136a423 (* sw s3,8(a3)  *)
    | 0x80000d48 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x80000d4c => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x80000d50 => 0x00168693 (* add a3,a3,1  *)
    | 0x80000d54 => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x80000d58 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000d5c => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80000d60 => 0x00e7f463 (* bgeu a5,a4,80000d68 <vTaskResume+0xcc>  *)
    | 0x80000d64 => 0x00000073 (* ecall  *)
    | 0x80000d68 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80000d6c => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80000d70 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80000d74 => 0x00079463 (* bnez a5,80000d7c <vTaskResume+0xe0>  *)
    | 0x80000d78 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80000d7c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80000d80 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80000d84 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80000d88 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80000d8c => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80000d90 => 0x02010113 (* add sp,sp,32  *)
    | 0x80000d94 => 0x00008067 (* ret  *)
    (* <vTaskStartScheduler> *)
    | 0x80000d98 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80000d9c => 0x800147b7 (* lui a5,0x80014  *)
    | 0x80000da0 => 0x01410713 (* add a4,sp,20  *)
    | 0x80000da4 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80000da8 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80000dac => 0xbf078793 (* add a5,a5,-1040 # 80013bf0 <_etext+0x20>  *)
    | 0x80000db0 => 0x00070413 (* mv s0,a4  *)
    | 0x80000db4 => 0x0007c683 (* lbu a3,0(a5)  *)
    | 0x80000db8 => 0x00170713 (* add a4,a4,1  *)
    | 0x80000dbc => 0x00178793 (* add a5,a5,1  *)
    | 0x80000dc0 => 0xfed70fa3 (* sb a3,-1(a4)  *)
    | 0x80000dc4 => 0xfe0698e3 (* bnez a3,80000db4 <vTaskStartScheduler+0x1c>  *)
    | 0x80000dc8 => 0x01010613 (* add a2,sp,16  *)
    | 0x80000dcc => 0x00c10593 (* add a1,sp,12  *)
    | 0x80000dd0 => 0x00810513 (* add a0,sp,8  *)
    | 0x80000dd4 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80000dd8 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80000ddc => 0x518110ef (* jal 800122f4 <vApplicationGetIdleTaskMemory>  *)
    | 0x80000de0 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80000de4 => 0x00812803 (* lw a6,8(sp)  *)
    | 0x80000de8 => 0x01012603 (* lw a2,16(sp)  *)
    | 0x80000dec => 0x80000537 (* lui a0,0x80000  *)
    | 0x80000df0 => 0x00000713 (* li a4,0  *)
    | 0x80000df4 => 0x00000693 (* li a3,0  *)
    | 0x80000df8 => 0x00040593 (* mv a1,s0  *)
    | 0x80000dfc => 0x5cc50513 (* add a0,a0,1484 # 800005cc <prvIdleTask>  *)
    | 0x80000e00 => 0x8f5ff0ef (* jal 800006f4 <xTaskCreateStatic>  *)
    | 0x80000e04 => 0x86a1a223 (* sw a0,-1948(gp) # 80080064 <xIdleTaskHandles>  *)
    | 0x80000e08 => 0x02050463 (* beqz a0,80000e30 <vTaskStartScheduler+0x98>  *)
    | 0x80000e0c => 0x415030ef (* jal 80004a20 <xTimerCreateTimerTask>  *)
    | 0x80000e10 => 0x00100793 (* li a5,1  *)
    | 0x80000e14 => 0x02f51863 (* bne a0,a5,80000e44 <vTaskStartScheduler+0xac>  *)
    | 0x80000e18 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80000e1c => 0xfff00713 (* li a4,-1  *)
    | 0x80000e20 => 0x86e1a423 (* sw a4,-1944(gp) # 80080068 <xNextTaskUnblockTime>  *)
    | 0x80000e24 => 0x86a1ae23 (* sw a0,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x80000e28 => 0x8801a223 (* sw zero,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80000e2c => 0x165050ef (* jal 80006790 <xPortStartScheduler>  *)
    | 0x80000e30 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80000e34 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80000e38 => 0x8481a783 (* lw a5,-1976(gp) # 80080048 <uxTopUsedPriority>  *)
    | 0x80000e3c => 0x03010113 (* add sp,sp,48  *)
    | 0x80000e40 => 0x00008067 (* ret  *)
    | 0x80000e44 => 0xfff00793 (* li a5,-1  *)
    | 0x80000e48 => 0xfef514e3 (* bne a0,a5,80000e30 <vTaskStartScheduler+0x98>  *)
    | 0x80000e4c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80000e50 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000e54 => 0xead58593 (* add a1,a1,-339 # ead <__stack_size+0xd4f>  *)
    | 0x80000e58 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000e5c => 0x434110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000e60 => 0xfd1ff06f (* j 80000e30 <vTaskStartScheduler+0x98>  *)
    (* <vTaskSuspendAll> *)
    | 0x80000e64 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80000e68 => 0x00178793 (* add a5,a5,1  *)
    | 0x80000e6c => 0x86f1a023 (* sw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80000e70 => 0x00008067 (* ret  *)
    (* <xTaskGetTickCount> *)
    | 0x80000e74 => 0x8841a503 (* lw a0,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80000e78 => 0x00008067 (* ret  *)
    (* <xTaskGetTickCountFromISR> *)
    | 0x80000e7c => 0x8841a503 (* lw a0,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80000e80 => 0x00008067 (* ret  *)
    (* <uxTaskGetNumberOfTasks> *)
    | 0x80000e84 => 0x8881a503 (* lw a0,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x80000e88 => 0x00008067 (* ret  *)
    (* <xTaskIncrementTick> *)
    | 0x80000e8c => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80000e90 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80000e94 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80000e98 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80000e9c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80000ea0 => 0x1a079c63 (* bnez a5,80001058 <xTaskIncrementTick+0x1cc>  *)
    | 0x80000ea4 => 0x8841a403 (* lw s0,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80000ea8 => 0x00140413 (* add s0,s0,1  *)
    | 0x80000eac => 0x8881a223 (* sw s0,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80000eb0 => 0x04041263 (* bnez s0,80000ef4 <xTaskIncrementTick+0x68>  *)
    | 0x80000eb4 => 0x8941a783 (* lw a5,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000eb8 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80000ebc => 0x00078c63 (* beqz a5,80000ed4 <xTaskIncrementTick+0x48>  *)
    | 0x80000ec0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80000ec4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80000ec8 => 0x27858593 (* add a1,a1,632 # 1278 <__stack_size+0x111a>  *)
    | 0x80000ecc => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80000ed0 => 0x3c0110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80000ed4 => 0x8941a703 (* lw a4,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000ed8 => 0x8901a683 (* lw a3,-1904(gp) # 80080090 <pxOverflowDelayedTaskList>  *)
    | 0x80000edc => 0x88d1aa23 (* sw a3,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000ee0 => 0x88e1a823 (* sw a4,-1904(gp) # 80080090 <pxOverflowDelayedTaskList>  *)
    | 0x80000ee4 => 0x8701a783 (* lw a5,-1936(gp) # 80080070 <xNumOfOverflows>  *)
    | 0x80000ee8 => 0x00178793 (* add a5,a5,1  *)
    | 0x80000eec => 0x86f1a823 (* sw a5,-1936(gp) # 80080070 <xNumOfOverflows>  *)
    | 0x80000ef0 => 0xd3cff0ef (* jal 8000042c <prvResetNextTaskUnblockTime>  *)
    | 0x80000ef4 => 0x8681a783 (* lw a5,-1944(gp) # 80080068 <xNextTaskUnblockTime>  *)
    | 0x80000ef8 => 0xc6418713 (* add a4,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80000efc => 0x00000513 (* li a0,0  *)
    | 0x80000f00 => 0x04f47c63 (* bgeu s0,a5,80000f58 <xTaskIncrementTick+0xcc>  *)
    | 0x80000f04 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80000f08 => 0x01400693 (* li a3,20  *)
    | 0x80000f0c => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80000f10 => 0x02d787b3 (* mul a5,a5,a3  *)
    | 0x80000f14 => 0x00f70733 (* add a4,a4,a5  *)
    | 0x80000f18 => 0x00072703 (* lw a4,0(a4)  *)
    | 0x80000f1c => 0x00100793 (* li a5,1  *)
    | 0x80000f20 => 0x00e7f463 (* bgeu a5,a4,80000f28 <xTaskIncrementTick+0x9c>  *)
    | 0x80000f24 => 0x00100513 (* li a0,1  *)
    | 0x80000f28 => 0x8781a783 (* lw a5,-1928(gp) # 80080078 <xPendedTicks>  *)
    | 0x80000f2c => 0x00079863 (* bnez a5,80000f3c <xTaskIncrementTick+0xb0>  *)
    | 0x80000f30 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x80000f34 => 0x358110ef (* jal 8001228c <vApplicationTickHook>  *)
    | 0x80000f38 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80000f3c => 0x8741a783 (* lw a5,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x80000f40 => 0x12079863 (* bnez a5,80001070 <xTaskIncrementTick+0x1e4>  *)
    | 0x80000f44 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80000f48 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80000f4c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80000f50 => 0x02010113 (* add sp,sp,32  *)
    | 0x80000f54 => 0x00008067 (* ret  *)
    | 0x80000f58 => 0x00100f13 (* li t5,1  *)
    | 0x80000f5c => 0x01400f93 (* li t6,20  *)
    | 0x80000f60 => 0x0e00006f (* j 80001040 <xTaskIncrementTick+0x1b4>  *)
    | 0x80000f64 => 0x8941a783 (* lw a5,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80000f68 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x80000f6c => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x80000f70 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80000f74 => 0x00d47663 (* bgeu s0,a3,80000f80 <xTaskIncrementTick+0xf4>  *)
    | 0x80000f78 => 0x86d1a423 (* sw a3,-1944(gp) # 80080068 <xNextTaskUnblockTime>  *)
    | 0x80000f7c => 0xf89ff06f (* j 80000f04 <xTaskIncrementTick+0x78>  *)
    | 0x80000f80 => 0x0087a803 (* lw a6,8(a5)  *)
    | 0x80000f84 => 0x00c7a583 (* lw a1,12(a5)  *)
    | 0x80000f88 => 0x0147a683 (* lw a3,20(a5)  *)
    | 0x80000f8c => 0x00478893 (* add a7,a5,4  *)
    | 0x80000f90 => 0x00b82423 (* sw a1,8(a6)  *)
    | 0x80000f94 => 0x0105a223 (* sw a6,4(a1)  *)
    | 0x80000f98 => 0x0046a803 (* lw a6,4(a3)  *)
    | 0x80000f9c => 0x01181463 (* bne a6,a7,80000fa4 <xTaskIncrementTick+0x118>  *)
    | 0x80000fa0 => 0x00b6a223 (* sw a1,4(a3)  *)
    | 0x80000fa4 => 0x0006a583 (* lw a1,0(a3)  *)
    | 0x80000fa8 => 0x0007aa23 (* sw zero,20(a5)  *)
    | 0x80000fac => 0xfff58593 (* add a1,a1,-1  *)
    | 0x80000fb0 => 0x00b6a023 (* sw a1,0(a3)  *)
    | 0x80000fb4 => 0x0287a683 (* lw a3,40(a5)  *)
    | 0x80000fb8 => 0x02068a63 (* beqz a3,80000fec <xTaskIncrementTick+0x160>  *)
    | 0x80000fbc => 0x01c7a803 (* lw a6,28(a5)  *)
    | 0x80000fc0 => 0x0207a583 (* lw a1,32(a5)  *)
    | 0x80000fc4 => 0x0046a283 (* lw t0,4(a3)  *)
    | 0x80000fc8 => 0x00b82423 (* sw a1,8(a6)  *)
    | 0x80000fcc => 0x0105a223 (* sw a6,4(a1)  *)
    | 0x80000fd0 => 0x01878813 (* add a6,a5,24  *)
    | 0x80000fd4 => 0x01029463 (* bne t0,a6,80000fdc <xTaskIncrementTick+0x150>  *)
    | 0x80000fd8 => 0x00b6a223 (* sw a1,4(a3)  *)
    | 0x80000fdc => 0x0006a583 (* lw a1,0(a3)  *)
    | 0x80000fe0 => 0x0207a423 (* sw zero,40(a5)  *)
    | 0x80000fe4 => 0xfff58593 (* add a1,a1,-1  *)
    | 0x80000fe8 => 0x00b6a023 (* sw a1,0(a3)  *)
    | 0x80000fec => 0x02c7a583 (* lw a1,44(a5)  *)
    | 0x80000ff0 => 0x8801a803 (* lw a6,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80000ff4 => 0x00bf16b3 (* sll a3,t5,a1  *)
    | 0x80000ff8 => 0x0106e6b3 (* or a3,a3,a6  *)
    | 0x80000ffc => 0x88d1a023 (* sw a3,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001000 => 0x03f586b3 (* mul a3,a1,t6  *)
    | 0x80001004 => 0x00d706b3 (* add a3,a4,a3  *)
    | 0x80001008 => 0x0046a803 (* lw a6,4(a3)  *)
    | 0x8000100c => 0x00882283 (* lw t0,8(a6)  *)
    | 0x80001010 => 0x0107a423 (* sw a6,8(a5)  *)
    | 0x80001014 => 0x0057a623 (* sw t0,12(a5)  *)
    | 0x80001018 => 0x0112a223 (* sw a7,4(t0)  *)
    | 0x8000101c => 0x01182423 (* sw a7,8(a6)  *)
    | 0x80001020 => 0x00d7aa23 (* sw a3,20(a5)  *)
    | 0x80001024 => 0x0006a783 (* lw a5,0(a3)  *)
    | 0x80001028 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000102c => 0x00f6a023 (* sw a5,0(a3)  *)
    | 0x80001030 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001034 => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80001038 => 0x00b7f463 (* bgeu a5,a1,80001040 <xTaskIncrementTick+0x1b4>  *)
    | 0x8000103c => 0x00100513 (* li a0,1  *)
    | 0x80001040 => 0x8941a783 (* lw a5,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x80001044 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80001048 => 0xf0079ee3 (* bnez a5,80000f64 <xTaskIncrementTick+0xd8>  *)
    | 0x8000104c => 0xfff00793 (* li a5,-1  *)
    | 0x80001050 => 0x86f1a423 (* sw a5,-1944(gp) # 80080068 <xNextTaskUnblockTime>  *)
    | 0x80001054 => 0xeb1ff06f (* j 80000f04 <xTaskIncrementTick+0x78>  *)
    | 0x80001058 => 0x8781a783 (* lw a5,-1928(gp) # 80080078 <xPendedTicks>  *)
    | 0x8000105c => 0x00178793 (* add a5,a5,1  *)
    | 0x80001060 => 0x86f1ac23 (* sw a5,-1928(gp) # 80080078 <xPendedTicks>  *)
    | 0x80001064 => 0x228110ef (* jal 8001228c <vApplicationTickHook>  *)
    | 0x80001068 => 0x00000513 (* li a0,0  *)
    | 0x8000106c => 0xed9ff06f (* j 80000f44 <xTaskIncrementTick+0xb8>  *)
    | 0x80001070 => 0x00100513 (* li a0,1  *)
    | 0x80001074 => 0xed1ff06f (* j 80000f44 <xTaskIncrementTick+0xb8>  *)
    (* <xTaskResumeAll> *)
    | 0x80001078 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000107c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80001080 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80001084 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80001088 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000108c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80001090 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80001094 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80001098 => 0x80080437 (* lui s0,0x80080  *)
    | 0x8000109c => 0x00442783 (* lw a5,4(s0) # 80080004 <xCriticalNesting>  *)
    | 0x800010a0 => 0x00178793 (* add a5,a5,1  *)
    | 0x800010a4 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x800010a8 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800010ac => 0x00079c63 (* bnez a5,800010c4 <xTaskResumeAll+0x4c>  *)
    | 0x800010b0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800010b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800010b8 => 0xfa458593 (* add a1,a1,-92 # fa4 <__stack_size+0xe46>  *)
    | 0x800010bc => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800010c0 => 0x1d0110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800010c4 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800010c8 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800010cc => 0x86f1a023 (* sw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800010d0 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800010d4 => 0x02078e63 (* beqz a5,80001110 <xTaskResumeAll+0x98>  *)
    | 0x800010d8 => 0x00000513 (* li a0,0  *)
    | 0x800010dc => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800010e0 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800010e4 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x800010e8 => 0x00079463 (* bnez a5,800010f0 <xTaskResumeAll+0x78>  *)
    | 0x800010ec => 0x30046073 (* csrs mstatus,8  *)
    | 0x800010f0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800010f4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800010f8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800010fc => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80001100 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80001104 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80001108 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000110c => 0x00008067 (* ret  *)
    | 0x80001110 => 0x8881a783 (* lw a5,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x80001114 => 0xfc0782e3 (* beqz a5,800010d8 <xTaskResumeAll+0x60>  *)
    | 0x80001118 => 0x00000793 (* li a5,0  *)
    | 0x8000111c => 0xc2818693 (* add a3,gp,-984 # 80080428 <xPendingReadyList>  *)
    | 0x80001120 => 0x00100313 (* li t1,1  *)
    | 0x80001124 => 0xc6418613 (* add a2,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80001128 => 0x01400e13 (* li t3,20  *)
    | 0x8000112c => 0x00100f93 (* li t6,1  *)
    | 0x80001130 => 0x0c40006f (* j 800011f4 <xTaskResumeAll+0x17c>  *)
    | 0x80001134 => 0x00c6a783 (* lw a5,12(a3)  *)
    | 0x80001138 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x8000113c => 0x0287a703 (* lw a4,40(a5)  *)
    | 0x80001140 => 0x01c7a503 (* lw a0,28(a5)  *)
    | 0x80001144 => 0x0207a583 (* lw a1,32(a5)  *)
    | 0x80001148 => 0x00472803 (* lw a6,4(a4)  *)
    | 0x8000114c => 0x00b52423 (* sw a1,8(a0)  *)
    | 0x80001150 => 0x00a5a223 (* sw a0,4(a1)  *)
    | 0x80001154 => 0x01878513 (* add a0,a5,24  *)
    | 0x80001158 => 0x00a81463 (* bne a6,a0,80001160 <xTaskResumeAll+0xe8>  *)
    | 0x8000115c => 0x00b72223 (* sw a1,4(a4)  *)
    | 0x80001160 => 0x00072583 (* lw a1,0(a4)  *)
    | 0x80001164 => 0x0207a423 (* sw zero,40(a5)  *)
    | 0x80001168 => 0xfff58593 (* add a1,a1,-1  *)
    | 0x8000116c => 0x00b72023 (* sw a1,0(a4)  *)
    | 0x80001170 => 0x0087a503 (* lw a0,8(a5)  *)
    | 0x80001174 => 0x00c7a583 (* lw a1,12(a5)  *)
    | 0x80001178 => 0x0147a703 (* lw a4,20(a5)  *)
    | 0x8000117c => 0x00478813 (* add a6,a5,4  *)
    | 0x80001180 => 0x00b52423 (* sw a1,8(a0)  *)
    | 0x80001184 => 0x00a5a223 (* sw a0,4(a1)  *)
    | 0x80001188 => 0x00472503 (* lw a0,4(a4)  *)
    | 0x8000118c => 0x01051463 (* bne a0,a6,80001194 <xTaskResumeAll+0x11c>  *)
    | 0x80001190 => 0x00b72223 (* sw a1,4(a4)  *)
    | 0x80001194 => 0x00072583 (* lw a1,0(a4)  *)
    | 0x80001198 => 0x8801a503 (* lw a0,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x8000119c => 0xfff58593 (* add a1,a1,-1  *)
    | 0x800011a0 => 0x00b72023 (* sw a1,0(a4)  *)
    | 0x800011a4 => 0x02c7a583 (* lw a1,44(a5)  *)
    | 0x800011a8 => 0x00b31733 (* sll a4,t1,a1  *)
    | 0x800011ac => 0x00a76733 (* or a4,a4,a0  *)
    | 0x800011b0 => 0x88e1a023 (* sw a4,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x800011b4 => 0x03c58733 (* mul a4,a1,t3  *)
    | 0x800011b8 => 0x00e60733 (* add a4,a2,a4  *)
    | 0x800011bc => 0x00472503 (* lw a0,4(a4)  *)
    | 0x800011c0 => 0x00852283 (* lw t0,8(a0)  *)
    | 0x800011c4 => 0x00a7a423 (* sw a0,8(a5)  *)
    | 0x800011c8 => 0x0057a623 (* sw t0,12(a5)  *)
    | 0x800011cc => 0x0102a223 (* sw a6,4(t0)  *)
    | 0x800011d0 => 0x01052423 (* sw a6,8(a0)  *)
    | 0x800011d4 => 0x00072503 (* lw a0,0(a4)  *)
    | 0x800011d8 => 0x00e7aa23 (* sw a4,20(a5)  *)
    | 0x800011dc => 0x00150513 (* add a0,a0,1  *)
    | 0x800011e0 => 0x00a72023 (* sw a0,0(a4)  *)
    | 0x800011e4 => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800011e8 => 0x02c72703 (* lw a4,44(a4)  *)
    | 0x800011ec => 0x00b77463 (* bgeu a4,a1,800011f4 <xTaskResumeAll+0x17c>  *)
    | 0x800011f0 => 0x87f1aa23 (* sw t6,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x800011f4 => 0x0006a703 (* lw a4,0(a3)  *)
    | 0x800011f8 => 0xf2071ee3 (* bnez a4,80001134 <xTaskResumeAll+0xbc>  *)
    | 0x800011fc => 0x00078463 (* beqz a5,80001204 <xTaskResumeAll+0x18c>  *)
    | 0x80001200 => 0xa2cff0ef (* jal 8000042c <prvResetNextTaskUnblockTime>  *)
    | 0x80001204 => 0x8781a483 (* lw s1,-1928(gp) # 80080078 <xPendedTicks>  *)
    | 0x80001208 => 0x02048063 (* beqz s1,80001228 <xTaskResumeAll+0x1b0>  *)
    | 0x8000120c => 0x00100a13 (* li s4,1  *)
    | 0x80001210 => 0xc7dff0ef (* jal 80000e8c <xTaskIncrementTick>  *)
    | 0x80001214 => 0x00050463 (* beqz a0,8000121c <xTaskResumeAll+0x1a4>  *)
    | 0x80001218 => 0x8741aa23 (* sw s4,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x8000121c => 0xfff48493 (* add s1,s1,-1  *)
    | 0x80001220 => 0xfe0498e3 (* bnez s1,80001210 <xTaskResumeAll+0x198>  *)
    | 0x80001224 => 0x8601ac23 (* sw zero,-1928(gp) # 80080078 <xPendedTicks>  *)
    | 0x80001228 => 0x8741a783 (* lw a5,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x8000122c => 0xea0786e3 (* beqz a5,800010d8 <xTaskResumeAll+0x60>  *)
    | 0x80001230 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001234 => 0x00000073 (* ecall  *)
    | 0x80001238 => 0x00100513 (* li a0,1  *)
    | 0x8000123c => 0xea1ff06f (* j 800010dc <xTaskResumeAll+0x64>  *)
    (* <xTaskDelayUntil> *)
    | 0x80001240 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80001244 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001248 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x8000124c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80001250 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80001254 => 0x00050493 (* mv s1,a0  *)
    | 0x80001258 => 0x00058413 (* mv s0,a1  *)
    | 0x8000125c => 0x00051c63 (* bnez a0,80001274 <xTaskDelayUntil+0x34>  *)
    | 0x80001260 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001264 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001268 => 0x93158593 (* add a1,a1,-1743 # 931 <__stack_size+0x7d3>  *)
    | 0x8000126c => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001270 => 0x020110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001274 => 0x00041c63 (* bnez s0,8000128c <xTaskDelayUntil+0x4c>  *)
    | 0x80001278 => 0x000015b7 (* lui a1,0x1  *)
    | 0x8000127c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001280 => 0x93258593 (* add a1,a1,-1742 # 932 <__stack_size+0x7d4>  *)
    | 0x80001284 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001288 => 0x008110ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000128c => 0xbd9ff0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80001290 => 0x8841a903 (* lw s2,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80001294 => 0x8601a703 (* lw a4,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80001298 => 0x00100793 (* li a5,1  *)
    | 0x8000129c => 0x00f70c63 (* beq a4,a5,800012b4 <xTaskDelayUntil+0x74>  *)
    | 0x800012a0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800012a4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800012a8 => 0x93a58593 (* add a1,a1,-1734 # 93a <__stack_size+0x7dc>  *)
    | 0x800012ac => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800012b0 => 0x7e1100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800012b4 => 0x0004a703 (* lw a4,0(s1)  *)
    | 0x800012b8 => 0x00870533 (* add a0,a4,s0  *)
    | 0x800012bc => 0x00e536b3 (* sltu a3,a0,a4  *)
    | 0x800012c0 => 0x02e97c63 (* bgeu s2,a4,800012f8 <xTaskDelayUntil+0xb8>  *)
    | 0x800012c4 => 0x02069c63 (* bnez a3,800012fc <xTaskDelayUntil+0xbc>  *)
    | 0x800012c8 => 0x00a4a023 (* sw a0,0(s1)  *)
    | 0x800012cc => 0x00000413 (* li s0,0  *)
    | 0x800012d0 => 0xda9ff0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x800012d4 => 0x00051463 (* bnez a0,800012dc <xTaskDelayUntil+0x9c>  *)
    | 0x800012d8 => 0x00000073 (* ecall  *)
    | 0x800012dc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800012e0 => 0x00040513 (* mv a0,s0  *)
    | 0x800012e4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800012e8 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800012ec => 0x00012903 (* lw s2,0(sp)  *)
    | 0x800012f0 => 0x01010113 (* add sp,sp,16  *)
    | 0x800012f4 => 0x00008067 (* ret  *)
    | 0x800012f8 => 0x00069463 (* bnez a3,80001300 <xTaskDelayUntil+0xc0>  *)
    | 0x800012fc => 0xfca976e3 (* bgeu s2,a0,800012c8 <xTaskDelayUntil+0x88>  *)
    | 0x80001300 => 0x00a4a023 (* sw a0,0(s1)  *)
    | 0x80001304 => 0x00000593 (* li a1,0  *)
    | 0x80001308 => 0x41250533 (* sub a0,a0,s2  *)
    | 0x8000130c => 0xfe5fe0ef (* jal 800002f0 <prvAddCurrentTaskToDelayedList>  *)
    | 0x80001310 => 0x00100413 (* li s0,1  *)
    | 0x80001314 => 0xfbdff06f (* j 800012d0 <xTaskDelayUntil+0x90>  *)
    (* <vTaskDelay> *)
    | 0x80001318 => 0x00051663 (* bnez a0,80001324 <vTaskDelay+0xc>  *)
    | 0x8000131c => 0x00000073 (* ecall  *)
    | 0x80001320 => 0x00008067 (* ret  *)
    | 0x80001324 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80001328 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000132c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80001330 => 0x00050413 (* mv s0,a0  *)
    | 0x80001334 => 0xb31ff0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80001338 => 0x8601a703 (* lw a4,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x8000133c => 0x00100793 (* li a5,1  *)
    | 0x80001340 => 0x00f70c63 (* beq a4,a5,80001358 <vTaskDelay+0x40>  *)
    | 0x80001344 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001348 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000134c => 0x99058593 (* add a1,a1,-1648 # 990 <__stack_size+0x832>  *)
    | 0x80001350 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001354 => 0x73d100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001358 => 0x00000593 (* li a1,0  *)
    | 0x8000135c => 0x00040513 (* mv a0,s0  *)
    | 0x80001360 => 0xf91fe0ef (* jal 800002f0 <prvAddCurrentTaskToDelayedList>  *)
    | 0x80001364 => 0xd15ff0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80001368 => 0x00051463 (* bnez a0,80001370 <vTaskDelay+0x58>  *)
    | 0x8000136c => 0x00000073 (* ecall  *)
    | 0x80001370 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80001374 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80001378 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000137c => 0x00008067 (* ret  *)
    (* <xTaskGetHandle> *)
    | 0x80001380 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80001384 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80001388 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000138c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80001390 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80001394 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80001398 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000139c => 0x00050493 (* mv s1,a0  *)
    | 0x800013a0 => 0x628120ef (* jal 800139c8 <strlen>  *)
    | 0x800013a4 => 0x00b00793 (* li a5,11  *)
    | 0x800013a8 => 0x00a7fc63 (* bgeu a5,a0,800013c0 <xTaskGetHandle+0x40>  *)
    | 0x800013ac => 0x000015b7 (* lui a1,0x1  *)
    | 0x800013b0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800013b4 => 0x0c858593 (* add a1,a1,200 # 10c8 <__stack_size+0xf6a>  *)
    | 0x800013b8 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800013bc => 0x6d5100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800013c0 => 0xaa5ff0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800013c4 => 0x00900913 (* li s2,9  *)
    | 0x800013c8 => 0x01400a13 (* li s4,20  *)
    | 0x800013cc => 0xc6418993 (* add s3,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x800013d0 => 0xfff90913 (* add s2,s2,-1  *)
    | 0x800013d4 => 0x03490533 (* mul a0,s2,s4  *)
    | 0x800013d8 => 0x00048593 (* mv a1,s1  *)
    | 0x800013dc => 0x00a98533 (* add a0,s3,a0  *)
    | 0x800013e0 => 0xd35fe0ef (* jal 80000114 <prvSearchForNameWithinSingleList>  *)
    | 0x800013e4 => 0x00050413 (* mv s0,a0  *)
    | 0x800013e8 => 0x04051a63 (* bnez a0,8000143c <xTaskGetHandle+0xbc>  *)
    | 0x800013ec => 0xfe0912e3 (* bnez s2,800013d0 <xTaskGetHandle+0x50>  *)
    | 0x800013f0 => 0x8941a503 (* lw a0,-1900(gp) # 80080094 <pxDelayedTaskList>  *)
    | 0x800013f4 => 0x00048593 (* mv a1,s1  *)
    | 0x800013f8 => 0xd1dfe0ef (* jal 80000114 <prvSearchForNameWithinSingleList>  *)
    | 0x800013fc => 0x00050413 (* mv s0,a0  *)
    | 0x80001400 => 0x02051e63 (* bnez a0,8000143c <xTaskGetHandle+0xbc>  *)
    | 0x80001404 => 0x8901a503 (* lw a0,-1904(gp) # 80080090 <pxOverflowDelayedTaskList>  *)
    | 0x80001408 => 0x00048593 (* mv a1,s1  *)
    | 0x8000140c => 0xd09fe0ef (* jal 80000114 <prvSearchForNameWithinSingleList>  *)
    | 0x80001410 => 0x00050413 (* mv s0,a0  *)
    | 0x80001414 => 0x02051463 (* bnez a0,8000143c <xTaskGetHandle+0xbc>  *)
    | 0x80001418 => 0x00048593 (* mv a1,s1  *)
    | 0x8000141c => 0xc0018513 (* add a0,gp,-1024 # 80080400 <xSuspendedTaskList>  *)
    | 0x80001420 => 0xcf5fe0ef (* jal 80000114 <prvSearchForNameWithinSingleList>  *)
    | 0x80001424 => 0x00050413 (* mv s0,a0  *)
    | 0x80001428 => 0x00051a63 (* bnez a0,8000143c <xTaskGetHandle+0xbc>  *)
    | 0x8000142c => 0x00048593 (* mv a1,s1  *)
    | 0x80001430 => 0xc1418513 (* add a0,gp,-1004 # 80080414 <xTasksWaitingTermination>  *)
    | 0x80001434 => 0xce1fe0ef (* jal 80000114 <prvSearchForNameWithinSingleList>  *)
    | 0x80001438 => 0x00050413 (* mv s0,a0  *)
    | 0x8000143c => 0xc3dff0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80001440 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80001444 => 0x00040513 (* mv a0,s0  *)
    | 0x80001448 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000144c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80001450 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80001454 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80001458 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000145c => 0x02010113 (* add sp,sp,32  *)
    | 0x80001460 => 0x00008067 (* ret  *)
    (* <xTaskCatchUpTicks> *)
    | 0x80001464 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80001468 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000146c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001470 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80001474 => 0x00050413 (* mv s0,a0  *)
    | 0x80001478 => 0x00078c63 (* beqz a5,80001490 <xTaskCatchUpTicks+0x2c>  *)
    | 0x8000147c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001480 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001484 => 0x1e358593 (* add a1,a1,483 # 11e3 <__stack_size+0x1085>  *)
    | 0x80001488 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x8000148c => 0x605100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001490 => 0x9d5ff0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80001494 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80001498 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x8000149c => 0x0047a683 (* lw a3,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x800014a0 => 0x8781a783 (* lw a5,-1928(gp) # 80080078 <xPendedTicks>  *)
    | 0x800014a4 => 0x00878533 (* add a0,a5,s0  *)
    | 0x800014a8 => 0x86a1ac23 (* sw a0,-1928(gp) # 80080078 <xPendedTicks>  *)
    | 0x800014ac => 0x00069463 (* bnez a3,800014b4 <xTaskCatchUpTicks+0x50>  *)
    | 0x800014b0 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800014b4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800014b8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800014bc => 0x01010113 (* add sp,sp,16  *)
    | 0x800014c0 => 0xbb9ff06f (* j 80001078 <xTaskResumeAll>  *)
    (* <xTaskAbortDelay> *)
    | 0x800014c4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800014c8 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800014cc => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800014d0 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800014d4 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x800014d8 => 0x00050413 (* mv s0,a0  *)
    | 0x800014dc => 0x00051c63 (* bnez a0,800014f4 <xTaskAbortDelay+0x30>  *)
    | 0x800014e0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800014e4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800014e8 => 0x20058593 (* add a1,a1,512 # 1200 <__stack_size+0x10a2>  *)
    | 0x800014ec => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800014f0 => 0x5a1100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800014f4 => 0x971ff0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800014f8 => 0x00040513 (* mv a0,s0  *)
    | 0x800014fc => 0xd28ff0ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80001500 => 0x00200793 (* li a5,2  *)
    | 0x80001504 => 0x00000493 (* li s1,0  *)
    | 0x80001508 => 0x0af51863 (* bne a0,a5,800015b8 <xTaskAbortDelay+0xf4>  *)
    | 0x8000150c => 0x00440913 (* add s2,s0,4  *)
    | 0x80001510 => 0x00090513 (* mv a0,s2  *)
    | 0x80001514 => 0x744010ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80001518 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000151c => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80001520 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80001524 => 0x00178793 (* add a5,a5,1  *)
    | 0x80001528 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x8000152c => 0x02842783 (* lw a5,40(s0)  *)
    | 0x80001530 => 0x00078a63 (* beqz a5,80001544 <xTaskAbortDelay+0x80>  *)
    | 0x80001534 => 0x01840513 (* add a0,s0,24  *)
    | 0x80001538 => 0x720010ef (* jal 80002c58 <uxListRemove>  *)
    | 0x8000153c => 0x00100793 (* li a5,1  *)
    | 0x80001540 => 0x06f40023 (* sb a5,96(s0)  *)
    | 0x80001544 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80001548 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x8000154c => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80001550 => 0x00079463 (* bnez a5,80001558 <xTaskAbortDelay+0x94>  *)
    | 0x80001554 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80001558 => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x8000155c => 0x8801a583 (* lw a1,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001560 => 0x00100613 (* li a2,1  *)
    | 0x80001564 => 0x00e617b3 (* sll a5,a2,a4  *)
    | 0x80001568 => 0x00b7e7b3 (* or a5,a5,a1  *)
    | 0x8000156c => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001570 => 0x01400693 (* li a3,20  *)
    | 0x80001574 => 0x02d706b3 (* mul a3,a4,a3  *)
    | 0x80001578 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x8000157c => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80001580 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001584 => 0x0086a583 (* lw a1,8(a3)  *)
    | 0x80001588 => 0x00d42423 (* sw a3,8(s0)  *)
    | 0x8000158c => 0x00b42623 (* sw a1,12(s0)  *)
    | 0x80001590 => 0x0125a223 (* sw s2,4(a1)  *)
    | 0x80001594 => 0x0126a423 (* sw s2,8(a3)  *)
    | 0x80001598 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x8000159c => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x800015a0 => 0x00168693 (* add a3,a3,1  *)
    | 0x800015a4 => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x800015a8 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800015ac => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x800015b0 => 0x02e7e463 (* bltu a5,a4,800015d8 <xTaskAbortDelay+0x114>  *)
    | 0x800015b4 => 0x00100493 (* li s1,1  *)
    | 0x800015b8 => 0xac1ff0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x800015bc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800015c0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800015c4 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x800015c8 => 0x00048513 (* mv a0,s1  *)
    | 0x800015cc => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800015d0 => 0x01010113 (* add sp,sp,16  *)
    | 0x800015d4 => 0x00008067 (* ret  *)
    | 0x800015d8 => 0x86c1aa23 (* sw a2,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x800015dc => 0xfd9ff06f (* j 800015b4 <xTaskAbortDelay+0xf0>  *)
    (* <vTaskSwitchContext> *)
    | 0x800015e0 => 0x8601a703 (* lw a4,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800015e4 => 0x00070863 (* beqz a4,800015f4 <vTaskSwitchContext+0x14>  *)
    | 0x800015e8 => 0x00100713 (* li a4,1  *)
    | 0x800015ec => 0x86e1aa23 (* sw a4,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x800015f0 => 0x00008067 (* ret  *)
    | 0x800015f4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800015f8 => 0x8601aa23 (* sw zero,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x800015fc => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80001600 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001604 => 0xa5a5a737 (* lui a4,0xa5a5a  *)
    | 0x80001608 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000160c => 0x0307a783 (* lw a5,48(a5)  *)
    | 0x80001610 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001614 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80001618 => 0x0007a603 (* lw a2,0(a5)  *)
    | 0x8000161c => 0x5a570713 (* add a4,a4,1445 # a5a5a5a5 <_stack_top+0x259c48b7>  *)
    | 0x80001620 => 0x00e61e63 (* bne a2,a4,8000163c <vTaskSwitchContext+0x5c>  *)
    | 0x80001624 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001628 => 0x00c69a63 (* bne a3,a2,8000163c <vTaskSwitchContext+0x5c>  *)
    | 0x8000162c => 0x0087a703 (* lw a4,8(a5)  *)
    | 0x80001630 => 0x00d71663 (* bne a4,a3,8000163c <vTaskSwitchContext+0x5c>  *)
    | 0x80001634 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x80001638 => 0x00e78a63 (* beq a5,a4,8000164c <vTaskSwitchContext+0x6c>  *)
    | 0x8000163c => 0x8981a583 (* lw a1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001640 => 0x8981a503 (* lw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001644 => 0x03458593 (* add a1,a1,52  *)
    | 0x80001648 => 0x429100ef (* jal 80012270 <vApplicationStackOverflowHook>  *)
    | 0x8000164c => 0x8801a503 (* lw a0,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001650 => 0x01f00493 (* li s1,31  *)
    | 0x80001654 => 0x02c120ef (* jal 80013680 <__clzsi2>  *)
    | 0x80001658 => 0x40a484b3 (* sub s1,s1,a0  *)
    | 0x8000165c => 0x01400713 (* li a4,20  *)
    | 0x80001660 => 0x02e48733 (* mul a4,s1,a4  *)
    | 0x80001664 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80001668 => 0xc6418413 (* add s0,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x8000166c => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80001670 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80001674 => 0x00079c63 (* bnez a5,8000168c <vTaskSwitchContext+0xac>  *)
    | 0x80001678 => 0x000015b7 (* lui a1,0x1  *)
    | 0x8000167c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001680 => 0x41358593 (* add a1,a1,1043 # 1413 <__stack_size+0x12b5>  *)
    | 0x80001684 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001688 => 0x409100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000168c => 0x01400793 (* li a5,20  *)
    | 0x80001690 => 0x02f487b3 (* mul a5,s1,a5  *)
    | 0x80001694 => 0x00f40733 (* add a4,s0,a5  *)
    | 0x80001698 => 0x00472683 (* lw a3,4(a4)  *)
    | 0x8000169c => 0x00878793 (* add a5,a5,8  *)
    | 0x800016a0 => 0x00f407b3 (* add a5,s0,a5  *)
    | 0x800016a4 => 0x0046a683 (* lw a3,4(a3)  *)
    | 0x800016a8 => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x800016ac => 0x00f69663 (* bne a3,a5,800016b8 <vTaskSwitchContext+0xd8>  *)
    | 0x800016b0 => 0x00c72783 (* lw a5,12(a4)  *)
    | 0x800016b4 => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x800016b8 => 0x01400793 (* li a5,20  *)
    | 0x800016bc => 0x02f484b3 (* mul s1,s1,a5  *)
    | 0x800016c0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800016c4 => 0x00940433 (* add s0,s0,s1  *)
    | 0x800016c8 => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800016cc => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800016d0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800016d4 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x800016d8 => 0x88f1ac23 (* sw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800016dc => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800016e0 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x800016e4 => 0x01010113 (* add sp,sp,16  *)
    | 0x800016e8 => 0x00008067 (* ret  *)
    (* <vTaskSuspend> *)
    | 0x800016ec => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800016f0 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800016f4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800016f8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800016fc => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80001700 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80001704 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80001708 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000170c => 0x30047073 (* csrc mstatus,8  *)
    | 0x80001710 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80001714 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80001718 => 0x00050413 (* mv s0,a0  *)
    | 0x8000171c => 0x00178793 (* add a5,a5,1  *)
    | 0x80001720 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80001724 => 0x00051463 (* bnez a0,8000172c <vTaskSuspend+0x40>  *)
    | 0x80001728 => 0x8981a403 (* lw s0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x8000172c => 0x00440993 (* add s3,s0,4  *)
    | 0x80001730 => 0x00098513 (* mv a0,s3  *)
    | 0x80001734 => 0x524010ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80001738 => 0x02051c63 (* bnez a0,80001770 <vTaskSuspend+0x84>  *)
    | 0x8000173c => 0x02c42683 (* lw a3,44(s0)  *)
    | 0x80001740 => 0x01400713 (* li a4,20  *)
    | 0x80001744 => 0x02e68733 (* mul a4,a3,a4  *)
    | 0x80001748 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x8000174c => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80001750 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80001754 => 0x00079e63 (* bnez a5,80001770 <vTaskSuspend+0x84>  *)
    | 0x80001758 => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x8000175c => 0x00100793 (* li a5,1  *)
    | 0x80001760 => 0x00d797b3 (* sll a5,a5,a3  *)
    | 0x80001764 => 0xfff7c793 (* not a5,a5  *)
    | 0x80001768 => 0x00c7f7b3 (* and a5,a5,a2  *)
    | 0x8000176c => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001770 => 0x02842783 (* lw a5,40(s0)  *)
    | 0x80001774 => 0x00078663 (* beqz a5,80001780 <vTaskSuspend+0x94>  *)
    | 0x80001778 => 0x01840513 (* add a0,s0,24  *)
    | 0x8000177c => 0x4dc010ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80001780 => 0x00098593 (* mv a1,s3  *)
    | 0x80001784 => 0xc0018513 (* add a0,gp,-1024 # 80080400 <xSuspendedTaskList>  *)
    | 0x80001788 => 0x454010ef (* jal 80002bdc <vListInsertEnd>  *)
    | 0x8000178c => 0x05c44703 (* lbu a4,92(s0)  *)
    | 0x80001790 => 0x00100793 (* li a5,1  *)
    | 0x80001794 => 0x00f71463 (* bne a4,a5,8000179c <vTaskSuspend+0xb0>  *)
    | 0x80001798 => 0x04040e23 (* sb zero,92(s0)  *)
    | 0x8000179c => 0x05d44703 (* lbu a4,93(s0)  *)
    | 0x800017a0 => 0x00100793 (* li a5,1  *)
    | 0x800017a4 => 0x00f71463 (* bne a4,a5,800017ac <vTaskSuspend+0xc0>  *)
    | 0x800017a8 => 0x04040ea3 (* sb zero,93(s0)  *)
    | 0x800017ac => 0x05e44703 (* lbu a4,94(s0)  *)
    | 0x800017b0 => 0x00100793 (* li a5,1  *)
    | 0x800017b4 => 0x00f71463 (* bne a4,a5,800017bc <vTaskSuspend+0xd0>  *)
    | 0x800017b8 => 0x04040f23 (* sb zero,94(s0)  *)
    | 0x800017bc => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x800017c0 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800017c4 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x800017c8 => 0x00079463 (* bnez a5,800017d0 <vTaskSuspend+0xe4>  *)
    | 0x800017cc => 0x30046073 (* csrs mstatus,8  *)
    | 0x800017d0 => 0x87c1a783 (* lw a5,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x800017d4 => 0x00078e63 (* beqz a5,800017f0 <vTaskSuspend+0x104>  *)
    | 0x800017d8 => 0x30047073 (* csrc mstatus,8  *)
    | 0x800017dc => 0x0044aa83 (* lw s5,4(s1)  *)
    | 0x800017e0 => 0xc4dfe0ef (* jal 8000042c <prvResetNextTaskUnblockTime>  *)
    | 0x800017e4 => 0x0154a223 (* sw s5,4(s1)  *)
    | 0x800017e8 => 0x000a9463 (* bnez s5,800017f0 <vTaskSuspend+0x104>  *)
    | 0x800017ec => 0x30046073 (* csrs mstatus,8  *)
    | 0x800017f0 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800017f4 => 0x02879663 (* bne a5,s0,80001820 <vTaskSuspend+0x134>  *)
    | 0x800017f8 => 0x87c1a783 (* lw a5,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x800017fc => 0x04078463 (* beqz a5,80001844 <vTaskSuspend+0x158>  *)
    | 0x80001800 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80001804 => 0x00078c63 (* beqz a5,8000181c <vTaskSuspend+0x130>  *)
    | 0x80001808 => 0x000015b7 (* lui a1,0x1  *)
    | 0x8000180c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001810 => 0xcaa58593 (* add a1,a1,-854 # caa <__stack_size+0xb4c>  *)
    | 0x80001814 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001818 => 0x279100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000181c => 0x00000073 (* ecall  *)
    | 0x80001820 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80001824 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80001828 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000182c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80001830 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80001834 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80001838 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8000183c => 0x02010113 (* add sp,sp,32  *)
    | 0x80001840 => 0x00008067 (* ret  *)
    | 0x80001844 => 0x8881a703 (* lw a4,-1912(gp) # 80080088 <uxCurrentNumberOfTasks>  *)
    | 0x80001848 => 0xc001a783 (* lw a5,-1024(gp) # 80080400 <xSuspendedTaskList>  *)
    | 0x8000184c => 0x00f71663 (* bne a4,a5,80001858 <vTaskSuspend+0x16c>  *)
    | 0x80001850 => 0x8801ac23 (* sw zero,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001854 => 0xfcdff06f (* j 80001820 <vTaskSuspend+0x134>  *)
    | 0x80001858 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000185c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80001860 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80001864 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80001868 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000186c => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80001870 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x80001874 => 0x02010113 (* add sp,sp,32  *)
    | 0x80001878 => 0xd69ff06f (* j 800015e0 <vTaskSwitchContext>  *)
    (* <vTaskPlaceOnEventList> *)
    | 0x8000187c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80001880 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001884 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80001888 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000188c => 0x00050413 (* mv s0,a0  *)
    | 0x80001890 => 0x00058493 (* mv s1,a1  *)
    | 0x80001894 => 0x00051c63 (* bnez a0,800018ac <vTaskPlaceOnEventList+0x30>  *)
    | 0x80001898 => 0x000015b7 (* lui a1,0x1  *)
    | 0x8000189c => 0x80014537 (* lui a0,0x80014  *)
    | 0x800018a0 => 0x49958593 (* add a1,a1,1177 # 1499 <__stack_size+0x133b>  *)
    | 0x800018a4 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800018a8 => 0x1e9100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800018ac => 0x8981a583 (* lw a1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800018b0 => 0x00040513 (* mv a0,s0  *)
    | 0x800018b4 => 0x01858593 (* add a1,a1,24  *)
    | 0x800018b8 => 0x350010ef (* jal 80002c08 <vListInsert>  *)
    | 0x800018bc => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800018c0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800018c4 => 0x00048513 (* mv a0,s1  *)
    | 0x800018c8 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800018cc => 0x00100593 (* li a1,1  *)
    | 0x800018d0 => 0x01010113 (* add sp,sp,16  *)
    | 0x800018d4 => 0xa1dfe06f (* j 800002f0 <prvAddCurrentTaskToDelayedList>  *)
    (* <vTaskPlaceOnUnorderedEventList> *)
    | 0x800018d8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800018dc => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800018e0 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800018e4 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x800018e8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800018ec => 0x00050413 (* mv s0,a0  *)
    | 0x800018f0 => 0x00058493 (* mv s1,a1  *)
    | 0x800018f4 => 0x00060913 (* mv s2,a2  *)
    | 0x800018f8 => 0x00051c63 (* bnez a0,80001910 <vTaskPlaceOnUnorderedEventList+0x38>  *)
    | 0x800018fc => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001900 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001904 => 0x4b758593 (* add a1,a1,1207 # 14b7 <__stack_size+0x1359>  *)
    | 0x80001908 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x8000190c => 0x185100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001910 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80001914 => 0x00079c63 (* bnez a5,8000192c <vTaskPlaceOnUnorderedEventList+0x54>  *)
    | 0x80001918 => 0x000015b7 (* lui a1,0x1  *)
    | 0x8000191c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001920 => 0x4bb58593 (* add a1,a1,1211 # 14bb <__stack_size+0x135d>  *)
    | 0x80001924 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001928 => 0x169100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000192c => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001930 => 0x800006b7 (* lui a3,0x80000  *)
    | 0x80001934 => 0x00d4e4b3 (* or s1,s1,a3  *)
    | 0x80001938 => 0x00972c23 (* sw s1,24(a4)  *)
    | 0x8000193c => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001940 => 0x00442703 (* lw a4,4(s0)  *)
    | 0x80001944 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80001948 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000194c => 0x00872603 (* lw a2,8(a4)  *)
    | 0x80001950 => 0x00e6ae23 (* sw a4,28(a3) # 8000001c <_start+0x1c>  *)
    | 0x80001954 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001958 => 0x00090513 (* mv a0,s2  *)
    | 0x8000195c => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80001960 => 0x02c6a023 (* sw a2,32(a3)  *)
    | 0x80001964 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001968 => 0x00100593 (* li a1,1  *)
    | 0x8000196c => 0x01868693 (* add a3,a3,24  *)
    | 0x80001970 => 0x00d62223 (* sw a3,4(a2)  *)
    | 0x80001974 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001978 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x8000197c => 0x01868693 (* add a3,a3,24  *)
    | 0x80001980 => 0x00d72423 (* sw a3,8(a4)  *)
    | 0x80001984 => 0x0287a423 (* sw s0,40(a5)  *)
    | 0x80001988 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x8000198c => 0x00178793 (* add a5,a5,1  *)
    | 0x80001990 => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x80001994 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80001998 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000199c => 0x955fe06f (* j 800002f0 <prvAddCurrentTaskToDelayedList>  *)
    (* <vTaskPlaceOnEventListRestricted> *)
    | 0x800019a0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800019a4 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800019a8 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800019ac => 0x01212023 (* sw s2,0(sp)  *)
    | 0x800019b0 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800019b4 => 0x00050413 (* mv s0,a0  *)
    | 0x800019b8 => 0x00058493 (* mv s1,a1  *)
    | 0x800019bc => 0x00060913 (* mv s2,a2  *)
    | 0x800019c0 => 0x00051c63 (* bnez a0,800019d8 <vTaskPlaceOnEventListRestricted+0x38>  *)
    | 0x800019c4 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800019c8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800019cc => 0x4d758593 (* add a1,a1,1239 # 14d7 <__stack_size+0x1379>  *)
    | 0x800019d0 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800019d4 => 0x0bd100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800019d8 => 0x00442703 (* lw a4,4(s0)  *)
    | 0x800019dc => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800019e0 => 0x00872603 (* lw a2,8(a4)  *)
    | 0x800019e4 => 0x00e6ae23 (* sw a4,28(a3)  *)
    | 0x800019e8 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800019ec => 0x02c6a023 (* sw a2,32(a3)  *)
    | 0x800019f0 => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800019f4 => 0x01868693 (* add a3,a3,24  *)
    | 0x800019f8 => 0x00d62223 (* sw a3,4(a2)  *)
    | 0x800019fc => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001a00 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001a04 => 0x01868693 (* add a3,a3,24  *)
    | 0x80001a08 => 0x00d72423 (* sw a3,8(a4)  *)
    | 0x80001a0c => 0x0287a423 (* sw s0,40(a5)  *)
    | 0x80001a10 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80001a14 => 0x00178793 (* add a5,a5,1  *)
    | 0x80001a18 => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x80001a1c => 0x00090463 (* beqz s2,80001a24 <vTaskPlaceOnEventListRestricted+0x84>  *)
    | 0x80001a20 => 0xfff00493 (* li s1,-1  *)
    | 0x80001a24 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80001a28 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80001a2c => 0x00090593 (* mv a1,s2  *)
    | 0x80001a30 => 0x00048513 (* mv a0,s1  *)
    | 0x80001a34 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80001a38 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80001a3c => 0x01010113 (* add sp,sp,16  *)
    | 0x80001a40 => 0x8b1fe06f (* j 800002f0 <prvAddCurrentTaskToDelayedList>  *)
    (* <xTaskRemoveFromEventList> *)
    | 0x80001a44 => 0x00c52783 (* lw a5,12(a0)  *)
    | 0x80001a48 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80001a4c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001a50 => 0x00c7a403 (* lw s0,12(a5)  *)
    | 0x80001a54 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80001a58 => 0x00041c63 (* bnez s0,80001a70 <xTaskRemoveFromEventList+0x2c>  *)
    | 0x80001a5c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001a60 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001a64 => 0x50e58593 (* add a1,a1,1294 # 150e <__stack_size+0x13b0>  *)
    | 0x80001a68 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001a6c => 0x025100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001a70 => 0x01c42683 (* lw a3,28(s0)  *)
    | 0x80001a74 => 0x02042703 (* lw a4,32(s0)  *)
    | 0x80001a78 => 0x02842783 (* lw a5,40(s0)  *)
    | 0x80001a7c => 0x01840613 (* add a2,s0,24  *)
    | 0x80001a80 => 0x00e6a423 (* sw a4,8(a3)  *)
    | 0x80001a84 => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x80001a88 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001a8c => 0x00c69463 (* bne a3,a2,80001a94 <xTaskRemoveFromEventList+0x50>  *)
    | 0x80001a90 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x80001a94 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80001a98 => 0x02042423 (* sw zero,40(s0)  *)
    | 0x80001a9c => 0xfff70713 (* add a4,a4,-1  *)
    | 0x80001aa0 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80001aa4 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80001aa8 => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x80001aac => 0x0a079663 (* bnez a5,80001b58 <xTaskRemoveFromEventList+0x114>  *)
    | 0x80001ab0 => 0x01442783 (* lw a5,20(s0)  *)
    | 0x80001ab4 => 0x00842603 (* lw a2,8(s0)  *)
    | 0x80001ab8 => 0x00c42683 (* lw a3,12(s0)  *)
    | 0x80001abc => 0x0047a583 (* lw a1,4(a5)  *)
    | 0x80001ac0 => 0x00d62423 (* sw a3,8(a2)  *)
    | 0x80001ac4 => 0x00c6a223 (* sw a2,4(a3)  *)
    | 0x80001ac8 => 0x00440613 (* add a2,s0,4  *)
    | 0x80001acc => 0x00c59463 (* bne a1,a2,80001ad4 <xTaskRemoveFromEventList+0x90>  *)
    | 0x80001ad0 => 0x00d7a223 (* sw a3,4(a5)  *)
    | 0x80001ad4 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x80001ad8 => 0xfff68693 (* add a3,a3,-1  *)
    | 0x80001adc => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x80001ae0 => 0x8801a583 (* lw a1,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001ae4 => 0x00100793 (* li a5,1  *)
    | 0x80001ae8 => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x80001aec => 0x00b7e7b3 (* or a5,a5,a1  *)
    | 0x80001af0 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001af4 => 0x01400693 (* li a3,20  *)
    | 0x80001af8 => 0x02d706b3 (* mul a3,a4,a3  *)
    | 0x80001afc => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80001b00 => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80001b04 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001b08 => 0x0086a583 (* lw a1,8(a3)  *)
    | 0x80001b0c => 0x00d42423 (* sw a3,8(s0)  *)
    | 0x80001b10 => 0x00b42623 (* sw a1,12(s0)  *)
    | 0x80001b14 => 0x00c5a223 (* sw a2,4(a1)  *)
    | 0x80001b18 => 0x00c6a423 (* sw a2,8(a3)  *)
    | 0x80001b1c => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x80001b20 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x80001b24 => 0x00000513 (* li a0,0  *)
    | 0x80001b28 => 0x00168693 (* add a3,a3,1  *)
    | 0x80001b2c => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x80001b30 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001b34 => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80001b38 => 0x00e7f863 (* bgeu a5,a4,80001b48 <xTaskRemoveFromEventList+0x104>  *)
    | 0x80001b3c => 0x00100713 (* li a4,1  *)
    | 0x80001b40 => 0x86e1aa23 (* sw a4,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x80001b44 => 0x00100513 (* li a0,1  *)
    | 0x80001b48 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80001b4c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80001b50 => 0x01010113 (* add sp,sp,16  *)
    | 0x80001b54 => 0x00008067 (* ret  *)
    | 0x80001b58 => 0xc2818793 (* add a5,gp,-984 # 80080428 <xPendingReadyList>  *)
    | 0x80001b5c => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001b60 => 0x0086a583 (* lw a1,8(a3)  *)
    | 0x80001b64 => 0x00d42e23 (* sw a3,28(s0)  *)
    | 0x80001b68 => 0x02b42023 (* sw a1,32(s0)  *)
    | 0x80001b6c => 0x00c5a223 (* sw a2,4(a1)  *)
    | 0x80001b70 => 0x00c6a423 (* sw a2,8(a3)  *)
    | 0x80001b74 => 0x02f42423 (* sw a5,40(s0)  *)
    | 0x80001b78 => 0xfa9ff06f (* j 80001b20 <xTaskRemoveFromEventList+0xdc>  *)
    (* <vTaskRemoveFromUnorderedEventList> *)
    | 0x80001b7c => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80001b80 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80001b84 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001b88 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80001b8c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80001b90 => 0x00050493 (* mv s1,a0  *)
    | 0x80001b94 => 0x00058413 (* mv s0,a1  *)
    | 0x80001b98 => 0x00079c63 (* bnez a5,80001bb0 <vTaskRemoveFromUnorderedEventList+0x34>  *)
    | 0x80001b9c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001ba0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001ba4 => 0x55c58593 (* add a1,a1,1372 # 155c <__stack_size+0x13fe>  *)
    | 0x80001ba8 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001bac => 0x6e4100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001bb0 => 0x800007b7 (* lui a5,0x80000  *)
    | 0x80001bb4 => 0x00f46433 (* or s0,s0,a5  *)
    | 0x80001bb8 => 0x0084a023 (* sw s0,0(s1)  *)
    | 0x80001bbc => 0x00c4a403 (* lw s0,12(s1)  *)
    | 0x80001bc0 => 0x00041c63 (* bnez s0,80001bd8 <vTaskRemoveFromUnorderedEventList+0x5c>  *)
    | 0x80001bc4 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001bc8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001bcc => 0x56758593 (* add a1,a1,1383 # 1567 <__stack_size+0x1409>  *)
    | 0x80001bd0 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001bd4 => 0x6bc100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001bd8 => 0x0044a683 (* lw a3,4(s1)  *)
    | 0x80001bdc => 0x0084a703 (* lw a4,8(s1)  *)
    | 0x80001be0 => 0x0104a783 (* lw a5,16(s1)  *)
    | 0x80001be4 => 0x00e6a423 (* sw a4,8(a3)  *)
    | 0x80001be8 => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x80001bec => 0x0047a683 (* lw a3,4(a5) # 80000004 <_start+0x4>  *)
    | 0x80001bf0 => 0x00969463 (* bne a3,s1,80001bf8 <vTaskRemoveFromUnorderedEventList+0x7c>  *)
    | 0x80001bf4 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x80001bf8 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80001bfc => 0x0004a823 (* sw zero,16(s1)  *)
    | 0x80001c00 => 0x00842683 (* lw a3,8(s0)  *)
    | 0x80001c04 => 0xfff70713 (* add a4,a4,-1  *)
    | 0x80001c08 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80001c0c => 0x00c42703 (* lw a4,12(s0)  *)
    | 0x80001c10 => 0x01442783 (* lw a5,20(s0)  *)
    | 0x80001c14 => 0x00440613 (* add a2,s0,4  *)
    | 0x80001c18 => 0x00e6a423 (* sw a4,8(a3)  *)
    | 0x80001c1c => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x80001c20 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001c24 => 0x00c69463 (* bne a3,a2,80001c2c <vTaskRemoveFromUnorderedEventList+0xb0>  *)
    | 0x80001c28 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x80001c2c => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80001c30 => 0x8801a503 (* lw a0,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001c34 => 0xfff70713 (* add a4,a4,-1  *)
    | 0x80001c38 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80001c3c => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x80001c40 => 0x00100593 (* li a1,1  *)
    | 0x80001c44 => 0x00e597b3 (* sll a5,a1,a4  *)
    | 0x80001c48 => 0x00a7e7b3 (* or a5,a5,a0  *)
    | 0x80001c4c => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001c50 => 0x01400693 (* li a3,20  *)
    | 0x80001c54 => 0x02d706b3 (* mul a3,a4,a3  *)
    | 0x80001c58 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80001c5c => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80001c60 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001c64 => 0x0086a503 (* lw a0,8(a3)  *)
    | 0x80001c68 => 0x00d42423 (* sw a3,8(s0)  *)
    | 0x80001c6c => 0x00a42623 (* sw a0,12(s0)  *)
    | 0x80001c70 => 0x00c52223 (* sw a2,4(a0)  *)
    | 0x80001c74 => 0x00c6a423 (* sw a2,8(a3)  *)
    | 0x80001c78 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x80001c7c => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x80001c80 => 0x00168693 (* add a3,a3,1  *)
    | 0x80001c84 => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x80001c88 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001c8c => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80001c90 => 0x00e7f463 (* bgeu a5,a4,80001c98 <vTaskRemoveFromUnorderedEventList+0x11c>  *)
    | 0x80001c94 => 0x86b1aa23 (* sw a1,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x80001c98 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80001c9c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80001ca0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80001ca4 => 0x01010113 (* add sp,sp,16  *)
    | 0x80001ca8 => 0x00008067 (* ret  *)
    (* <vTaskSetTimeOutState> *)
    | 0x80001cac => 0xff010113 (* add sp,sp,-16  *)
    | 0x80001cb0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001cb4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80001cb8 => 0x00050413 (* mv s0,a0  *)
    | 0x80001cbc => 0x00051c63 (* bnez a0,80001cd4 <vTaskSetTimeOutState+0x28>  *)
    | 0x80001cc0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001cc4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001cc8 => 0x59f58593 (* add a1,a1,1439 # 159f <__stack_size+0x1441>  *)
    | 0x80001ccc => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001cd0 => 0x5c0100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001cd4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80001cd8 => 0x8701a683 (* lw a3,-1936(gp) # 80080070 <xNumOfOverflows>  *)
    | 0x80001cdc => 0x80080737 (* lui a4,0x80080  *)
    | 0x80001ce0 => 0x00472783 (* lw a5,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x80001ce4 => 0x00d42023 (* sw a3,0(s0)  *)
    | 0x80001ce8 => 0x8841a683 (* lw a3,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80001cec => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x80001cf0 => 0x00d42223 (* sw a3,4(s0)  *)
    | 0x80001cf4 => 0x00079463 (* bnez a5,80001cfc <vTaskSetTimeOutState+0x50>  *)
    | 0x80001cf8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80001cfc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80001d00 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80001d04 => 0x01010113 (* add sp,sp,16  *)
    | 0x80001d08 => 0x00008067 (* ret  *)
    (* <vTaskInternalSetTimeOutState> *)
    | 0x80001d0c => 0x8701a783 (* lw a5,-1936(gp) # 80080070 <xNumOfOverflows>  *)
    | 0x80001d10 => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x80001d14 => 0x8841a783 (* lw a5,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80001d18 => 0x00f52223 (* sw a5,4(a0)  *)
    | 0x80001d1c => 0x00008067 (* ret  *)
    (* <xTaskCheckForTimeOut> *)
    | 0x80001d20 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80001d24 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80001d28 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80001d2c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80001d30 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80001d34 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80001d38 => 0x00050413 (* mv s0,a0  *)
    | 0x80001d3c => 0x00058493 (* mv s1,a1  *)
    | 0x80001d40 => 0x00051c63 (* bnez a0,80001d58 <xTaskCheckForTimeOut+0x38>  *)
    | 0x80001d44 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001d48 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001d4c => 0x5be58593 (* add a1,a1,1470 # 15be <__stack_size+0x1460>  *)
    | 0x80001d50 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001d54 => 0x53c100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001d58 => 0x00049c63 (* bnez s1,80001d70 <xTaskCheckForTimeOut+0x50>  *)
    | 0x80001d5c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80001d60 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001d64 => 0x5bf58593 (* add a1,a1,1471 # 15bf <__stack_size+0x1461>  *)
    | 0x80001d68 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001d6c => 0x524100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001d70 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80001d74 => 0x800809b7 (* lui s3,0x80080  *)
    | 0x80001d78 => 0x0049a903 (* lw s2,4(s3) # 80080004 <xCriticalNesting>  *)
    | 0x80001d7c => 0x00442703 (* lw a4,4(s0)  *)
    | 0x80001d80 => 0x00190793 (* add a5,s2,1  *)
    | 0x80001d84 => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x80001d88 => 0x8841a683 (* lw a3,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x80001d8c => 0x8981a603 (* lw a2,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001d90 => 0x06064603 (* lbu a2,96(a2)  *)
    | 0x80001d94 => 0x02060c63 (* beqz a2,80001dcc <xTaskCheckForTimeOut+0xac>  *)
    | 0x80001d98 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001d9c => 0x06078023 (* sb zero,96(a5)  *)
    | 0x80001da0 => 0x00100513 (* li a0,1  *)
    | 0x80001da4 => 0x0129a223 (* sw s2,4(s3)  *)
    | 0x80001da8 => 0x00091463 (* bnez s2,80001db0 <xTaskCheckForTimeOut+0x90>  *)
    | 0x80001dac => 0x30046073 (* csrs mstatus,8  *)
    | 0x80001db0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80001db4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80001db8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80001dbc => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80001dc0 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80001dc4 => 0x02010113 (* add sp,sp,32  *)
    | 0x80001dc8 => 0x00008067 (* ret  *)
    | 0x80001dcc => 0x0004a783 (* lw a5,0(s1)  *)
    | 0x80001dd0 => 0xfff00613 (* li a2,-1  *)
    | 0x80001dd4 => 0x02c78c63 (* beq a5,a2,80001e0c <xTaskCheckForTimeOut+0xec>  *)
    | 0x80001dd8 => 0x8701a603 (* lw a2,-1936(gp) # 80080070 <xNumOfOverflows>  *)
    | 0x80001ddc => 0x00042583 (* lw a1,0(s0)  *)
    | 0x80001de0 => 0x00c58863 (* beq a1,a2,80001df0 <xTaskCheckForTimeOut+0xd0>  *)
    | 0x80001de4 => 0x00e6e663 (* bltu a3,a4,80001df0 <xTaskCheckForTimeOut+0xd0>  *)
    | 0x80001de8 => 0x0004a023 (* sw zero,0(s1)  *)
    | 0x80001dec => 0xfb5ff06f (* j 80001da0 <xTaskCheckForTimeOut+0x80>  *)
    | 0x80001df0 => 0x40e68633 (* sub a2,a3,a4  *)
    | 0x80001df4 => 0xfef67ae3 (* bgeu a2,a5,80001de8 <xTaskCheckForTimeOut+0xc8>  *)
    | 0x80001df8 => 0x40d787b3 (* sub a5,a5,a3  *)
    | 0x80001dfc => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80001e00 => 0x00f4a023 (* sw a5,0(s1)  *)
    | 0x80001e04 => 0x00040513 (* mv a0,s0  *)
    | 0x80001e08 => 0xf05ff0ef (* jal 80001d0c <vTaskInternalSetTimeOutState>  *)
    | 0x80001e0c => 0x00000513 (* li a0,0  *)
    | 0x80001e10 => 0xf95ff06f (* j 80001da4 <xTaskCheckForTimeOut+0x84>  *)
    (* <vTaskMissedYield> *)
    | 0x80001e14 => 0x00100713 (* li a4,1  *)
    | 0x80001e18 => 0x86e1aa23 (* sw a4,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x80001e1c => 0x00008067 (* ret  *)
    (* <xTaskGetCurrentTaskHandle> *)
    | 0x80001e20 => 0x8981a503 (* lw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001e24 => 0x00008067 (* ret  *)
    (* <xTaskGetSchedulerState> *)
    | 0x80001e28 => 0x87c1a783 (* lw a5,-1924(gp) # 8008007c <xSchedulerRunning>  *)
    | 0x80001e2c => 0x00100513 (* li a0,1  *)
    | 0x80001e30 => 0x00078863 (* beqz a5,80001e40 <xTaskGetSchedulerState+0x18>  *)
    | 0x80001e34 => 0x8601a503 (* lw a0,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x80001e38 => 0x00153513 (* seqz a0,a0  *)
    | 0x80001e3c => 0x00151513 (* sll a0,a0,0x1  *)
    | 0x80001e40 => 0x00008067 (* ret  *)
    (* <xTaskPriorityInherit> *)
    | 0x80001e44 => 0x12050663 (* beqz a0,80001f70 <xTaskPriorityInherit+0x12c>  *)
    | 0x80001e48 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80001e4c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80001e50 => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001e54 => 0x02c52783 (* lw a5,44(a0)  *)
    | 0x80001e58 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80001e5c => 0x02c72703 (* lw a4,44(a4)  *)
    | 0x80001e60 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80001e64 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80001e68 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80001e6c => 0x00050413 (* mv s0,a0  *)
    | 0x80001e70 => 0x0ee7f663 (* bgeu a5,a4,80001f5c <xTaskPriorityInherit+0x118>  *)
    | 0x80001e74 => 0x01852703 (* lw a4,24(a0)  *)
    | 0x80001e78 => 0x00074c63 (* bltz a4,80001e90 <xTaskPriorityInherit+0x4c>  *)
    | 0x80001e7c => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001e80 => 0x02c72683 (* lw a3,44(a4)  *)
    | 0x80001e84 => 0x00900713 (* li a4,9  *)
    | 0x80001e88 => 0x40d70733 (* sub a4,a4,a3  *)
    | 0x80001e8c => 0x00e52c23 (* sw a4,24(a0)  *)
    | 0x80001e90 => 0x01400713 (* li a4,20  *)
    | 0x80001e94 => 0x02e78733 (* mul a4,a5,a4  *)
    | 0x80001e98 => 0xc6418693 (* add a3,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80001e9c => 0xc6418493 (* add s1,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80001ea0 => 0x00d70733 (* add a4,a4,a3  *)
    | 0x80001ea4 => 0x01442683 (* lw a3,20(s0)  *)
    | 0x80001ea8 => 0x0ae69263 (* bne a3,a4,80001f4c <xTaskPriorityInherit+0x108>  *)
    | 0x80001eac => 0x00440993 (* add s3,s0,4  *)
    | 0x80001eb0 => 0x00098513 (* mv a0,s3  *)
    | 0x80001eb4 => 0x5a5000ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80001eb8 => 0x02051063 (* bnez a0,80001ed8 <xTaskPriorityInherit+0x94>  *)
    | 0x80001ebc => 0x02c42603 (* lw a2,44(s0)  *)
    | 0x80001ec0 => 0x8801a703 (* lw a4,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001ec4 => 0x00100793 (* li a5,1  *)
    | 0x80001ec8 => 0x00c797b3 (* sll a5,a5,a2  *)
    | 0x80001ecc => 0xfff7c793 (* not a5,a5  *)
    | 0x80001ed0 => 0x00e7f7b3 (* and a5,a5,a4  *)
    | 0x80001ed4 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001ed8 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001edc => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001ee0 => 0x00100713 (* li a4,1  *)
    | 0x80001ee4 => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80001ee8 => 0x00f71733 (* sll a4,a4,a5  *)
    | 0x80001eec => 0x00c76733 (* or a4,a4,a2  *)
    | 0x80001ef0 => 0x88e1a023 (* sw a4,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001ef4 => 0x01400713 (* li a4,20  *)
    | 0x80001ef8 => 0x02f42623 (* sw a5,44(s0)  *)
    | 0x80001efc => 0x02e787b3 (* mul a5,a5,a4  *)
    | 0x80001f00 => 0x00f487b3 (* add a5,s1,a5  *)
    | 0x80001f04 => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80001f08 => 0x00872683 (* lw a3,8(a4)  *)
    | 0x80001f0c => 0x00e42423 (* sw a4,8(s0)  *)
    | 0x80001f10 => 0x00d42623 (* sw a3,12(s0)  *)
    | 0x80001f14 => 0x0136a223 (* sw s3,4(a3)  *)
    | 0x80001f18 => 0x01372423 (* sw s3,8(a4)  *)
    | 0x80001f1c => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80001f20 => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x80001f24 => 0x00170713 (* add a4,a4,1  *)
    | 0x80001f28 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80001f2c => 0x00100513 (* li a0,1  *)
    | 0x80001f30 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80001f34 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80001f38 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80001f3c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80001f40 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80001f44 => 0x02010113 (* add sp,sp,32  *)
    | 0x80001f48 => 0x00008067 (* ret  *)
    | 0x80001f4c => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001f50 => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80001f54 => 0x02f42623 (* sw a5,44(s0)  *)
    | 0x80001f58 => 0xfd5ff06f (* j 80001f2c <xTaskPriorityInherit+0xe8>  *)
    | 0x80001f5c => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001f60 => 0x04852503 (* lw a0,72(a0)  *)
    | 0x80001f64 => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80001f68 => 0x00f53533 (* sltu a0,a0,a5  *)
    | 0x80001f6c => 0xfc5ff06f (* j 80001f30 <xTaskPriorityInherit+0xec>  *)
    | 0x80001f70 => 0x00000513 (* li a0,0  *)
    | 0x80001f74 => 0x00008067 (* ret  *)
    (* <xTaskPriorityDisinherit> *)
    | 0x80001f78 => 0x02051263 (* bnez a0,80001f9c <xTaskPriorityDisinherit+0x24>  *)
    | 0x80001f7c => 0x00000513 (* li a0,0  *)
    | 0x80001f80 => 0x00008067 (* ret  *)
    | 0x80001f84 => 0x00000513 (* li a0,0  *)
    | 0x80001f88 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80001f8c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80001f90 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80001f94 => 0x01010113 (* add sp,sp,16  *)
    | 0x80001f98 => 0x00008067 (* ret  *)
    | 0x80001f9c => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001fa0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80001fa4 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001fa8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80001fac => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80001fb0 => 0x00050413 (* mv s0,a0  *)
    | 0x80001fb4 => 0x00a78c63 (* beq a5,a0,80001fcc <xTaskPriorityDisinherit+0x54>  *)
    | 0x80001fb8 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80001fbc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001fc0 => 0xa4158593 (* add a1,a1,-1471 # 1a41 <__stack_size+0x18e3>  *)
    | 0x80001fc4 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001fc8 => 0x2c8100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001fcc => 0x04c42783 (* lw a5,76(s0)  *)
    | 0x80001fd0 => 0x00079c63 (* bnez a5,80001fe8 <xTaskPriorityDisinherit+0x70>  *)
    | 0x80001fd4 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80001fd8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001fdc => 0xa4258593 (* add a1,a1,-1470 # 1a42 <__stack_size+0x18e4>  *)
    | 0x80001fe0 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001fe4 => 0x2ac100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80001fe8 => 0x04c42783 (* lw a5,76(s0)  *)
    | 0x80001fec => 0x02c42683 (* lw a3,44(s0)  *)
    | 0x80001ff0 => 0x04842703 (* lw a4,72(s0)  *)
    | 0x80001ff4 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80001ff8 => 0x04f42623 (* sw a5,76(s0)  *)
    | 0x80001ffc => 0xf8e684e3 (* beq a3,a4,80001f84 <xTaskPriorityDisinherit+0xc>  *)
    | 0x80002000 => 0xf80792e3 (* bnez a5,80001f84 <xTaskPriorityDisinherit+0xc>  *)
    | 0x80002004 => 0x00440493 (* add s1,s0,4  *)
    | 0x80002008 => 0x00048513 (* mv a0,s1  *)
    | 0x8000200c => 0x44d000ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80002010 => 0x02051063 (* bnez a0,80002030 <xTaskPriorityDisinherit+0xb8>  *)
    | 0x80002014 => 0x02c42603 (* lw a2,44(s0)  *)
    | 0x80002018 => 0x8801a703 (* lw a4,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x8000201c => 0x00100793 (* li a5,1  *)
    | 0x80002020 => 0x00c797b3 (* sll a5,a5,a2  *)
    | 0x80002024 => 0xfff7c793 (* not a5,a5  *)
    | 0x80002028 => 0x00e7f7b3 (* and a5,a5,a4  *)
    | 0x8000202c => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002030 => 0x04842703 (* lw a4,72(s0)  *)
    | 0x80002034 => 0x00900793 (* li a5,9  *)
    | 0x80002038 => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x8000203c => 0x40e787b3 (* sub a5,a5,a4  *)
    | 0x80002040 => 0x00f42c23 (* sw a5,24(s0)  *)
    | 0x80002044 => 0x00100793 (* li a5,1  *)
    | 0x80002048 => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x8000204c => 0x00c7e7b3 (* or a5,a5,a2  *)
    | 0x80002050 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002054 => 0x01400693 (* li a3,20  *)
    | 0x80002058 => 0x02e42623 (* sw a4,44(s0)  *)
    | 0x8000205c => 0x02d70733 (* mul a4,a4,a3  *)
    | 0x80002060 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80002064 => 0x00100513 (* li a0,1  *)
    | 0x80002068 => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x8000206c => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80002070 => 0x00872683 (* lw a3,8(a4)  *)
    | 0x80002074 => 0x00e42423 (* sw a4,8(s0)  *)
    | 0x80002078 => 0x00d42623 (* sw a3,12(s0)  *)
    | 0x8000207c => 0x0096a223 (* sw s1,4(a3)  *)
    | 0x80002080 => 0x00972423 (* sw s1,8(a4)  *)
    | 0x80002084 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80002088 => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x8000208c => 0x00170713 (* add a4,a4,1  *)
    | 0x80002090 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80002094 => 0xef5ff06f (* j 80001f88 <xTaskPriorityDisinherit+0x10>  *)
    (* <vTaskPriorityDisinheritAfterTimeout> *)
    | 0x80002098 => 0x12050e63 (* beqz a0,800021d4 <vTaskPriorityDisinheritAfterTimeout+0x13c>  *)
    | 0x8000209c => 0x04c52783 (* lw a5,76(a0)  *)
    | 0x800020a0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800020a4 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800020a8 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x800020ac => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800020b0 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800020b4 => 0x00050413 (* mv s0,a0  *)
    | 0x800020b8 => 0x00058913 (* mv s2,a1  *)
    | 0x800020bc => 0x00079c63 (* bnez a5,800020d4 <vTaskPriorityDisinheritAfterTimeout+0x3c>  *)
    | 0x800020c0 => 0x000025b7 (* lui a1,0x2  *)
    | 0x800020c4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800020c8 => 0xa9f58593 (* add a1,a1,-1377 # 1a9f <__stack_size+0x1941>  *)
    | 0x800020cc => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800020d0 => 0x1c0100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800020d4 => 0x04842483 (* lw s1,72(s0)  *)
    | 0x800020d8 => 0x0124f463 (* bgeu s1,s2,800020e0 <vTaskPriorityDisinheritAfterTimeout+0x48>  *)
    | 0x800020dc => 0x00090493 (* mv s1,s2  *)
    | 0x800020e0 => 0x02c42783 (* lw a5,44(s0)  *)
    | 0x800020e4 => 0x0c978c63 (* beq a5,s1,800021bc <vTaskPriorityDisinheritAfterTimeout+0x124>  *)
    | 0x800020e8 => 0x04c42703 (* lw a4,76(s0)  *)
    | 0x800020ec => 0x00100793 (* li a5,1  *)
    | 0x800020f0 => 0x0cf71663 (* bne a4,a5,800021bc <vTaskPriorityDisinheritAfterTimeout+0x124>  *)
    | 0x800020f4 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800020f8 => 0x00879c63 (* bne a5,s0,80002110 <vTaskPriorityDisinheritAfterTimeout+0x78>  *)
    | 0x800020fc => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002100 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002104 => 0xaba58593 (* add a1,a1,-1350 # 1aba <__stack_size+0x195c>  *)
    | 0x80002108 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x8000210c => 0x184100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002110 => 0x01842783 (* lw a5,24(s0)  *)
    | 0x80002114 => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x80002118 => 0x02942623 (* sw s1,44(s0)  *)
    | 0x8000211c => 0x0007c863 (* bltz a5,8000212c <vTaskPriorityDisinheritAfterTimeout+0x94>  *)
    | 0x80002120 => 0x00900793 (* li a5,9  *)
    | 0x80002124 => 0x409787b3 (* sub a5,a5,s1  *)
    | 0x80002128 => 0x00f42c23 (* sw a5,24(s0)  *)
    | 0x8000212c => 0x01400793 (* li a5,20  *)
    | 0x80002130 => 0x02f70733 (* mul a4,a4,a5  *)
    | 0x80002134 => 0xc6418693 (* add a3,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80002138 => 0xc6418493 (* add s1,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x8000213c => 0x00d70733 (* add a4,a4,a3  *)
    | 0x80002140 => 0x01442683 (* lw a3,20(s0)  *)
    | 0x80002144 => 0x06e69c63 (* bne a3,a4,800021bc <vTaskPriorityDisinheritAfterTimeout+0x124>  *)
    | 0x80002148 => 0x00440913 (* add s2,s0,4  *)
    | 0x8000214c => 0x00090513 (* mv a0,s2  *)
    | 0x80002150 => 0x309000ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80002154 => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x80002158 => 0x00051e63 (* bnez a0,80002174 <vTaskPriorityDisinheritAfterTimeout+0xdc>  *)
    | 0x8000215c => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002160 => 0x00100793 (* li a5,1  *)
    | 0x80002164 => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x80002168 => 0xfff7c793 (* not a5,a5  *)
    | 0x8000216c => 0x00c7f7b3 (* and a5,a5,a2  *)
    | 0x80002170 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002174 => 0x8801a603 (* lw a2,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002178 => 0x00100793 (* li a5,1  *)
    | 0x8000217c => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x80002180 => 0x00c7e7b3 (* or a5,a5,a2  *)
    | 0x80002184 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002188 => 0x01400793 (* li a5,20  *)
    | 0x8000218c => 0x02f70733 (* mul a4,a4,a5  *)
    | 0x80002190 => 0x00e487b3 (* add a5,s1,a4  *)
    | 0x80002194 => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80002198 => 0x00872683 (* lw a3,8(a4)  *)
    | 0x8000219c => 0x00e42423 (* sw a4,8(s0)  *)
    | 0x800021a0 => 0x00d42623 (* sw a3,12(s0)  *)
    | 0x800021a4 => 0x0126a223 (* sw s2,4(a3)  *)
    | 0x800021a8 => 0x01272423 (* sw s2,8(a4)  *)
    | 0x800021ac => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x800021b0 => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x800021b4 => 0x00170713 (* add a4,a4,1  *)
    | 0x800021b8 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x800021bc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800021c0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800021c4 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800021c8 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x800021cc => 0x01010113 (* add sp,sp,16  *)
    | 0x800021d0 => 0x00008067 (* ret  *)
    | 0x800021d4 => 0x00008067 (* ret  *)
    (* <uxTaskResetEventItemValue> *)
    | 0x800021d8 => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800021dc => 0x8981a683 (* lw a3,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800021e0 => 0x01872503 (* lw a0,24(a4)  *)
    | 0x800021e4 => 0x02c6a683 (* lw a3,44(a3)  *)
    | 0x800021e8 => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800021ec => 0x00900793 (* li a5,9  *)
    | 0x800021f0 => 0x40d787b3 (* sub a5,a5,a3  *)
    | 0x800021f4 => 0x00f72c23 (* sw a5,24(a4)  *)
    | 0x800021f8 => 0x00008067 (* ret  *)
    (* <pvTaskIncrementMutexHeldCount> *)
    | 0x800021fc => 0x8981a503 (* lw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002200 => 0x00050863 (* beqz a0,80002210 <pvTaskIncrementMutexHeldCount+0x14>  *)
    | 0x80002204 => 0x04c52783 (* lw a5,76(a0)  *)
    | 0x80002208 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000220c => 0x04f52623 (* sw a5,76(a0)  *)
    | 0x80002210 => 0x00008067 (* ret  *)
    (* <ulTaskGenericNotifyTake> *)
    | 0x80002214 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80002218 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000221c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80002220 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80002224 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80002228 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000222c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80002230 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80002234 => 0x01612023 (* sw s6,0(sp)  *)
    | 0x80002238 => 0x00200793 (* li a5,2  *)
    | 0x8000223c => 0x00050413 (* mv s0,a0  *)
    | 0x80002240 => 0x00058a13 (* mv s4,a1  *)
    | 0x80002244 => 0x00060993 (* mv s3,a2  *)
    | 0x80002248 => 0x00a7fc63 (* bgeu a5,a0,80002260 <ulTaskGenericNotifyTake+0x4c>  *)
    | 0x8000224c => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002250 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002254 => 0xde058593 (* add a1,a1,-544 # 1de0 <__stack_size+0x1c82>  *)
    | 0x80002258 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x8000225c => 0x034100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002260 => 0xc05fe0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80002264 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002268 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x8000226c => 0x01440913 (* add s2,s0,20  *)
    | 0x80002270 => 0x00291693 (* sll a3,s2,0x2  *)
    | 0x80002274 => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80002278 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x8000227c => 0x80080b37 (* lui s6,0x80080  *)
    | 0x80002280 => 0x004b2703 (* lw a4,4(s6) # 80080004 <xCriticalNesting>  *)
    | 0x80002284 => 0x00000a93 (* li s5,0  *)
    | 0x80002288 => 0x00079c63 (* bnez a5,800022a0 <ulTaskGenericNotifyTake+0x8c>  *)
    | 0x8000228c => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002290 => 0x00100693 (* li a3,1  *)
    | 0x80002294 => 0x01303ab3 (* snez s5,s3  *)
    | 0x80002298 => 0x008787b3 (* add a5,a5,s0  *)
    | 0x8000229c => 0x04d78e23 (* sb a3,92(a5)  *)
    | 0x800022a0 => 0x00071463 (* bnez a4,800022a8 <ulTaskGenericNotifyTake+0x94>  *)
    | 0x800022a4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800022a8 => 0x000a8863 (* beqz s5,800022b8 <ulTaskGenericNotifyTake+0xa4>  *)
    | 0x800022ac => 0x00100593 (* li a1,1  *)
    | 0x800022b0 => 0x00098513 (* mv a0,s3  *)
    | 0x800022b4 => 0x83cfe0ef (* jal 800002f0 <prvAddCurrentTaskToDelayedList>  *)
    | 0x800022b8 => 0xdc1fe0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x800022bc => 0x000a8663 (* beqz s5,800022c8 <ulTaskGenericNotifyTake+0xb4>  *)
    | 0x800022c0 => 0x00051463 (* bnez a0,800022c8 <ulTaskGenericNotifyTake+0xb4>  *)
    | 0x800022c4 => 0x00000073 (* ecall  *)
    | 0x800022c8 => 0x30047073 (* csrc mstatus,8  *)
    | 0x800022cc => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800022d0 => 0x00291793 (* sll a5,s2,0x2  *)
    | 0x800022d4 => 0x004b2603 (* lw a2,4(s6)  *)
    | 0x800022d8 => 0x00f70733 (* add a4,a4,a5  *)
    | 0x800022dc => 0x00072503 (* lw a0,0(a4)  *)
    | 0x800022e0 => 0x00050a63 (* beqz a0,800022f4 <ulTaskGenericNotifyTake+0xe0>  *)
    | 0x800022e4 => 0x8981a703 (* lw a4,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800022e8 => 0x040a0463 (* beqz s4,80002330 <ulTaskGenericNotifyTake+0x11c>  *)
    | 0x800022ec => 0x00f707b3 (* add a5,a4,a5  *)
    | 0x800022f0 => 0x0007a023 (* sw zero,0(a5)  *)
    | 0x800022f4 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800022f8 => 0x008787b3 (* add a5,a5,s0  *)
    | 0x800022fc => 0x04078e23 (* sb zero,92(a5)  *)
    | 0x80002300 => 0x00061463 (* bnez a2,80002308 <ulTaskGenericNotifyTake+0xf4>  *)
    | 0x80002304 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002308 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000230c => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80002310 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80002314 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80002318 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000231c => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80002320 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x80002324 => 0x00012b03 (* lw s6,0(sp)  *)
    | 0x80002328 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000232c => 0x00008067 (* ret  *)
    | 0x80002330 => 0xfff50693 (* add a3,a0,-1  *)
    | 0x80002334 => 0x00f707b3 (* add a5,a4,a5  *)
    | 0x80002338 => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x8000233c => 0xfb9ff06f (* j 800022f4 <ulTaskGenericNotifyTake+0xe0>  *)
    (* <xTaskGenericNotifyWait> *)
    | 0x80002340 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80002344 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80002348 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000234c => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80002350 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80002354 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80002358 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000235c => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80002360 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80002364 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80002368 => 0x00200793 (* li a5,2  *)
    | 0x8000236c => 0x00050413 (* mv s0,a0  *)
    | 0x80002370 => 0x00058993 (* mv s3,a1  *)
    | 0x80002374 => 0x00060913 (* mv s2,a2  *)
    | 0x80002378 => 0x00068a93 (* mv s5,a3  *)
    | 0x8000237c => 0x00070b13 (* mv s6,a4  *)
    | 0x80002380 => 0x00a7fc63 (* bgeu a5,a0,80002398 <xTaskGenericNotifyWait+0x58>  *)
    | 0x80002384 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002388 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000238c => 0xe4858593 (* add a1,a1,-440 # 1e48 <__stack_size+0x1cea>  *)
    | 0x80002390 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002394 => 0x6fd0f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002398 => 0xacdfe0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x8000239c => 0x30047073 (* csrc mstatus,8  *)
    | 0x800023a0 => 0x80080a37 (* lui s4,0x80080  *)
    | 0x800023a4 => 0x004a2703 (* lw a4,4(s4) # 80080004 <xCriticalNesting>  *)
    | 0x800023a8 => 0x00000b93 (* li s7,0  *)
    | 0x800023ac => 0x00170793 (* add a5,a4,1  *)
    | 0x800023b0 => 0x00fa2223 (* sw a5,4(s4)  *)
    | 0x800023b4 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800023b8 => 0x008787b3 (* add a5,a5,s0  *)
    | 0x800023bc => 0x05c7c683 (* lbu a3,92(a5)  *)
    | 0x800023c0 => 0x00200793 (* li a5,2  *)
    | 0x800023c4 => 0x02f68a63 (* beq a3,a5,800023f8 <xTaskGenericNotifyWait+0xb8>  *)
    | 0x800023c8 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800023cc => 0x00241693 (* sll a3,s0,0x2  *)
    | 0x800023d0 => 0xfff9c993 (* not s3,s3  *)
    | 0x800023d4 => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x800023d8 => 0x0507a683 (* lw a3,80(a5)  *)
    | 0x800023dc => 0x01603bb3 (* snez s7,s6  *)
    | 0x800023e0 => 0x00d9f9b3 (* and s3,s3,a3  *)
    | 0x800023e4 => 0x0537a823 (* sw s3,80(a5)  *)
    | 0x800023e8 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800023ec => 0x00100693 (* li a3,1  *)
    | 0x800023f0 => 0x008787b3 (* add a5,a5,s0  *)
    | 0x800023f4 => 0x04d78e23 (* sb a3,92(a5)  *)
    | 0x800023f8 => 0x00ea2223 (* sw a4,4(s4)  *)
    | 0x800023fc => 0x00071463 (* bnez a4,80002404 <xTaskGenericNotifyWait+0xc4>  *)
    | 0x80002400 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002404 => 0x000b8863 (* beqz s7,80002414 <xTaskGenericNotifyWait+0xd4>  *)
    | 0x80002408 => 0x00100593 (* li a1,1  *)
    | 0x8000240c => 0x000b0513 (* mv a0,s6  *)
    | 0x80002410 => 0xee1fd0ef (* jal 800002f0 <prvAddCurrentTaskToDelayedList>  *)
    | 0x80002414 => 0xc65fe0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80002418 => 0x000b8663 (* beqz s7,80002424 <xTaskGenericNotifyWait+0xe4>  *)
    | 0x8000241c => 0x00051463 (* bnez a0,80002424 <xTaskGenericNotifyWait+0xe4>  *)
    | 0x80002420 => 0x00000073 (* ecall  *)
    | 0x80002424 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002428 => 0x004a2683 (* lw a3,4(s4)  *)
    | 0x8000242c => 0x000a8e63 (* beqz s5,80002448 <xTaskGenericNotifyWait+0x108>  *)
    | 0x80002430 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002434 => 0x01440713 (* add a4,s0,20  *)
    | 0x80002438 => 0x00271713 (* sll a4,a4,0x2  *)
    | 0x8000243c => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80002440 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80002444 => 0x00faa023 (* sw a5,0(s5)  *)
    | 0x80002448 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x8000244c => 0x00000513 (* li a0,0  *)
    | 0x80002450 => 0x008787b3 (* add a5,a5,s0  *)
    | 0x80002454 => 0x05c7c703 (* lbu a4,92(a5)  *)
    | 0x80002458 => 0x00200793 (* li a5,2  *)
    | 0x8000245c => 0x02f71263 (* bne a4,a5,80002480 <xTaskGenericNotifyWait+0x140>  *)
    | 0x80002460 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002464 => 0x00241713 (* sll a4,s0,0x2  *)
    | 0x80002468 => 0xfff94913 (* not s2,s2  *)
    | 0x8000246c => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80002470 => 0x0507a703 (* lw a4,80(a5)  *)
    | 0x80002474 => 0x00100513 (* li a0,1  *)
    | 0x80002478 => 0x00e97933 (* and s2,s2,a4  *)
    | 0x8000247c => 0x0527a823 (* sw s2,80(a5)  *)
    | 0x80002480 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002484 => 0x00da2223 (* sw a3,4(s4)  *)
    | 0x80002488 => 0x008787b3 (* add a5,a5,s0  *)
    | 0x8000248c => 0x04078e23 (* sb zero,92(a5)  *)
    | 0x80002490 => 0x00069463 (* bnez a3,80002498 <xTaskGenericNotifyWait+0x158>  *)
    | 0x80002494 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002498 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x8000249c => 0x02812403 (* lw s0,40(sp)  *)
    | 0x800024a0 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x800024a4 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x800024a8 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x800024ac => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x800024b0 => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x800024b4 => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x800024b8 => 0x00c12b83 (* lw s7,12(sp)  *)
    | 0x800024bc => 0x03010113 (* add sp,sp,48  *)
    | 0x800024c0 => 0x00008067 (* ret  *)
    (* <xTaskGenericNotify> *)
    | 0x800024c4 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800024c8 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800024cc => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800024d0 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800024d4 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x800024d8 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x800024dc => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800024e0 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800024e4 => 0x00200793 (* li a5,2  *)
    | 0x800024e8 => 0x00050493 (* mv s1,a0  *)
    | 0x800024ec => 0x00058413 (* mv s0,a1  *)
    | 0x800024f0 => 0x00060a13 (* mv s4,a2  *)
    | 0x800024f4 => 0x00068993 (* mv s3,a3  *)
    | 0x800024f8 => 0x00070a93 (* mv s5,a4  *)
    | 0x800024fc => 0x00b7fc63 (* bgeu a5,a1,80002514 <xTaskGenericNotify+0x50>  *)
    | 0x80002500 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002504 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002508 => 0xebd58593 (* add a1,a1,-323 # 1ebd <__stack_size+0x1d5f>  *)
    | 0x8000250c => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002510 => 0x5810f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002514 => 0x00049c63 (* bnez s1,8000252c <xTaskGenericNotify+0x68>  *)
    | 0x80002518 => 0x000025b7 (* lui a1,0x2  *)
    | 0x8000251c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002520 => 0xebe58593 (* add a1,a1,-322 # 1ebe <__stack_size+0x1d60>  *)
    | 0x80002524 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002528 => 0x5690f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000252c => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002530 => 0x80080937 (* lui s2,0x80080  *)
    | 0x80002534 => 0x00492783 (* lw a5,4(s2) # 80080004 <xCriticalNesting>  *)
    | 0x80002538 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000253c => 0x00f92223 (* sw a5,4(s2)  *)
    | 0x80002540 => 0x000a8c63 (* beqz s5,80002558 <xTaskGenericNotify+0x94>  *)
    | 0x80002544 => 0x01440793 (* add a5,s0,20  *)
    | 0x80002548 => 0x00279793 (* sll a5,a5,0x2  *)
    | 0x8000254c => 0x00f487b3 (* add a5,s1,a5  *)
    | 0x80002550 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80002554 => 0x00faa023 (* sw a5,0(s5)  *)
    | 0x80002558 => 0x008487b3 (* add a5,s1,s0  *)
    | 0x8000255c => 0x05c7ca83 (* lbu s5,92(a5)  *)
    | 0x80002560 => 0x00200713 (* li a4,2  *)
    | 0x80002564 => 0x04e78e23 (* sb a4,92(a5)  *)
    | 0x80002568 => 0x00400793 (* li a5,4  *)
    | 0x8000256c => 0x0ffafa93 (* zext.b s5,s5  *)
    | 0x80002570 => 0x1537ec63 (* bltu a5,s3,800026c8 <xTaskGenericNotify+0x204>  *)
    | 0x80002574 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80002578 => 0xbf078793 (* add a5,a5,-1040 # 80014bf0 <_etext+0x1020>  *)
    | 0x8000257c => 0x00299693 (* sll a3,s3,0x2  *)
    | 0x80002580 => 0x00f686b3 (* add a3,a3,a5  *)
    | 0x80002584 => 0x0006a783 (* lw a5,0(a3)  *)
    | 0x80002588 => 0x00078067 (* jr a5  *)
    | 0x8000258c => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x80002590 => 0x00848433 (* add s0,s1,s0  *)
    | 0x80002594 => 0x05042783 (* lw a5,80(s0)  *)
    | 0x80002598 => 0x0147e7b3 (* or a5,a5,s4  *)
    | 0x8000259c => 0x04f42823 (* sw a5,80(s0)  *)
    | 0x800025a0 => 0x00100793 (* li a5,1  *)
    | 0x800025a4 => 0x0afa9a63 (* bne s5,a5,80002658 <xTaskGenericNotify+0x194>  *)
    | 0x800025a8 => 0x0144a783 (* lw a5,20(s1)  *)
    | 0x800025ac => 0x0084a683 (* lw a3,8(s1)  *)
    | 0x800025b0 => 0x00c4a703 (* lw a4,12(s1)  *)
    | 0x800025b4 => 0x0047a603 (* lw a2,4(a5)  *)
    | 0x800025b8 => 0x00e6a423 (* sw a4,8(a3)  *)
    | 0x800025bc => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x800025c0 => 0x00448693 (* add a3,s1,4  *)
    | 0x800025c4 => 0x00d61463 (* bne a2,a3,800025cc <xTaskGenericNotify+0x108>  *)
    | 0x800025c8 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x800025cc => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x800025d0 => 0x8801a583 (* lw a1,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x800025d4 => 0xfff70713 (* add a4,a4,-1  *)
    | 0x800025d8 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x800025dc => 0x02c4a703 (* lw a4,44(s1)  *)
    | 0x800025e0 => 0x00100793 (* li a5,1  *)
    | 0x800025e4 => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x800025e8 => 0x00b7e7b3 (* or a5,a5,a1  *)
    | 0x800025ec => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x800025f0 => 0x01400613 (* li a2,20  *)
    | 0x800025f4 => 0x02c70733 (* mul a4,a4,a2  *)
    | 0x800025f8 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x800025fc => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80002600 => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80002604 => 0x00872603 (* lw a2,8(a4)  *)
    | 0x80002608 => 0x00e4a423 (* sw a4,8(s1)  *)
    | 0x8000260c => 0x00c4a623 (* sw a2,12(s1)  *)
    | 0x80002610 => 0x00d62223 (* sw a3,4(a2)  *)
    | 0x80002614 => 0x00d72423 (* sw a3,8(a4)  *)
    | 0x80002618 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x8000261c => 0x00f4aa23 (* sw a5,20(s1)  *)
    | 0x80002620 => 0x00170713 (* add a4,a4,1  *)
    | 0x80002624 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80002628 => 0x0284a783 (* lw a5,40(s1)  *)
    | 0x8000262c => 0x00078c63 (* beqz a5,80002644 <xTaskGenericNotify+0x180>  *)
    | 0x80002630 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002634 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002638 => 0xf0258593 (* add a1,a1,-254 # 1f02 <__stack_size+0x1da4>  *)
    | 0x8000263c => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002640 => 0x4510f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002644 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002648 => 0x02c7a703 (* lw a4,44(a5)  *)
    | 0x8000264c => 0x02c4a783 (* lw a5,44(s1)  *)
    | 0x80002650 => 0x00f77463 (* bgeu a4,a5,80002658 <xTaskGenericNotify+0x194>  *)
    | 0x80002654 => 0x00000073 (* ecall  *)
    | 0x80002658 => 0x00100513 (* li a0,1  *)
    | 0x8000265c => 0x00492783 (* lw a5,4(s2)  *)
    | 0x80002660 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80002664 => 0x00f92223 (* sw a5,4(s2)  *)
    | 0x80002668 => 0x00079463 (* bnez a5,80002670 <xTaskGenericNotify+0x1ac>  *)
    | 0x8000266c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002670 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80002674 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80002678 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000267c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80002680 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80002684 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80002688 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8000268c => 0x02010113 (* add sp,sp,32  *)
    | 0x80002690 => 0x00008067 (* ret  *)
    | 0x80002694 => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x80002698 => 0x00848433 (* add s0,s1,s0  *)
    | 0x8000269c => 0x05042783 (* lw a5,80(s0)  *)
    | 0x800026a0 => 0x00178793 (* add a5,a5,1  *)
    | 0x800026a4 => 0xef9ff06f (* j 8000259c <xTaskGenericNotify+0xd8>  *)
    | 0x800026a8 => 0x00200793 (* li a5,2  *)
    | 0x800026ac => 0x00000513 (* li a0,0  *)
    | 0x800026b0 => 0xfafa86e3 (* beq s5,a5,8000265c <xTaskGenericNotify+0x198>  *)
    | 0x800026b4 => 0x01440413 (* add s0,s0,20  *)
    | 0x800026b8 => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x800026bc => 0x00848433 (* add s0,s1,s0  *)
    | 0x800026c0 => 0x01442023 (* sw s4,0(s0)  *)
    | 0x800026c4 => 0xeddff06f (* j 800025a0 <xTaskGenericNotify+0xdc>  *)
    | 0x800026c8 => 0x8841a783 (* lw a5,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x800026cc => 0xec078ae3 (* beqz a5,800025a0 <xTaskGenericNotify+0xdc>  *)
    | 0x800026d0 => 0x000025b7 (* lui a1,0x2  *)
    | 0x800026d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800026d8 => 0xef358593 (* add a1,a1,-269 # 1ef3 <__stack_size+0x1d95>  *)
    | 0x800026dc => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800026e0 => 0x3b10f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800026e4 => 0xebdff06f (* j 800025a0 <xTaskGenericNotify+0xdc>  *)
    (* <xTaskGenericNotifyFromISR> *)
    | 0x800026e8 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800026ec => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800026f0 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800026f4 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800026f8 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800026fc => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80002700 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80002704 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80002708 => 0x00050913 (* mv s2,a0  *)
    | 0x8000270c => 0x00058413 (* mv s0,a1  *)
    | 0x80002710 => 0x00060a13 (* mv s4,a2  *)
    | 0x80002714 => 0x00068993 (* mv s3,a3  *)
    | 0x80002718 => 0x00070a93 (* mv s5,a4  *)
    | 0x8000271c => 0x00078493 (* mv s1,a5  *)
    | 0x80002720 => 0x00051c63 (* bnez a0,80002738 <xTaskGenericNotifyFromISR+0x50>  *)
    | 0x80002724 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002728 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000272c => 0xf3758593 (* add a1,a1,-201 # 1f37 <__stack_size+0x1dd9>  *)
    | 0x80002730 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002734 => 0x35d0f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002738 => 0x00200793 (* li a5,2  *)
    | 0x8000273c => 0x0087fc63 (* bgeu a5,s0,80002754 <xTaskGenericNotifyFromISR+0x6c>  *)
    | 0x80002740 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002744 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002748 => 0xf3858593 (* add a1,a1,-200 # 1f38 <__stack_size+0x1dda>  *)
    | 0x8000274c => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002750 => 0x3410f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002754 => 0x000a8c63 (* beqz s5,8000276c <xTaskGenericNotifyFromISR+0x84>  *)
    | 0x80002758 => 0x01440793 (* add a5,s0,20  *)
    | 0x8000275c => 0x00279793 (* sll a5,a5,0x2  *)
    | 0x80002760 => 0x00f907b3 (* add a5,s2,a5  *)
    | 0x80002764 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80002768 => 0x00faa023 (* sw a5,0(s5)  *)
    | 0x8000276c => 0x008907b3 (* add a5,s2,s0  *)
    | 0x80002770 => 0x05c7ca83 (* lbu s5,92(a5)  *)
    | 0x80002774 => 0x00200713 (* li a4,2  *)
    | 0x80002778 => 0x04e78e23 (* sb a4,92(a5)  *)
    | 0x8000277c => 0x00400793 (* li a5,4  *)
    | 0x80002780 => 0x0ffafa93 (* zext.b s5,s5  *)
    | 0x80002784 => 0x1537ec63 (* bltu a5,s3,800028dc <xTaskGenericNotifyFromISR+0x1f4>  *)
    | 0x80002788 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x8000278c => 0xc0478793 (* add a5,a5,-1020 # 80014c04 <_etext+0x1034>  *)
    | 0x80002790 => 0x00299693 (* sll a3,s3,0x2  *)
    | 0x80002794 => 0x00f686b3 (* add a3,a3,a5  *)
    | 0x80002798 => 0x0006a783 (* lw a5,0(a3)  *)
    | 0x8000279c => 0x00078067 (* jr a5  *)
    | 0x800027a0 => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x800027a4 => 0x00890433 (* add s0,s2,s0  *)
    | 0x800027a8 => 0x05042783 (* lw a5,80(s0)  *)
    | 0x800027ac => 0x0147e7b3 (* or a5,a5,s4  *)
    | 0x800027b0 => 0x04f42823 (* sw a5,80(s0)  *)
    | 0x800027b4 => 0x00100793 (* li a5,1  *)
    | 0x800027b8 => 0x0cfa9463 (* bne s5,a5,80002880 <xTaskGenericNotifyFromISR+0x198>  *)
    | 0x800027bc => 0x02892783 (* lw a5,40(s2)  *)
    | 0x800027c0 => 0x00078c63 (* beqz a5,800027d8 <xTaskGenericNotifyFromISR+0xf0>  *)
    | 0x800027c4 => 0x000025b7 (* lui a1,0x2  *)
    | 0x800027c8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800027cc => 0xf8d58593 (* add a1,a1,-115 # 1f8d <__stack_size+0x1e2f>  *)
    | 0x800027d0 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800027d4 => 0x2bd0f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800027d8 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800027dc => 0x02c92683 (* lw a3,44(s2)  *)
    | 0x800027e0 => 0x10079e63 (* bnez a5,800028fc <xTaskGenericNotifyFromISR+0x214>  *)
    | 0x800027e4 => 0x01492783 (* lw a5,20(s2)  *)
    | 0x800027e8 => 0x00892603 (* lw a2,8(s2)  *)
    | 0x800027ec => 0x00c92703 (* lw a4,12(s2)  *)
    | 0x800027f0 => 0x0047a583 (* lw a1,4(a5)  *)
    | 0x800027f4 => 0x00e62423 (* sw a4,8(a2)  *)
    | 0x800027f8 => 0x00c72223 (* sw a2,4(a4)  *)
    | 0x800027fc => 0x00490613 (* add a2,s2,4  *)
    | 0x80002800 => 0x00c59463 (* bne a1,a2,80002808 <xTaskGenericNotifyFromISR+0x120>  *)
    | 0x80002804 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x80002808 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x8000280c => 0xfff70713 (* add a4,a4,-1  *)
    | 0x80002810 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x80002814 => 0x8801a583 (* lw a1,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002818 => 0x00100793 (* li a5,1  *)
    | 0x8000281c => 0x00d797b3 (* sll a5,a5,a3  *)
    | 0x80002820 => 0x00b7e7b3 (* or a5,a5,a1  *)
    | 0x80002824 => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002828 => 0x01400793 (* li a5,20  *)
    | 0x8000282c => 0x02f687b3 (* mul a5,a3,a5  *)
    | 0x80002830 => 0xc6418713 (* add a4,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80002834 => 0x00f70733 (* add a4,a4,a5  *)
    | 0x80002838 => 0x00472783 (* lw a5,4(a4)  *)
    | 0x8000283c => 0x0087a583 (* lw a1,8(a5)  *)
    | 0x80002840 => 0x00f92423 (* sw a5,8(s2)  *)
    | 0x80002844 => 0x00b92623 (* sw a1,12(s2)  *)
    | 0x80002848 => 0x00c5a223 (* sw a2,4(a1)  *)
    | 0x8000284c => 0x00c7a423 (* sw a2,8(a5)  *)
    | 0x80002850 => 0x00e92a23 (* sw a4,20(s2)  *)
    | 0x80002854 => 0x00072783 (* lw a5,0(a4)  *)
    | 0x80002858 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000285c => 0x00f72023 (* sw a5,0(a4)  *)
    | 0x80002860 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002864 => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80002868 => 0x00d7fc63 (* bgeu a5,a3,80002880 <xTaskGenericNotifyFromISR+0x198>  *)
    | 0x8000286c => 0x00048663 (* beqz s1,80002878 <xTaskGenericNotifyFromISR+0x190>  *)
    | 0x80002870 => 0x00100793 (* li a5,1  *)
    | 0x80002874 => 0x00f4a023 (* sw a5,0(s1)  *)
    | 0x80002878 => 0x00100713 (* li a4,1  *)
    | 0x8000287c => 0x86e1aa23 (* sw a4,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x80002880 => 0x00100513 (* li a0,1  *)
    | 0x80002884 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80002888 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000288c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80002890 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80002894 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80002898 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000289c => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x800028a0 => 0x02010113 (* add sp,sp,32  *)
    | 0x800028a4 => 0x00008067 (* ret  *)
    | 0x800028a8 => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x800028ac => 0x00890433 (* add s0,s2,s0  *)
    | 0x800028b0 => 0x05042783 (* lw a5,80(s0)  *)
    | 0x800028b4 => 0x00178793 (* add a5,a5,1  *)
    | 0x800028b8 => 0xef9ff06f (* j 800027b0 <xTaskGenericNotifyFromISR+0xc8>  *)
    | 0x800028bc => 0x00200793 (* li a5,2  *)
    | 0x800028c0 => 0x00000513 (* li a0,0  *)
    | 0x800028c4 => 0xfcfa80e3 (* beq s5,a5,80002884 <xTaskGenericNotifyFromISR+0x19c>  *)
    | 0x800028c8 => 0x01440413 (* add s0,s0,20  *)
    | 0x800028cc => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x800028d0 => 0x00890433 (* add s0,s2,s0  *)
    | 0x800028d4 => 0x01442023 (* sw s4,0(s0)  *)
    | 0x800028d8 => 0xeddff06f (* j 800027b4 <xTaskGenericNotifyFromISR+0xcc>  *)
    | 0x800028dc => 0x8841a783 (* lw a5,-1916(gp) # 80080084 <xTickCount>  *)
    | 0x800028e0 => 0xec078ae3 (* beqz a5,800027b4 <xTaskGenericNotifyFromISR+0xcc>  *)
    | 0x800028e4 => 0x000025b7 (* lui a1,0x2  *)
    | 0x800028e8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800028ec => 0xf8258593 (* add a1,a1,-126 # 1f82 <__stack_size+0x1e24>  *)
    | 0x800028f0 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800028f4 => 0x19d0f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800028f8 => 0xebdff06f (* j 800027b4 <xTaskGenericNotifyFromISR+0xcc>  *)
    | 0x800028fc => 0xc2818713 (* add a4,gp,-984 # 80080428 <xPendingReadyList>  *)
    | 0x80002900 => 0x00472783 (* lw a5,4(a4)  *)
    | 0x80002904 => 0x01890613 (* add a2,s2,24  *)
    | 0x80002908 => 0x0087a583 (* lw a1,8(a5)  *)
    | 0x8000290c => 0x00f92e23 (* sw a5,28(s2)  *)
    | 0x80002910 => 0x02b92023 (* sw a1,32(s2)  *)
    | 0x80002914 => 0x00c5a223 (* sw a2,4(a1)  *)
    | 0x80002918 => 0x00c7a423 (* sw a2,8(a5)  *)
    | 0x8000291c => 0x02e92423 (* sw a4,40(s2)  *)
    | 0x80002920 => 0xf35ff06f (* j 80002854 <xTaskGenericNotifyFromISR+0x16c>  *)
    (* <vTaskGenericNotifyGiveFromISR> *)
    | 0x80002924 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80002928 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000292c => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80002930 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80002934 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80002938 => 0x00050413 (* mv s0,a0  *)
    | 0x8000293c => 0x00058493 (* mv s1,a1  *)
    | 0x80002940 => 0x00060913 (* mv s2,a2  *)
    | 0x80002944 => 0x00051c63 (* bnez a0,8000295c <vTaskGenericNotifyGiveFromISR+0x38>  *)
    | 0x80002948 => 0x000025b7 (* lui a1,0x2  *)
    | 0x8000294c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002950 => 0xfe958593 (* add a1,a1,-23 # 1fe9 <__stack_size+0x1e8b>  *)
    | 0x80002954 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002958 => 0x1390f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000295c => 0x00200793 (* li a5,2  *)
    | 0x80002960 => 0x0097fc63 (* bgeu a5,s1,80002978 <vTaskGenericNotifyGiveFromISR+0x54>  *)
    | 0x80002964 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002968 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000296c => 0xfea58593 (* add a1,a1,-22 # 1fea <__stack_size+0x1e8c>  *)
    | 0x80002970 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002974 => 0x11d0f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002978 => 0x009407b3 (* add a5,s0,s1  *)
    | 0x8000297c => 0x00200693 (* li a3,2  *)
    | 0x80002980 => 0x00249493 (* sll s1,s1,0x2  *)
    | 0x80002984 => 0x05c7c703 (* lbu a4,92(a5)  *)
    | 0x80002988 => 0x009404b3 (* add s1,s0,s1  *)
    | 0x8000298c => 0x04d78e23 (* sb a3,92(a5)  *)
    | 0x80002990 => 0x0504a783 (* lw a5,80(s1)  *)
    | 0x80002994 => 0x00178793 (* add a5,a5,1  *)
    | 0x80002998 => 0x04f4a823 (* sw a5,80(s1)  *)
    | 0x8000299c => 0x00100793 (* li a5,1  *)
    | 0x800029a0 => 0x0cf71463 (* bne a4,a5,80002a68 <vTaskGenericNotifyGiveFromISR+0x144>  *)
    | 0x800029a4 => 0x02842783 (* lw a5,40(s0)  *)
    | 0x800029a8 => 0x00078c63 (* beqz a5,800029c0 <vTaskGenericNotifyGiveFromISR+0x9c>  *)
    | 0x800029ac => 0x000025b7 (* lui a1,0x2  *)
    | 0x800029b0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800029b4 => 0x01358593 (* add a1,a1,19 # 2013 <__stack_size+0x1eb5>  *)
    | 0x800029b8 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x800029bc => 0x0d50f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800029c0 => 0x8601a783 (* lw a5,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800029c4 => 0x02c42703 (* lw a4,44(s0)  *)
    | 0x800029c8 => 0x0a079c63 (* bnez a5,80002a80 <vTaskGenericNotifyGiveFromISR+0x15c>  *)
    | 0x800029cc => 0x01442783 (* lw a5,20(s0)  *)
    | 0x800029d0 => 0x00842603 (* lw a2,8(s0)  *)
    | 0x800029d4 => 0x00c42683 (* lw a3,12(s0)  *)
    | 0x800029d8 => 0x0047a583 (* lw a1,4(a5)  *)
    | 0x800029dc => 0x00d62423 (* sw a3,8(a2)  *)
    | 0x800029e0 => 0x00c6a223 (* sw a2,4(a3)  *)
    | 0x800029e4 => 0x00440613 (* add a2,s0,4  *)
    | 0x800029e8 => 0x00c59463 (* bne a1,a2,800029f0 <vTaskGenericNotifyGiveFromISR+0xcc>  *)
    | 0x800029ec => 0x00d7a223 (* sw a3,4(a5)  *)
    | 0x800029f0 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x800029f4 => 0xfff68693 (* add a3,a3,-1  *)
    | 0x800029f8 => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x800029fc => 0x8801a583 (* lw a1,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002a00 => 0x00100793 (* li a5,1  *)
    | 0x80002a04 => 0x00e797b3 (* sll a5,a5,a4  *)
    | 0x80002a08 => 0x00b7e7b3 (* or a5,a5,a1  *)
    | 0x80002a0c => 0x88f1a023 (* sw a5,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80002a10 => 0x01400693 (* li a3,20  *)
    | 0x80002a14 => 0x02d706b3 (* mul a3,a4,a3  *)
    | 0x80002a18 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80002a1c => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80002a20 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80002a24 => 0x0086a583 (* lw a1,8(a3)  *)
    | 0x80002a28 => 0x00d42423 (* sw a3,8(s0)  *)
    | 0x80002a2c => 0x00b42623 (* sw a1,12(s0)  *)
    | 0x80002a30 => 0x00c5a223 (* sw a2,4(a1)  *)
    | 0x80002a34 => 0x00c6a423 (* sw a2,8(a3)  *)
    | 0x80002a38 => 0x00f42a23 (* sw a5,20(s0)  *)
    | 0x80002a3c => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x80002a40 => 0x00168693 (* add a3,a3,1  *)
    | 0x80002a44 => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x80002a48 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002a4c => 0x02c7a783 (* lw a5,44(a5)  *)
    | 0x80002a50 => 0x00e7fc63 (* bgeu a5,a4,80002a68 <vTaskGenericNotifyGiveFromISR+0x144>  *)
    | 0x80002a54 => 0x00090663 (* beqz s2,80002a60 <vTaskGenericNotifyGiveFromISR+0x13c>  *)
    | 0x80002a58 => 0x00100793 (* li a5,1  *)
    | 0x80002a5c => 0x00f92023 (* sw a5,0(s2)  *)
    | 0x80002a60 => 0x00100713 (* li a4,1  *)
    | 0x80002a64 => 0x86e1aa23 (* sw a4,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x80002a68 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80002a6c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80002a70 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80002a74 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80002a78 => 0x01010113 (* add sp,sp,16  *)
    | 0x80002a7c => 0x00008067 (* ret  *)
    | 0x80002a80 => 0xc2818793 (* add a5,gp,-984 # 80080428 <xPendingReadyList>  *)
    | 0x80002a84 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80002a88 => 0x01840613 (* add a2,s0,24  *)
    | 0x80002a8c => 0x0086a583 (* lw a1,8(a3)  *)
    | 0x80002a90 => 0x00d42e23 (* sw a3,28(s0)  *)
    | 0x80002a94 => 0x02b42023 (* sw a1,32(s0)  *)
    | 0x80002a98 => 0x00c5a223 (* sw a2,4(a1)  *)
    | 0x80002a9c => 0x00c6a423 (* sw a2,8(a3)  *)
    | 0x80002aa0 => 0x02f42423 (* sw a5,40(s0)  *)
    | 0x80002aa4 => 0xf99ff06f (* j 80002a3c <vTaskGenericNotifyGiveFromISR+0x118>  *)
    (* <xTaskGenericNotifyStateClear> *)
    | 0x80002aa8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80002aac => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80002ab0 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80002ab4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80002ab8 => 0x00200793 (* li a5,2  *)
    | 0x80002abc => 0x00050413 (* mv s0,a0  *)
    | 0x80002ac0 => 0x00058493 (* mv s1,a1  *)
    | 0x80002ac4 => 0x00b7fc63 (* bgeu a5,a1,80002adc <xTaskGenericNotifyStateClear+0x34>  *)
    | 0x80002ac8 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002acc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002ad0 => 0x06b58593 (* add a1,a1,107 # 206b <__stack_size+0x1f0d>  *)
    | 0x80002ad4 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002ad8 => 0x7b80f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002adc => 0x00041463 (* bnez s0,80002ae4 <xTaskGenericNotifyStateClear+0x3c>  *)
    | 0x80002ae0 => 0x8981a403 (* lw s0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002ae4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002ae8 => 0x00940433 (* add s0,s0,s1  *)
    | 0x80002aec => 0x05c44683 (* lbu a3,92(s0)  *)
    | 0x80002af0 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80002af4 => 0x00200713 (* li a4,2  *)
    | 0x80002af8 => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80002afc => 0x00000513 (* li a0,0  *)
    | 0x80002b00 => 0x00e69663 (* bne a3,a4,80002b0c <xTaskGenericNotifyStateClear+0x64>  *)
    | 0x80002b04 => 0x04040e23 (* sb zero,92(s0)  *)
    | 0x80002b08 => 0x00100513 (* li a0,1  *)
    | 0x80002b0c => 0x00079463 (* bnez a5,80002b14 <xTaskGenericNotifyStateClear+0x6c>  *)
    | 0x80002b10 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002b14 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80002b18 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80002b1c => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80002b20 => 0x01010113 (* add sp,sp,16  *)
    | 0x80002b24 => 0x00008067 (* ret  *)
    (* <ulTaskGenericNotifyValueClear> *)
    | 0x80002b28 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80002b2c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80002b30 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80002b34 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80002b38 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80002b3c => 0x00200793 (* li a5,2  *)
    | 0x80002b40 => 0x00050413 (* mv s0,a0  *)
    | 0x80002b44 => 0x00058913 (* mv s2,a1  *)
    | 0x80002b48 => 0x00060493 (* mv s1,a2  *)
    | 0x80002b4c => 0x00b7fc63 (* bgeu a5,a1,80002b64 <ulTaskGenericNotifyValueClear+0x3c>  *)
    | 0x80002b50 => 0x000025b7 (* lui a1,0x2  *)
    | 0x80002b54 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002b58 => 0x09258593 (* add a1,a1,146 # 2092 <__stack_size+0x1f34>  *)
    | 0x80002b5c => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80002b60 => 0x7300f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002b64 => 0x00041463 (* bnez s0,80002b6c <ulTaskGenericNotifyValueClear+0x44>  *)
    | 0x80002b68 => 0x8981a403 (* lw s0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80002b6c => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002b70 => 0x00291913 (* sll s2,s2,0x2  *)
    | 0x80002b74 => 0x01240433 (* add s0,s0,s2  *)
    | 0x80002b78 => 0x05042503 (* lw a0,80(s0)  *)
    | 0x80002b7c => 0x05042703 (* lw a4,80(s0)  *)
    | 0x80002b80 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80002b84 => 0xfff4c493 (* not s1,s1  *)
    | 0x80002b88 => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80002b8c => 0x00e4f4b3 (* and s1,s1,a4  *)
    | 0x80002b90 => 0x04942823 (* sw s1,80(s0)  *)
    | 0x80002b94 => 0x00079463 (* bnez a5,80002b9c <ulTaskGenericNotifyValueClear+0x74>  *)
    | 0x80002b98 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002b9c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80002ba0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80002ba4 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80002ba8 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80002bac => 0x01010113 (* add sp,sp,16  *)
    | 0x80002bb0 => 0x00008067 (* ret  *)
    (* <vListInitialise> *)
    | 0x80002bb4 => 0x00850793 (* add a5,a0,8  *)
    | 0x80002bb8 => 0xfff00713 (* li a4,-1  *)
    | 0x80002bbc => 0x00f52223 (* sw a5,4(a0)  *)
    | 0x80002bc0 => 0x00e52423 (* sw a4,8(a0)  *)
    | 0x80002bc4 => 0x00f52623 (* sw a5,12(a0)  *)
    | 0x80002bc8 => 0x00f52823 (* sw a5,16(a0)  *)
    | 0x80002bcc => 0x00052023 (* sw zero,0(a0)  *)
    | 0x80002bd0 => 0x00008067 (* ret  *)
    (* <vListInitialiseItem> *)
    | 0x80002bd4 => 0x00052823 (* sw zero,16(a0)  *)
    | 0x80002bd8 => 0x00008067 (* ret  *)
    (* <vListInsertEnd> *)
    | 0x80002bdc => 0x00452783 (* lw a5,4(a0)  *)
    | 0x80002be0 => 0x0087a703 (* lw a4,8(a5)  *)
    | 0x80002be4 => 0x00f5a223 (* sw a5,4(a1)  *)
    | 0x80002be8 => 0x00e5a423 (* sw a4,8(a1)  *)
    | 0x80002bec => 0x00b72223 (* sw a1,4(a4)  *)
    | 0x80002bf0 => 0x00b7a423 (* sw a1,8(a5)  *)
    | 0x80002bf4 => 0x00052783 (* lw a5,0(a0)  *)
    | 0x80002bf8 => 0x00a5a823 (* sw a0,16(a1)  *)
    | 0x80002bfc => 0x00178793 (* add a5,a5,1  *)
    | 0x80002c00 => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x80002c04 => 0x00008067 (* ret  *)
    (* <vListInsert> *)
    | 0x80002c08 => 0x0005a683 (* lw a3,0(a1)  *)
    | 0x80002c0c => 0xfff00793 (* li a5,-1  *)
    | 0x80002c10 => 0x00850713 (* add a4,a0,8  *)
    | 0x80002c14 => 0x02f69863 (* bne a3,a5,80002c44 <vListInsert+0x3c>  *)
    | 0x80002c18 => 0x01052783 (* lw a5,16(a0)  *)
    | 0x80002c1c => 0x0047a703 (* lw a4,4(a5)  *)
    | 0x80002c20 => 0x00e5a223 (* sw a4,4(a1)  *)
    | 0x80002c24 => 0x00b72423 (* sw a1,8(a4)  *)
    | 0x80002c28 => 0x00f5a423 (* sw a5,8(a1)  *)
    | 0x80002c2c => 0x00b7a223 (* sw a1,4(a5)  *)
    | 0x80002c30 => 0x00052783 (* lw a5,0(a0)  *)
    | 0x80002c34 => 0x00a5a823 (* sw a0,16(a1)  *)
    | 0x80002c38 => 0x00178793 (* add a5,a5,1  *)
    | 0x80002c3c => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x80002c40 => 0x00008067 (* ret  *)
    | 0x80002c44 => 0x00070793 (* mv a5,a4  *)
    | 0x80002c48 => 0x00472703 (* lw a4,4(a4)  *)
    | 0x80002c4c => 0x00072603 (* lw a2,0(a4)  *)
    | 0x80002c50 => 0xfec6fae3 (* bgeu a3,a2,80002c44 <vListInsert+0x3c>  *)
    | 0x80002c54 => 0xfc9ff06f (* j 80002c1c <vListInsert+0x14>  *)
    (* <uxListRemove> *)
    | 0x80002c58 => 0x00452683 (* lw a3,4(a0)  *)
    | 0x80002c5c => 0x00852703 (* lw a4,8(a0)  *)
    | 0x80002c60 => 0x01052783 (* lw a5,16(a0)  *)
    | 0x80002c64 => 0x00e6a423 (* sw a4,8(a3)  *)
    | 0x80002c68 => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x80002c6c => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80002c70 => 0x00a69463 (* bne a3,a0,80002c78 <uxListRemove+0x20>  *)
    | 0x80002c74 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x80002c78 => 0x00052823 (* sw zero,16(a0)  *)
    | 0x80002c7c => 0x0007a503 (* lw a0,0(a5)  *)
    | 0x80002c80 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x80002c84 => 0x00a7a023 (* sw a0,0(a5)  *)
    | 0x80002c88 => 0x00008067 (* ret  *)
    (* <prvIsQueueEmpty> *)
    | 0x80002c8c => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002c90 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80002c94 => 0x03852503 (* lw a0,56(a0)  *)
    | 0x80002c98 => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80002c9c => 0x00153513 (* seqz a0,a0  *)
    | 0x80002ca0 => 0x00079463 (* bnez a5,80002ca8 <prvIsQueueEmpty+0x1c>  *)
    | 0x80002ca4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002ca8 => 0x00008067 (* ret  *)
    (* <prvCopyDataToQueue> *)
    | 0x80002cac => 0xff010113 (* add sp,sp,-16  *)
    | 0x80002cb0 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80002cb4 => 0x00060913 (* mv s2,a2  *)
    | 0x80002cb8 => 0x04052603 (* lw a2,64(a0)  *)
    | 0x80002cbc => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80002cc0 => 0x03852483 (* lw s1,56(a0)  *)
    | 0x80002cc4 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80002cc8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80002ccc => 0x00050413 (* mv s0,a0  *)
    | 0x80002cd0 => 0x02061c63 (* bnez a2,80002d08 <prvCopyDataToQueue+0x5c>  *)
    | 0x80002cd4 => 0x00052783 (* lw a5,0(a0)  *)
    | 0x80002cd8 => 0x04079a63 (* bnez a5,80002d2c <prvCopyDataToQueue+0x80>  *)
    | 0x80002cdc => 0x00852503 (* lw a0,8(a0)  *)
    | 0x80002ce0 => 0xa98ff0ef (* jal 80001f78 <xTaskPriorityDisinherit>  *)
    | 0x80002ce4 => 0x00042423 (* sw zero,8(s0)  *)
    | 0x80002ce8 => 0x00148493 (* add s1,s1,1  *)
    | 0x80002cec => 0x02942c23 (* sw s1,56(s0)  *)
    | 0x80002cf0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80002cf4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80002cf8 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80002cfc => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80002d00 => 0x01010113 (* add sp,sp,16  *)
    | 0x80002d04 => 0x00008067 (* ret  *)
    | 0x80002d08 => 0x02091c63 (* bnez s2,80002d40 <prvCopyDataToQueue+0x94>  *)
    | 0x80002d0c => 0x00452503 (* lw a0,4(a0)  *)
    | 0x80002d10 => 0x315100ef (* jal 80013824 <memcpy>  *)
    | 0x80002d14 => 0x00442783 (* lw a5,4(s0)  *)
    | 0x80002d18 => 0x04042703 (* lw a4,64(s0)  *)
    | 0x80002d1c => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80002d20 => 0x00842703 (* lw a4,8(s0)  *)
    | 0x80002d24 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x80002d28 => 0x00e7f663 (* bgeu a5,a4,80002d34 <prvCopyDataToQueue+0x88>  *)
    | 0x80002d2c => 0x00000513 (* li a0,0  *)
    | 0x80002d30 => 0xfb9ff06f (* j 80002ce8 <prvCopyDataToQueue+0x3c>  *)
    | 0x80002d34 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80002d38 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x80002d3c => 0xff1ff06f (* j 80002d2c <prvCopyDataToQueue+0x80>  *)
    | 0x80002d40 => 0x00c52503 (* lw a0,12(a0)  *)
    | 0x80002d44 => 0x2e1100ef (* jal 80013824 <memcpy>  *)
    | 0x80002d48 => 0x04042703 (* lw a4,64(s0)  *)
    | 0x80002d4c => 0x00c42783 (* lw a5,12(s0)  *)
    | 0x80002d50 => 0x40e006b3 (* neg a3,a4  *)
    | 0x80002d54 => 0x40e787b3 (* sub a5,a5,a4  *)
    | 0x80002d58 => 0x00042703 (* lw a4,0(s0)  *)
    | 0x80002d5c => 0x00f42623 (* sw a5,12(s0)  *)
    | 0x80002d60 => 0x00e7f863 (* bgeu a5,a4,80002d70 <prvCopyDataToQueue+0xc4>  *)
    | 0x80002d64 => 0x00842783 (* lw a5,8(s0)  *)
    | 0x80002d68 => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80002d6c => 0x00f42623 (* sw a5,12(s0)  *)
    | 0x80002d70 => 0x00200793 (* li a5,2  *)
    | 0x80002d74 => 0x00000513 (* li a0,0  *)
    | 0x80002d78 => 0xf6f918e3 (* bne s2,a5,80002ce8 <prvCopyDataToQueue+0x3c>  *)
    | 0x80002d7c => 0xf60486e3 (* beqz s1,80002ce8 <prvCopyDataToQueue+0x3c>  *)
    | 0x80002d80 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x80002d84 => 0xf65ff06f (* j 80002ce8 <prvCopyDataToQueue+0x3c>  *)
    (* <prvCopyDataFromQueue> *)
    | 0x80002d88 => 0x00050793 (* mv a5,a0  *)
    | 0x80002d8c => 0x0407a603 (* lw a2,64(a5)  *)
    | 0x80002d90 => 0x00058513 (* mv a0,a1  *)
    | 0x80002d94 => 0x02060463 (* beqz a2,80002dbc <prvCopyDataFromQueue+0x34>  *)
    | 0x80002d98 => 0x00c7a703 (* lw a4,12(a5)  *)
    | 0x80002d9c => 0x0087a683 (* lw a3,8(a5)  *)
    | 0x80002da0 => 0x00c70733 (* add a4,a4,a2  *)
    | 0x80002da4 => 0x00e7a623 (* sw a4,12(a5)  *)
    | 0x80002da8 => 0x00d76663 (* bltu a4,a3,80002db4 <prvCopyDataFromQueue+0x2c>  *)
    | 0x80002dac => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80002db0 => 0x00e7a623 (* sw a4,12(a5)  *)
    | 0x80002db4 => 0x00c7a583 (* lw a1,12(a5)  *)
    | 0x80002db8 => 0x26d1006f (* j 80013824 <memcpy>  *)
    | 0x80002dbc => 0x00008067 (* ret  *)
    (* <prvNotifyQueueSetContainer> *)
    | 0x80002dc0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80002dc4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80002dc8 => 0x04852403 (* lw s0,72(a0)  *)
    | 0x80002dcc => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80002dd0 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80002dd4 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80002dd8 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x80002ddc => 0x00041c63 (* bnez s0,80002df4 <prvNotifyQueueSetContainer+0x34>  *)
    | 0x80002de0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80002de4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002de8 => 0xcf858593 (* add a1,a1,-776 # cf8 <__stack_size+0xb9a>  *)
    | 0x80002dec => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80002df0 => 0x4a00f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002df4 => 0x03842703 (* lw a4,56(s0)  *)
    | 0x80002df8 => 0x03c42783 (* lw a5,60(s0)  *)
    | 0x80002dfc => 0x00f76c63 (* bltu a4,a5,80002e14 <prvNotifyQueueSetContainer+0x54>  *)
    | 0x80002e00 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80002e04 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002e08 => 0xcf958593 (* add a1,a1,-775 # cf9 <__stack_size+0xb9b>  *)
    | 0x80002e0c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80002e10 => 0x4800f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002e14 => 0x03842703 (* lw a4,56(s0)  *)
    | 0x80002e18 => 0x03c42783 (* lw a5,60(s0)  *)
    | 0x80002e1c => 0x00000913 (* li s2,0  *)
    | 0x80002e20 => 0x04f77063 (* bgeu a4,a5,80002e60 <prvNotifyQueueSetContainer+0xa0>  *)
    | 0x80002e24 => 0x04544483 (* lbu s1,69(s0)  *)
    | 0x80002e28 => 0x00000613 (* li a2,0  *)
    | 0x80002e2c => 0x00c10593 (* add a1,sp,12  *)
    | 0x80002e30 => 0x00040513 (* mv a0,s0  *)
    | 0x80002e34 => 0xe79ff0ef (* jal 80002cac <prvCopyDataToQueue>  *)
    | 0x80002e38 => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x80002e3c => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x80002e40 => 0xfff00793 (* li a5,-1  *)
    | 0x80002e44 => 0x00050913 (* mv s2,a0  *)
    | 0x80002e48 => 0x02f49a63 (* bne s1,a5,80002e7c <prvNotifyQueueSetContainer+0xbc>  *)
    | 0x80002e4c => 0x02442783 (* lw a5,36(s0)  *)
    | 0x80002e50 => 0x00078863 (* beqz a5,80002e60 <prvNotifyQueueSetContainer+0xa0>  *)
    | 0x80002e54 => 0x02440513 (* add a0,s0,36  *)
    | 0x80002e58 => 0xbedfe0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80002e5c => 0x04051c63 (* bnez a0,80002eb4 <prvNotifyQueueSetContainer+0xf4>  *)
    | 0x80002e60 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80002e64 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80002e68 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80002e6c => 0x00090513 (* mv a0,s2  *)
    | 0x80002e70 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80002e74 => 0x02010113 (* add sp,sp,32  *)
    | 0x80002e78 => 0x00008067 (* ret  *)
    | 0x80002e7c => 0x808fe0ef (* jal 80000e84 <uxTaskGetNumberOfTasks>  *)
    | 0x80002e80 => 0xfea4f0e3 (* bgeu s1,a0,80002e60 <prvNotifyQueueSetContainer+0xa0>  *)
    | 0x80002e84 => 0x07f00793 (* li a5,127  *)
    | 0x80002e88 => 0x00f49c63 (* bne s1,a5,80002ea0 <prvNotifyQueueSetContainer+0xe0>  *)
    | 0x80002e8c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80002e90 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80002e94 => 0xd1958593 (* add a1,a1,-743 # d19 <__stack_size+0xbbb>  *)
    | 0x80002e98 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80002e9c => 0x3f40f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80002ea0 => 0x00148493 (* add s1,s1,1  *)
    | 0x80002ea4 => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x80002ea8 => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x80002eac => 0x049402a3 (* sb s1,69(s0)  *)
    | 0x80002eb0 => 0xfb1ff06f (* j 80002e60 <prvNotifyQueueSetContainer+0xa0>  *)
    | 0x80002eb4 => 0x00100913 (* li s2,1  *)
    | 0x80002eb8 => 0xfa9ff06f (* j 80002e60 <prvNotifyQueueSetContainer+0xa0>  *)
    (* <prvUnlockQueue> *)
    | 0x80002ebc => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80002ec0 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80002ec4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80002ec8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80002ecc => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80002ed0 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80002ed4 => 0x00050413 (* mv s0,a0  *)
    | 0x80002ed8 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002edc => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80002ee0 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80002ee4 => 0x04554903 (* lbu s2,69(a0)  *)
    | 0x80002ee8 => 0x02450993 (* add s3,a0,36  *)
    | 0x80002eec => 0x00178793 (* add a5,a5,1  *)
    | 0x80002ef0 => 0x01891913 (* sll s2,s2,0x18  *)
    | 0x80002ef4 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80002ef8 => 0x41895913 (* sra s2,s2,0x18  *)
    | 0x80002efc => 0x03205a63 (* blez s2,80002f30 <prvUnlockQueue+0x74>  *)
    | 0x80002f00 => 0x04842783 (* lw a5,72(s0)  *)
    | 0x80002f04 => 0x02078263 (* beqz a5,80002f28 <prvUnlockQueue+0x6c>  *)
    | 0x80002f08 => 0x00040513 (* mv a0,s0  *)
    | 0x80002f0c => 0xeb5ff0ef (* jal 80002dc0 <prvNotifyQueueSetContainer>  *)
    | 0x80002f10 => 0x00050463 (* beqz a0,80002f18 <prvUnlockQueue+0x5c>  *)
    | 0x80002f14 => 0xf01fe0ef (* jal 80001e14 <vTaskMissedYield>  *)
    | 0x80002f18 => 0xfff90913 (* add s2,s2,-1  *)
    | 0x80002f1c => 0x01891913 (* sll s2,s2,0x18  *)
    | 0x80002f20 => 0x41895913 (* sra s2,s2,0x18  *)
    | 0x80002f24 => 0xfd9ff06f (* j 80002efc <prvUnlockQueue+0x40>  *)
    | 0x80002f28 => 0x02442783 (* lw a5,36(s0)  *)
    | 0x80002f2c => 0x06079e63 (* bnez a5,80002fa8 <prvUnlockQueue+0xec>  *)
    | 0x80002f30 => 0xfff00793 (* li a5,-1  *)
    | 0x80002f34 => 0x04f402a3 (* sb a5,69(s0)  *)
    | 0x80002f38 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80002f3c => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80002f40 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80002f44 => 0x06078863 (* beqz a5,80002fb4 <prvUnlockQueue+0xf8>  *)
    | 0x80002f48 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80002f4c => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80002f50 => 0x04444903 (* lbu s2,68(s0)  *)
    | 0x80002f54 => 0x01040993 (* add s3,s0,16  *)
    | 0x80002f58 => 0x00178793 (* add a5,a5,1  *)
    | 0x80002f5c => 0x01891913 (* sll s2,s2,0x18  *)
    | 0x80002f60 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80002f64 => 0x41895913 (* sra s2,s2,0x18  *)
    | 0x80002f68 => 0x01205663 (* blez s2,80002f74 <prvUnlockQueue+0xb8>  *)
    | 0x80002f6c => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80002f70 => 0x04079663 (* bnez a5,80002fbc <prvUnlockQueue+0x100>  *)
    | 0x80002f74 => 0xfff00793 (* li a5,-1  *)
    | 0x80002f78 => 0x04f40223 (* sb a5,68(s0)  *)
    | 0x80002f7c => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80002f80 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80002f84 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80002f88 => 0x04078a63 (* beqz a5,80002fdc <prvUnlockQueue+0x120>  *)
    | 0x80002f8c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80002f90 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80002f94 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80002f98 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80002f9c => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80002fa0 => 0x02010113 (* add sp,sp,32  *)
    | 0x80002fa4 => 0x00008067 (* ret  *)
    | 0x80002fa8 => 0x00098513 (* mv a0,s3  *)
    | 0x80002fac => 0xa99fe0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80002fb0 => 0xf61ff06f (* j 80002f10 <prvUnlockQueue+0x54>  *)
    | 0x80002fb4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002fb8 => 0xf91ff06f (* j 80002f48 <prvUnlockQueue+0x8c>  *)
    | 0x80002fbc => 0x00098513 (* mv a0,s3  *)
    | 0x80002fc0 => 0xa85fe0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80002fc4 => 0x00050463 (* beqz a0,80002fcc <prvUnlockQueue+0x110>  *)
    | 0x80002fc8 => 0xe4dfe0ef (* jal 80001e14 <vTaskMissedYield>  *)
    | 0x80002fcc => 0xfff90913 (* add s2,s2,-1  *)
    | 0x80002fd0 => 0x01891913 (* sll s2,s2,0x18  *)
    | 0x80002fd4 => 0x41895913 (* sra s2,s2,0x18  *)
    | 0x80002fd8 => 0xf91ff06f (* j 80002f68 <prvUnlockQueue+0xac>  *)
    | 0x80002fdc => 0x30046073 (* csrs mstatus,8  *)
    | 0x80002fe0 => 0xfadff06f (* j 80002f8c <prvUnlockQueue+0xd0>  *)
    (* <xQueueGenericReset> *)
    | 0x80002fe4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80002fe8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80002fec => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80002ff0 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80002ff4 => 0x02050463 (* beqz a0,8000301c <xQueueGenericReset+0x38>  *)
    | 0x80002ff8 => 0x03c52783 (* lw a5,60(a0)  *)
    | 0x80002ffc => 0x00050413 (* mv s0,a0  *)
    | 0x80003000 => 0x02079863 (* bnez a5,80003030 <xQueueGenericReset+0x4c>  *)
    | 0x80003004 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003008 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x8000300c => 0x16c00593 (* li a1,364  *)
    | 0x80003010 => 0x2800f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003014 => 0x00000513 (* li a0,0  *)
    | 0x80003018 => 0x0a40006f (* j 800030bc <xQueueGenericReset+0xd8>  *)
    | 0x8000301c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003020 => 0x13700593 (* li a1,311  *)
    | 0x80003024 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003028 => 0x2680f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000302c => 0xfd9ff06f (* j 80003004 <xQueueGenericReset+0x20>  *)
    | 0x80003030 => 0x04052703 (* lw a4,64(a0)  *)
    | 0x80003034 => 0x02e7b7b3 (* mulhu a5,a5,a4  *)
    | 0x80003038 => 0xfc0796e3 (* bnez a5,80003004 <xQueueGenericReset+0x20>  *)
    | 0x8000303c => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003040 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80003044 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80003048 => 0x04052683 (* lw a3,64(a0)  *)
    | 0x8000304c => 0x00052703 (* lw a4,0(a0)  *)
    | 0x80003050 => 0x00178793 (* add a5,a5,1  *)
    | 0x80003054 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003058 => 0x03c52783 (* lw a5,60(a0)  *)
    | 0x8000305c => 0x02052c23 (* sw zero,56(a0)  *)
    | 0x80003060 => 0x00e52223 (* sw a4,4(a0)  *)
    | 0x80003064 => 0x02f687b3 (* mul a5,a3,a5  *)
    | 0x80003068 => 0x00f70633 (* add a2,a4,a5  *)
    | 0x8000306c => 0x40d787b3 (* sub a5,a5,a3  *)
    | 0x80003070 => 0x00f70733 (* add a4,a4,a5  *)
    | 0x80003074 => 0xfff00793 (* li a5,-1  *)
    | 0x80003078 => 0x04f50223 (* sb a5,68(a0)  *)
    | 0x8000307c => 0x00c52423 (* sw a2,8(a0)  *)
    | 0x80003080 => 0x00e52623 (* sw a4,12(a0)  *)
    | 0x80003084 => 0x04f502a3 (* sb a5,69(a0)  *)
    | 0x80003088 => 0x04059463 (* bnez a1,800030d0 <xQueueGenericReset+0xec>  *)
    | 0x8000308c => 0x01052783 (* lw a5,16(a0)  *)
    | 0x80003090 => 0x00078a63 (* beqz a5,800030a4 <xQueueGenericReset+0xc0>  *)
    | 0x80003094 => 0x01050513 (* add a0,a0,16  *)
    | 0x80003098 => 0x9adfe0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x8000309c => 0x00050463 (* beqz a0,800030a4 <xQueueGenericReset+0xc0>  *)
    | 0x800030a0 => 0x00000073 (* ecall  *)
    | 0x800030a4 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x800030a8 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800030ac => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x800030b0 => 0x00079463 (* bnez a5,800030b8 <xQueueGenericReset+0xd4>  *)
    | 0x800030b4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800030b8 => 0x00100513 (* li a0,1  *)
    | 0x800030bc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800030c0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800030c4 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800030c8 => 0x01010113 (* add sp,sp,16  *)
    | 0x800030cc => 0x00008067 (* ret  *)
    | 0x800030d0 => 0x01050513 (* add a0,a0,16  *)
    | 0x800030d4 => 0xae1ff0ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800030d8 => 0x02440513 (* add a0,s0,36  *)
    | 0x800030dc => 0xad9ff0ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800030e0 => 0xfc5ff06f (* j 800030a4 <xQueueGenericReset+0xc0>  *)
    (* <xQueueGenericCreateStatic> *)
    | 0x800030e4 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x800030e8 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x800030ec => 0x02812423 (* sw s0,40(sp)  *)
    | 0x800030f0 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x800030f4 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x800030f8 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x800030fc => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80003100 => 0x02069a63 (* bnez a3,80003134 <xQueueGenericCreateStatic+0x50>  *)
    | 0x80003104 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003108 => 0x18400593 (* li a1,388  *)
    | 0x8000310c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003110 => 0x1800f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003114 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003118 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x8000311c => 0x1b000593 (* li a1,432  *)
    | 0x80003120 => 0x1700f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003124 => 0x00000513 (* li a0,0  *)
    | 0x80003128 => 0x0840006f (* j 800031ac <xQueueGenericCreateStatic+0xc8>  *)
    | 0x8000312c => 0x02058463 (* beqz a1,80003154 <xQueueGenericCreateStatic+0x70>  *)
    | 0x80003130 => 0xfe5ff06f (* j 80003114 <xQueueGenericCreateStatic+0x30>  *)
    | 0x80003134 => 0x00050993 (* mv s3,a0  *)
    | 0x80003138 => 0xfc050ee3 (* beqz a0,80003114 <xQueueGenericCreateStatic+0x30>  *)
    | 0x8000313c => 0x00058493 (* mv s1,a1  *)
    | 0x80003140 => 0x00060913 (* mv s2,a2  *)
    | 0x80003144 => 0x00068413 (* mv s0,a3  *)
    | 0x80003148 => 0x00070a13 (* mv s4,a4  *)
    | 0x8000314c => 0xfe0600e3 (* beqz a2,8000312c <xQueueGenericCreateStatic+0x48>  *)
    | 0x80003150 => 0xfc0582e3 (* beqz a1,80003114 <xQueueGenericCreateStatic+0x30>  *)
    | 0x80003154 => 0x05400793 (* li a5,84  *)
    | 0x80003158 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x8000315c => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x80003160 => 0x00f70a63 (* beq a4,a5,80003174 <xQueueGenericCreateStatic+0x90>  *)
    | 0x80003164 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003168 => 0x19600593 (* li a1,406  *)
    | 0x8000316c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003170 => 0x1200f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003174 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80003178 => 0x00100793 (* li a5,1  *)
    | 0x8000317c => 0x04f40323 (* sb a5,70(s0)  *)
    | 0x80003180 => 0x00049463 (* bnez s1,80003188 <xQueueGenericCreateStatic+0xa4>  *)
    | 0x80003184 => 0x00040913 (* mv s2,s0  *)
    | 0x80003188 => 0x01242023 (* sw s2,0(s0)  *)
    | 0x8000318c => 0x03342e23 (* sw s3,60(s0)  *)
    | 0x80003190 => 0x04942023 (* sw s1,64(s0)  *)
    | 0x80003194 => 0x00100593 (* li a1,1  *)
    | 0x80003198 => 0x00040513 (* mv a0,s0  *)
    | 0x8000319c => 0xe49ff0ef (* jal 80002fe4 <xQueueGenericReset>  *)
    | 0x800031a0 => 0x00040513 (* mv a0,s0  *)
    | 0x800031a4 => 0x05440823 (* sb s4,80(s0)  *)
    | 0x800031a8 => 0x04042423 (* sw zero,72(s0)  *)
    | 0x800031ac => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x800031b0 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x800031b4 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x800031b8 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x800031bc => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x800031c0 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x800031c4 => 0x03010113 (* add sp,sp,48  *)
    | 0x800031c8 => 0x00008067 (* ret  *)
    (* <xQueueGenericCreate> *)
    | 0x800031cc => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800031d0 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800031d4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800031d8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800031dc => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800031e0 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800031e4 => 0x08050263 (* beqz a0,80003268 <xQueueGenericCreate+0x9c>  *)
    | 0x800031e8 => 0x02b537b3 (* mulhu a5,a0,a1  *)
    | 0x800031ec => 0x00050913 (* mv s2,a0  *)
    | 0x800031f0 => 0x00058493 (* mv s1,a1  *)
    | 0x800031f4 => 0x06079a63 (* bnez a5,80003268 <xQueueGenericCreate+0x9c>  *)
    | 0x800031f8 => 0x02b50533 (* mul a0,a0,a1  *)
    | 0x800031fc => 0xfab00793 (* li a5,-85  *)
    | 0x80003200 => 0x06a7e463 (* bltu a5,a0,80003268 <xQueueGenericCreate+0x9c>  *)
    | 0x80003204 => 0x05450513 (* add a0,a0,84  *)
    | 0x80003208 => 0x00060993 (* mv s3,a2  *)
    | 0x8000320c => 0x10c030ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80003210 => 0x00050413 (* mv s0,a0  *)
    | 0x80003214 => 0x06050263 (* beqz a0,80003278 <xQueueGenericCreate+0xac>  *)
    | 0x80003218 => 0x04050323 (* sb zero,70(a0)  *)
    | 0x8000321c => 0x00050793 (* mv a5,a0  *)
    | 0x80003220 => 0x00048463 (* beqz s1,80003228 <xQueueGenericCreate+0x5c>  *)
    | 0x80003224 => 0x05450793 (* add a5,a0,84  *)
    | 0x80003228 => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x8000322c => 0x03242e23 (* sw s2,60(s0)  *)
    | 0x80003230 => 0x04942023 (* sw s1,64(s0)  *)
    | 0x80003234 => 0x00100593 (* li a1,1  *)
    | 0x80003238 => 0x00040513 (* mv a0,s0  *)
    | 0x8000323c => 0xda9ff0ef (* jal 80002fe4 <xQueueGenericReset>  *)
    | 0x80003240 => 0x05340823 (* sb s3,80(s0)  *)
    | 0x80003244 => 0x04042423 (* sw zero,72(s0)  *)
    | 0x80003248 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000324c => 0x00040513 (* mv a0,s0  *)
    | 0x80003250 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80003254 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80003258 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x8000325c => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80003260 => 0x02010113 (* add sp,sp,32  *)
    | 0x80003264 => 0x00008067 (* ret  *)
    | 0x80003268 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000326c => 0x22a00593 (* li a1,554  *)
    | 0x80003270 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003274 => 0x01c0f0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003278 => 0x00000413 (* li s0,0  *)
    | 0x8000327c => 0xfcdff06f (* j 80003248 <xQueueGenericCreate+0x7c>  *)
    (* <xQueueGetMutexHolder> *)
    | 0x80003280 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80003284 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80003288 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000328c => 0x00050413 (* mv s0,a0  *)
    | 0x80003290 => 0x00051a63 (* bnez a0,800032a4 <xQueueGetMutexHolder+0x24>  *)
    | 0x80003294 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003298 => 0x2b800593 (* li a1,696  *)
    | 0x8000329c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800032a0 => 0x7f10e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800032a4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x800032a8 => 0x00042703 (* lw a4,0(s0)  *)
    | 0x800032ac => 0x800807b7 (* lui a5,0x80080  *)
    | 0x800032b0 => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x800032b4 => 0x00000513 (* li a0,0  *)
    | 0x800032b8 => 0x00071463 (* bnez a4,800032c0 <xQueueGetMutexHolder+0x40>  *)
    | 0x800032bc => 0x00842503 (* lw a0,8(s0)  *)
    | 0x800032c0 => 0x00079463 (* bnez a5,800032c8 <xQueueGetMutexHolder+0x48>  *)
    | 0x800032c4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800032c8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800032cc => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800032d0 => 0x01010113 (* add sp,sp,16  *)
    | 0x800032d4 => 0x00008067 (* ret  *)
    (* <xQueueGetMutexHolderFromISR> *)
    | 0x800032d8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800032dc => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800032e0 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800032e4 => 0x00050413 (* mv s0,a0  *)
    | 0x800032e8 => 0x00051a63 (* bnez a0,800032fc <xQueueGetMutexHolderFromISR+0x24>  *)
    | 0x800032ec => 0x80014537 (* lui a0,0x80014  *)
    | 0x800032f0 => 0x2dc00593 (* li a1,732  *)
    | 0x800032f4 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800032f8 => 0x7990e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800032fc => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80003300 => 0x00000513 (* li a0,0  *)
    | 0x80003304 => 0x00079463 (* bnez a5,8000330c <xQueueGetMutexHolderFromISR+0x34>  *)
    | 0x80003308 => 0x00842503 (* lw a0,8(s0)  *)
    | 0x8000330c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80003310 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80003314 => 0x01010113 (* add sp,sp,16  *)
    | 0x80003318 => 0x00008067 (* ret  *)
    (* <xQueueCreateCountingSemaphoreStatic> *)
    | 0x8000331c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80003320 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80003324 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80003328 => 0x02050c63 (* beqz a0,80003360 <xQueueCreateCountingSemaphoreStatic+0x44>  *)
    | 0x8000332c => 0x00058413 (* mv s0,a1  *)
    | 0x80003330 => 0x02b56863 (* bltu a0,a1,80003360 <xQueueCreateCountingSemaphoreStatic+0x44>  *)
    | 0x80003334 => 0x00060693 (* mv a3,a2  *)
    | 0x80003338 => 0x00200713 (* li a4,2  *)
    | 0x8000333c => 0x00000613 (* li a2,0  *)
    | 0x80003340 => 0x00000593 (* li a1,0  *)
    | 0x80003344 => 0xda1ff0ef (* jal 800030e4 <xQueueGenericCreateStatic>  *)
    | 0x80003348 => 0x00050463 (* beqz a0,80003350 <xQueueCreateCountingSemaphoreStatic+0x34>  *)
    | 0x8000334c => 0x02852c23 (* sw s0,56(a0)  *)
    | 0x80003350 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80003354 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80003358 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000335c => 0x00008067 (* ret  *)
    | 0x80003360 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003364 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003368 => 0x37800593 (* li a1,888  *)
    | 0x8000336c => 0x7250e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003370 => 0x00000513 (* li a0,0  *)
    | 0x80003374 => 0xfddff06f (* j 80003350 <xQueueCreateCountingSemaphoreStatic+0x34>  *)
    (* <xQueueCreateCountingSemaphore> *)
    | 0x80003378 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000337c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80003380 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80003384 => 0x02050863 (* beqz a0,800033b4 <xQueueCreateCountingSemaphore+0x3c>  *)
    | 0x80003388 => 0x00058413 (* mv s0,a1  *)
    | 0x8000338c => 0x02b56463 (* bltu a0,a1,800033b4 <xQueueCreateCountingSemaphore+0x3c>  *)
    | 0x80003390 => 0x00200613 (* li a2,2  *)
    | 0x80003394 => 0x00000593 (* li a1,0  *)
    | 0x80003398 => 0xe35ff0ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000339c => 0x00050463 (* beqz a0,800033a4 <xQueueCreateCountingSemaphore+0x2c>  *)
    | 0x800033a0 => 0x02852c23 (* sw s0,56(a0)  *)
    | 0x800033a4 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800033a8 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800033ac => 0x01010113 (* add sp,sp,16  *)
    | 0x800033b0 => 0x00008067 (* ret  *)
    | 0x800033b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800033b8 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800033bc => 0x39f00593 (* li a1,927  *)
    | 0x800033c0 => 0x6d10e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800033c4 => 0x00000513 (* li a0,0  *)
    | 0x800033c8 => 0xfddff06f (* j 800033a4 <xQueueCreateCountingSemaphore+0x2c>  *)
    (* <xQueueGenericSend> *)
    | 0x800033cc => 0xfc010113 (* add sp,sp,-64  *)
    | 0x800033d0 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x800033d4 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x800033d8 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x800033dc => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x800033e0 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x800033e4 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x800033e8 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x800033ec => 0x03612023 (* sw s6,32(sp)  *)
    | 0x800033f0 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x800033f4 => 0x00050413 (* mv s0,a0  *)
    | 0x800033f8 => 0x00058993 (* mv s3,a1  *)
    | 0x800033fc => 0x00068913 (* mv s2,a3  *)
    | 0x80003400 => 0x00051a63 (* bnez a0,80003414 <xQueueGenericSend+0x48>  *)
    | 0x80003404 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003408 => 0x3b600593 (* li a1,950  *)
    | 0x8000340c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003410 => 0x6810e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003414 => 0x00099e63 (* bnez s3,80003430 <xQueueGenericSend+0x64>  *)
    | 0x80003418 => 0x04042783 (* lw a5,64(s0)  *)
    | 0x8000341c => 0x00078a63 (* beqz a5,80003430 <xQueueGenericSend+0x64>  *)
    | 0x80003420 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003424 => 0x3b700593 (* li a1,951  *)
    | 0x80003428 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x8000342c => 0x6650e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003430 => 0x00200793 (* li a5,2  *)
    | 0x80003434 => 0x02f91063 (* bne s2,a5,80003454 <xQueueGenericSend+0x88>  *)
    | 0x80003438 => 0x03c42703 (* lw a4,60(s0)  *)
    | 0x8000343c => 0x00100793 (* li a5,1  *)
    | 0x80003440 => 0x00f70a63 (* beq a4,a5,80003454 <xQueueGenericSend+0x88>  *)
    | 0x80003444 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003448 => 0x3b800593 (* li a1,952  *)
    | 0x8000344c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003450 => 0x6410e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003454 => 0x9d5fe0ef (* jal 80001e28 <xTaskGetSchedulerState>  *)
    | 0x80003458 => 0x00051e63 (* bnez a0,80003474 <xQueueGenericSend+0xa8>  *)
    | 0x8000345c => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80003460 => 0x00078a63 (* beqz a5,80003474 <xQueueGenericSend+0xa8>  *)
    | 0x80003464 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003468 => 0x3bb00593 (* li a1,955  *)
    | 0x8000346c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003470 => 0x6210e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003474 => 0x00000713 (* li a4,0  *)
    | 0x80003478 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x8000347c => 0x00200a93 (* li s5,2  *)
    | 0x80003480 => 0xfff00a13 (* li s4,-1  *)
    | 0x80003484 => 0x01040b13 (* add s6,s0,16  *)
    | 0x80003488 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000348c => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80003490 => 0x03842603 (* lw a2,56(s0)  *)
    | 0x80003494 => 0x00178693 (* add a3,a5,1  *)
    | 0x80003498 => 0x00d4a223 (* sw a3,4(s1)  *)
    | 0x8000349c => 0x03c42683 (* lw a3,60(s0)  *)
    | 0x800034a0 => 0x02d67a63 (* bgeu a2,a3,800034d4 <xQueueGenericSend+0x108>  *)
    | 0x800034a4 => 0x00090613 (* mv a2,s2  *)
    | 0x800034a8 => 0x00098593 (* mv a1,s3  *)
    | 0x800034ac => 0x00040513 (* mv a0,s0  *)
    | 0x800034b0 => 0x03842a03 (* lw s4,56(s0)  *)
    | 0x800034b4 => 0xff8ff0ef (* jal 80002cac <prvCopyDataToQueue>  *)
    | 0x800034b8 => 0x04842783 (* lw a5,72(s0)  *)
    | 0x800034bc => 0x02079c63 (* bnez a5,800034f4 <xQueueGenericSend+0x128>  *)
    | 0x800034c0 => 0x02442783 (* lw a5,36(s0)  *)
    | 0x800034c4 => 0x04078263 (* beqz a5,80003508 <xQueueGenericSend+0x13c>  *)
    | 0x800034c8 => 0x02440513 (* add a0,s0,36  *)
    | 0x800034cc => 0xd78fe0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x800034d0 => 0x0380006f (* j 80003508 <xQueueGenericSend+0x13c>  *)
    | 0x800034d4 => 0xfd5908e3 (* beq s2,s5,800034a4 <xQueueGenericSend+0xd8>  *)
    | 0x800034d8 => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x800034dc => 0x06069a63 (* bnez a3,80003550 <xQueueGenericSend+0x184>  *)
    | 0x800034e0 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x800034e4 => 0x00079463 (* bnez a5,800034ec <xQueueGenericSend+0x120>  *)
    | 0x800034e8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800034ec => 0x00000513 (* li a0,0  *)
    | 0x800034f0 => 0x0380006f (* j 80003528 <xQueueGenericSend+0x15c>  *)
    | 0x800034f4 => 0x00200793 (* li a5,2  *)
    | 0x800034f8 => 0x00f91463 (* bne s2,a5,80003500 <xQueueGenericSend+0x134>  *)
    | 0x800034fc => 0x000a1a63 (* bnez s4,80003510 <xQueueGenericSend+0x144>  *)
    | 0x80003500 => 0x00040513 (* mv a0,s0  *)
    | 0x80003504 => 0x8bdff0ef (* jal 80002dc0 <prvNotifyQueueSetContainer>  *)
    | 0x80003508 => 0x00050463 (* beqz a0,80003510 <xQueueGenericSend+0x144>  *)
    | 0x8000350c => 0x00000073 (* ecall  *)
    | 0x80003510 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003514 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003518 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x8000351c => 0x00079463 (* bnez a5,80003524 <xQueueGenericSend+0x158>  *)
    | 0x80003520 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003524 => 0x00100513 (* li a0,1  *)
    | 0x80003528 => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x8000352c => 0x03812403 (* lw s0,56(sp)  *)
    | 0x80003530 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x80003534 => 0x03012903 (* lw s2,48(sp)  *)
    | 0x80003538 => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x8000353c => 0x02812a03 (* lw s4,40(sp)  *)
    | 0x80003540 => 0x02412a83 (* lw s5,36(sp)  *)
    | 0x80003544 => 0x02012b03 (* lw s6,32(sp)  *)
    | 0x80003548 => 0x04010113 (* add sp,sp,64  *)
    | 0x8000354c => 0x00008067 (* ret  *)
    | 0x80003550 => 0x00071663 (* bnez a4,8000355c <xQueueGenericSend+0x190>  *)
    | 0x80003554 => 0x01810513 (* add a0,sp,24  *)
    | 0x80003558 => 0xfb4fe0ef (* jal 80001d0c <vTaskInternalSetTimeOutState>  *)
    | 0x8000355c => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003560 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003564 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003568 => 0x00079463 (* bnez a5,80003570 <xQueueGenericSend+0x1a4>  *)
    | 0x8000356c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003570 => 0x8f5fd0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80003574 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003578 => 0x04444783 (* lbu a5,68(s0)  *)
    | 0x8000357c => 0x0044a703 (* lw a4,4(s1)  *)
    | 0x80003580 => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80003584 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80003588 => 0x01479463 (* bne a5,s4,80003590 <xQueueGenericSend+0x1c4>  *)
    | 0x8000358c => 0x04040223 (* sb zero,68(s0)  *)
    | 0x80003590 => 0x04544783 (* lbu a5,69(s0)  *)
    | 0x80003594 => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80003598 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x8000359c => 0x01479463 (* bne a5,s4,800035a4 <xQueueGenericSend+0x1d8>  *)
    | 0x800035a0 => 0x040402a3 (* sb zero,69(s0)  *)
    | 0x800035a4 => 0x00071463 (* bnez a4,800035ac <xQueueGenericSend+0x1e0>  *)
    | 0x800035a8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800035ac => 0x00c10593 (* add a1,sp,12  *)
    | 0x800035b0 => 0x01810513 (* add a0,sp,24  *)
    | 0x800035b4 => 0xf6cfe0ef (* jal 80001d20 <xTaskCheckForTimeOut>  *)
    | 0x800035b8 => 0x04051c63 (* bnez a0,80003610 <xQueueGenericSend+0x244>  *)
    | 0x800035bc => 0x30047073 (* csrc mstatus,8  *)
    | 0x800035c0 => 0x0044a683 (* lw a3,4(s1)  *)
    | 0x800035c4 => 0x03842703 (* lw a4,56(s0)  *)
    | 0x800035c8 => 0x03c42783 (* lw a5,60(s0)  *)
    | 0x800035cc => 0x00069463 (* bnez a3,800035d4 <xQueueGenericSend+0x208>  *)
    | 0x800035d0 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800035d4 => 0x02f71663 (* bne a4,a5,80003600 <xQueueGenericSend+0x234>  *)
    | 0x800035d8 => 0x00c12583 (* lw a1,12(sp)  *)
    | 0x800035dc => 0x000b0513 (* mv a0,s6  *)
    | 0x800035e0 => 0xa9cfe0ef (* jal 8000187c <vTaskPlaceOnEventList>  *)
    | 0x800035e4 => 0x00040513 (* mv a0,s0  *)
    | 0x800035e8 => 0x8d5ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x800035ec => 0xa8dfd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x800035f0 => 0x00051463 (* bnez a0,800035f8 <xQueueGenericSend+0x22c>  *)
    | 0x800035f4 => 0x00000073 (* ecall  *)
    | 0x800035f8 => 0x00100713 (* li a4,1  *)
    | 0x800035fc => 0xe8dff06f (* j 80003488 <xQueueGenericSend+0xbc>  *)
    | 0x80003600 => 0x00040513 (* mv a0,s0  *)
    | 0x80003604 => 0x8b9ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003608 => 0xa71fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x8000360c => 0xfedff06f (* j 800035f8 <xQueueGenericSend+0x22c>  *)
    | 0x80003610 => 0x00040513 (* mv a0,s0  *)
    | 0x80003614 => 0x8a9ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003618 => 0xa61fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x8000361c => 0xed1ff06f (* j 800034ec <xQueueGenericSend+0x120>  *)
    (* <xQueueCreateMutexStatic> *)
    | 0x80003620 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80003624 => 0x00050713 (* mv a4,a0  *)
    | 0x80003628 => 0x00058693 (* mv a3,a1  *)
    | 0x8000362c => 0x00000613 (* li a2,0  *)
    | 0x80003630 => 0x00000593 (* li a1,0  *)
    | 0x80003634 => 0x00100513 (* li a0,1  *)
    | 0x80003638 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000363c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80003640 => 0xaa5ff0ef (* jal 800030e4 <xQueueGenericCreateStatic>  *)
    | 0x80003644 => 0x00050413 (* mv s0,a0  *)
    | 0x80003648 => 0x02050063 (* beqz a0,80003668 <xQueueCreateMutexStatic+0x48>  *)
    | 0x8000364c => 0x00052423 (* sw zero,8(a0)  *)
    | 0x80003650 => 0x00052023 (* sw zero,0(a0)  *)
    | 0x80003654 => 0x00052623 (* sw zero,12(a0)  *)
    | 0x80003658 => 0x00000693 (* li a3,0  *)
    | 0x8000365c => 0x00000613 (* li a2,0  *)
    | 0x80003660 => 0x00000593 (* li a1,0  *)
    | 0x80003664 => 0xd69ff0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80003668 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000366c => 0x00040513 (* mv a0,s0  *)
    | 0x80003670 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80003674 => 0x01010113 (* add sp,sp,16  *)
    | 0x80003678 => 0x00008067 (* ret  *)
    (* <xQueueGiveMutexRecursive> *)
    | 0x8000367c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80003680 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80003684 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80003688 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x8000368c => 0x00050413 (* mv s0,a0  *)
    | 0x80003690 => 0x00051a63 (* bnez a0,800036a4 <xQueueGiveMutexRecursive+0x28>  *)
    | 0x80003694 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003698 => 0x2fb00593 (* li a1,763  *)
    | 0x8000369c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800036a0 => 0x3f10e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800036a4 => 0x00842483 (* lw s1,8(s0)  *)
    | 0x800036a8 => 0xf78fe0ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x800036ac => 0x00000793 (* li a5,0  *)
    | 0x800036b0 => 0x00a49c63 (* bne s1,a0,800036c8 <xQueueGiveMutexRecursive+0x4c>  *)
    | 0x800036b4 => 0x00c42783 (* lw a5,12(s0)  *)
    | 0x800036b8 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800036bc => 0x00f42623 (* sw a5,12(s0)  *)
    | 0x800036c0 => 0x02078063 (* beqz a5,800036e0 <xQueueGiveMutexRecursive+0x64>  *)
    | 0x800036c4 => 0x00100793 (* li a5,1  *)
    | 0x800036c8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800036cc => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800036d0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800036d4 => 0x00078513 (* mv a0,a5  *)
    | 0x800036d8 => 0x01010113 (* add sp,sp,16  *)
    | 0x800036dc => 0x00008067 (* ret  *)
    | 0x800036e0 => 0x00000693 (* li a3,0  *)
    | 0x800036e4 => 0x00000613 (* li a2,0  *)
    | 0x800036e8 => 0x00000593 (* li a1,0  *)
    | 0x800036ec => 0x00040513 (* mv a0,s0  *)
    | 0x800036f0 => 0xcddff0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800036f4 => 0xfd1ff06f (* j 800036c4 <xQueueGiveMutexRecursive+0x48>  *)
    (* <xQueueCreateMutex> *)
    | 0x800036f8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800036fc => 0x00050613 (* mv a2,a0  *)
    | 0x80003700 => 0x00000593 (* li a1,0  *)
    | 0x80003704 => 0x00100513 (* li a0,1  *)
    | 0x80003708 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000370c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80003710 => 0xabdff0ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x80003714 => 0x00050413 (* mv s0,a0  *)
    | 0x80003718 => 0x02050063 (* beqz a0,80003738 <xQueueCreateMutex+0x40>  *)
    | 0x8000371c => 0x00052423 (* sw zero,8(a0)  *)
    | 0x80003720 => 0x00052023 (* sw zero,0(a0)  *)
    | 0x80003724 => 0x00052623 (* sw zero,12(a0)  *)
    | 0x80003728 => 0x00000693 (* li a3,0  *)
    | 0x8000372c => 0x00000613 (* li a2,0  *)
    | 0x80003730 => 0x00000593 (* li a1,0  *)
    | 0x80003734 => 0xc99ff0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80003738 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000373c => 0x00040513 (* mv a0,s0  *)
    | 0x80003740 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80003744 => 0x01010113 (* add sp,sp,16  *)
    | 0x80003748 => 0x00008067 (* ret  *)
    (* <xQueueGenericSendFromISR> *)
    | 0x8000374c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80003750 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80003754 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80003758 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000375c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80003760 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80003764 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80003768 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000376c => 0x00050413 (* mv s0,a0  *)
    | 0x80003770 => 0x00058a13 (* mv s4,a1  *)
    | 0x80003774 => 0x00060993 (* mv s3,a2  *)
    | 0x80003778 => 0x00068913 (* mv s2,a3  *)
    | 0x8000377c => 0x00051a63 (* bnez a0,80003790 <xQueueGenericSendFromISR+0x44>  *)
    | 0x80003780 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003784 => 0x49000593 (* li a1,1168  *)
    | 0x80003788 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x8000378c => 0x3050e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003790 => 0x000a1e63 (* bnez s4,800037ac <xQueueGenericSendFromISR+0x60>  *)
    | 0x80003794 => 0x04042783 (* lw a5,64(s0)  *)
    | 0x80003798 => 0x00078a63 (* beqz a5,800037ac <xQueueGenericSendFromISR+0x60>  *)
    | 0x8000379c => 0x80014537 (* lui a0,0x80014  *)
    | 0x800037a0 => 0x49100593 (* li a1,1169  *)
    | 0x800037a4 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800037a8 => 0x2e90e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800037ac => 0x00200793 (* li a5,2  *)
    | 0x800037b0 => 0x02f91063 (* bne s2,a5,800037d0 <xQueueGenericSendFromISR+0x84>  *)
    | 0x800037b4 => 0x03c42703 (* lw a4,60(s0)  *)
    | 0x800037b8 => 0x00100793 (* li a5,1  *)
    | 0x800037bc => 0x00f70a63 (* beq a4,a5,800037d0 <xQueueGenericSendFromISR+0x84>  *)
    | 0x800037c0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800037c4 => 0x49200593 (* li a1,1170  *)
    | 0x800037c8 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800037cc => 0x2c50e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800037d0 => 0x03842703 (* lw a4,56(s0)  *)
    | 0x800037d4 => 0x03c42783 (* lw a5,60(s0)  *)
    | 0x800037d8 => 0x00f76863 (* bltu a4,a5,800037e8 <xQueueGenericSendFromISR+0x9c>  *)
    | 0x800037dc => 0x00200793 (* li a5,2  *)
    | 0x800037e0 => 0x00000513 (* li a0,0  *)
    | 0x800037e4 => 0x04f91e63 (* bne s2,a5,80003840 <xQueueGenericSendFromISR+0xf4>  *)
    | 0x800037e8 => 0x04544483 (* lbu s1,69(s0)  *)
    | 0x800037ec => 0x00090613 (* mv a2,s2  *)
    | 0x800037f0 => 0x000a0593 (* mv a1,s4  *)
    | 0x800037f4 => 0x00040513 (* mv a0,s0  *)
    | 0x800037f8 => 0x03842a83 (* lw s5,56(s0)  *)
    | 0x800037fc => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x80003800 => 0xcacff0ef (* jal 80002cac <prvCopyDataToQueue>  *)
    | 0x80003804 => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x80003808 => 0xfff00793 (* li a5,-1  *)
    | 0x8000380c => 0x06f49663 (* bne s1,a5,80003878 <xQueueGenericSendFromISR+0x12c>  *)
    | 0x80003810 => 0x04842783 (* lw a5,72(s0)  *)
    | 0x80003814 => 0x04078863 (* beqz a5,80003864 <xQueueGenericSendFromISR+0x118>  *)
    | 0x80003818 => 0x00200793 (* li a5,2  *)
    | 0x8000381c => 0x00f91463 (* bne s2,a5,80003824 <xQueueGenericSendFromISR+0xd8>  *)
    | 0x80003820 => 0x000a9e63 (* bnez s5,8000383c <xQueueGenericSendFromISR+0xf0>  *)
    | 0x80003824 => 0x00040513 (* mv a0,s0  *)
    | 0x80003828 => 0xd98ff0ef (* jal 80002dc0 <prvNotifyQueueSetContainer>  *)
    | 0x8000382c => 0x00050863 (* beqz a0,8000383c <xQueueGenericSendFromISR+0xf0>  *)
    | 0x80003830 => 0x00098663 (* beqz s3,8000383c <xQueueGenericSendFromISR+0xf0>  *)
    | 0x80003834 => 0x00100793 (* li a5,1  *)
    | 0x80003838 => 0x00f9a023 (* sw a5,0(s3)  *)
    | 0x8000383c => 0x00100513 (* li a0,1  *)
    | 0x80003840 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80003844 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80003848 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000384c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80003850 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80003854 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80003858 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8000385c => 0x02010113 (* add sp,sp,32  *)
    | 0x80003860 => 0x00008067 (* ret  *)
    | 0x80003864 => 0x02442783 (* lw a5,36(s0)  *)
    | 0x80003868 => 0xfc078ae3 (* beqz a5,8000383c <xQueueGenericSendFromISR+0xf0>  *)
    | 0x8000386c => 0x02440513 (* add a0,s0,36  *)
    | 0x80003870 => 0x9d4fe0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80003874 => 0xfb9ff06f (* j 8000382c <xQueueGenericSendFromISR+0xe0>  *)
    | 0x80003878 => 0xe0cfd0ef (* jal 80000e84 <uxTaskGetNumberOfTasks>  *)
    | 0x8000387c => 0xfca4f0e3 (* bgeu s1,a0,8000383c <xQueueGenericSendFromISR+0xf0>  *)
    | 0x80003880 => 0x07f00793 (* li a5,127  *)
    | 0x80003884 => 0x00f49a63 (* bne s1,a5,80003898 <xQueueGenericSendFromISR+0x14c>  *)
    | 0x80003888 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000388c => 0x51e00593 (* li a1,1310  *)
    | 0x80003890 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003894 => 0x1fd0e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003898 => 0x00148493 (* add s1,s1,1  *)
    | 0x8000389c => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x800038a0 => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x800038a4 => 0x049402a3 (* sb s1,69(s0)  *)
    | 0x800038a8 => 0xf95ff06f (* j 8000383c <xQueueGenericSendFromISR+0xf0>  *)
    (* <xQueueGiveFromISR> *)
    | 0x800038ac => 0xff010113 (* add sp,sp,-16  *)
    | 0x800038b0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800038b4 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x800038b8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800038bc => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800038c0 => 0x00050413 (* mv s0,a0  *)
    | 0x800038c4 => 0x00058913 (* mv s2,a1  *)
    | 0x800038c8 => 0x00051a63 (* bnez a0,800038dc <xQueueGiveFromISR+0x30>  *)
    | 0x800038cc => 0x80014537 (* lui a0,0x80014  *)
    | 0x800038d0 => 0x54000593 (* li a1,1344  *)
    | 0x800038d4 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800038d8 => 0x1b90e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800038dc => 0x04042783 (* lw a5,64(s0)  *)
    | 0x800038e0 => 0x00078a63 (* beqz a5,800038f4 <xQueueGiveFromISR+0x48>  *)
    | 0x800038e4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800038e8 => 0x54400593 (* li a1,1348  *)
    | 0x800038ec => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800038f0 => 0x1a10e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800038f4 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x800038f8 => 0x00079e63 (* bnez a5,80003914 <xQueueGiveFromISR+0x68>  *)
    | 0x800038fc => 0x00842783 (* lw a5,8(s0)  *)
    | 0x80003900 => 0x00078a63 (* beqz a5,80003914 <xQueueGiveFromISR+0x68>  *)
    | 0x80003904 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003908 => 0x54900593 (* li a1,1353  *)
    | 0x8000390c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003910 => 0x1810e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003914 => 0x03842783 (* lw a5,56(s0)  *)
    | 0x80003918 => 0x03c42703 (* lw a4,60(s0)  *)
    | 0x8000391c => 0x00000513 (* li a0,0  *)
    | 0x80003920 => 0x02e7fc63 (* bgeu a5,a4,80003958 <xQueueGiveFromISR+0xac>  *)
    | 0x80003924 => 0x04544483 (* lbu s1,69(s0)  *)
    | 0x80003928 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000392c => 0x02f42c23 (* sw a5,56(s0)  *)
    | 0x80003930 => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x80003934 => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x80003938 => 0xfff00793 (* li a5,-1  *)
    | 0x8000393c => 0x04f49c63 (* bne s1,a5,80003994 <xQueueGiveFromISR+0xe8>  *)
    | 0x80003940 => 0x04842783 (* lw a5,72(s0)  *)
    | 0x80003944 => 0x02078e63 (* beqz a5,80003980 <xQueueGiveFromISR+0xd4>  *)
    | 0x80003948 => 0x00040513 (* mv a0,s0  *)
    | 0x8000394c => 0xc74ff0ef (* jal 80002dc0 <prvNotifyQueueSetContainer>  *)
    | 0x80003950 => 0x02051063 (* bnez a0,80003970 <xQueueGiveFromISR+0xc4>  *)
    | 0x80003954 => 0x00100513 (* li a0,1  *)
    | 0x80003958 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000395c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80003960 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80003964 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80003968 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000396c => 0x00008067 (* ret  *)
    | 0x80003970 => 0xfe0902e3 (* beqz s2,80003954 <xQueueGiveFromISR+0xa8>  *)
    | 0x80003974 => 0x00100793 (* li a5,1  *)
    | 0x80003978 => 0x00f92023 (* sw a5,0(s2)  *)
    | 0x8000397c => 0xfd9ff06f (* j 80003954 <xQueueGiveFromISR+0xa8>  *)
    | 0x80003980 => 0x02442783 (* lw a5,36(s0)  *)
    | 0x80003984 => 0xfc0788e3 (* beqz a5,80003954 <xQueueGiveFromISR+0xa8>  *)
    | 0x80003988 => 0x02440513 (* add a0,s0,36  *)
    | 0x8000398c => 0x8b8fe0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80003990 => 0xfc1ff06f (* j 80003950 <xQueueGiveFromISR+0xa4>  *)
    | 0x80003994 => 0xcf0fd0ef (* jal 80000e84 <uxTaskGetNumberOfTasks>  *)
    | 0x80003998 => 0xfaa4fee3 (* bgeu s1,a0,80003954 <xQueueGiveFromISR+0xa8>  *)
    | 0x8000399c => 0x07f00793 (* li a5,127  *)
    | 0x800039a0 => 0x00f49a63 (* bne s1,a5,800039b4 <xQueueGiveFromISR+0x108>  *)
    | 0x800039a4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800039a8 => 0x5cb00593 (* li a1,1483  *)
    | 0x800039ac => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800039b0 => 0x0e10e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800039b4 => 0x00148493 (* add s1,s1,1  *)
    | 0x800039b8 => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x800039bc => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x800039c0 => 0x049402a3 (* sb s1,69(s0)  *)
    | 0x800039c4 => 0xf91ff06f (* j 80003954 <xQueueGiveFromISR+0xa8>  *)
    (* <xQueueReceive> *)
    | 0x800039c8 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x800039cc => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x800039d0 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x800039d4 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x800039d8 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x800039dc => 0x03312623 (* sw s3,44(sp)  *)
    | 0x800039e0 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x800039e4 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x800039e8 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x800039ec => 0x00050413 (* mv s0,a0  *)
    | 0x800039f0 => 0x00058913 (* mv s2,a1  *)
    | 0x800039f4 => 0x00051a63 (* bnez a0,80003a08 <xQueueReceive+0x40>  *)
    | 0x800039f8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800039fc => 0x5e900593 (* li a1,1513  *)
    | 0x80003a00 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003a04 => 0x08d0e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003a08 => 0x00091e63 (* bnez s2,80003a24 <xQueueReceive+0x5c>  *)
    | 0x80003a0c => 0x04042783 (* lw a5,64(s0)  *)
    | 0x80003a10 => 0x00078a63 (* beqz a5,80003a24 <xQueueReceive+0x5c>  *)
    | 0x80003a14 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003a18 => 0x5ed00593 (* li a1,1517  *)
    | 0x80003a1c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003a20 => 0x0710e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003a24 => 0xc04fe0ef (* jal 80001e28 <xTaskGetSchedulerState>  *)
    | 0x80003a28 => 0x00051e63 (* bnez a0,80003a44 <xQueueReceive+0x7c>  *)
    | 0x80003a2c => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80003a30 => 0x00078a63 (* beqz a5,80003a44 <xQueueReceive+0x7c>  *)
    | 0x80003a34 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003a38 => 0x5f200593 (* li a1,1522  *)
    | 0x80003a3c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003a40 => 0x0510e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003a44 => 0x00000713 (* li a4,0  *)
    | 0x80003a48 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80003a4c => 0xfff00a13 (* li s4,-1  *)
    | 0x80003a50 => 0x02440a93 (* add s5,s0,36  *)
    | 0x80003a54 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003a58 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80003a5c => 0x03842983 (* lw s3,56(s0)  *)
    | 0x80003a60 => 0x00178693 (* add a3,a5,1  *)
    | 0x80003a64 => 0x00d4a223 (* sw a3,4(s1)  *)
    | 0x80003a68 => 0x06098663 (* beqz s3,80003ad4 <xQueueReceive+0x10c>  *)
    | 0x80003a6c => 0x00090593 (* mv a1,s2  *)
    | 0x80003a70 => 0x00040513 (* mv a0,s0  *)
    | 0x80003a74 => 0xb14ff0ef (* jal 80002d88 <prvCopyDataFromQueue>  *)
    | 0x80003a78 => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80003a7c => 0xfff98993 (* add s3,s3,-1  *)
    | 0x80003a80 => 0x03342c23 (* sw s3,56(s0)  *)
    | 0x80003a84 => 0x00078a63 (* beqz a5,80003a98 <xQueueReceive+0xd0>  *)
    | 0x80003a88 => 0x01040513 (* add a0,s0,16  *)
    | 0x80003a8c => 0xfb9fd0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80003a90 => 0x00050463 (* beqz a0,80003a98 <xQueueReceive+0xd0>  *)
    | 0x80003a94 => 0x00000073 (* ecall  *)
    | 0x80003a98 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003a9c => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003aa0 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003aa4 => 0x00079463 (* bnez a5,80003aac <xQueueReceive+0xe4>  *)
    | 0x80003aa8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003aac => 0x00100513 (* li a0,1  *)
    | 0x80003ab0 => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x80003ab4 => 0x03812403 (* lw s0,56(sp)  *)
    | 0x80003ab8 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x80003abc => 0x03012903 (* lw s2,48(sp)  *)
    | 0x80003ac0 => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x80003ac4 => 0x02812a03 (* lw s4,40(sp)  *)
    | 0x80003ac8 => 0x02412a83 (* lw s5,36(sp)  *)
    | 0x80003acc => 0x04010113 (* add sp,sp,64  *)
    | 0x80003ad0 => 0x00008067 (* ret  *)
    | 0x80003ad4 => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x80003ad8 => 0x00069c63 (* bnez a3,80003af0 <xQueueReceive+0x128>  *)
    | 0x80003adc => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003ae0 => 0x00079463 (* bnez a5,80003ae8 <xQueueReceive+0x120>  *)
    | 0x80003ae4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003ae8 => 0x00000513 (* li a0,0  *)
    | 0x80003aec => 0xfc5ff06f (* j 80003ab0 <xQueueReceive+0xe8>  *)
    | 0x80003af0 => 0x00071663 (* bnez a4,80003afc <xQueueReceive+0x134>  *)
    | 0x80003af4 => 0x01810513 (* add a0,sp,24  *)
    | 0x80003af8 => 0xa14fe0ef (* jal 80001d0c <vTaskInternalSetTimeOutState>  *)
    | 0x80003afc => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003b00 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003b04 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003b08 => 0x00079463 (* bnez a5,80003b10 <xQueueReceive+0x148>  *)
    | 0x80003b0c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003b10 => 0xb54fd0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80003b14 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003b18 => 0x04444783 (* lbu a5,68(s0)  *)
    | 0x80003b1c => 0x0044a703 (* lw a4,4(s1)  *)
    | 0x80003b20 => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80003b24 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80003b28 => 0x01479463 (* bne a5,s4,80003b30 <xQueueReceive+0x168>  *)
    | 0x80003b2c => 0x04040223 (* sb zero,68(s0)  *)
    | 0x80003b30 => 0x04544783 (* lbu a5,69(s0)  *)
    | 0x80003b34 => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80003b38 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80003b3c => 0x01479463 (* bne a5,s4,80003b44 <xQueueReceive+0x17c>  *)
    | 0x80003b40 => 0x040402a3 (* sb zero,69(s0)  *)
    | 0x80003b44 => 0x00071463 (* bnez a4,80003b4c <xQueueReceive+0x184>  *)
    | 0x80003b48 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003b4c => 0x00c10593 (* add a1,sp,12  *)
    | 0x80003b50 => 0x01810513 (* add a0,sp,24  *)
    | 0x80003b54 => 0x9ccfe0ef (* jal 80001d20 <xTaskCheckForTimeOut>  *)
    | 0x80003b58 => 0x04051463 (* bnez a0,80003ba0 <xQueueReceive+0x1d8>  *)
    | 0x80003b5c => 0x00040513 (* mv a0,s0  *)
    | 0x80003b60 => 0x92cff0ef (* jal 80002c8c <prvIsQueueEmpty>  *)
    | 0x80003b64 => 0x02050663 (* beqz a0,80003b90 <xQueueReceive+0x1c8>  *)
    | 0x80003b68 => 0x00c12583 (* lw a1,12(sp)  *)
    | 0x80003b6c => 0x000a8513 (* mv a0,s5  *)
    | 0x80003b70 => 0xd0dfd0ef (* jal 8000187c <vTaskPlaceOnEventList>  *)
    | 0x80003b74 => 0x00040513 (* mv a0,s0  *)
    | 0x80003b78 => 0xb44ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003b7c => 0xcfcfd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80003b80 => 0x00051463 (* bnez a0,80003b88 <xQueueReceive+0x1c0>  *)
    | 0x80003b84 => 0x00000073 (* ecall  *)
    | 0x80003b88 => 0x00100713 (* li a4,1  *)
    | 0x80003b8c => 0xec9ff06f (* j 80003a54 <xQueueReceive+0x8c>  *)
    | 0x80003b90 => 0x00040513 (* mv a0,s0  *)
    | 0x80003b94 => 0xb28ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003b98 => 0xce0fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80003b9c => 0xfedff06f (* j 80003b88 <xQueueReceive+0x1c0>  *)
    | 0x80003ba0 => 0x00040513 (* mv a0,s0  *)
    | 0x80003ba4 => 0xb18ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003ba8 => 0xcd0fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80003bac => 0x00040513 (* mv a0,s0  *)
    | 0x80003bb0 => 0x8dcff0ef (* jal 80002c8c <prvIsQueueEmpty>  *)
    | 0x80003bb4 => 0xfc050ae3 (* beqz a0,80003b88 <xQueueReceive+0x1c0>  *)
    | 0x80003bb8 => 0xf31ff06f (* j 80003ae8 <xQueueReceive+0x120>  *)
    (* <xQueueSemaphoreTake> *)
    | 0x80003bbc => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80003bc0 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x80003bc4 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x80003bc8 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x80003bcc => 0x03212823 (* sw s2,48(sp)  *)
    | 0x80003bd0 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x80003bd4 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x80003bd8 => 0x00b12623 (* sw a1,12(sp)  *)
    | 0x80003bdc => 0x00050413 (* mv s0,a0  *)
    | 0x80003be0 => 0x00051a63 (* bnez a0,80003bf4 <xQueueSemaphoreTake+0x38>  *)
    | 0x80003be4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003be8 => 0x68200593 (* li a1,1666  *)
    | 0x80003bec => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003bf0 => 0x6a00e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003bf4 => 0x04042783 (* lw a5,64(s0)  *)
    | 0x80003bf8 => 0x00078a63 (* beqz a5,80003c0c <xQueueSemaphoreTake+0x50>  *)
    | 0x80003bfc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003c00 => 0x68600593 (* li a1,1670  *)
    | 0x80003c04 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003c08 => 0x6880e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003c0c => 0xa1cfe0ef (* jal 80001e28 <xTaskGetSchedulerState>  *)
    | 0x80003c10 => 0x00051e63 (* bnez a0,80003c2c <xQueueSemaphoreTake+0x70>  *)
    | 0x80003c14 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80003c18 => 0x00078a63 (* beqz a5,80003c2c <xQueueSemaphoreTake+0x70>  *)
    | 0x80003c1c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003c20 => 0x68b00593 (* li a1,1675  *)
    | 0x80003c24 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003c28 => 0x6680e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003c2c => 0x00000913 (* li s2,0  *)
    | 0x80003c30 => 0x00000693 (* li a3,0  *)
    | 0x80003c34 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80003c38 => 0xfff00993 (* li s3,-1  *)
    | 0x80003c3c => 0x02440a13 (* add s4,s0,36  *)
    | 0x80003c40 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003c44 => 0x0044a703 (* lw a4,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80003c48 => 0x00170793 (* add a5,a4,1  *)
    | 0x80003c4c => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003c50 => 0x03842783 (* lw a5,56(s0)  *)
    | 0x80003c54 => 0x04078863 (* beqz a5,80003ca4 <xQueueSemaphoreTake+0xe8>  *)
    | 0x80003c58 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003c5c => 0x02f42c23 (* sw a5,56(s0)  *)
    | 0x80003c60 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80003c64 => 0x00079663 (* bnez a5,80003c70 <xQueueSemaphoreTake+0xb4>  *)
    | 0x80003c68 => 0xd94fe0ef (* jal 800021fc <pvTaskIncrementMutexHeldCount>  *)
    | 0x80003c6c => 0x00a42423 (* sw a0,8(s0)  *)
    | 0x80003c70 => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80003c74 => 0x00078a63 (* beqz a5,80003c88 <xQueueSemaphoreTake+0xcc>  *)
    | 0x80003c78 => 0x01040513 (* add a0,s0,16  *)
    | 0x80003c7c => 0xdc9fd0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80003c80 => 0x00050463 (* beqz a0,80003c88 <xQueueSemaphoreTake+0xcc>  *)
    | 0x80003c84 => 0x00000073 (* ecall  *)
    | 0x80003c88 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003c8c => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003c90 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003c94 => 0x00079463 (* bnez a5,80003c9c <xQueueSemaphoreTake+0xe0>  *)
    | 0x80003c98 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003c9c => 0x00100513 (* li a0,1  *)
    | 0x80003ca0 => 0x0180006f (* j 80003cb8 <xQueueSemaphoreTake+0xfc>  *)
    | 0x80003ca4 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80003ca8 => 0x02079863 (* bnez a5,80003cd8 <xQueueSemaphoreTake+0x11c>  *)
    | 0x80003cac => 0x00e4a223 (* sw a4,4(s1)  *)
    | 0x80003cb0 => 0x16070663 (* beqz a4,80003e1c <xQueueSemaphoreTake+0x260>  *)
    | 0x80003cb4 => 0x00000513 (* li a0,0  *)
    | 0x80003cb8 => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x80003cbc => 0x03812403 (* lw s0,56(sp)  *)
    | 0x80003cc0 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x80003cc4 => 0x03012903 (* lw s2,48(sp)  *)
    | 0x80003cc8 => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x80003ccc => 0x02812a03 (* lw s4,40(sp)  *)
    | 0x80003cd0 => 0x04010113 (* add sp,sp,64  *)
    | 0x80003cd4 => 0x00008067 (* ret  *)
    | 0x80003cd8 => 0x00069663 (* bnez a3,80003ce4 <xQueueSemaphoreTake+0x128>  *)
    | 0x80003cdc => 0x01810513 (* add a0,sp,24  *)
    | 0x80003ce0 => 0x82cfe0ef (* jal 80001d0c <vTaskInternalSetTimeOutState>  *)
    | 0x80003ce4 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003ce8 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003cec => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003cf0 => 0x00079463 (* bnez a5,80003cf8 <xQueueSemaphoreTake+0x13c>  *)
    | 0x80003cf4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003cf8 => 0x96cfd0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80003cfc => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003d00 => 0x04444783 (* lbu a5,68(s0)  *)
    | 0x80003d04 => 0x0044a703 (* lw a4,4(s1)  *)
    | 0x80003d08 => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80003d0c => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80003d10 => 0x01379463 (* bne a5,s3,80003d18 <xQueueSemaphoreTake+0x15c>  *)
    | 0x80003d14 => 0x04040223 (* sb zero,68(s0)  *)
    | 0x80003d18 => 0x04544783 (* lbu a5,69(s0)  *)
    | 0x80003d1c => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80003d20 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80003d24 => 0x01379463 (* bne a5,s3,80003d2c <xQueueSemaphoreTake+0x170>  *)
    | 0x80003d28 => 0x040402a3 (* sb zero,69(s0)  *)
    | 0x80003d2c => 0x00071463 (* bnez a4,80003d34 <xQueueSemaphoreTake+0x178>  *)
    | 0x80003d30 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003d34 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80003d38 => 0x01810513 (* add a0,sp,24  *)
    | 0x80003d3c => 0xfe5fd0ef (* jal 80001d20 <xTaskCheckForTimeOut>  *)
    | 0x80003d40 => 0x08051063 (* bnez a0,80003dc0 <xQueueSemaphoreTake+0x204>  *)
    | 0x80003d44 => 0x00040513 (* mv a0,s0  *)
    | 0x80003d48 => 0xf45fe0ef (* jal 80002c8c <prvIsQueueEmpty>  *)
    | 0x80003d4c => 0x06050263 (* beqz a0,80003db0 <xQueueSemaphoreTake+0x1f4>  *)
    | 0x80003d50 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80003d54 => 0x02079a63 (* bnez a5,80003d88 <xQueueSemaphoreTake+0x1cc>  *)
    | 0x80003d58 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003d5c => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003d60 => 0x00842503 (* lw a0,8(s0)  *)
    | 0x80003d64 => 0x00178793 (* add a5,a5,1  *)
    | 0x80003d68 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003d6c => 0x8d8fe0ef (* jal 80001e44 <xTaskPriorityInherit>  *)
    | 0x80003d70 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003d74 => 0x00050913 (* mv s2,a0  *)
    | 0x80003d78 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003d7c => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003d80 => 0x00079463 (* bnez a5,80003d88 <xQueueSemaphoreTake+0x1cc>  *)
    | 0x80003d84 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003d88 => 0x00c12583 (* lw a1,12(sp)  *)
    | 0x80003d8c => 0x000a0513 (* mv a0,s4  *)
    | 0x80003d90 => 0xaedfd0ef (* jal 8000187c <vTaskPlaceOnEventList>  *)
    | 0x80003d94 => 0x00040513 (* mv a0,s0  *)
    | 0x80003d98 => 0x924ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003d9c => 0xadcfd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80003da0 => 0x00051463 (* bnez a0,80003da8 <xQueueSemaphoreTake+0x1ec>  *)
    | 0x80003da4 => 0x00000073 (* ecall  *)
    | 0x80003da8 => 0x00100693 (* li a3,1  *)
    | 0x80003dac => 0xe95ff06f (* j 80003c40 <xQueueSemaphoreTake+0x84>  *)
    | 0x80003db0 => 0x00040513 (* mv a0,s0  *)
    | 0x80003db4 => 0x908ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003db8 => 0xac0fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80003dbc => 0xfedff06f (* j 80003da8 <xQueueSemaphoreTake+0x1ec>  *)
    | 0x80003dc0 => 0x00040513 (* mv a0,s0  *)
    | 0x80003dc4 => 0x8f8ff0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80003dc8 => 0xab0fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80003dcc => 0x00040513 (* mv a0,s0  *)
    | 0x80003dd0 => 0xebdfe0ef (* jal 80002c8c <prvIsQueueEmpty>  *)
    | 0x80003dd4 => 0xfc050ae3 (* beqz a0,80003da8 <xQueueSemaphoreTake+0x1ec>  *)
    | 0x80003dd8 => 0xec090ee3 (* beqz s2,80003cb4 <xQueueSemaphoreTake+0xf8>  *)
    | 0x80003ddc => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003de0 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003de4 => 0x02442583 (* lw a1,36(s0)  *)
    | 0x80003de8 => 0x00178793 (* add a5,a5,1  *)
    | 0x80003dec => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003df0 => 0x00058a63 (* beqz a1,80003e04 <xQueueSemaphoreTake+0x248>  *)
    | 0x80003df4 => 0x03042783 (* lw a5,48(s0)  *)
    | 0x80003df8 => 0x00900593 (* li a1,9  *)
    | 0x80003dfc => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80003e00 => 0x40f585b3 (* sub a1,a1,a5  *)
    | 0x80003e04 => 0x00842503 (* lw a0,8(s0)  *)
    | 0x80003e08 => 0xa90fe0ef (* jal 80002098 <vTaskPriorityDisinheritAfterTimeout>  *)
    | 0x80003e0c => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003e10 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003e14 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003e18 => 0xe8079ee3 (* bnez a5,80003cb4 <xQueueSemaphoreTake+0xf8>  *)
    | 0x80003e1c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003e20 => 0xe95ff06f (* j 80003cb4 <xQueueSemaphoreTake+0xf8>  *)
    (* <xQueueTakeMutexRecursive> *)
    | 0x80003e24 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80003e28 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80003e2c => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80003e30 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80003e34 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80003e38 => 0x00050413 (* mv s0,a0  *)
    | 0x80003e3c => 0x00058493 (* mv s1,a1  *)
    | 0x80003e40 => 0x00051a63 (* bnez a0,80003e54 <xQueueTakeMutexRecursive+0x30>  *)
    | 0x80003e44 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003e48 => 0x33700593 (* li a1,823  *)
    | 0x80003e4c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003e50 => 0x4400e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003e54 => 0x00842903 (* lw s2,8(s0)  *)
    | 0x80003e58 => 0xfc9fd0ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x80003e5c => 0x02a91663 (* bne s2,a0,80003e88 <xQueueTakeMutexRecursive+0x64>  *)
    | 0x80003e60 => 0x00c42783 (* lw a5,12(s0)  *)
    | 0x80003e64 => 0x00100513 (* li a0,1  *)
    | 0x80003e68 => 0x00178793 (* add a5,a5,1  *)
    | 0x80003e6c => 0x00f42623 (* sw a5,12(s0)  *)
    | 0x80003e70 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80003e74 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80003e78 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80003e7c => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80003e80 => 0x01010113 (* add sp,sp,16  *)
    | 0x80003e84 => 0x00008067 (* ret  *)
    | 0x80003e88 => 0x00048593 (* mv a1,s1  *)
    | 0x80003e8c => 0x00040513 (* mv a0,s0  *)
    | 0x80003e90 => 0xd2dff0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80003e94 => 0xfc050ee3 (* beqz a0,80003e70 <xQueueTakeMutexRecursive+0x4c>  *)
    | 0x80003e98 => 0x00c42783 (* lw a5,12(s0)  *)
    | 0x80003e9c => 0x00178793 (* add a5,a5,1  *)
    | 0x80003ea0 => 0x00f42623 (* sw a5,12(s0)  *)
    | 0x80003ea4 => 0xfcdff06f (* j 80003e70 <xQueueTakeMutexRecursive+0x4c>  *)
    (* <xQueuePeek> *)
    | 0x80003ea8 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80003eac => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x80003eb0 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x80003eb4 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x80003eb8 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x80003ebc => 0x03312623 (* sw s3,44(sp)  *)
    | 0x80003ec0 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x80003ec4 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x80003ec8 => 0x00050413 (* mv s0,a0  *)
    | 0x80003ecc => 0x00058913 (* mv s2,a1  *)
    | 0x80003ed0 => 0x00051a63 (* bnez a0,80003ee4 <xQueuePeek+0x3c>  *)
    | 0x80003ed4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003ed8 => 0x76100593 (* li a1,1889  *)
    | 0x80003edc => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003ee0 => 0x3b00e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003ee4 => 0x00091e63 (* bnez s2,80003f00 <xQueuePeek+0x58>  *)
    | 0x80003ee8 => 0x04042783 (* lw a5,64(s0)  *)
    | 0x80003eec => 0x00078a63 (* beqz a5,80003f00 <xQueuePeek+0x58>  *)
    | 0x80003ef0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003ef4 => 0x76500593 (* li a1,1893  *)
    | 0x80003ef8 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003efc => 0x3940e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003f00 => 0xf29fd0ef (* jal 80001e28 <xTaskGetSchedulerState>  *)
    | 0x80003f04 => 0x00051e63 (* bnez a0,80003f20 <xQueuePeek+0x78>  *)
    | 0x80003f08 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80003f0c => 0x00078a63 (* beqz a5,80003f20 <xQueuePeek+0x78>  *)
    | 0x80003f10 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80003f14 => 0x76a00593 (* li a1,1898  *)
    | 0x80003f18 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80003f1c => 0x3740e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80003f20 => 0x00000713 (* li a4,0  *)
    | 0x80003f24 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80003f28 => 0xfff00993 (* li s3,-1  *)
    | 0x80003f2c => 0x02440a13 (* add s4,s0,36  *)
    | 0x80003f30 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003f34 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80003f38 => 0x00178693 (* add a3,a5,1  *)
    | 0x80003f3c => 0x00d4a223 (* sw a3,4(s1)  *)
    | 0x80003f40 => 0x03842683 (* lw a3,56(s0)  *)
    | 0x80003f44 => 0x06068463 (* beqz a3,80003fac <xQueuePeek+0x104>  *)
    | 0x80003f48 => 0x00090593 (* mv a1,s2  *)
    | 0x80003f4c => 0x00040513 (* mv a0,s0  *)
    | 0x80003f50 => 0x00c42983 (* lw s3,12(s0)  *)
    | 0x80003f54 => 0xe35fe0ef (* jal 80002d88 <prvCopyDataFromQueue>  *)
    | 0x80003f58 => 0x02442783 (* lw a5,36(s0)  *)
    | 0x80003f5c => 0x01342623 (* sw s3,12(s0)  *)
    | 0x80003f60 => 0x00078a63 (* beqz a5,80003f74 <xQueuePeek+0xcc>  *)
    | 0x80003f64 => 0x02440513 (* add a0,s0,36  *)
    | 0x80003f68 => 0xaddfd0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80003f6c => 0x00050463 (* beqz a0,80003f74 <xQueuePeek+0xcc>  *)
    | 0x80003f70 => 0x00000073 (* ecall  *)
    | 0x80003f74 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003f78 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003f7c => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003f80 => 0x00079463 (* bnez a5,80003f88 <xQueuePeek+0xe0>  *)
    | 0x80003f84 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003f88 => 0x00100513 (* li a0,1  *)
    | 0x80003f8c => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x80003f90 => 0x03812403 (* lw s0,56(sp)  *)
    | 0x80003f94 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x80003f98 => 0x03012903 (* lw s2,48(sp)  *)
    | 0x80003f9c => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x80003fa0 => 0x02812a03 (* lw s4,40(sp)  *)
    | 0x80003fa4 => 0x04010113 (* add sp,sp,64  *)
    | 0x80003fa8 => 0x00008067 (* ret  *)
    | 0x80003fac => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x80003fb0 => 0x00069c63 (* bnez a3,80003fc8 <xQueuePeek+0x120>  *)
    | 0x80003fb4 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003fb8 => 0x00079463 (* bnez a5,80003fc0 <xQueuePeek+0x118>  *)
    | 0x80003fbc => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003fc0 => 0x00000513 (* li a0,0  *)
    | 0x80003fc4 => 0xfc9ff06f (* j 80003f8c <xQueuePeek+0xe4>  *)
    | 0x80003fc8 => 0x00071663 (* bnez a4,80003fd4 <xQueuePeek+0x12c>  *)
    | 0x80003fcc => 0x01810513 (* add a0,sp,24  *)
    | 0x80003fd0 => 0xd3dfd0ef (* jal 80001d0c <vTaskInternalSetTimeOutState>  *)
    | 0x80003fd4 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80003fd8 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80003fdc => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80003fe0 => 0x00079463 (* bnez a5,80003fe8 <xQueuePeek+0x140>  *)
    | 0x80003fe4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80003fe8 => 0xe7dfc0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80003fec => 0x30047073 (* csrc mstatus,8  *)
    | 0x80003ff0 => 0x04444783 (* lbu a5,68(s0)  *)
    | 0x80003ff4 => 0x0044a703 (* lw a4,4(s1)  *)
    | 0x80003ff8 => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80003ffc => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80004000 => 0x01379463 (* bne a5,s3,80004008 <xQueuePeek+0x160>  *)
    | 0x80004004 => 0x04040223 (* sb zero,68(s0)  *)
    | 0x80004008 => 0x04544783 (* lbu a5,69(s0)  *)
    | 0x8000400c => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80004010 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80004014 => 0x01379463 (* bne a5,s3,8000401c <xQueuePeek+0x174>  *)
    | 0x80004018 => 0x040402a3 (* sb zero,69(s0)  *)
    | 0x8000401c => 0x00071463 (* bnez a4,80004024 <xQueuePeek+0x17c>  *)
    | 0x80004020 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004024 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80004028 => 0x01810513 (* add a0,sp,24  *)
    | 0x8000402c => 0xcf5fd0ef (* jal 80001d20 <xTaskCheckForTimeOut>  *)
    | 0x80004030 => 0x04051463 (* bnez a0,80004078 <xQueuePeek+0x1d0>  *)
    | 0x80004034 => 0x00040513 (* mv a0,s0  *)
    | 0x80004038 => 0xc55fe0ef (* jal 80002c8c <prvIsQueueEmpty>  *)
    | 0x8000403c => 0x02050663 (* beqz a0,80004068 <xQueuePeek+0x1c0>  *)
    | 0x80004040 => 0x00c12583 (* lw a1,12(sp)  *)
    | 0x80004044 => 0x000a0513 (* mv a0,s4  *)
    | 0x80004048 => 0x835fd0ef (* jal 8000187c <vTaskPlaceOnEventList>  *)
    | 0x8000404c => 0x00040513 (* mv a0,s0  *)
    | 0x80004050 => 0xe6dfe0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80004054 => 0x824fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80004058 => 0x00051463 (* bnez a0,80004060 <xQueuePeek+0x1b8>  *)
    | 0x8000405c => 0x00000073 (* ecall  *)
    | 0x80004060 => 0x00100713 (* li a4,1  *)
    | 0x80004064 => 0xecdff06f (* j 80003f30 <xQueuePeek+0x88>  *)
    | 0x80004068 => 0x00040513 (* mv a0,s0  *)
    | 0x8000406c => 0xe51fe0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80004070 => 0x808fd0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80004074 => 0xfedff06f (* j 80004060 <xQueuePeek+0x1b8>  *)
    | 0x80004078 => 0x00040513 (* mv a0,s0  *)
    | 0x8000407c => 0xe41fe0ef (* jal 80002ebc <prvUnlockQueue>  *)
    | 0x80004080 => 0xff9fc0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80004084 => 0x00040513 (* mv a0,s0  *)
    | 0x80004088 => 0xc05fe0ef (* jal 80002c8c <prvIsQueueEmpty>  *)
    | 0x8000408c => 0xfc050ae3 (* beqz a0,80004060 <xQueuePeek+0x1b8>  *)
    | 0x80004090 => 0xf31ff06f (* j 80003fc0 <xQueuePeek+0x118>  *)
    (* <xQueueReceiveFromISR> *)
    | 0x80004094 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004098 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000409c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800040a0 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x800040a4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800040a8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800040ac => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800040b0 => 0x00050413 (* mv s0,a0  *)
    | 0x800040b4 => 0x00058a13 (* mv s4,a1  *)
    | 0x800040b8 => 0x00060913 (* mv s2,a2  *)
    | 0x800040bc => 0x00051a63 (* bnez a0,800040d0 <xQueueReceiveFromISR+0x3c>  *)
    | 0x800040c0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800040c4 => 0x7fd00593 (* li a1,2045  *)
    | 0x800040c8 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800040cc => 0x1c40e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800040d0 => 0x000a1e63 (* bnez s4,800040ec <xQueueReceiveFromISR+0x58>  *)
    | 0x800040d4 => 0x04042783 (* lw a5,64(s0)  *)
    | 0x800040d8 => 0x00078a63 (* beqz a5,800040ec <xQueueReceiveFromISR+0x58>  *)
    | 0x800040dc => 0x80014537 (* lui a0,0x80014  *)
    | 0x800040e0 => 0x7fe00593 (* li a1,2046  *)
    | 0x800040e4 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800040e8 => 0x1a80e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800040ec => 0x03842983 (* lw s3,56(s0)  *)
    | 0x800040f0 => 0x00000513 (* li a0,0  *)
    | 0x800040f4 => 0x04098863 (* beqz s3,80004144 <xQueueReceiveFromISR+0xb0>  *)
    | 0x800040f8 => 0x04444483 (* lbu s1,68(s0)  *)
    | 0x800040fc => 0x000a0593 (* mv a1,s4  *)
    | 0x80004100 => 0x00040513 (* mv a0,s0  *)
    | 0x80004104 => 0xc85fe0ef (* jal 80002d88 <prvCopyDataFromQueue>  *)
    | 0x80004108 => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x8000410c => 0xfff98993 (* add s3,s3,-1  *)
    | 0x80004110 => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x80004114 => 0x03342c23 (* sw s3,56(s0)  *)
    | 0x80004118 => 0xfff00793 (* li a5,-1  *)
    | 0x8000411c => 0x04f49463 (* bne s1,a5,80004164 <xQueueReceiveFromISR+0xd0>  *)
    | 0x80004120 => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80004124 => 0x00078e63 (* beqz a5,80004140 <xQueueReceiveFromISR+0xac>  *)
    | 0x80004128 => 0x01040513 (* add a0,s0,16  *)
    | 0x8000412c => 0x919fd0ef (* jal 80001a44 <xTaskRemoveFromEventList>  *)
    | 0x80004130 => 0x00050863 (* beqz a0,80004140 <xQueueReceiveFromISR+0xac>  *)
    | 0x80004134 => 0x00090663 (* beqz s2,80004140 <xQueueReceiveFromISR+0xac>  *)
    | 0x80004138 => 0x00100793 (* li a5,1  *)
    | 0x8000413c => 0x00f92023 (* sw a5,0(s2)  *)
    | 0x80004140 => 0x00100513 (* li a0,1  *)
    | 0x80004144 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004148 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000414c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80004150 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80004154 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80004158 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000415c => 0x02010113 (* add sp,sp,32  *)
    | 0x80004160 => 0x00008067 (* ret  *)
    | 0x80004164 => 0xd21fc0ef (* jal 80000e84 <uxTaskGetNumberOfTasks>  *)
    | 0x80004168 => 0xfca4fce3 (* bgeu s1,a0,80004140 <xQueueReceiveFromISR+0xac>  *)
    | 0x8000416c => 0x07f00793 (* li a5,127  *)
    | 0x80004170 => 0x00f49c63 (* bne s1,a5,80004188 <xQueueReceiveFromISR+0xf4>  *)
    | 0x80004174 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80004178 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000417c => 0x84458593 (* add a1,a1,-1980 # 844 <__stack_size+0x6e6>  *)
    | 0x80004180 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80004184 => 0x10c0e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004188 => 0x00148493 (* add s1,s1,1  *)
    | 0x8000418c => 0x01849493 (* sll s1,s1,0x18  *)
    | 0x80004190 => 0x4184d493 (* sra s1,s1,0x18  *)
    | 0x80004194 => 0x04940223 (* sb s1,68(s0)  *)
    | 0x80004198 => 0xfa9ff06f (* j 80004140 <xQueueReceiveFromISR+0xac>  *)
    (* <xQueuePeekFromISR> *)
    | 0x8000419c => 0xff010113 (* add sp,sp,-16  *)
    | 0x800041a0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800041a4 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800041a8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800041ac => 0x01212023 (* sw s2,0(sp)  *)
    | 0x800041b0 => 0x00050413 (* mv s0,a0  *)
    | 0x800041b4 => 0x00058493 (* mv s1,a1  *)
    | 0x800041b8 => 0x00051c63 (* bnez a0,800041d0 <xQueuePeekFromISR+0x34>  *)
    | 0x800041bc => 0x000015b7 (* lui a1,0x1  *)
    | 0x800041c0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800041c4 => 0x86158593 (* add a1,a1,-1951 # 861 <__stack_size+0x703>  *)
    | 0x800041c8 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800041cc => 0x0c40e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800041d0 => 0x04042783 (* lw a5,64(s0)  *)
    | 0x800041d4 => 0x06049663 (* bnez s1,80004240 <xQueuePeekFromISR+0xa4>  *)
    | 0x800041d8 => 0x04079a63 (* bnez a5,8000422c <xQueuePeekFromISR+0x90>  *)
    | 0x800041dc => 0x000015b7 (* lui a1,0x1  *)
    | 0x800041e0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800041e4 => 0x86358593 (* add a1,a1,-1949 # 863 <__stack_size+0x705>  *)
    | 0x800041e8 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800041ec => 0x0a40e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800041f0 => 0x03842783 (* lw a5,56(s0)  *)
    | 0x800041f4 => 0x00000513 (* li a0,0  *)
    | 0x800041f8 => 0x00078e63 (* beqz a5,80004214 <xQueuePeekFromISR+0x78>  *)
    | 0x800041fc => 0x00c42903 (* lw s2,12(s0)  *)
    | 0x80004200 => 0x00040513 (* mv a0,s0  *)
    | 0x80004204 => 0x00048593 (* mv a1,s1  *)
    | 0x80004208 => 0xb81fe0ef (* jal 80002d88 <prvCopyDataFromQueue>  *)
    | 0x8000420c => 0x00100513 (* li a0,1  *)
    | 0x80004210 => 0x01242623 (* sw s2,12(s0)  *)
    | 0x80004214 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004218 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000421c => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80004220 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80004224 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004228 => 0x00008067 (* ret  *)
    | 0x8000422c => 0x000015b7 (* lui a1,0x1  *)
    | 0x80004230 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004234 => 0x86258593 (* add a1,a1,-1950 # 862 <__stack_size+0x704>  *)
    | 0x80004238 => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x8000423c => 0x0540e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004240 => 0x04042783 (* lw a5,64(s0)  *)
    | 0x80004244 => 0xfa0796e3 (* bnez a5,800041f0 <xQueuePeekFromISR+0x54>  *)
    | 0x80004248 => 0xf95ff06f (* j 800041dc <xQueuePeekFromISR+0x40>  *)
    (* <uxQueueMessagesWaiting> *)
    | 0x8000424c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004250 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004254 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004258 => 0x00050413 (* mv s0,a0  *)
    | 0x8000425c => 0x00051c63 (* bnez a0,80004274 <uxQueueMessagesWaiting+0x28>  *)
    | 0x80004260 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80004264 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004268 => 0x89b58593 (* add a1,a1,-1893 # 89b <__stack_size+0x73d>  *)
    | 0x8000426c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80004270 => 0x0200e0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004274 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80004278 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x8000427c => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80004280 => 0x03842503 (* lw a0,56(s0)  *)
    | 0x80004284 => 0x00079463 (* bnez a5,8000428c <uxQueueMessagesWaiting+0x40>  *)
    | 0x80004288 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000428c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004290 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004294 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004298 => 0x00008067 (* ret  *)
    (* <uxQueueSpacesAvailable> *)
    | 0x8000429c => 0xff010113 (* add sp,sp,-16  *)
    | 0x800042a0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800042a4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800042a8 => 0x00050413 (* mv s0,a0  *)
    | 0x800042ac => 0x00051c63 (* bnez a0,800042c4 <uxQueueSpacesAvailable+0x28>  *)
    | 0x800042b0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800042b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800042b8 => 0x8b058593 (* add a1,a1,-1872 # 8b0 <__stack_size+0x752>  *)
    | 0x800042bc => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800042c0 => 0x7d10d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800042c4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x800042c8 => 0x03842783 (* lw a5,56(s0)  *)
    | 0x800042cc => 0x03c42503 (* lw a0,60(s0)  *)
    | 0x800042d0 => 0x40f50533 (* sub a0,a0,a5  *)
    | 0x800042d4 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x800042d8 => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x800042dc => 0x00079463 (* bnez a5,800042e4 <uxQueueSpacesAvailable+0x48>  *)
    | 0x800042e0 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800042e4 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800042e8 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800042ec => 0x01010113 (* add sp,sp,16  *)
    | 0x800042f0 => 0x00008067 (* ret  *)
    (* <vQueueAddToRegistry> *)
    | 0x800042f4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800042f8 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800042fc => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80004300 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004304 => 0x00050413 (* mv s0,a0  *)
    | 0x80004308 => 0x00058493 (* mv s1,a1  *)
    | 0x8000430c => 0x00051c63 (* bnez a0,80004324 <vQueueAddToRegistry+0x30>  *)
    | 0x80004310 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80004314 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004318 => 0xbc958593 (* add a1,a1,-1079 # bc9 <__stack_size+0xa6b>  *)
    | 0x8000431c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80004320 => 0x7710d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004324 => 0x04048a63 (* beqz s1,80004378 <vQueueAddToRegistry+0x84>  *)
    | 0x80004328 => 0xd1818693 (* add a3,gp,-744 # 80080518 <xQueueRegistry>  *)
    | 0x8000432c => 0x00000793 (* li a5,0  *)
    | 0x80004330 => 0x00000713 (* li a4,0  *)
    | 0x80004334 => 0xd1818613 (* add a2,gp,-744 # 80080518 <xQueueRegistry>  *)
    | 0x80004338 => 0x00a00593 (* li a1,10  *)
    | 0x8000433c => 0x0046a503 (* lw a0,4(a3)  *)
    | 0x80004340 => 0x00851c63 (* bne a0,s0,80004358 <vQueueAddToRegistry+0x64>  *)
    | 0x80004344 => 0x00371713 (* sll a4,a4,0x3  *)
    | 0x80004348 => 0x00e607b3 (* add a5,a2,a4  *)
    | 0x8000434c => 0x0097a023 (* sw s1,0(a5)  *)
    | 0x80004350 => 0x0087a223 (* sw s0,4(a5)  *)
    | 0x80004354 => 0x0240006f (* j 80004378 <vQueueAddToRegistry+0x84>  *)
    | 0x80004358 => 0x00079863 (* bnez a5,80004368 <vQueueAddToRegistry+0x74>  *)
    | 0x8000435c => 0x0006a503 (* lw a0,0(a3)  *)
    | 0x80004360 => 0x00051463 (* bnez a0,80004368 <vQueueAddToRegistry+0x74>  *)
    | 0x80004364 => 0x00068793 (* mv a5,a3  *)
    | 0x80004368 => 0x00170713 (* add a4,a4,1  *)
    | 0x8000436c => 0x00868693 (* add a3,a3,8  *)
    | 0x80004370 => 0xfcb716e3 (* bne a4,a1,8000433c <vQueueAddToRegistry+0x48>  *)
    | 0x80004374 => 0xfc079ce3 (* bnez a5,8000434c <vQueueAddToRegistry+0x58>  *)
    | 0x80004378 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000437c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004380 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80004384 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004388 => 0x00008067 (* ret  *)
    (* <vQueueUnregisterQueue> *)
    | 0x8000438c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004390 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004394 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004398 => 0x00050413 (* mv s0,a0  *)
    | 0x8000439c => 0x00051c63 (* bnez a0,800043b4 <vQueueUnregisterQueue+0x28>  *)
    | 0x800043a0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800043a4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800043a8 => 0xc1d58593 (* add a1,a1,-995 # c1d <__stack_size+0xabf>  *)
    | 0x800043ac => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x800043b0 => 0x6e10d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800043b4 => 0xd1818693 (* add a3,gp,-744 # 80080518 <xQueueRegistry>  *)
    | 0x800043b8 => 0x00000713 (* li a4,0  *)
    | 0x800043bc => 0xd1818793 (* add a5,gp,-744 # 80080518 <xQueueRegistry>  *)
    | 0x800043c0 => 0x00a00613 (* li a2,10  *)
    | 0x800043c4 => 0x0046a583 (* lw a1,4(a3)  *)
    | 0x800043c8 => 0x02859263 (* bne a1,s0,800043ec <vQueueUnregisterQueue+0x60>  *)
    | 0x800043cc => 0x00371713 (* sll a4,a4,0x3  *)
    | 0x800043d0 => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x800043d4 => 0x0007a023 (* sw zero,0(a5)  *)
    | 0x800043d8 => 0x0007a223 (* sw zero,4(a5)  *)
    | 0x800043dc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800043e0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800043e4 => 0x01010113 (* add sp,sp,16  *)
    | 0x800043e8 => 0x00008067 (* ret  *)
    | 0x800043ec => 0x00170713 (* add a4,a4,1  *)
    | 0x800043f0 => 0x00868693 (* add a3,a3,8  *)
    | 0x800043f4 => 0xfcc718e3 (* bne a4,a2,800043c4 <vQueueUnregisterQueue+0x38>  *)
    | 0x800043f8 => 0xfe5ff06f (* j 800043dc <vQueueUnregisterQueue+0x50>  *)
    (* <vQueueDelete> *)
    | 0x800043fc => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004400 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004404 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004408 => 0x00050413 (* mv s0,a0  *)
    | 0x8000440c => 0x00051c63 (* bnez a0,80004424 <vQueueDelete+0x28>  *)
    | 0x80004410 => 0x000015b7 (* lui a1,0x1  *)
    | 0x80004414 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004418 => 0x8d458593 (* add a1,a1,-1836 # 8d4 <__stack_size+0x776>  *)
    | 0x8000441c => 0xbf850513 (* add a0,a0,-1032 # 80013bf8 <_etext+0x28>  *)
    | 0x80004420 => 0x6710d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004424 => 0x00040513 (* mv a0,s0  *)
    | 0x80004428 => 0xf65ff0ef (* jal 8000438c <vQueueUnregisterQueue>  *)
    | 0x8000442c => 0x04644783 (* lbu a5,70(s0)  *)
    | 0x80004430 => 0x00079c63 (* bnez a5,80004448 <vQueueDelete+0x4c>  *)
    | 0x80004434 => 0x00040513 (* mv a0,s0  *)
    | 0x80004438 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000443c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004440 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004444 => 0x1480206f (* j 8000658c <vPortFree>  *)
    | 0x80004448 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000444c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004450 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004454 => 0x00008067 (* ret  *)
    (* <vQueueWaitForMessageRestricted> *)
    | 0x80004458 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000445c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004460 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004464 => 0x00050413 (* mv s0,a0  *)
    | 0x80004468 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000446c => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80004470 => 0x0047a703 (* lw a4,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80004474 => 0x04454783 (* lbu a5,68(a0)  *)
    | 0x80004478 => 0xfff00693 (* li a3,-1  *)
    | 0x8000447c => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80004480 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x80004484 => 0x00d79463 (* bne a5,a3,8000448c <vQueueWaitForMessageRestricted+0x34>  *)
    | 0x80004488 => 0x04050223 (* sb zero,68(a0)  *)
    | 0x8000448c => 0x04544783 (* lbu a5,69(s0)  *)
    | 0x80004490 => 0xfff00693 (* li a3,-1  *)
    | 0x80004494 => 0x01879793 (* sll a5,a5,0x18  *)
    | 0x80004498 => 0x4187d793 (* sra a5,a5,0x18  *)
    | 0x8000449c => 0x00d79463 (* bne a5,a3,800044a4 <vQueueWaitForMessageRestricted+0x4c>  *)
    | 0x800044a0 => 0x040402a3 (* sb zero,69(s0)  *)
    | 0x800044a4 => 0x00071463 (* bnez a4,800044ac <vQueueWaitForMessageRestricted+0x54>  *)
    | 0x800044a8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800044ac => 0x03842783 (* lw a5,56(s0)  *)
    | 0x800044b0 => 0x00079663 (* bnez a5,800044bc <vQueueWaitForMessageRestricted+0x64>  *)
    | 0x800044b4 => 0x02440513 (* add a0,s0,36  *)
    | 0x800044b8 => 0xce8fd0ef (* jal 800019a0 <vTaskPlaceOnEventListRestricted>  *)
    | 0x800044bc => 0x00040513 (* mv a0,s0  *)
    | 0x800044c0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800044c4 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800044c8 => 0x01010113 (* add sp,sp,16  *)
    | 0x800044cc => 0x9f1fe06f (* j 80002ebc <prvUnlockQueue>  *)
    (* <xQueueCreateSet> *)
    | 0x800044d0 => 0x00500613 (* li a2,5  *)
    | 0x800044d4 => 0x00400593 (* li a1,4  *)
    | 0x800044d8 => 0xcf5fe06f (* j 800031cc <xQueueGenericCreate>  *)
    (* <xQueueAddToSet> *)
    | 0x800044dc => 0x00050793 (* mv a5,a0  *)
    | 0x800044e0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x800044e4 => 0x04852683 (* lw a3,72(a0)  *)
    | 0x800044e8 => 0x80080737 (* lui a4,0x80080  *)
    | 0x800044ec => 0x00472703 (* lw a4,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x800044f0 => 0x00000513 (* li a0,0  *)
    | 0x800044f4 => 0x00069a63 (* bnez a3,80004508 <xQueueAddToSet+0x2c>  *)
    | 0x800044f8 => 0x0387a683 (* lw a3,56(a5)  *)
    | 0x800044fc => 0x00069663 (* bnez a3,80004508 <xQueueAddToSet+0x2c>  *)
    | 0x80004500 => 0x04b7a423 (* sw a1,72(a5)  *)
    | 0x80004504 => 0x00100513 (* li a0,1  *)
    | 0x80004508 => 0x00071463 (* bnez a4,80004510 <xQueueAddToSet+0x34>  *)
    | 0x8000450c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004510 => 0x00008067 (* ret  *)
    (* <xQueueRemoveFromSet> *)
    | 0x80004514 => 0x04852703 (* lw a4,72(a0)  *)
    | 0x80004518 => 0x00050793 (* mv a5,a0  *)
    | 0x8000451c => 0x00000513 (* li a0,0  *)
    | 0x80004520 => 0x02b71863 (* bne a4,a1,80004550 <xQueueRemoveFromSet+0x3c>  *)
    | 0x80004524 => 0x0387a703 (* lw a4,56(a5)  *)
    | 0x80004528 => 0x00000513 (* li a0,0  *)
    | 0x8000452c => 0x02071263 (* bnez a4,80004550 <xQueueRemoveFromSet+0x3c>  *)
    | 0x80004530 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80004534 => 0x80080737 (* lui a4,0x80080  *)
    | 0x80004538 => 0x00472703 (* lw a4,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x8000453c => 0x0407a423 (* sw zero,72(a5)  *)
    | 0x80004540 => 0x00071463 (* bnez a4,80004548 <xQueueRemoveFromSet+0x34>  *)
    | 0x80004544 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004548 => 0x00100513 (* li a0,1  *)
    | 0x8000454c => 0x00008067 (* ret  *)
    | 0x80004550 => 0x00008067 (* ret  *)
    (* <xQueueSelectFromSet> *)
    | 0x80004554 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004558 => 0x00058613 (* mv a2,a1  *)
    | 0x8000455c => 0x00c10593 (* add a1,sp,12  *)
    | 0x80004560 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80004564 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80004568 => 0xc60ff0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000456c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004570 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80004574 => 0x02010113 (* add sp,sp,32  *)
    | 0x80004578 => 0x00008067 (* ret  *)
    (* <xQueueSelectFromSetFromISR> *)
    | 0x8000457c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004580 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80004584 => 0x00000613 (* li a2,0  *)
    | 0x80004588 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000458c => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80004590 => 0xb05ff0ef (* jal 80004094 <xQueueReceiveFromISR>  *)
    | 0x80004594 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004598 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x8000459c => 0x02010113 (* add sp,sp,32  *)
    | 0x800045a0 => 0x00008067 (* ret  *)
    (* <prvInsertTimerInActiveList> *)
    | 0x800045a4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800045a8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800045ac => 0x00b52223 (* sw a1,4(a0)  *)
    | 0x800045b0 => 0x00a52823 (* sw a0,16(a0)  *)
    | 0x800045b4 => 0x00050793 (* mv a5,a0  *)
    | 0x800045b8 => 0x02b66863 (* bltu a2,a1,800045e8 <prvInsertTimerInActiveList+0x44>  *)
    | 0x800045bc => 0x01852703 (* lw a4,24(a0)  *)
    | 0x800045c0 => 0x40d60633 (* sub a2,a2,a3  *)
    | 0x800045c4 => 0x00100513 (* li a0,1  *)
    | 0x800045c8 => 0x00e67a63 (* bgeu a2,a4,800045dc <prvInsertTimerInActiveList+0x38>  *)
    | 0x800045cc => 0x00478593 (* add a1,a5,4  *)
    | 0x800045d0 => 0x8a81a503 (* lw a0,-1880(gp) # 800800a8 <pxOverflowTimerList>  *)
    | 0x800045d4 => 0xe34fe0ef (* jal 80002c08 <vListInsert>  *)
    | 0x800045d8 => 0x00000513 (* li a0,0  *)
    | 0x800045dc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800045e0 => 0x01010113 (* add sp,sp,16  *)
    | 0x800045e4 => 0x00008067 (* ret  *)
    | 0x800045e8 => 0x00d67663 (* bgeu a2,a3,800045f4 <prvInsertTimerInActiveList+0x50>  *)
    | 0x800045ec => 0x00100513 (* li a0,1  *)
    | 0x800045f0 => 0xfed5f6e3 (* bgeu a1,a3,800045dc <prvInsertTimerInActiveList+0x38>  *)
    | 0x800045f4 => 0x00478593 (* add a1,a5,4  *)
    | 0x800045f8 => 0x8ac1a503 (* lw a0,-1876(gp) # 800800ac <pxCurrentTimerList>  *)
    | 0x800045fc => 0xfd9ff06f (* j 800045d4 <prvInsertTimerInActiveList+0x30>  *)
    (* <prvReloadTimer> *)
    | 0x80004600 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004604 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004608 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x8000460c => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80004610 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004614 => 0x00050413 (* mv s0,a0  *)
    | 0x80004618 => 0x00058493 (* mv s1,a1  *)
    | 0x8000461c => 0x00060913 (* mv s2,a2  *)
    | 0x80004620 => 0x01842583 (* lw a1,24(s0)  *)
    | 0x80004624 => 0x00048693 (* mv a3,s1  *)
    | 0x80004628 => 0x00090613 (* mv a2,s2  *)
    | 0x8000462c => 0x00b485b3 (* add a1,s1,a1  *)
    | 0x80004630 => 0x00040513 (* mv a0,s0  *)
    | 0x80004634 => 0xf71ff0ef (* jal 800045a4 <prvInsertTimerInActiveList>  *)
    | 0x80004638 => 0x00051e63 (* bnez a0,80004654 <prvReloadTimer+0x54>  *)
    | 0x8000463c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004640 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004644 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80004648 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x8000464c => 0x01010113 (* add sp,sp,16  *)
    | 0x80004650 => 0x00008067 (* ret  *)
    | 0x80004654 => 0x01842783 (* lw a5,24(s0)  *)
    | 0x80004658 => 0x00040513 (* mv a0,s0  *)
    | 0x8000465c => 0x00f484b3 (* add s1,s1,a5  *)
    | 0x80004660 => 0x02042783 (* lw a5,32(s0)  *)
    | 0x80004664 => 0x000780e7 (* jalr a5  *)
    | 0x80004668 => 0xfb9ff06f (* j 80004620 <prvReloadTimer+0x20>  *)
    (* <prvProcessExpiredTimer> *)
    | 0x8000466c => 0x8ac1a783 (* lw a5,-1876(gp) # 800800ac <pxCurrentTimerList>  *)
    | 0x80004670 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004674 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80004678 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x8000467c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80004680 => 0x00050493 (* mv s1,a0  *)
    | 0x80004684 => 0x00c7a403 (* lw s0,12(a5)  *)
    | 0x80004688 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000468c => 0x00b12623 (* sw a1,12(sp)  *)
    | 0x80004690 => 0x00440513 (* add a0,s0,4  *)
    | 0x80004694 => 0xdc4fe0ef (* jal 80002c58 <uxListRemove>  *)
    | 0x80004698 => 0x02844783 (* lbu a5,40(s0)  *)
    | 0x8000469c => 0x00c12603 (* lw a2,12(sp)  *)
    | 0x800046a0 => 0x0047f713 (* and a4,a5,4  *)
    | 0x800046a4 => 0x02070663 (* beqz a4,800046d0 <prvProcessExpiredTimer+0x64>  *)
    | 0x800046a8 => 0x00048593 (* mv a1,s1  *)
    | 0x800046ac => 0x00040513 (* mv a0,s0  *)
    | 0x800046b0 => 0xf51ff0ef (* jal 80004600 <prvReloadTimer>  *)
    | 0x800046b4 => 0x02042783 (* lw a5,32(s0)  *)
    | 0x800046b8 => 0x00040513 (* mv a0,s0  *)
    | 0x800046bc => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800046c0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800046c4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800046c8 => 0x02010113 (* add sp,sp,32  *)
    | 0x800046cc => 0x00078067 (* jr a5  *)
    | 0x800046d0 => 0xffe7f793 (* and a5,a5,-2  *)
    | 0x800046d4 => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x800046d8 => 0xfddff06f (* j 800046b4 <prvProcessExpiredTimer+0x48>  *)
    (* <prvSampleTimeNow> *)
    | 0x800046dc => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800046e0 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800046e4 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800046e8 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800046ec => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800046f0 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800046f4 => 0x00050493 (* mv s1,a0  *)
    | 0x800046f8 => 0xf7cfc0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800046fc => 0x89c1a783 (* lw a5,-1892(gp) # 8008009c <xLastTime.2>  *)
    | 0x80004700 => 0x00050413 (* mv s0,a0  *)
    | 0x80004704 => 0x02f57263 (* bgeu a0,a5,80004728 <prvSampleTimeNow+0x4c>  *)
    | 0x80004708 => 0x8ac1a783 (* lw a5,-1876(gp) # 800800ac <pxCurrentTimerList>  *)
    | 0x8000470c => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80004710 => 0x04071263 (* bnez a4,80004754 <prvSampleTimeNow+0x78>  *)
    | 0x80004714 => 0x8a81a683 (* lw a3,-1880(gp) # 800800a8 <pxOverflowTimerList>  *)
    | 0x80004718 => 0x8af1a423 (* sw a5,-1880(gp) # 800800a8 <pxOverflowTimerList>  *)
    | 0x8000471c => 0x00100793 (* li a5,1  *)
    | 0x80004720 => 0x8ad1a623 (* sw a3,-1876(gp) # 800800ac <pxCurrentTimerList>  *)
    | 0x80004724 => 0x0080006f (* j 8000472c <prvSampleTimeNow+0x50>  *)
    | 0x80004728 => 0x00000793 (* li a5,0  *)
    | 0x8000472c => 0x8881ae23 (* sw s0,-1892(gp) # 8008009c <xLastTime.2>  *)
    | 0x80004730 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004734 => 0x00040513 (* mv a0,s0  *)
    | 0x80004738 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000473c => 0x00f4a023 (* sw a5,0(s1)  *)
    | 0x80004740 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80004744 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80004748 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000474c => 0x02010113 (* add sp,sp,32  *)
    | 0x80004750 => 0x00008067 (* ret  *)
    | 0x80004754 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x80004758 => 0xfff00593 (* li a1,-1  *)
    | 0x8000475c => 0x0007a503 (* lw a0,0(a5)  *)
    | 0x80004760 => 0xf0dff0ef (* jal 8000466c <prvProcessExpiredTimer>  *)
    | 0x80004764 => 0xfa5ff06f (* j 80004708 <prvSampleTimeNow+0x2c>  *)
    (* <prvTimerTask> *)
    | 0x80004768 => 0xfb010113 (* add sp,sp,-80  *)
    | 0x8000476c => 0x04912223 (* sw s1,68(sp)  *)
    | 0x80004770 => 0x800154b7 (* lui s1,0x80015  *)
    | 0x80004774 => 0x05212023 (* sw s2,64(sp)  *)
    | 0x80004778 => 0x03312e23 (* sw s3,60(sp)  *)
    | 0x8000477c => 0x03412c23 (* sw s4,56(sp)  *)
    | 0x80004780 => 0x03512a23 (* sw s5,52(sp)  *)
    | 0x80004784 => 0x04112623 (* sw ra,76(sp)  *)
    | 0x80004788 => 0x04812423 (* sw s0,72(sp)  *)
    | 0x8000478c => 0x03612823 (* sw s6,48(sp)  *)
    | 0x80004790 => 0xc1848493 (* add s1,s1,-1000 # 80014c18 <_etext+0x1048>  *)
    | 0x80004794 => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x80004798 => 0x8ac1a783 (* lw a5,-1876(gp) # 800800ac <pxCurrentTimerList>  *)
    | 0x8000479c => 0x00100613 (* li a2,1  *)
    | 0x800047a0 => 0x0007a403 (* lw s0,0(a5)  *)
    | 0x800047a4 => 0x00040863 (* beqz s0,800047b4 <prvTimerTask+0x4c>  *)
    | 0x800047a8 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x800047ac => 0x00000613 (* li a2,0  *)
    | 0x800047b0 => 0x0007a403 (* lw s0,0(a5)  *)
    | 0x800047b4 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x800047b8 => 0xeacfc0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800047bc => 0x02010513 (* add a0,sp,32  *)
    | 0x800047c0 => 0xf1dff0ef (* jal 800046dc <prvSampleTimeNow>  *)
    | 0x800047c4 => 0x02012783 (* lw a5,32(sp)  *)
    | 0x800047c8 => 0x00050593 (* mv a1,a0  *)
    | 0x800047cc => 0x0a079c63 (* bnez a5,80004884 <prvTimerTask+0x11c>  *)
    | 0x800047d0 => 0x00c12603 (* lw a2,12(sp)  *)
    | 0x800047d4 => 0x08061463 (* bnez a2,8000485c <prvTimerTask+0xf4>  *)
    | 0x800047d8 => 0x08856863 (* bltu a0,s0,80004868 <prvTimerTask+0x100>  *)
    | 0x800047dc => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x800047e0 => 0x899fc0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x800047e4 => 0x00c12583 (* lw a1,12(sp)  *)
    | 0x800047e8 => 0x00040513 (* mv a0,s0  *)
    | 0x800047ec => 0xe81ff0ef (* jal 8000466c <prvProcessExpiredTimer>  *)
    | 0x800047f0 => 0x02012023 (* sw zero,32(sp)  *)
    | 0x800047f4 => 0x02012223 (* sw zero,36(sp)  *)
    | 0x800047f8 => 0x02012423 (* sw zero,40(sp)  *)
    | 0x800047fc => 0x02012623 (* sw zero,44(sp)  *)
    | 0x80004800 => 0x8a41a503 (* lw a0,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x80004804 => 0x00000613 (* li a2,0  *)
    | 0x80004808 => 0x02010593 (* add a1,sp,32  *)
    | 0x8000480c => 0x9bcff0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x80004810 => 0xf80504e3 (* beqz a0,80004798 <prvTimerTask+0x30>  *)
    | 0x80004814 => 0x02012783 (* lw a5,32(sp)  *)
    | 0x80004818 => 0x02812503 (* lw a0,40(sp)  *)
    | 0x8000481c => 0x0607c863 (* bltz a5,8000488c <prvTimerTask+0x124>  *)
    | 0x80004820 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80004824 => 0x01442783 (* lw a5,20(s0)  *)
    | 0x80004828 => 0x06079e63 (* bnez a5,800048a4 <prvTimerTask+0x13c>  *)
    | 0x8000482c => 0x01c10513 (* add a0,sp,28  *)
    | 0x80004830 => 0xeadff0ef (* jal 800046dc <prvSampleTimeNow>  *)
    | 0x80004834 => 0x02012783 (* lw a5,32(sp)  *)
    | 0x80004838 => 0x00800713 (* li a4,8  *)
    | 0x8000483c => 0x00050b13 (* mv s6,a0  *)
    | 0x80004840 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80004844 => 0xfaf76ee3 (* bltu a4,a5,80004800 <prvTimerTask+0x98>  *)
    | 0x80004848 => 0x00279793 (* sll a5,a5,0x2  *)
    | 0x8000484c => 0x009787b3 (* add a5,a5,s1  *)
    | 0x80004850 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80004854 => 0x02844783 (* lbu a5,40(s0)  *)
    | 0x80004858 => 0x00070067 (* jr a4  *)
    | 0x8000485c => 0x8a81a783 (* lw a5,-1880(gp) # 800800a8 <pxOverflowTimerList>  *)
    | 0x80004860 => 0x0007a603 (* lw a2,0(a5)  *)
    | 0x80004864 => 0x00163613 (* seqz a2,a2  *)
    | 0x80004868 => 0x8a41a503 (* lw a0,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x8000486c => 0x40b405b3 (* sub a1,s0,a1  *)
    | 0x80004870 => 0xbe9ff0ef (* jal 80004458 <vQueueWaitForMessageRestricted>  *)
    | 0x80004874 => 0x805fc0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80004878 => 0xf6051ce3 (* bnez a0,800047f0 <prvTimerTask+0x88>  *)
    | 0x8000487c => 0x00000073 (* ecall  *)
    | 0x80004880 => 0xf71ff06f (* j 800047f0 <prvTimerTask+0x88>  *)
    | 0x80004884 => 0xff4fc0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80004888 => 0xf69ff06f (* j 800047f0 <prvTimerTask+0x88>  *)
    | 0x8000488c => 0x02412783 (* lw a5,36(sp)  *)
    | 0x80004890 => 0x02c12583 (* lw a1,44(sp)  *)
    | 0x80004894 => 0x000780e7 (* jalr a5  *)
    | 0x80004898 => 0x02012783 (* lw a5,32(sp)  *)
    | 0x8000489c => 0xf607c2e3 (* bltz a5,80004800 <prvTimerTask+0x98>  *)
    | 0x800048a0 => 0xf81ff06f (* j 80004820 <prvTimerTask+0xb8>  *)
    | 0x800048a4 => 0x00440513 (* add a0,s0,4  *)
    | 0x800048a8 => 0xbb0fe0ef (* jal 80002c58 <uxListRemove>  *)
    | 0x800048ac => 0xf81ff06f (* j 8000482c <prvTimerTask+0xc4>  *)
    | 0x800048b0 => 0x0017e793 (* or a5,a5,1  *)
    | 0x800048b4 => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x800048b8 => 0x01842583 (* lw a1,24(s0)  *)
    | 0x800048bc => 0x02412683 (* lw a3,36(sp)  *)
    | 0x800048c0 => 0x00050613 (* mv a2,a0  *)
    | 0x800048c4 => 0x00040513 (* mv a0,s0  *)
    | 0x800048c8 => 0x00b685b3 (* add a1,a3,a1  *)
    | 0x800048cc => 0xcd9ff0ef (* jal 800045a4 <prvInsertTimerInActiveList>  *)
    | 0x800048d0 => 0xf20508e3 (* beqz a0,80004800 <prvTimerTask+0x98>  *)
    | 0x800048d4 => 0x02844783 (* lbu a5,40(s0)  *)
    | 0x800048d8 => 0x0047f713 (* and a4,a5,4  *)
    | 0x800048dc => 0x02070663 (* beqz a4,80004908 <prvTimerTask+0x1a0>  *)
    | 0x800048e0 => 0x01842783 (* lw a5,24(s0)  *)
    | 0x800048e4 => 0x02412583 (* lw a1,36(sp)  *)
    | 0x800048e8 => 0x000b0613 (* mv a2,s6  *)
    | 0x800048ec => 0x00040513 (* mv a0,s0  *)
    | 0x800048f0 => 0x00f585b3 (* add a1,a1,a5  *)
    | 0x800048f4 => 0xd0dff0ef (* jal 80004600 <prvReloadTimer>  *)
    | 0x800048f8 => 0x02042783 (* lw a5,32(s0)  *)
    | 0x800048fc => 0x00040513 (* mv a0,s0  *)
    | 0x80004900 => 0x000780e7 (* jalr a5  *)
    | 0x80004904 => 0xefdff06f (* j 80004800 <prvTimerTask+0x98>  *)
    | 0x80004908 => 0xffe7f793 (* and a5,a5,-2  *)
    | 0x8000490c => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x80004910 => 0xfe9ff06f (* j 800048f8 <prvTimerTask+0x190>  *)
    | 0x80004914 => 0x0017e793 (* or a5,a5,1  *)
    | 0x80004918 => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x8000491c => 0x02412783 (* lw a5,36(sp)  *)
    | 0x80004920 => 0x00f42c23 (* sw a5,24(s0)  *)
    | 0x80004924 => 0x00079863 (* bnez a5,80004934 <prvTimerTask+0x1cc>  *)
    | 0x80004928 => 0x41000593 (* li a1,1040  *)
    | 0x8000492c => 0xc18a8513 (* add a0,s5,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004930 => 0x1610d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004934 => 0x01842583 (* lw a1,24(s0)  *)
    | 0x80004938 => 0x000b0693 (* mv a3,s6  *)
    | 0x8000493c => 0x000b0613 (* mv a2,s6  *)
    | 0x80004940 => 0x00bb05b3 (* add a1,s6,a1  *)
    | 0x80004944 => 0x00040513 (* mv a0,s0  *)
    | 0x80004948 => 0xc5dff0ef (* jal 800045a4 <prvInsertTimerInActiveList>  *)
    | 0x8000494c => 0xeb5ff06f (* j 80004800 <prvTimerTask+0x98>  *)
    | 0x80004950 => 0x0027f713 (* and a4,a5,2  *)
    | 0x80004954 => 0x00071863 (* bnez a4,80004964 <prvTimerTask+0x1fc>  *)
    | 0x80004958 => 0x00040513 (* mv a0,s0  *)
    | 0x8000495c => 0x431010ef (* jal 8000658c <vPortFree>  *)
    | 0x80004960 => 0xea1ff06f (* j 80004800 <prvTimerTask+0x98>  *)
    | 0x80004964 => 0xffe7f793 (* and a5,a5,-2  *)
    | 0x80004968 => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x8000496c => 0xe95ff06f (* j 80004800 <prvTimerTask+0x98>  *)
    (* <prvCheckForValidListAndQueue> *)
    | 0x80004970 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004974 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80004978 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000497c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80004980 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80004984 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80004988 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000498c => 0x80080437 (* lui s0,0x80080  *)
    | 0x80004990 => 0x00442783 (* lw a5,4(s0) # 80080004 <xCriticalNesting>  *)
    | 0x80004994 => 0x00178793 (* add a5,a5,1  *)
    | 0x80004998 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x8000499c => 0x8a41a783 (* lw a5,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x800049a0 => 0x04079863 (* bnez a5,800049f0 <prvCheckForValidListAndQueue+0x80>  *)
    | 0x800049a4 => 0xf1018513 (* add a0,gp,-240 # 80080710 <xActiveTimerList1>  *)
    | 0x800049a8 => 0xa0cfe0ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800049ac => 0xefc18513 (* add a0,gp,-260 # 800806fc <xActiveTimerList2>  *)
    | 0x800049b0 => 0xa04fe0ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x800049b4 => 0xf1018913 (* add s2,gp,-240 # 80080710 <xActiveTimerList1>  *)
    | 0x800049b8 => 0x8b21a623 (* sw s2,-1876(gp) # 800800ac <pxCurrentTimerList>  *)
    | 0x800049bc => 0xefc18493 (* add s1,gp,-260 # 800806fc <xActiveTimerList2>  *)
    | 0x800049c0 => 0x00000713 (* li a4,0  *)
    | 0x800049c4 => 0xd6818693 (* add a3,gp,-664 # 80080568 <xStaticTimerQueue.0>  *)
    | 0x800049c8 => 0xdbc18613 (* add a2,gp,-580 # 800805bc <ucStaticTimerQueueStorage.1>  *)
    | 0x800049cc => 0x01000593 (* li a1,16  *)
    | 0x800049d0 => 0x01400513 (* li a0,20  *)
    | 0x800049d4 => 0x8a91a423 (* sw s1,-1880(gp) # 800800a8 <pxOverflowTimerList>  *)
    | 0x800049d8 => 0xf0cfe0ef (* jal 800030e4 <xQueueGenericCreateStatic>  *)
    | 0x800049dc => 0x8aa1a223 (* sw a0,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x800049e0 => 0x00050863 (* beqz a0,800049f0 <prvCheckForValidListAndQueue+0x80>  *)
    | 0x800049e4 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x800049e8 => 0xc3858593 (* add a1,a1,-968 # 80013c38 <_etext+0x68>  *)
    | 0x800049ec => 0x909ff0ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x800049f0 => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800049f4 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800049f8 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x800049fc => 0x00079463 (* bnez a5,80004a04 <prvCheckForValidListAndQueue+0x94>  *)
    | 0x80004a00 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004a04 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004a08 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80004a0c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80004a10 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80004a14 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80004a18 => 0x02010113 (* add sp,sp,32  *)
    | 0x80004a1c => 0x00008067 (* ret  *)
    (* <xTimerCreateTimerTask> *)
    | 0x80004a20 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004a24 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80004a28 => 0xf49ff0ef (* jal 80004970 <prvCheckForValidListAndQueue>  *)
    | 0x80004a2c => 0x8a41a783 (* lw a5,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x80004a30 => 0x04078e63 (* beqz a5,80004a8c <xTimerCreateTimerTask+0x6c>  *)
    | 0x80004a34 => 0x00c10613 (* add a2,sp,12  *)
    | 0x80004a38 => 0x00810593 (* add a1,sp,8  *)
    | 0x80004a3c => 0x00410513 (* add a0,sp,4  *)
    | 0x80004a40 => 0x00012223 (* sw zero,4(sp)  *)
    | 0x80004a44 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80004a48 => 0x0d10d0ef (* jal 80012318 <vApplicationGetTimerTaskMemory>  *)
    | 0x80004a4c => 0x00812783 (* lw a5,8(sp)  *)
    | 0x80004a50 => 0x00412803 (* lw a6,4(sp)  *)
    | 0x80004a54 => 0x00c12603 (* lw a2,12(sp)  *)
    | 0x80004a58 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80004a5c => 0x80004537 (* lui a0,0x80004  *)
    | 0x80004a60 => 0x00600713 (* li a4,6  *)
    | 0x80004a64 => 0x00000693 (* li a3,0  *)
    | 0x80004a68 => 0xc4058593 (* add a1,a1,-960 # 80013c40 <_etext+0x70>  *)
    | 0x80004a6c => 0x76850513 (* add a0,a0,1896 # 80004768 <prvTimerTask>  *)
    | 0x80004a70 => 0xc85fb0ef (* jal 800006f4 <xTaskCreateStatic>  *)
    | 0x80004a74 => 0x8aa1a023 (* sw a0,-1888(gp) # 800800a0 <xTimerTaskHandle>  *)
    | 0x80004a78 => 0x00050a63 (* beqz a0,80004a8c <xTimerCreateTimerTask+0x6c>  *)
    | 0x80004a7c => 0x00100513 (* li a0,1  *)
    | 0x80004a80 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004a84 => 0x02010113 (* add sp,sp,32  *)
    | 0x80004a88 => 0x00008067 (* ret  *)
    | 0x80004a8c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004a90 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004a94 => 0x14600593 (* li a1,326  *)
    | 0x80004a98 => 0x7f80d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004a9c => 0x00000513 (* li a0,0  *)
    | 0x80004aa0 => 0xfe1ff06f (* j 80004a80 <xTimerCreateTimerTask+0x60>  *)
    (* <xTimerCreate> *)
    | 0x80004aa4 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004aa8 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80004aac => 0x00050a93 (* mv s5,a0  *)
    | 0x80004ab0 => 0x02c00513 (* li a0,44  *)
    | 0x80004ab4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80004ab8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80004abc => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80004ac0 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80004ac4 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80004ac8 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80004acc => 0x00058493 (* mv s1,a1  *)
    | 0x80004ad0 => 0x00060913 (* mv s2,a2  *)
    | 0x80004ad4 => 0x00068a13 (* mv s4,a3  *)
    | 0x80004ad8 => 0x00070993 (* mv s3,a4  *)
    | 0x80004adc => 0x03d010ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80004ae0 => 0x00050413 (* mv s0,a0  *)
    | 0x80004ae4 => 0x04050463 (* beqz a0,80004b2c <xTimerCreate+0x88>  *)
    | 0x80004ae8 => 0x02050423 (* sb zero,40(a0)  *)
    | 0x80004aec => 0x00049a63 (* bnez s1,80004b00 <xTimerCreate+0x5c>  *)
    | 0x80004af0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004af4 => 0x1a900593 (* li a1,425  *)
    | 0x80004af8 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004afc => 0x7940d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004b00 => 0xe71ff0ef (* jal 80004970 <prvCheckForValidListAndQueue>  *)
    | 0x80004b04 => 0x00440513 (* add a0,s0,4  *)
    | 0x80004b08 => 0x01542023 (* sw s5,0(s0)  *)
    | 0x80004b0c => 0x00942c23 (* sw s1,24(s0)  *)
    | 0x80004b10 => 0x01442e23 (* sw s4,28(s0)  *)
    | 0x80004b14 => 0x03342023 (* sw s3,32(s0)  *)
    | 0x80004b18 => 0x8bcfe0ef (* jal 80002bd4 <vListInitialiseItem>  *)
    | 0x80004b1c => 0x00090863 (* beqz s2,80004b2c <xTimerCreate+0x88>  *)
    | 0x80004b20 => 0x02844783 (* lbu a5,40(s0)  *)
    | 0x80004b24 => 0x0047e793 (* or a5,a5,4  *)
    | 0x80004b28 => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x80004b2c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004b30 => 0x00040513 (* mv a0,s0  *)
    | 0x80004b34 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80004b38 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80004b3c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80004b40 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80004b44 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80004b48 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x80004b4c => 0x02010113 (* add sp,sp,32  *)
    | 0x80004b50 => 0x00008067 (* ret  *)
    (* <xTimerCreateStatic> *)
    | 0x80004b54 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80004b58 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80004b5c => 0x00078413 (* mv s0,a5  *)
    | 0x80004b60 => 0x02c00793 (* li a5,44  *)
    | 0x80004b64 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80004b68 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80004b6c => 0x00070993 (* mv s3,a4  *)
    | 0x80004b70 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x80004b74 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80004b78 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80004b7c => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80004b80 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80004b84 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80004b88 => 0x00050a93 (* mv s5,a0  *)
    | 0x80004b8c => 0x00058493 (* mv s1,a1  *)
    | 0x80004b90 => 0x00060913 (* mv s2,a2  *)
    | 0x80004b94 => 0x00068a13 (* mv s4,a3  *)
    | 0x80004b98 => 0x00f70a63 (* beq a4,a5,80004bac <xTimerCreateStatic+0x58>  *)
    | 0x80004b9c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004ba0 => 0x18300593 (* li a1,387  *)
    | 0x80004ba4 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004ba8 => 0x6e80d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004bac => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80004bb0 => 0x06040a63 (* beqz s0,80004c24 <xTimerCreateStatic+0xd0>  *)
    | 0x80004bb4 => 0x00200793 (* li a5,2  *)
    | 0x80004bb8 => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x80004bbc => 0x00049a63 (* bnez s1,80004bd0 <xTimerCreateStatic+0x7c>  *)
    | 0x80004bc0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004bc4 => 0x1a900593 (* li a1,425  *)
    | 0x80004bc8 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004bcc => 0x6c40d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004bd0 => 0xda1ff0ef (* jal 80004970 <prvCheckForValidListAndQueue>  *)
    | 0x80004bd4 => 0x00440513 (* add a0,s0,4  *)
    | 0x80004bd8 => 0x01542023 (* sw s5,0(s0)  *)
    | 0x80004bdc => 0x00942c23 (* sw s1,24(s0)  *)
    | 0x80004be0 => 0x01442e23 (* sw s4,28(s0)  *)
    | 0x80004be4 => 0x03342023 (* sw s3,32(s0)  *)
    | 0x80004be8 => 0xfedfd0ef (* jal 80002bd4 <vListInitialiseItem>  *)
    | 0x80004bec => 0x00090863 (* beqz s2,80004bfc <xTimerCreateStatic+0xa8>  *)
    | 0x80004bf0 => 0x02844783 (* lbu a5,40(s0)  *)
    | 0x80004bf4 => 0x0047e793 (* or a5,a5,4  *)
    | 0x80004bf8 => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x80004bfc => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80004c00 => 0x00040513 (* mv a0,s0  *)
    | 0x80004c04 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80004c08 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80004c0c => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80004c10 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x80004c14 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x80004c18 => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x80004c1c => 0x03010113 (* add sp,sp,48  *)
    | 0x80004c20 => 0x00008067 (* ret  *)
    | 0x80004c24 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004c28 => 0x18900593 (* li a1,393  *)
    | 0x80004c2c => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004c30 => 0x6600d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004c34 => 0xfc9ff06f (* j 80004bfc <xTimerCreateStatic+0xa8>  *)
    (* <xTimerGenericCommandFromTask> *)
    | 0x80004c38 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80004c3c => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80004c40 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80004c44 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80004c48 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80004c4c => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80004c50 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80004c54 => 0x00050493 (* mv s1,a0  *)
    | 0x80004c58 => 0x00058413 (* mv s0,a1  *)
    | 0x80004c5c => 0x00060a13 (* mv s4,a2  *)
    | 0x80004c60 => 0x00070993 (* mv s3,a4  *)
    | 0x80004c64 => 0x00051a63 (* bnez a0,80004c78 <xTimerGenericCommandFromTask+0x40>  *)
    | 0x80004c68 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004c6c => 0x1cd00593 (* li a1,461  *)
    | 0x80004c70 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004c74 => 0x61c0d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004c78 => 0x8a41a783 (* lw a5,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x80004c7c => 0x04078663 (* beqz a5,80004cc8 <xTimerGenericCommandFromTask+0x90>  *)
    | 0x80004c80 => 0x00812023 (* sw s0,0(sp)  *)
    | 0x80004c84 => 0x01412223 (* sw s4,4(sp)  *)
    | 0x80004c88 => 0x00912423 (* sw s1,8(sp)  *)
    | 0x80004c8c => 0x00500793 (* li a5,5  *)
    | 0x80004c90 => 0x0287c463 (* blt a5,s0,80004cb8 <xTimerGenericCommandFromTask+0x80>  *)
    | 0x80004c94 => 0x994fd0ef (* jal 80001e28 <xTaskGetSchedulerState>  *)
    | 0x80004c98 => 0x00200793 (* li a5,2  *)
    | 0x80004c9c => 0x04f51863 (* bne a0,a5,80004cec <xTimerGenericCommandFromTask+0xb4>  *)
    | 0x80004ca0 => 0x00000693 (* li a3,0  *)
    | 0x80004ca4 => 0x00098613 (* mv a2,s3  *)
    | 0x80004ca8 => 0x8a41a503 (* lw a0,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x80004cac => 0x00010593 (* mv a1,sp  *)
    | 0x80004cb0 => 0xf1cfe0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80004cb4 => 0x0180006f (* j 80004ccc <xTimerGenericCommandFromTask+0x94>  *)
    | 0x80004cb8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004cbc => 0x1d800593 (* li a1,472  *)
    | 0x80004cc0 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004cc4 => 0x5cc0d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004cc8 => 0x00000513 (* li a0,0  *)
    | 0x80004ccc => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80004cd0 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80004cd4 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80004cd8 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80004cdc => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x80004ce0 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x80004ce4 => 0x03010113 (* add sp,sp,48  *)
    | 0x80004ce8 => 0x00008067 (* ret  *)
    | 0x80004cec => 0x00000693 (* li a3,0  *)
    | 0x80004cf0 => 0x00000613 (* li a2,0  *)
    | 0x80004cf4 => 0xfb5ff06f (* j 80004ca8 <xTimerGenericCommandFromTask+0x70>  *)
    (* <xTimerGenericCommandFromISR> *)
    | 0x80004cf8 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80004cfc => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80004d00 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80004d04 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80004d08 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80004d0c => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80004d10 => 0x00050493 (* mv s1,a0  *)
    | 0x80004d14 => 0x00058413 (* mv s0,a1  *)
    | 0x80004d18 => 0x00060993 (* mv s3,a2  *)
    | 0x80004d1c => 0x00068913 (* mv s2,a3  *)
    | 0x80004d20 => 0x00051a63 (* bnez a0,80004d34 <xTimerGenericCommandFromISR+0x3c>  *)
    | 0x80004d24 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004d28 => 0x20000593 (* li a1,512  *)
    | 0x80004d2c => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004d30 => 0x5600d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004d34 => 0x8a41a503 (* lw a0,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x80004d38 => 0x04050a63 (* beqz a0,80004d8c <xTimerGenericCommandFromISR+0x94>  *)
    | 0x80004d3c => 0x00812023 (* sw s0,0(sp)  *)
    | 0x80004d40 => 0x01312223 (* sw s3,4(sp)  *)
    | 0x80004d44 => 0x00912423 (* sw s1,8(sp)  *)
    | 0x80004d48 => 0x00500793 (* li a5,5  *)
    | 0x80004d4c => 0x0287d863 (* bge a5,s0,80004d7c <xTimerGenericCommandFromISR+0x84>  *)
    | 0x80004d50 => 0x00000693 (* li a3,0  *)
    | 0x80004d54 => 0x00090613 (* mv a2,s2  *)
    | 0x80004d58 => 0x00010593 (* mv a1,sp  *)
    | 0x80004d5c => 0x9f1fe0ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x80004d60 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80004d64 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80004d68 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80004d6c => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80004d70 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x80004d74 => 0x03010113 (* add sp,sp,48  *)
    | 0x80004d78 => 0x00008067 (* ret  *)
    | 0x80004d7c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004d80 => 0x20b00593 (* li a1,523  *)
    | 0x80004d84 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004d88 => 0x5080d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004d8c => 0x00000513 (* li a0,0  *)
    | 0x80004d90 => 0xfd1ff06f (* j 80004d60 <xTimerGenericCommandFromISR+0x68>  *)
    (* <vTimerSetReloadMode> *)
    | 0x80004d94 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004d98 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004d9c => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80004da0 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004da4 => 0x00050413 (* mv s0,a0  *)
    | 0x80004da8 => 0x00058493 (* mv s1,a1  *)
    | 0x80004dac => 0x00051a63 (* bnez a0,80004dc0 <vTimerSetReloadMode+0x2c>  *)
    | 0x80004db0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004db4 => 0x24200593 (* li a1,578  *)
    | 0x80004db8 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004dbc => 0x4d40d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004dc0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80004dc4 => 0x02844703 (* lbu a4,40(s0)  *)
    | 0x80004dc8 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80004dcc => 0x0047a683 (* lw a3,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80004dd0 => 0x0fb77793 (* and a5,a4,251  *)
    | 0x80004dd4 => 0x00048463 (* beqz s1,80004ddc <vTimerSetReloadMode+0x48>  *)
    | 0x80004dd8 => 0x00476793 (* or a5,a4,4  *)
    | 0x80004ddc => 0x02f40423 (* sb a5,40(s0)  *)
    | 0x80004de0 => 0x00069463 (* bnez a3,80004de8 <vTimerSetReloadMode+0x54>  *)
    | 0x80004de4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004de8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004dec => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004df0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80004df4 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004df8 => 0x00008067 (* ret  *)
    (* <xTimerGetReloadMode> *)
    | 0x80004dfc => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004e00 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004e04 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004e08 => 0x00050413 (* mv s0,a0  *)
    | 0x80004e0c => 0x00051a63 (* bnez a0,80004e20 <xTimerGetReloadMode+0x24>  *)
    | 0x80004e10 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004e14 => 0x25b00593 (* li a1,603  *)
    | 0x80004e18 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004e1c => 0x4740d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004e20 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80004e24 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80004e28 => 0x02844503 (* lbu a0,40(s0)  *)
    | 0x80004e2c => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80004e30 => 0x00255513 (* srl a0,a0,0x2  *)
    | 0x80004e34 => 0x00157513 (* and a0,a0,1  *)
    | 0x80004e38 => 0x00079463 (* bnez a5,80004e40 <xTimerGetReloadMode+0x44>  *)
    | 0x80004e3c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004e40 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004e44 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004e48 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004e4c => 0x00008067 (* ret  *)
    (* <uxTimerGetReloadMode> *)
    | 0x80004e50 => 0xfadff06f (* j 80004dfc <xTimerGetReloadMode>  *)
    (* <pcTimerGetName> *)
    | 0x80004e54 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004e58 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004e5c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004e60 => 0x00050413 (* mv s0,a0  *)
    | 0x80004e64 => 0x00051a63 (* bnez a0,80004e78 <pcTimerGetName+0x24>  *)
    | 0x80004e68 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004e6c => 0x2b300593 (* li a1,691  *)
    | 0x80004e70 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004e74 => 0x41c0d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004e78 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x80004e7c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004e80 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004e84 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004e88 => 0x00008067 (* ret  *)
    (* <xTimerIsTimerActive> *)
    | 0x80004e8c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004e90 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004e94 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004e98 => 0x00050413 (* mv s0,a0  *)
    | 0x80004e9c => 0x00051a63 (* bnez a0,80004eb0 <xTimerIsTimerActive+0x24>  *)
    | 0x80004ea0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004ea4 => 0x49100593 (* li a1,1169  *)
    | 0x80004ea8 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004eac => 0x3e40d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004eb0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80004eb4 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80004eb8 => 0x02844503 (* lbu a0,40(s0)  *)
    | 0x80004ebc => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80004ec0 => 0x00157513 (* and a0,a0,1  *)
    | 0x80004ec4 => 0x00079463 (* bnez a5,80004ecc <xTimerIsTimerActive+0x40>  *)
    | 0x80004ec8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004ecc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004ed0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004ed4 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004ed8 => 0x00008067 (* ret  *)
    (* <pvTimerGetTimerID> *)
    | 0x80004edc => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004ee0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004ee4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004ee8 => 0x00050413 (* mv s0,a0  *)
    | 0x80004eec => 0x00051a63 (* bnez a0,80004f00 <pvTimerGetTimerID+0x24>  *)
    | 0x80004ef0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004ef4 => 0x4ae00593 (* li a1,1198  *)
    | 0x80004ef8 => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004efc => 0x3940d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004f00 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80004f04 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80004f08 => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80004f0c => 0x01c42503 (* lw a0,28(s0)  *)
    | 0x80004f10 => 0x00079463 (* bnez a5,80004f18 <pvTimerGetTimerID+0x3c>  *)
    | 0x80004f14 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004f18 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004f1c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004f20 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004f24 => 0x00008067 (* ret  *)
    (* <vTimerSetTimerID> *)
    | 0x80004f28 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80004f2c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80004f30 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80004f34 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80004f38 => 0x00050413 (* mv s0,a0  *)
    | 0x80004f3c => 0x00058493 (* mv s1,a1  *)
    | 0x80004f40 => 0x00051a63 (* bnez a0,80004f54 <vTimerSetTimerID+0x2c>  *)
    | 0x80004f44 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004f48 => 0x4c300593 (* li a1,1219  *)
    | 0x80004f4c => 0xc1850513 (* add a0,a0,-1000 # 80013c18 <_etext+0x48>  *)
    | 0x80004f50 => 0x3400d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004f54 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80004f58 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x80004f5c => 0x0047a783 (* lw a5,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x80004f60 => 0x00942e23 (* sw s1,28(s0)  *)
    | 0x80004f64 => 0x00079463 (* bnez a5,80004f6c <vTimerSetTimerID+0x44>  *)
    | 0x80004f68 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80004f6c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80004f70 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80004f74 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80004f78 => 0x01010113 (* add sp,sp,16  *)
    | 0x80004f7c => 0x00008067 (* ret  *)
    (* <xTimerPendFunctionCallFromISR> *)
    | 0x80004f80 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004f84 => 0x00068793 (* mv a5,a3  *)
    | 0x80004f88 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x80004f8c => 0x00078613 (* mv a2,a5  *)
    | 0x80004f90 => 0x00a12223 (* sw a0,4(sp)  *)
    | 0x80004f94 => 0x8a41a503 (* lw a0,-1884(gp) # 800800a4 <xTimerQueue>  *)
    | 0x80004f98 => 0x00b12423 (* sw a1,8(sp)  *)
    | 0x80004f9c => 0xffe00713 (* li a4,-2  *)
    | 0x80004fa0 => 0x00010593 (* mv a1,sp  *)
    | 0x80004fa4 => 0x00000693 (* li a3,0  *)
    | 0x80004fa8 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80004fac => 0x00e12023 (* sw a4,0(sp)  *)
    | 0x80004fb0 => 0xf9cfe0ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x80004fb4 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80004fb8 => 0x02010113 (* add sp,sp,32  *)
    | 0x80004fbc => 0x00008067 (* ret  *)
    (* <xEventGroupCreateStatic> *)
    | 0x80004fc0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80004fc4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80004fc8 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80004fcc => 0x00050413 (* mv s0,a0  *)
    | 0x80004fd0 => 0x00051a63 (* bnez a0,80004fe4 <xEventGroupCreateStatic+0x24>  *)
    | 0x80004fd4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004fd8 => 0x05d00593 (* li a1,93  *)
    | 0x80004fdc => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x80004fe0 => 0x2b00d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80004fe4 => 0x02000793 (* li a5,32  *)
    | 0x80004fe8 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80004fec => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x80004ff0 => 0x00f70a63 (* beq a4,a5,80005004 <xEventGroupCreateStatic+0x44>  *)
    | 0x80004ff4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80004ff8 => 0x06500593 (* li a1,101  *)
    | 0x80004ffc => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x80005000 => 0x2900d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005004 => 0x00040c63 (* beqz s0,8000501c <xEventGroupCreateStatic+0x5c>  *)
    | 0x80005008 => 0x00042023 (* sw zero,0(s0)  *)
    | 0x8000500c => 0x00440513 (* add a0,s0,4  *)
    | 0x80005010 => 0xba5fd0ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x80005014 => 0x00100793 (* li a5,1  *)
    | 0x80005018 => 0x00f40e23 (* sb a5,28(s0)  *)
    | 0x8000501c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80005020 => 0x00040513 (* mv a0,s0  *)
    | 0x80005024 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80005028 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000502c => 0x00008067 (* ret  *)
    (* <xEventGroupCreate> *)
    | 0x80005030 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80005034 => 0x02000513 (* li a0,32  *)
    | 0x80005038 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000503c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80005040 => 0x2d8010ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80005044 => 0x00050413 (* mv s0,a0  *)
    | 0x80005048 => 0x00050a63 (* beqz a0,8000505c <xEventGroupCreate+0x2c>  *)
    | 0x8000504c => 0x00052023 (* sw zero,0(a0)  *)
    | 0x80005050 => 0x00450513 (* add a0,a0,4  *)
    | 0x80005054 => 0xb61fd0ef (* jal 80002bb4 <vListInitialise>  *)
    | 0x80005058 => 0x00040e23 (* sb zero,28(s0)  *)
    | 0x8000505c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80005060 => 0x00040513 (* mv a0,s0  *)
    | 0x80005064 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005068 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000506c => 0x00008067 (* ret  *)
    (* <xEventGroupWaitBits> *)
    | 0x80005070 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80005074 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80005078 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000507c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80005080 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80005084 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80005088 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000508c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80005090 => 0x00050913 (* mv s2,a0  *)
    | 0x80005094 => 0x00058493 (* mv s1,a1  *)
    | 0x80005098 => 0x00060a13 (* mv s4,a2  *)
    | 0x8000509c => 0x00068a93 (* mv s5,a3  *)
    | 0x800050a0 => 0x00070993 (* mv s3,a4  *)
    | 0x800050a4 => 0x00051a63 (* bnez a0,800050b8 <xEventGroupWaitBits+0x48>  *)
    | 0x800050a8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800050ac => 0x14700593 (* li a1,327  *)
    | 0x800050b0 => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800050b4 => 0x1dc0d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800050b8 => 0x010007b7 (* lui a5,0x1000  *)
    | 0x800050bc => 0x14800593 (* li a1,328  *)
    | 0x800050c0 => 0x00f4f663 (* bgeu s1,a5,800050cc <xEventGroupWaitBits+0x5c>  *)
    | 0x800050c4 => 0x00049a63 (* bnez s1,800050d8 <xEventGroupWaitBits+0x68>  *)
    | 0x800050c8 => 0x14900593 (* li a1,329  *)
    | 0x800050cc => 0x80014537 (* lui a0,0x80014  *)
    | 0x800050d0 => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800050d4 => 0x1bc0d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800050d8 => 0xd51fc0ef (* jal 80001e28 <xTaskGetSchedulerState>  *)
    | 0x800050dc => 0x00051c63 (* bnez a0,800050f4 <xEventGroupWaitBits+0x84>  *)
    | 0x800050e0 => 0x00098a63 (* beqz s3,800050f4 <xEventGroupWaitBits+0x84>  *)
    | 0x800050e4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800050e8 => 0x14c00593 (* li a1,332  *)
    | 0x800050ec => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800050f0 => 0x1a00d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800050f4 => 0xd71fb0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800050f8 => 0x00092403 (* lw s0,0(s2)  *)
    | 0x800050fc => 0x0084f7b3 (* and a5,s1,s0  *)
    | 0x80005100 => 0x020a9c63 (* bnez s5,80005138 <xEventGroupWaitBits+0xc8>  *)
    | 0x80005104 => 0x02079c63 (* bnez a5,8000513c <xEventGroupWaitBits+0xcc>  *)
    | 0x80005108 => 0x04098263 (* beqz s3,8000514c <xEventGroupWaitBits+0xdc>  *)
    | 0x8000510c => 0x014035b3 (* snez a1,s4  *)
    | 0x80005110 => 0x01859593 (* sll a1,a1,0x18  *)
    | 0x80005114 => 0x000a8663 (* beqz s5,80005120 <xEventGroupWaitBits+0xb0>  *)
    | 0x80005118 => 0x040007b7 (* lui a5,0x4000  *)
    | 0x8000511c => 0x00f5e5b3 (* or a1,a1,a5  *)
    | 0x80005120 => 0x00098613 (* mv a2,s3  *)
    | 0x80005124 => 0x0095e5b3 (* or a1,a1,s1  *)
    | 0x80005128 => 0x00490513 (* add a0,s2,4  *)
    | 0x8000512c => 0xfacfc0ef (* jal 800018d8 <vTaskPlaceOnUnorderedEventList>  *)
    | 0x80005130 => 0x00000413 (* li s0,0  *)
    | 0x80005134 => 0x01c0006f (* j 80005150 <xEventGroupWaitBits+0xe0>  *)
    | 0x80005138 => 0xfcf498e3 (* bne s1,a5,80005108 <xEventGroupWaitBits+0x98>  *)
    | 0x8000513c => 0x000a0863 (* beqz s4,8000514c <xEventGroupWaitBits+0xdc>  *)
    | 0x80005140 => 0xfff4c793 (* not a5,s1  *)
    | 0x80005144 => 0x0087f7b3 (* and a5,a5,s0  *)
    | 0x80005148 => 0x00f92023 (* sw a5,0(s2)  *)
    | 0x8000514c => 0x00000993 (* li s3,0  *)
    | 0x80005150 => 0xf29fb0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80005154 => 0x04098463 (* beqz s3,8000519c <xEventGroupWaitBits+0x12c>  *)
    | 0x80005158 => 0x00051463 (* bnez a0,80005160 <xEventGroupWaitBits+0xf0>  *)
    | 0x8000515c => 0x00000073 (* ecall  *)
    | 0x80005160 => 0x878fd0ef (* jal 800021d8 <uxTaskResetEventItemValue>  *)
    | 0x80005164 => 0x00651793 (* sll a5,a0,0x6  *)
    | 0x80005168 => 0x0207c663 (* bltz a5,80005194 <xEventGroupWaitBits+0x124>  *)
    | 0x8000516c => 0x30047073 (* csrc mstatus,8  *)
    | 0x80005170 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80005174 => 0x80080737 (* lui a4,0x80080  *)
    | 0x80005178 => 0x00472783 (* lw a5,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x8000517c => 0x00a4f6b3 (* and a3,s1,a0  *)
    | 0x80005180 => 0x040a9263 (* bnez s5,800051c4 <xEventGroupWaitBits+0x154>  *)
    | 0x80005184 => 0x04069263 (* bnez a3,800051c8 <xEventGroupWaitBits+0x158>  *)
    | 0x80005188 => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x8000518c => 0x00079463 (* bnez a5,80005194 <xEventGroupWaitBits+0x124>  *)
    | 0x80005190 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80005194 => 0x00851513 (* sll a0,a0,0x8  *)
    | 0x80005198 => 0x00855413 (* srl s0,a0,0x8  *)
    | 0x8000519c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800051a0 => 0x00040513 (* mv a0,s0  *)
    | 0x800051a4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800051a8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800051ac => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800051b0 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800051b4 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800051b8 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x800051bc => 0x02010113 (* add sp,sp,32  *)
    | 0x800051c0 => 0x00008067 (* ret  *)
    | 0x800051c4 => 0xfcd492e3 (* bne s1,a3,80005188 <xEventGroupWaitBits+0x118>  *)
    | 0x800051c8 => 0xfc0a00e3 (* beqz s4,80005188 <xEventGroupWaitBits+0x118>  *)
    | 0x800051cc => 0xfff4c493 (* not s1,s1  *)
    | 0x800051d0 => 0x00a4f4b3 (* and s1,s1,a0  *)
    | 0x800051d4 => 0x00992023 (* sw s1,0(s2)  *)
    | 0x800051d8 => 0xfb1ff06f (* j 80005188 <xEventGroupWaitBits+0x118>  *)
    (* <xEventGroupClearBits> *)
    | 0x800051dc => 0xff010113 (* add sp,sp,-16  *)
    | 0x800051e0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800051e4 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800051e8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800051ec => 0x00050493 (* mv s1,a0  *)
    | 0x800051f0 => 0x00058413 (* mv s0,a1  *)
    | 0x800051f4 => 0x00051a63 (* bnez a0,80005208 <xEventGroupClearBits+0x2c>  *)
    | 0x800051f8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800051fc => 0x1e200593 (* li a1,482  *)
    | 0x80005200 => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x80005204 => 0x08c0d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005208 => 0x010007b7 (* lui a5,0x1000  *)
    | 0x8000520c => 0x00f46a63 (* bltu s0,a5,80005220 <xEventGroupClearBits+0x44>  *)
    | 0x80005210 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005214 => 0x1e300593 (* li a1,483  *)
    | 0x80005218 => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x8000521c => 0x0740d0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005220 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80005224 => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x80005228 => 0x80080737 (* lui a4,0x80080  *)
    | 0x8000522c => 0x00472783 (* lw a5,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x80005230 => 0xfff44413 (* not s0,s0  *)
    | 0x80005234 => 0x00a47433 (* and s0,s0,a0  *)
    | 0x80005238 => 0x0084a023 (* sw s0,0(s1)  *)
    | 0x8000523c => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x80005240 => 0x00079463 (* bnez a5,80005248 <xEventGroupClearBits+0x6c>  *)
    | 0x80005244 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80005248 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000524c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005250 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80005254 => 0x01010113 (* add sp,sp,16  *)
    | 0x80005258 => 0x00008067 (* ret  *)
    (* <vEventGroupClearBitsCallback> *)
    | 0x8000525c => 0xf81ff06f (* j 800051dc <xEventGroupClearBits>  *)
    (* <xEventGroupClearBitsFromISR> *)
    | 0x80005260 => 0x00058613 (* mv a2,a1  *)
    | 0x80005264 => 0x00050593 (* mv a1,a0  *)
    | 0x80005268 => 0x80005537 (* lui a0,0x80005  *)
    | 0x8000526c => 0x00000693 (* li a3,0  *)
    | 0x80005270 => 0x25c50513 (* add a0,a0,604 # 8000525c <vEventGroupClearBitsCallback>  *)
    | 0x80005274 => 0xd0dff06f (* j 80004f80 <xTimerPendFunctionCallFromISR>  *)
    (* <xEventGroupGetBitsFromISR> *)
    | 0x80005278 => 0x00052503 (* lw a0,0(a0)  *)
    | 0x8000527c => 0x00008067 (* ret  *)
    (* <xEventGroupSetBits> *)
    | 0x80005280 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80005284 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80005288 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000528c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80005290 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80005294 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80005298 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000529c => 0x01512223 (* sw s5,4(sp)  *)
    | 0x800052a0 => 0x00050413 (* mv s0,a0  *)
    | 0x800052a4 => 0x00058493 (* mv s1,a1  *)
    | 0x800052a8 => 0x00051a63 (* bnez a0,800052bc <xEventGroupSetBits+0x3c>  *)
    | 0x800052ac => 0x80014537 (* lui a0,0x80014  *)
    | 0x800052b0 => 0x23200593 (* li a1,562  *)
    | 0x800052b4 => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800052b8 => 0x7d90c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800052bc => 0x010007b7 (* lui a5,0x1000  *)
    | 0x800052c0 => 0x00f4ea63 (* bltu s1,a5,800052d4 <xEventGroupSetBits+0x54>  *)
    | 0x800052c4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800052c8 => 0x23300593 (* li a1,563  *)
    | 0x800052cc => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800052d0 => 0x7c10c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800052d4 => 0xb91fb0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800052d8 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x800052dc => 0x01042503 (* lw a0,16(s0)  *)
    | 0x800052e0 => 0x01000937 (* lui s2,0x1000  *)
    | 0x800052e4 => 0x0097e7b3 (* or a5,a5,s1  *)
    | 0x800052e8 => 0x00c40993 (* add s3,s0,12  *)
    | 0x800052ec => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x800052f0 => 0x00000493 (* li s1,0  *)
    | 0x800052f4 => 0xfff90913 (* add s2,s2,-1 # ffffff <__stack_size+0xfffea1>  *)
    | 0x800052f8 => 0x02000a37 (* lui s4,0x2000  *)
    | 0x800052fc => 0x00042583 (* lw a1,0(s0)  *)
    | 0x80005300 => 0x03351e63 (* bne a0,s3,8000533c <xEventGroupSetBits+0xbc>  *)
    | 0x80005304 => 0xfff4c493 (* not s1,s1  *)
    | 0x80005308 => 0x00b4f4b3 (* and s1,s1,a1  *)
    | 0x8000530c => 0x00942023 (* sw s1,0(s0)  *)
    | 0x80005310 => 0xd69fb0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80005314 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x80005318 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000531c => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80005320 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80005324 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80005328 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000532c => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80005330 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x80005334 => 0x02010113 (* add sp,sp,32  *)
    | 0x80005338 => 0x00008067 (* ret  *)
    | 0x8000533c => 0x00052703 (* lw a4,0(a0)  *)
    | 0x80005340 => 0x00452a83 (* lw s5,4(a0)  *)
    | 0x80005344 => 0x012777b3 (* and a5,a4,s2  *)
    | 0x80005348 => 0x00571613 (* sll a2,a4,0x5  *)
    | 0x8000534c => 0x00b7f6b3 (* and a3,a5,a1  *)
    | 0x80005350 => 0x00064863 (* bltz a2,80005360 <xEventGroupSetBits+0xe0>  *)
    | 0x80005354 => 0x00069863 (* bnez a3,80005364 <xEventGroupSetBits+0xe4>  *)
    | 0x80005358 => 0x000a8513 (* mv a0,s5  *)
    | 0x8000535c => 0xfa1ff06f (* j 800052fc <xEventGroupSetBits+0x7c>  *)
    | 0x80005360 => 0xfed79ce3 (* bne a5,a3,80005358 <xEventGroupSetBits+0xd8>  *)
    | 0x80005364 => 0x00771693 (* sll a3,a4,0x7  *)
    | 0x80005368 => 0x0006d463 (* bgez a3,80005370 <xEventGroupSetBits+0xf0>  *)
    | 0x8000536c => 0x00f4e4b3 (* or s1,s1,a5  *)
    | 0x80005370 => 0x0145e5b3 (* or a1,a1,s4  *)
    | 0x80005374 => 0x809fc0ef (* jal 80001b7c <vTaskRemoveFromUnorderedEventList>  *)
    | 0x80005378 => 0xfe1ff06f (* j 80005358 <xEventGroupSetBits+0xd8>  *)
    (* <xEventGroupSync> *)
    | 0x8000537c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80005380 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80005384 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80005388 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000538c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80005390 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80005394 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80005398 => 0x010007b7 (* lui a5,0x1000  *)
    | 0x8000539c => 0x00058a13 (* mv s4,a1  *)
    | 0x800053a0 => 0x00050913 (* mv s2,a0  *)
    | 0x800053a4 => 0x00060493 (* mv s1,a2  *)
    | 0x800053a8 => 0x00068993 (* mv s3,a3  *)
    | 0x800053ac => 0x0c500593 (* li a1,197  *)
    | 0x800053b0 => 0x00f67663 (* bgeu a2,a5,800053bc <xEventGroupSync+0x40>  *)
    | 0x800053b4 => 0x00061a63 (* bnez a2,800053c8 <xEventGroupSync+0x4c>  *)
    | 0x800053b8 => 0x0c600593 (* li a1,198  *)
    | 0x800053bc => 0x80014537 (* lui a0,0x80014  *)
    | 0x800053c0 => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800053c4 => 0x6cd0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800053c8 => 0xa61fc0ef (* jal 80001e28 <xTaskGetSchedulerState>  *)
    | 0x800053cc => 0x00051c63 (* bnez a0,800053e4 <xEventGroupSync+0x68>  *)
    | 0x800053d0 => 0x00098a63 (* beqz s3,800053e4 <xEventGroupSync+0x68>  *)
    | 0x800053d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800053d8 => 0x0c900593 (* li a1,201  *)
    | 0x800053dc => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800053e0 => 0x6b10c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800053e4 => 0xa81fb0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800053e8 => 0x00092403 (* lw s0,0(s2)  *)
    | 0x800053ec => 0x000a0593 (* mv a1,s4  *)
    | 0x800053f0 => 0x00090513 (* mv a0,s2  *)
    | 0x800053f4 => 0xe8dff0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x800053f8 => 0x01446433 (* or s0,s0,s4  *)
    | 0x800053fc => 0x009477b3 (* and a5,s0,s1  *)
    | 0x80005400 => 0x08979863 (* bne a5,s1,80005490 <xEventGroupSync+0x114>  *)
    | 0x80005404 => 0x00092783 (* lw a5,0(s2)  *)
    | 0x80005408 => 0xfff4c713 (* not a4,s1  *)
    | 0x8000540c => 0x00000993 (* li s3,0  *)
    | 0x80005410 => 0x00e7f7b3 (* and a5,a5,a4  *)
    | 0x80005414 => 0x00f92023 (* sw a5,0(s2)  *)
    | 0x80005418 => 0xc61fb0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x8000541c => 0x04098863 (* beqz s3,8000546c <xEventGroupSync+0xf0>  *)
    | 0x80005420 => 0x00051463 (* bnez a0,80005428 <xEventGroupSync+0xac>  *)
    | 0x80005424 => 0x00000073 (* ecall  *)
    | 0x80005428 => 0xdb1fc0ef (* jal 800021d8 <uxTaskResetEventItemValue>  *)
    | 0x8000542c => 0x00651793 (* sll a5,a0,0x6  *)
    | 0x80005430 => 0x0207ca63 (* bltz a5,80005464 <xEventGroupSync+0xe8>  *)
    | 0x80005434 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80005438 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x8000543c => 0x80080737 (* lui a4,0x80080  *)
    | 0x80005440 => 0x00472783 (* lw a5,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x80005444 => 0x00a4f6b3 (* and a3,s1,a0  *)
    | 0x80005448 => 0x00969863 (* bne a3,s1,80005458 <xEventGroupSync+0xdc>  *)
    | 0x8000544c => 0xfff4c493 (* not s1,s1  *)
    | 0x80005450 => 0x00a4f4b3 (* and s1,s1,a0  *)
    | 0x80005454 => 0x00992023 (* sw s1,0(s2)  *)
    | 0x80005458 => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x8000545c => 0x00079463 (* bnez a5,80005464 <xEventGroupSync+0xe8>  *)
    | 0x80005460 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80005464 => 0x00851513 (* sll a0,a0,0x8  *)
    | 0x80005468 => 0x00855413 (* srl s0,a0,0x8  *)
    | 0x8000546c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80005470 => 0x00040513 (* mv a0,s0  *)
    | 0x80005474 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80005478 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000547c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80005480 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80005484 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80005488 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000548c => 0x00008067 (* ret  *)
    | 0x80005490 => 0x02098063 (* beqz s3,800054b0 <xEventGroupSync+0x134>  *)
    | 0x80005494 => 0x050005b7 (* lui a1,0x5000  *)
    | 0x80005498 => 0x00098613 (* mv a2,s3  *)
    | 0x8000549c => 0x00b4e5b3 (* or a1,s1,a1  *)
    | 0x800054a0 => 0x00490513 (* add a0,s2,4  *)
    | 0x800054a4 => 0xc34fc0ef (* jal 800018d8 <vTaskPlaceOnUnorderedEventList>  *)
    | 0x800054a8 => 0x00000413 (* li s0,0  *)
    | 0x800054ac => 0xf6dff06f (* j 80005418 <xEventGroupSync+0x9c>  *)
    | 0x800054b0 => 0x00092403 (* lw s0,0(s2)  *)
    | 0x800054b4 => 0xf65ff06f (* j 80005418 <xEventGroupSync+0x9c>  *)
    (* <vEventGroupSetBitsCallback> *)
    | 0x800054b8 => 0xdc9ff06f (* j 80005280 <xEventGroupSetBits>  *)
    (* <vEventGroupDelete> *)
    | 0x800054bc => 0xff010113 (* add sp,sp,-16  *)
    | 0x800054c0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800054c4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800054c8 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800054cc => 0x01212023 (* sw s2,0(sp)  *)
    | 0x800054d0 => 0x00050413 (* mv s0,a0  *)
    | 0x800054d4 => 0x00051a63 (* bnez a0,800054e8 <vEventGroupDelete+0x2c>  *)
    | 0x800054d8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800054dc => 0x28e00593 (* li a1,654  *)
    | 0x800054e0 => 0xc4850513 (* add a0,a0,-952 # 80013c48 <_etext+0x78>  *)
    | 0x800054e4 => 0x5ad0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800054e8 => 0x97dfb0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800054ec => 0x00c40493 (* add s1,s0,12  *)
    | 0x800054f0 => 0x80014937 (* lui s2,0x80014  *)
    | 0x800054f4 => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800054f8 => 0x02079663 (* bnez a5,80005524 <vEventGroupDelete+0x68>  *)
    | 0x800054fc => 0xb7dfb0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80005500 => 0x01c44783 (* lbu a5,28(s0)  *)
    | 0x80005504 => 0x04079263 (* bnez a5,80005548 <vEventGroupDelete+0x8c>  *)
    | 0x80005508 => 0x00040513 (* mv a0,s0  *)
    | 0x8000550c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005510 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80005514 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80005518 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x8000551c => 0x01010113 (* add sp,sp,16  *)
    | 0x80005520 => 0x06c0106f (* j 8000658c <vPortFree>  *)
    | 0x80005524 => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80005528 => 0x00979863 (* bne a5,s1,80005538 <vEventGroupDelete+0x7c>  *)
    | 0x8000552c => 0x29a00593 (* li a1,666  *)
    | 0x80005530 => 0xc4890513 (* add a0,s2,-952 # 80013c48 <_etext+0x78>  *)
    | 0x80005534 => 0x55d0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005538 => 0x01042503 (* lw a0,16(s0)  *)
    | 0x8000553c => 0x020005b7 (* lui a1,0x2000  *)
    | 0x80005540 => 0xe3cfc0ef (* jal 80001b7c <vTaskRemoveFromUnorderedEventList>  *)
    | 0x80005544 => 0xfb1ff06f (* j 800054f4 <vEventGroupDelete+0x38>  *)
    | 0x80005548 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000554c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005550 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80005554 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80005558 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000555c => 0x00008067 (* ret  *)
    (* <xEventGroupSetBitsFromISR> *)
    | 0x80005560 => 0x00060693 (* mv a3,a2  *)
    | 0x80005564 => 0x00058613 (* mv a2,a1  *)
    | 0x80005568 => 0x00050593 (* mv a1,a0  *)
    | 0x8000556c => 0x80005537 (* lui a0,0x80005  *)
    | 0x80005570 => 0x4b850513 (* add a0,a0,1208 # 800054b8 <vEventGroupSetBitsCallback>  *)
    | 0x80005574 => 0xa0dff06f (* j 80004f80 <xTimerPendFunctionCallFromISR>  *)
    (* <prvBytesInBuffer> *)
    | 0x80005578 => 0x00452783 (* lw a5,4(a0)  *)
    | 0x8000557c => 0x00852703 (* lw a4,8(a0)  *)
    | 0x80005580 => 0x00052683 (* lw a3,0(a0)  *)
    | 0x80005584 => 0x00f707b3 (* add a5,a4,a5  *)
    | 0x80005588 => 0x40d78533 (* sub a0,a5,a3  *)
    | 0x8000558c => 0x00e56463 (* bltu a0,a4,80005594 <prvBytesInBuffer+0x1c>  *)
    | 0x80005590 => 0x40e50533 (* sub a0,a0,a4  *)
    | 0x80005594 => 0x00008067 (* ret  *)
    (* <prvWriteBytesToBuffer> *)
    | 0x80005598 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000559c => 0x02812423 (* sw s0,40(sp)  *)
    | 0x800055a0 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x800055a4 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x800055a8 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x800055ac => 0x02112623 (* sw ra,44(sp)  *)
    | 0x800055b0 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x800055b4 => 0x00050493 (* mv s1,a0  *)
    | 0x800055b8 => 0x00058a13 (* mv s4,a1  *)
    | 0x800055bc => 0x00060413 (* mv s0,a2  *)
    | 0x800055c0 => 0x00068993 (* mv s3,a3  *)
    | 0x800055c4 => 0x00061a63 (* bnez a2,800055d8 <prvWriteBytesToBuffer+0x40>  *)
    | 0x800055c8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800055cc => 0x5cb00593 (* li a1,1483  *)
    | 0x800055d0 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800055d4 => 0x4bd0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800055d8 => 0x0084a783 (* lw a5,8(s1)  *)
    | 0x800055dc => 0x41378933 (* sub s2,a5,s3  *)
    | 0x800055e0 => 0x01247463 (* bgeu s0,s2,800055e8 <prvWriteBytesToBuffer+0x50>  *)
    | 0x800055e4 => 0x00040913 (* mv s2,s0  *)
    | 0x800055e8 => 0x01298733 (* add a4,s3,s2  *)
    | 0x800055ec => 0x00e7fa63 (* bgeu a5,a4,80005600 <prvWriteBytesToBuffer+0x68>  *)
    | 0x800055f0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800055f4 => 0x5d300593 (* li a1,1491  *)
    | 0x800055f8 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800055fc => 0x4950c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005600 => 0x0184a503 (* lw a0,24(s1)  *)
    | 0x80005604 => 0x00090613 (* mv a2,s2  *)
    | 0x80005608 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000560c => 0x01350533 (* add a0,a0,s3  *)
    | 0x80005610 => 0x2140e0ef (* jal 80013824 <memcpy>  *)
    | 0x80005614 => 0x02897a63 (* bgeu s2,s0,80005648 <prvWriteBytesToBuffer+0xb0>  *)
    | 0x80005618 => 0x0084a783 (* lw a5,8(s1)  *)
    | 0x8000561c => 0x41240633 (* sub a2,s0,s2  *)
    | 0x80005620 => 0x00c7fe63 (* bgeu a5,a2,8000563c <prvWriteBytesToBuffer+0xa4>  *)
    | 0x80005624 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005628 => 0x5db00593 (* li a1,1499  *)
    | 0x8000562c => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005630 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x80005634 => 0x45d0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005638 => 0x00c12603 (* lw a2,12(sp)  *)
    | 0x8000563c => 0x0184a503 (* lw a0,24(s1)  *)
    | 0x80005640 => 0x012a05b3 (* add a1,s4,s2  *)
    | 0x80005644 => 0x1e00e0ef (* jal 80013824 <memcpy>  *)
    | 0x80005648 => 0x0084a783 (* lw a5,8(s1)  *)
    | 0x8000564c => 0x01340533 (* add a0,s0,s3  *)
    | 0x80005650 => 0x00f56463 (* bltu a0,a5,80005658 <prvWriteBytesToBuffer+0xc0>  *)
    | 0x80005654 => 0x40f50533 (* sub a0,a0,a5  *)
    | 0x80005658 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x8000565c => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80005660 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80005664 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80005668 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x8000566c => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x80005670 => 0x03010113 (* add sp,sp,48  *)
    | 0x80005674 => 0x00008067 (* ret  *)
    (* <prvWriteMessageToBuffer> *)
    | 0x80005678 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000567c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80005680 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80005684 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80005688 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000568c => 0x00060413 (* mv s0,a2  *)
    | 0x80005690 => 0x01c54603 (* lbu a2,28(a0)  *)
    | 0x80005694 => 0x00068793 (* mv a5,a3  *)
    | 0x80005698 => 0x00452683 (* lw a3,4(a0)  *)
    | 0x8000569c => 0x00167613 (* and a2,a2,1  *)
    | 0x800056a0 => 0x00050493 (* mv s1,a0  *)
    | 0x800056a4 => 0x00058913 (* mv s2,a1  *)
    | 0x800056a8 => 0x04060863 (* beqz a2,800056f8 <prvWriteMessageToBuffer+0x80>  *)
    | 0x800056ac => 0x00812623 (* sw s0,12(sp)  *)
    | 0x800056b0 => 0x04e7ea63 (* bltu a5,a4,80005704 <prvWriteMessageToBuffer+0x8c>  *)
    | 0x800056b4 => 0x00400613 (* li a2,4  *)
    | 0x800056b8 => 0x00c10593 (* add a1,sp,12  *)
    | 0x800056bc => 0xeddff0ef (* jal 80005598 <prvWriteBytesToBuffer>  *)
    | 0x800056c0 => 0x00050693 (* mv a3,a0  *)
    | 0x800056c4 => 0x00040c63 (* beqz s0,800056dc <prvWriteMessageToBuffer+0x64>  *)
    | 0x800056c8 => 0x00040613 (* mv a2,s0  *)
    | 0x800056cc => 0x00090593 (* mv a1,s2  *)
    | 0x800056d0 => 0x00048513 (* mv a0,s1  *)
    | 0x800056d4 => 0xec5ff0ef (* jal 80005598 <prvWriteBytesToBuffer>  *)
    | 0x800056d8 => 0x00a4a223 (* sw a0,4(s1)  *)
    | 0x800056dc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800056e0 => 0x00040513 (* mv a0,s0  *)
    | 0x800056e4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800056e8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800056ec => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800056f0 => 0x02010113 (* add sp,sp,32  *)
    | 0x800056f4 => 0x00008067 (* ret  *)
    | 0x800056f8 => 0xfc87f6e3 (* bgeu a5,s0,800056c4 <prvWriteMessageToBuffer+0x4c>  *)
    | 0x800056fc => 0x00078413 (* mv s0,a5  *)
    | 0x80005700 => 0xfc5ff06f (* j 800056c4 <prvWriteMessageToBuffer+0x4c>  *)
    | 0x80005704 => 0x00000413 (* li s0,0  *)
    | 0x80005708 => 0xfd5ff06f (* j 800056dc <prvWriteMessageToBuffer+0x64>  *)
    (* <prvReadBytesFromBuffer> *)
    | 0x8000570c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80005710 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80005714 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80005718 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000571c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80005720 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80005724 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80005728 => 0x00050913 (* mv s2,a0  *)
    | 0x8000572c => 0x00058a13 (* mv s4,a1  *)
    | 0x80005730 => 0x00060413 (* mv s0,a2  *)
    | 0x80005734 => 0x00068993 (* mv s3,a3  *)
    | 0x80005738 => 0x00061a63 (* bnez a2,8000574c <prvReadBytesFromBuffer+0x40>  *)
    | 0x8000573c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005740 => 0x5f900593 (* li a1,1529  *)
    | 0x80005744 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005748 => 0x3490c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000574c => 0x00892783 (* lw a5,8(s2)  *)
    | 0x80005750 => 0x413784b3 (* sub s1,a5,s3  *)
    | 0x80005754 => 0x00947463 (* bgeu s0,s1,8000575c <prvReadBytesFromBuffer+0x50>  *)
    | 0x80005758 => 0x00040493 (* mv s1,s0  *)
    | 0x8000575c => 0x00998733 (* add a4,s3,s1  *)
    | 0x80005760 => 0x00e7fa63 (* bgeu a5,a4,80005774 <prvReadBytesFromBuffer+0x68>  *)
    | 0x80005764 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005768 => 0x60300593 (* li a1,1539  *)
    | 0x8000576c => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005770 => 0x3210c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005774 => 0x01892583 (* lw a1,24(s2)  *)
    | 0x80005778 => 0x00048613 (* mv a2,s1  *)
    | 0x8000577c => 0x000a0513 (* mv a0,s4  *)
    | 0x80005780 => 0x013585b3 (* add a1,a1,s3  *)
    | 0x80005784 => 0x0a00e0ef (* jal 80013824 <memcpy>  *)
    | 0x80005788 => 0x0084fa63 (* bgeu s1,s0,8000579c <prvReadBytesFromBuffer+0x90>  *)
    | 0x8000578c => 0x01892583 (* lw a1,24(s2)  *)
    | 0x80005790 => 0x40940633 (* sub a2,s0,s1  *)
    | 0x80005794 => 0x009a0533 (* add a0,s4,s1  *)
    | 0x80005798 => 0x08c0e0ef (* jal 80013824 <memcpy>  *)
    | 0x8000579c => 0x00892783 (* lw a5,8(s2)  *)
    | 0x800057a0 => 0x01340533 (* add a0,s0,s3  *)
    | 0x800057a4 => 0x00f56463 (* bltu a0,a5,800057ac <prvReadBytesFromBuffer+0xa0>  *)
    | 0x800057a8 => 0x40f50533 (* sub a0,a0,a5  *)
    | 0x800057ac => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800057b0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800057b4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800057b8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800057bc => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800057c0 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800057c4 => 0x02010113 (* add sp,sp,32  *)
    | 0x800057c8 => 0x00008067 (* ret  *)
    (* <prvReadMessageFromBuffer> *)
    | 0x800057cc => 0xfd010113 (* add sp,sp,-48  *)
    | 0x800057d0 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x800057d4 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x800057d8 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x800057dc => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x800057e0 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x800057e4 => 0x01c54783 (* lbu a5,28(a0)  *)
    | 0x800057e8 => 0x00068413 (* mv s0,a3  *)
    | 0x800057ec => 0x00052683 (* lw a3,0(a0)  *)
    | 0x800057f0 => 0x0017f793 (* and a5,a5,1  *)
    | 0x800057f4 => 0x00050913 (* mv s2,a0  *)
    | 0x800057f8 => 0x00058993 (* mv s3,a1  *)
    | 0x800057fc => 0x00060493 (* mv s1,a2  *)
    | 0x80005800 => 0x02078263 (* beqz a5,80005824 <prvReadMessageFromBuffer+0x58>  *)
    | 0x80005804 => 0x00400613 (* li a2,4  *)
    | 0x80005808 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000580c => 0xf01ff0ef (* jal 8000570c <prvReadBytesFromBuffer>  *)
    | 0x80005810 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80005814 => 0x00050693 (* mv a3,a0  *)
    | 0x80005818 => 0xffc40413 (* add s0,s0,-4  *)
    | 0x8000581c => 0x04f4e463 (* bltu s1,a5,80005864 <prvReadMessageFromBuffer+0x98>  *)
    | 0x80005820 => 0x00078493 (* mv s1,a5  *)
    | 0x80005824 => 0x0084f463 (* bgeu s1,s0,8000582c <prvReadMessageFromBuffer+0x60>  *)
    | 0x80005828 => 0x00048413 (* mv s0,s1  *)
    | 0x8000582c => 0x00040c63 (* beqz s0,80005844 <prvReadMessageFromBuffer+0x78>  *)
    | 0x80005830 => 0x00040613 (* mv a2,s0  *)
    | 0x80005834 => 0x00098593 (* mv a1,s3  *)
    | 0x80005838 => 0x00090513 (* mv a0,s2  *)
    | 0x8000583c => 0xed1ff0ef (* jal 8000570c <prvReadBytesFromBuffer>  *)
    | 0x80005840 => 0x00a92023 (* sw a0,0(s2)  *)
    | 0x80005844 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80005848 => 0x00040513 (* mv a0,s0  *)
    | 0x8000584c => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80005850 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80005854 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80005858 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x8000585c => 0x03010113 (* add sp,sp,48  *)
    | 0x80005860 => 0x00008067 (* ret  *)
    | 0x80005864 => 0x00000493 (* li s1,0  *)
    | 0x80005868 => 0xfbdff06f (* j 80005824 <prvReadMessageFromBuffer+0x58>  *)
    (* <prvInitialiseNewStreamBuffer.isra.0> *)
    | 0x8000586c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80005870 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80005874 => 0x00058493 (* mv s1,a1  *)
    | 0x80005878 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000587c => 0x05500593 (* li a1,85  *)
    | 0x80005880 => 0x00050413 (* mv s0,a0  *)
    | 0x80005884 => 0x00048513 (* mv a0,s1  *)
    | 0x80005888 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000588c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80005890 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80005894 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80005898 => 0x00060a13 (* mv s4,a2  *)
    | 0x8000589c => 0x00068993 (* mv s3,a3  *)
    | 0x800058a0 => 0x00070913 (* mv s2,a4  *)
    | 0x800058a4 => 0x6a50d0ef (* jal 80013748 <memset>  *)
    | 0x800058a8 => 0x00a48a63 (* beq s1,a0,800058bc <prvInitialiseNewStreamBuffer.isra.0+0x50>  *)
    | 0x800058ac => 0x80014537 (* lui a0,0x80014  *)
    | 0x800058b0 => 0x64400593 (* li a1,1604  *)
    | 0x800058b4 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800058b8 => 0x1d90c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800058bc => 0x00040513 (* mv a0,s0  *)
    | 0x800058c0 => 0x02800613 (* li a2,40  *)
    | 0x800058c4 => 0x00000593 (* li a1,0  *)
    | 0x800058c8 => 0x6810d0ef (* jal 80013748 <memset>  *)
    | 0x800058cc => 0x01240e23 (* sb s2,28(s0)  *)
    | 0x800058d0 => 0x00942c23 (* sw s1,24(s0)  *)
    | 0x800058d4 => 0x01442423 (* sw s4,8(s0)  *)
    | 0x800058d8 => 0x01342623 (* sw s3,12(s0)  *)
    | 0x800058dc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800058e0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800058e4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800058e8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800058ec => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800058f0 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800058f4 => 0x02010113 (* add sp,sp,32  *)
    | 0x800058f8 => 0x00008067 (* ret  *)
    (* <xStreamBufferGenericCreate> *)
    | 0x800058fc => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80005900 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80005904 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80005908 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000590c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80005910 => 0x00100793 (* li a5,1  *)
    | 0x80005914 => 0x00050413 (* mv s0,a0  *)
    | 0x80005918 => 0x00058493 (* mv s1,a1  *)
    | 0x8000591c => 0x06f61663 (* bne a2,a5,80005988 <xStreamBufferGenericCreate+0x8c>  *)
    | 0x80005920 => 0x00400793 (* li a5,4  *)
    | 0x80005924 => 0x00100913 (* li s2,1  *)
    | 0x80005928 => 0x15e00593 (* li a1,350  *)
    | 0x8000592c => 0x06a7f863 (* bgeu a5,a0,8000599c <xStreamBufferGenericCreate+0xa0>  *)
    | 0x80005930 => 0x06946e63 (* bltu s0,s1,800059ac <xStreamBufferGenericCreate+0xb0>  *)
    | 0x80005934 => 0xfd600793 (* li a5,-42  *)
    | 0x80005938 => 0x00000513 (* li a0,0  *)
    | 0x8000593c => 0x0287ea63 (* bltu a5,s0,80005970 <xStreamBufferGenericCreate+0x74>  *)
    | 0x80005940 => 0x02940513 (* add a0,s0,41  *)
    | 0x80005944 => 0x1d5000ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80005948 => 0x02050463 (* beqz a0,80005970 <xStreamBufferGenericCreate+0x74>  *)
    | 0x8000594c => 0x00048693 (* mv a3,s1  *)
    | 0x80005950 => 0x00049463 (* bnez s1,80005958 <xStreamBufferGenericCreate+0x5c>  *)
    | 0x80005954 => 0x00100693 (* li a3,1  *)
    | 0x80005958 => 0x02850593 (* add a1,a0,40  *)
    | 0x8000595c => 0x00090713 (* mv a4,s2  *)
    | 0x80005960 => 0x00140613 (* add a2,s0,1  *)
    | 0x80005964 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x80005968 => 0xf05ff0ef (* jal 8000586c <prvInitialiseNewStreamBuffer.isra.0>  *)
    | 0x8000596c => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80005970 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80005974 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80005978 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000597c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80005980 => 0x02010113 (* add sp,sp,32  *)
    | 0x80005984 => 0x00008067 (* ret  *)
    | 0x80005988 => 0x00200793 (* li a5,2  *)
    | 0x8000598c => 0x02f61a63 (* bne a2,a5,800059c0 <xStreamBufferGenericCreate+0xc4>  *)
    | 0x80005990 => 0x00400913 (* li s2,4  *)
    | 0x80005994 => 0x16400593 (* li a1,356  *)
    | 0x80005998 => 0xf8051ce3 (* bnez a0,80005930 <xStreamBufferGenericCreate+0x34>  *)
    | 0x8000599c => 0x80014537 (* lui a0,0x80014  *)
    | 0x800059a0 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800059a4 => 0x0ed0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800059a8 => 0xf8947ce3 (* bgeu s0,s1,80005940 <xStreamBufferGenericCreate+0x44>  *)
    | 0x800059ac => 0x80014537 (* lui a0,0x80014  *)
    | 0x800059b0 => 0x16d00593 (* li a1,365  *)
    | 0x800059b4 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800059b8 => 0x0d90c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800059bc => 0xf79ff06f (* j 80005934 <xStreamBufferGenericCreate+0x38>  *)
    | 0x800059c0 => 0x00000913 (* li s2,0  *)
    | 0x800059c4 => 0xf60516e3 (* bnez a0,80005930 <xStreamBufferGenericCreate+0x34>  *)
    | 0x800059c8 => 0x16a00593 (* li a1,362  *)
    | 0x800059cc => 0xfd1ff06f (* j 8000599c <xStreamBufferGenericCreate+0xa0>  *)
    (* <xStreamBufferGenericCreateStatic> *)
    | 0x800059d0 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x800059d4 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x800059d8 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x800059dc => 0x03212823 (* sw s2,48(sp)  *)
    | 0x800059e0 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x800059e4 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x800059e8 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x800059ec => 0x00050993 (* mv s3,a0  *)
    | 0x800059f0 => 0x00058493 (* mv s1,a1  *)
    | 0x800059f4 => 0x00060a13 (* mv s4,a2  *)
    | 0x800059f8 => 0x00068913 (* mv s2,a3  *)
    | 0x800059fc => 0x00070413 (* mv s0,a4  *)
    | 0x80005a00 => 0x00069a63 (* bnez a3,80005a14 <xStreamBufferGenericCreateStatic+0x44>  *)
    | 0x80005a04 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005a08 => 0x1bc00593 (* li a1,444  *)
    | 0x80005a0c => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005a10 => 0x0810c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005a14 => 0x00041a63 (* bnez s0,80005a28 <xStreamBufferGenericCreateStatic+0x58>  *)
    | 0x80005a18 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005a1c => 0x1bd00593 (* li a1,445  *)
    | 0x80005a20 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005a24 => 0x06d0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005a28 => 0x0099fa63 (* bgeu s3,s1,80005a3c <xStreamBufferGenericCreateStatic+0x6c>  *)
    | 0x80005a2c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005a30 => 0x1be00593 (* li a1,446  *)
    | 0x80005a34 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005a38 => 0x0590c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005a3c => 0x00100793 (* li a5,1  *)
    | 0x80005a40 => 0x0afa1263 (* bne s4,a5,80005ae4 <xStreamBufferGenericCreateStatic+0x114>  *)
    | 0x80005a44 => 0x00400793 (* li a5,4  *)
    | 0x80005a48 => 0x0937f463 (* bgeu a5,s3,80005ad0 <xStreamBufferGenericCreateStatic+0x100>  *)
    | 0x80005a4c => 0x00300713 (* li a4,3  *)
    | 0x80005a50 => 0x02800793 (* li a5,40  *)
    | 0x80005a54 => 0x00f12e23 (* sw a5,28(sp)  *)
    | 0x80005a58 => 0x01c12683 (* lw a3,28(sp)  *)
    | 0x80005a5c => 0x00f68e63 (* beq a3,a5,80005a78 <xStreamBufferGenericCreateStatic+0xa8>  *)
    | 0x80005a60 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005a64 => 0x1e400593 (* li a1,484  *)
    | 0x80005a68 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005a6c => 0x00e12623 (* sw a4,12(sp)  *)
    | 0x80005a70 => 0x0210c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005a74 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x80005a78 => 0x02090a63 (* beqz s2,80005aac <xStreamBufferGenericCreateStatic+0xdc>  *)
    | 0x80005a7c => 0x02040663 (* beqz s0,80005aa8 <xStreamBufferGenericCreateStatic+0xd8>  *)
    | 0x80005a80 => 0x00048693 (* mv a3,s1  *)
    | 0x80005a84 => 0x00049463 (* bnez s1,80005a8c <xStreamBufferGenericCreateStatic+0xbc>  *)
    | 0x80005a88 => 0x00100693 (* li a3,1  *)
    | 0x80005a8c => 0x00098613 (* mv a2,s3  *)
    | 0x80005a90 => 0x00090593 (* mv a1,s2  *)
    | 0x80005a94 => 0x00040513 (* mv a0,s0  *)
    | 0x80005a98 => 0xdd5ff0ef (* jal 8000586c <prvInitialiseNewStreamBuffer.isra.0>  *)
    | 0x80005a9c => 0x01c44783 (* lbu a5,28(s0)  *)
    | 0x80005aa0 => 0x0027e793 (* or a5,a5,2  *)
    | 0x80005aa4 => 0x00f40e23 (* sb a5,28(s0)  *)
    | 0x80005aa8 => 0x00040913 (* mv s2,s0  *)
    | 0x80005aac => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x80005ab0 => 0x03812403 (* lw s0,56(sp)  *)
    | 0x80005ab4 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x80005ab8 => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x80005abc => 0x02812a03 (* lw s4,40(sp)  *)
    | 0x80005ac0 => 0x00090513 (* mv a0,s2  *)
    | 0x80005ac4 => 0x03012903 (* lw s2,48(sp)  *)
    | 0x80005ac8 => 0x04010113 (* add sp,sp,64  *)
    | 0x80005acc => 0x00008067 (* ret  *)
    | 0x80005ad0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005ad4 => 0x1d000593 (* li a1,464  *)
    | 0x80005ad8 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005adc => 0x7b40c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005ae0 => 0xf6dff06f (* j 80005a4c <xStreamBufferGenericCreateStatic+0x7c>  *)
    | 0x80005ae4 => 0x00200793 (* li a5,2  *)
    | 0x80005ae8 => 0x00200713 (* li a4,2  *)
    | 0x80005aec => 0xf6fa12e3 (* bne s4,a5,80005a50 <xStreamBufferGenericCreateStatic+0x80>  *)
    | 0x80005af0 => 0x00098663 (* beqz s3,80005afc <xStreamBufferGenericCreateStatic+0x12c>  *)
    | 0x80005af4 => 0x00600713 (* li a4,6  *)
    | 0x80005af8 => 0xf59ff06f (* j 80005a50 <xStreamBufferGenericCreateStatic+0x80>  *)
    | 0x80005afc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005b00 => 0x1d600593 (* li a1,470  *)
    | 0x80005b04 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005b08 => 0x7880c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005b0c => 0xfe9ff06f (* j 80005af4 <xStreamBufferGenericCreateStatic+0x124>  *)
    (* <vStreamBufferDelete> *)
    | 0x80005b10 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80005b14 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80005b18 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80005b1c => 0x00050413 (* mv s0,a0  *)
    | 0x80005b20 => 0x00051a63 (* bnez a0,80005b34 <vStreamBufferDelete+0x24>  *)
    | 0x80005b24 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005b28 => 0x23300593 (* li a1,563  *)
    | 0x80005b2c => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005b30 => 0x7600c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005b34 => 0x01c44783 (* lbu a5,28(s0)  *)
    | 0x80005b38 => 0x0027f793 (* and a5,a5,2  *)
    | 0x80005b3c => 0x00079c63 (* bnez a5,80005b54 <vStreamBufferDelete+0x44>  *)
    | 0x80005b40 => 0x00040513 (* mv a0,s0  *)
    | 0x80005b44 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005b48 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80005b4c => 0x01010113 (* add sp,sp,16  *)
    | 0x80005b50 => 0x23d0006f (* j 8000658c <vPortFree>  *)
    | 0x80005b54 => 0x00040513 (* mv a0,s0  *)
    | 0x80005b58 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005b5c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80005b60 => 0x02800613 (* li a2,40  *)
    | 0x80005b64 => 0x00000593 (* li a1,0  *)
    | 0x80005b68 => 0x01010113 (* add sp,sp,16  *)
    | 0x80005b6c => 0x3dd0d06f (* j 80013748 <memset>  *)
    (* <xStreamBufferReset> *)
    | 0x80005b70 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80005b74 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80005b78 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80005b7c => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80005b80 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80005b84 => 0x00050413 (* mv s0,a0  *)
    | 0x80005b88 => 0x00051a63 (* bnez a0,80005b9c <xStreamBufferReset+0x2c>  *)
    | 0x80005b8c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005b90 => 0x25e00593 (* li a1,606  *)
    | 0x80005b94 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005b98 => 0x6f80c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005b9c => 0x02042903 (* lw s2,32(s0)  *)
    | 0x80005ba0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80005ba4 => 0x800804b7 (* lui s1,0x80080  *)
    | 0x80005ba8 => 0x0044a783 (* lw a5,4(s1) # 80080004 <xCriticalNesting>  *)
    | 0x80005bac => 0x00000513 (* li a0,0  *)
    | 0x80005bb0 => 0x00178793 (* add a5,a5,1 # 1000001 <__stack_size+0xfffea3>  *)
    | 0x80005bb4 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80005bb8 => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80005bbc => 0x02079663 (* bnez a5,80005be8 <xStreamBufferReset+0x78>  *)
    | 0x80005bc0 => 0x01442783 (* lw a5,20(s0)  *)
    | 0x80005bc4 => 0x02079263 (* bnez a5,80005be8 <xStreamBufferReset+0x78>  *)
    | 0x80005bc8 => 0x01c44703 (* lbu a4,28(s0)  *)
    | 0x80005bcc => 0x00c42683 (* lw a3,12(s0)  *)
    | 0x80005bd0 => 0x00842603 (* lw a2,8(s0)  *)
    | 0x80005bd4 => 0x01842583 (* lw a1,24(s0)  *)
    | 0x80005bd8 => 0x00040513 (* mv a0,s0  *)
    | 0x80005bdc => 0xc91ff0ef (* jal 8000586c <prvInitialiseNewStreamBuffer.isra.0>  *)
    | 0x80005be0 => 0x00100513 (* li a0,1  *)
    | 0x80005be4 => 0x03242023 (* sw s2,32(s0)  *)
    | 0x80005be8 => 0x0044a783 (* lw a5,4(s1)  *)
    | 0x80005bec => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80005bf0 => 0x00f4a223 (* sw a5,4(s1)  *)
    | 0x80005bf4 => 0x00079463 (* bnez a5,80005bfc <xStreamBufferReset+0x8c>  *)
    | 0x80005bf8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80005bfc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80005c00 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005c04 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80005c08 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80005c0c => 0x01010113 (* add sp,sp,16  *)
    | 0x80005c10 => 0x00008067 (* ret  *)
    (* <xStreamBufferSpacesAvailable> *)
    | 0x80005c14 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80005c18 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80005c1c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80005c20 => 0x00050413 (* mv s0,a0  *)
    | 0x80005c24 => 0x00051a63 (* bnez a0,80005c38 <xStreamBufferSpacesAvailable+0x24>  *)
    | 0x80005c28 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005c2c => 0x2fa00593 (* li a1,762  *)
    | 0x80005c30 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005c34 => 0x65c0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005c38 => 0x00842783 (* lw a5,8(s0)  *)
    | 0x80005c3c => 0x00042683 (* lw a3,0(s0)  *)
    | 0x80005c40 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x80005c44 => 0x00442703 (* lw a4,4(s0)  *)
    | 0x80005c48 => 0x00042603 (* lw a2,0(s0)  *)
    | 0x80005c4c => 0xfed618e3 (* bne a2,a3,80005c3c <xStreamBufferSpacesAvailable+0x28>  *)
    | 0x80005c50 => 0x00a78533 (* add a0,a5,a0  *)
    | 0x80005c54 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x80005c58 => 0x40e50533 (* sub a0,a0,a4  *)
    | 0x80005c5c => 0x00f56463 (* bltu a0,a5,80005c64 <xStreamBufferSpacesAvailable+0x50>  *)
    | 0x80005c60 => 0x40f50533 (* sub a0,a0,a5  *)
    | 0x80005c64 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80005c68 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005c6c => 0x01010113 (* add sp,sp,16  *)
    | 0x80005c70 => 0x00008067 (* ret  *)
    (* <xStreamBufferBytesAvailable> *)
    | 0x80005c74 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80005c78 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80005c7c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80005c80 => 0x00050413 (* mv s0,a0  *)
    | 0x80005c84 => 0x00051a63 (* bnez a0,80005c98 <xStreamBufferBytesAvailable+0x24>  *)
    | 0x80005c88 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005c8c => 0x31e00593 (* li a1,798  *)
    | 0x80005c90 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005c94 => 0x5fc0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005c98 => 0x00040513 (* mv a0,s0  *)
    | 0x80005c9c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80005ca0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80005ca4 => 0x01010113 (* add sp,sp,16  *)
    | 0x80005ca8 => 0x8d1ff06f (* j 80005578 <prvBytesInBuffer>  *)
    (* <xStreamBufferSend> *)
    | 0x80005cac => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80005cb0 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x80005cb4 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x80005cb8 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x80005cbc => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x80005cc0 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x80005cc4 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x80005cc8 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x80005ccc => 0x03612023 (* sw s6,32(sp)  *)
    | 0x80005cd0 => 0x00d12623 (* sw a3,12(sp)  *)
    | 0x80005cd4 => 0x00050413 (* mv s0,a0  *)
    | 0x80005cd8 => 0x00058a93 (* mv s5,a1  *)
    | 0x80005cdc => 0x00060913 (* mv s2,a2  *)
    | 0x80005ce0 => 0x00059a63 (* bnez a1,80005cf4 <xStreamBufferSend+0x48>  *)
    | 0x80005ce4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005ce8 => 0x33500593 (* li a1,821  *)
    | 0x80005cec => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005cf0 => 0x5a00c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005cf4 => 0x00041a63 (* bnez s0,80005d08 <xStreamBufferSend+0x5c>  *)
    | 0x80005cf8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005cfc => 0x33600593 (* li a1,822  *)
    | 0x80005d00 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005d04 => 0x58c0c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005d08 => 0x01c44783 (* lbu a5,28(s0)  *)
    | 0x80005d0c => 0x00842483 (* lw s1,8(s0)  *)
    | 0x80005d10 => 0x0017f793 (* and a5,a5,1  *)
    | 0x80005d14 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x80005d18 => 0x0a078c63 (* beqz a5,80005dd0 <xStreamBufferSend+0x124>  *)
    | 0x80005d1c => 0x00490993 (* add s3,s2,4  *)
    | 0x80005d20 => 0x01396a63 (* bltu s2,s3,80005d34 <xStreamBufferSend+0x88>  *)
    | 0x80005d24 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005d28 => 0x34500593 (* li a1,837  *)
    | 0x80005d2c => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005d30 => 0x5600c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005d34 => 0x0b34f463 (* bgeu s1,s3,80005ddc <xStreamBufferSend+0x130>  *)
    | 0x80005d38 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80005d3c => 0x00040513 (* mv a0,s0  *)
    | 0x80005d40 => 0xed5ff0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x80005d44 => 0x00050493 (* mv s1,a0  *)
    | 0x80005d48 => 0x00048693 (* mv a3,s1  *)
    | 0x80005d4c => 0x00098713 (* mv a4,s3  *)
    | 0x80005d50 => 0x00090613 (* mv a2,s2  *)
    | 0x80005d54 => 0x000a8593 (* mv a1,s5  *)
    | 0x80005d58 => 0x00040513 (* mv a0,s0  *)
    | 0x80005d5c => 0x91dff0ef (* jal 80005678 <prvWriteMessageToBuffer>  *)
    | 0x80005d60 => 0x00050493 (* mv s1,a0  *)
    | 0x80005d64 => 0x04050063 (* beqz a0,80005da4 <xStreamBufferSend+0xf8>  *)
    | 0x80005d68 => 0x00040513 (* mv a0,s0  *)
    | 0x80005d6c => 0x80dff0ef (* jal 80005578 <prvBytesInBuffer>  *)
    | 0x80005d70 => 0x00c42783 (* lw a5,12(s0)  *)
    | 0x80005d74 => 0x02f56863 (* bltu a0,a5,80005da4 <xStreamBufferSend+0xf8>  *)
    | 0x80005d78 => 0x8ecfb0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80005d7c => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80005d80 => 0x02078063 (* beqz a5,80005da0 <xStreamBufferSend+0xf4>  *)
    | 0x80005d84 => 0x01042503 (* lw a0,16(s0)  *)
    | 0x80005d88 => 0x02442583 (* lw a1,36(s0)  *)
    | 0x80005d8c => 0x00000713 (* li a4,0  *)
    | 0x80005d90 => 0x00000693 (* li a3,0  *)
    | 0x80005d94 => 0x00000613 (* li a2,0  *)
    | 0x80005d98 => 0xf2cfc0ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80005d9c => 0x00042823 (* sw zero,16(s0)  *)
    | 0x80005da0 => 0xad8fb0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80005da4 => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x80005da8 => 0x03812403 (* lw s0,56(sp)  *)
    | 0x80005dac => 0x03012903 (* lw s2,48(sp)  *)
    | 0x80005db0 => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x80005db4 => 0x02812a03 (* lw s4,40(sp)  *)
    | 0x80005db8 => 0x02412a83 (* lw s5,36(sp)  *)
    | 0x80005dbc => 0x02012b03 (* lw s6,32(sp)  *)
    | 0x80005dc0 => 0x00048513 (* mv a0,s1  *)
    | 0x80005dc4 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x80005dc8 => 0x04010113 (* add sp,sp,64  *)
    | 0x80005dcc => 0x00008067 (* ret  *)
    | 0x80005dd0 => 0x00090993 (* mv s3,s2  *)
    | 0x80005dd4 => 0x0124f463 (* bgeu s1,s2,80005ddc <xStreamBufferSend+0x130>  *)
    | 0x80005dd8 => 0x00048993 (* mv s3,s1  *)
    | 0x80005ddc => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80005de0 => 0xf4078ee3 (* beqz a5,80005d3c <xStreamBufferSend+0x90>  *)
    | 0x80005de4 => 0x01810513 (* add a0,sp,24  *)
    | 0x80005de8 => 0xec5fb0ef (* jal 80001cac <vTaskSetTimeOutState>  *)
    | 0x80005dec => 0x80080a37 (* lui s4,0x80080  *)
    | 0x80005df0 => 0x80014b37 (* lui s6,0x80014  *)
    | 0x80005df4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80005df8 => 0x004a2783 (* lw a5,4(s4) # 80080004 <xCriticalNesting>  *)
    | 0x80005dfc => 0x00040513 (* mv a0,s0  *)
    | 0x80005e00 => 0x00178793 (* add a5,a5,1  *)
    | 0x80005e04 => 0x00fa2223 (* sw a5,4(s4)  *)
    | 0x80005e08 => 0xe0dff0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x80005e0c => 0x00050493 (* mv s1,a0  *)
    | 0x80005e10 => 0x07357663 (* bgeu a0,s3,80005e7c <xStreamBufferSend+0x1d0>  *)
    | 0x80005e14 => 0x02442583 (* lw a1,36(s0)  *)
    | 0x80005e18 => 0x00000513 (* li a0,0  *)
    | 0x80005e1c => 0xc8dfc0ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x80005e20 => 0x01442783 (* lw a5,20(s0)  *)
    | 0x80005e24 => 0x00078863 (* beqz a5,80005e34 <xStreamBufferSend+0x188>  *)
    | 0x80005e28 => 0x37500593 (* li a1,885  *)
    | 0x80005e2c => 0xc6cb0513 (* add a0,s6,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005e30 => 0x4600c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005e34 => 0xfedfb0ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x80005e38 => 0x004a2783 (* lw a5,4(s4)  *)
    | 0x80005e3c => 0x00a42a23 (* sw a0,20(s0)  *)
    | 0x80005e40 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80005e44 => 0x00fa2223 (* sw a5,4(s4)  *)
    | 0x80005e48 => 0x04078863 (* beqz a5,80005e98 <xStreamBufferSend+0x1ec>  *)
    | 0x80005e4c => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x80005e50 => 0x02442503 (* lw a0,36(s0)  *)
    | 0x80005e54 => 0x00000593 (* li a1,0  *)
    | 0x80005e58 => 0x00000693 (* li a3,0  *)
    | 0x80005e5c => 0x00000613 (* li a2,0  *)
    | 0x80005e60 => 0xce0fc0ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80005e64 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80005e68 => 0x00042a23 (* sw zero,20(s0)  *)
    | 0x80005e6c => 0x01810513 (* add a0,sp,24  *)
    | 0x80005e70 => 0xeb1fb0ef (* jal 80001d20 <xTaskCheckForTimeOut>  *)
    | 0x80005e74 => 0xf80500e3 (* beqz a0,80005df4 <xStreamBufferSend+0x148>  *)
    | 0x80005e78 => 0x0180006f (* j 80005e90 <xStreamBufferSend+0x1e4>  *)
    | 0x80005e7c => 0x004a2783 (* lw a5,4(s4)  *)
    | 0x80005e80 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80005e84 => 0x00fa2223 (* sw a5,4(s4)  *)
    | 0x80005e88 => 0x00079463 (* bnez a5,80005e90 <xStreamBufferSend+0x1e4>  *)
    | 0x80005e8c => 0x30046073 (* csrs mstatus,8  *)
    | 0x80005e90 => 0xea0486e3 (* beqz s1,80005d3c <xStreamBufferSend+0x90>  *)
    | 0x80005e94 => 0xeb5ff06f (* j 80005d48 <xStreamBufferSend+0x9c>  *)
    | 0x80005e98 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80005e9c => 0xfb1ff06f (* j 80005e4c <xStreamBufferSend+0x1a0>  *)
    (* <xStreamBufferSendFromISR> *)
    | 0x80005ea0 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80005ea4 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80005ea8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80005eac => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80005eb0 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80005eb4 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80005eb8 => 0x00050413 (* mv s0,a0  *)
    | 0x80005ebc => 0x00058913 (* mv s2,a1  *)
    | 0x80005ec0 => 0x00060493 (* mv s1,a2  *)
    | 0x80005ec4 => 0x00068993 (* mv s3,a3  *)
    | 0x80005ec8 => 0x00059a63 (* bnez a1,80005edc <xStreamBufferSendFromISR+0x3c>  *)
    | 0x80005ecc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005ed0 => 0x3ba00593 (* li a1,954  *)
    | 0x80005ed4 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005ed8 => 0x3b80c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005edc => 0x00041a63 (* bnez s0,80005ef0 <xStreamBufferSendFromISR+0x50>  *)
    | 0x80005ee0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005ee4 => 0x3bb00593 (* li a1,955  *)
    | 0x80005ee8 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005eec => 0x3a40c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005ef0 => 0x01c44783 (* lbu a5,28(s0)  *)
    | 0x80005ef4 => 0x00048713 (* mv a4,s1  *)
    | 0x80005ef8 => 0x0017f793 (* and a5,a5,1  *)
    | 0x80005efc => 0x00078463 (* beqz a5,80005f04 <xStreamBufferSendFromISR+0x64>  *)
    | 0x80005f00 => 0x00448713 (* add a4,s1,4  *)
    | 0x80005f04 => 0x00040513 (* mv a0,s0  *)
    | 0x80005f08 => 0x00e12623 (* sw a4,12(sp)  *)
    | 0x80005f0c => 0xd09ff0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x80005f10 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x80005f14 => 0x00050693 (* mv a3,a0  *)
    | 0x80005f18 => 0x00048613 (* mv a2,s1  *)
    | 0x80005f1c => 0x00090593 (* mv a1,s2  *)
    | 0x80005f20 => 0x00040513 (* mv a0,s0  *)
    | 0x80005f24 => 0xf54ff0ef (* jal 80005678 <prvWriteMessageToBuffer>  *)
    | 0x80005f28 => 0x00050493 (* mv s1,a0  *)
    | 0x80005f2c => 0x02050e63 (* beqz a0,80005f68 <xStreamBufferSendFromISR+0xc8>  *)
    | 0x80005f30 => 0x00040513 (* mv a0,s0  *)
    | 0x80005f34 => 0xe44ff0ef (* jal 80005578 <prvBytesInBuffer>  *)
    | 0x80005f38 => 0x00c42783 (* lw a5,12(s0)  *)
    | 0x80005f3c => 0x02f56663 (* bltu a0,a5,80005f68 <xStreamBufferSendFromISR+0xc8>  *)
    | 0x80005f40 => 0x01042783 (* lw a5,16(s0)  *)
    | 0x80005f44 => 0x02078263 (* beqz a5,80005f68 <xStreamBufferSendFromISR+0xc8>  *)
    | 0x80005f48 => 0x01042503 (* lw a0,16(s0)  *)
    | 0x80005f4c => 0x02442583 (* lw a1,36(s0)  *)
    | 0x80005f50 => 0x00098793 (* mv a5,s3  *)
    | 0x80005f54 => 0x00000713 (* li a4,0  *)
    | 0x80005f58 => 0x00000693 (* li a3,0  *)
    | 0x80005f5c => 0x00000613 (* li a2,0  *)
    | 0x80005f60 => 0xf88fc0ef (* jal 800026e8 <xTaskGenericNotifyFromISR>  *)
    | 0x80005f64 => 0x00042823 (* sw zero,16(s0)  *)
    | 0x80005f68 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80005f6c => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80005f70 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80005f74 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x80005f78 => 0x00048513 (* mv a0,s1  *)
    | 0x80005f7c => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80005f80 => 0x03010113 (* add sp,sp,48  *)
    | 0x80005f84 => 0x00008067 (* ret  *)
    (* <xStreamBufferReceive> *)
    | 0x80005f88 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80005f8c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80005f90 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80005f94 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80005f98 => 0x01612023 (* sw s6,0(sp)  *)
    | 0x80005f9c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80005fa0 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80005fa4 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80005fa8 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80005fac => 0x00050413 (* mv s0,a0  *)
    | 0x80005fb0 => 0x00058993 (* mv s3,a1  *)
    | 0x80005fb4 => 0x00060b13 (* mv s6,a2  *)
    | 0x80005fb8 => 0x00068a13 (* mv s4,a3  *)
    | 0x80005fbc => 0x00059a63 (* bnez a1,80005fd0 <xStreamBufferReceive+0x48>  *)
    | 0x80005fc0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005fc4 => 0x42700593 (* li a1,1063  *)
    | 0x80005fc8 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005fcc => 0x2c40c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005fd0 => 0x00041a63 (* bnez s0,80005fe4 <xStreamBufferReceive+0x5c>  *)
    | 0x80005fd4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80005fd8 => 0x42800593 (* li a1,1064  *)
    | 0x80005fdc => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80005fe0 => 0x2b00c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80005fe4 => 0x01c44783 (* lbu a5,28(s0)  *)
    | 0x80005fe8 => 0x00400913 (* li s2,4  *)
    | 0x80005fec => 0x0017f713 (* and a4,a5,1  *)
    | 0x80005ff0 => 0x00071a63 (* bnez a4,80006004 <xStreamBufferReceive+0x7c>  *)
    | 0x80005ff4 => 0x0047f793 (* and a5,a5,4  *)
    | 0x80005ff8 => 0x00000913 (* li s2,0  *)
    | 0x80005ffc => 0x00078463 (* beqz a5,80006004 <xStreamBufferReceive+0x7c>  *)
    | 0x80006000 => 0x00c42903 (* lw s2,12(s0)  *)
    | 0x80006004 => 0x080a0463 (* beqz s4,8000608c <xStreamBufferReceive+0x104>  *)
    | 0x80006008 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000600c => 0x80080ab7 (* lui s5,0x80080  *)
    | 0x80006010 => 0x004aa783 (* lw a5,4(s5) # 80080004 <xCriticalNesting>  *)
    | 0x80006014 => 0x00040513 (* mv a0,s0  *)
    | 0x80006018 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000601c => 0x00faa223 (* sw a5,4(s5)  *)
    | 0x80006020 => 0xd58ff0ef (* jal 80005578 <prvBytesInBuffer>  *)
    | 0x80006024 => 0x00050493 (* mv s1,a0  *)
    | 0x80006028 => 0x02a96863 (* bltu s2,a0,80006058 <xStreamBufferReceive+0xd0>  *)
    | 0x8000602c => 0x02442583 (* lw a1,36(s0)  *)
    | 0x80006030 => 0x00000513 (* li a0,0  *)
    | 0x80006034 => 0xa75fc0ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x80006038 => 0x01042783 (* lw a5,16(s0)  *)
    | 0x8000603c => 0x00078a63 (* beqz a5,80006050 <xStreamBufferReceive+0xc8>  *)
    | 0x80006040 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006044 => 0x45300593 (* li a1,1107  *)
    | 0x80006048 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x8000604c => 0x2440c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006050 => 0xdd1fb0ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x80006054 => 0x00a42823 (* sw a0,16(s0)  *)
    | 0x80006058 => 0x004aa783 (* lw a5,4(s5)  *)
    | 0x8000605c => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80006060 => 0x00faa223 (* sw a5,4(s5)  *)
    | 0x80006064 => 0x00079463 (* bnez a5,8000606c <xStreamBufferReceive+0xe4>  *)
    | 0x80006068 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000606c => 0x06996063 (* bltu s2,s1,800060cc <xStreamBufferReceive+0x144>  *)
    | 0x80006070 => 0x02442503 (* lw a0,36(s0)  *)
    | 0x80006074 => 0x000a0713 (* mv a4,s4  *)
    | 0x80006078 => 0x00000693 (* li a3,0  *)
    | 0x8000607c => 0x00000613 (* li a2,0  *)
    | 0x80006080 => 0x00000593 (* li a1,0  *)
    | 0x80006084 => 0xabcfc0ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80006088 => 0x00042823 (* sw zero,16(s0)  *)
    | 0x8000608c => 0x00040513 (* mv a0,s0  *)
    | 0x80006090 => 0xce8ff0ef (* jal 80005578 <prvBytesInBuffer>  *)
    | 0x80006094 => 0x00050493 (* mv s1,a0  *)
    | 0x80006098 => 0x02a96a63 (* bltu s2,a0,800060cc <xStreamBufferReceive+0x144>  *)
    | 0x8000609c => 0x00000493 (* li s1,0  *)
    | 0x800060a0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800060a4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800060a8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800060ac => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800060b0 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800060b4 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x800060b8 => 0x00012b03 (* lw s6,0(sp)  *)
    | 0x800060bc => 0x00048513 (* mv a0,s1  *)
    | 0x800060c0 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800060c4 => 0x02010113 (* add sp,sp,32  *)
    | 0x800060c8 => 0x00008067 (* ret  *)
    | 0x800060cc => 0x00048693 (* mv a3,s1  *)
    | 0x800060d0 => 0x000b0613 (* mv a2,s6  *)
    | 0x800060d4 => 0x00098593 (* mv a1,s3  *)
    | 0x800060d8 => 0x00040513 (* mv a0,s0  *)
    | 0x800060dc => 0xef0ff0ef (* jal 800057cc <prvReadMessageFromBuffer>  *)
    | 0x800060e0 => 0x00050493 (* mv s1,a0  *)
    | 0x800060e4 => 0xfa050ce3 (* beqz a0,8000609c <xStreamBufferReceive+0x114>  *)
    | 0x800060e8 => 0xd7dfa0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x800060ec => 0x01442783 (* lw a5,20(s0)  *)
    | 0x800060f0 => 0x02078063 (* beqz a5,80006110 <xStreamBufferReceive+0x188>  *)
    | 0x800060f4 => 0x01442503 (* lw a0,20(s0)  *)
    | 0x800060f8 => 0x02442583 (* lw a1,36(s0)  *)
    | 0x800060fc => 0x00000713 (* li a4,0  *)
    | 0x80006100 => 0x00000693 (* li a3,0  *)
    | 0x80006104 => 0x00000613 (* li a2,0  *)
    | 0x80006108 => 0xbbcfc0ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000610c => 0x00042a23 (* sw zero,20(s0)  *)
    | 0x80006110 => 0xf69fa0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80006114 => 0xf8dff06f (* j 800060a0 <xStreamBufferReceive+0x118>  *)
    (* <xStreamBufferNextMessageLengthBytes> *)
    | 0x80006118 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000611c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80006120 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80006124 => 0x00050413 (* mv s0,a0  *)
    | 0x80006128 => 0x00051a63 (* bnez a0,8000613c <xStreamBufferNextMessageLengthBytes+0x24>  *)
    | 0x8000612c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006130 => 0x49900593 (* li a1,1177  *)
    | 0x80006134 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80006138 => 0x1580c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000613c => 0x01c44783 (* lbu a5,28(s0)  *)
    | 0x80006140 => 0x0017f793 (* and a5,a5,1  *)
    | 0x80006144 => 0x00079c63 (* bnez a5,8000615c <xStreamBufferNextMessageLengthBytes+0x44>  *)
    | 0x80006148 => 0x00000513 (* li a0,0  *)
    | 0x8000614c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80006150 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80006154 => 0x02010113 (* add sp,sp,32  *)
    | 0x80006158 => 0x00008067 (* ret  *)
    | 0x8000615c => 0x00040513 (* mv a0,s0  *)
    | 0x80006160 => 0xc18ff0ef (* jal 80005578 <prvBytesInBuffer>  *)
    | 0x80006164 => 0x00400793 (* li a5,4  *)
    | 0x80006168 => 0x02a7f063 (* bgeu a5,a0,80006188 <xStreamBufferNextMessageLengthBytes+0x70>  *)
    | 0x8000616c => 0x00042683 (* lw a3,0(s0)  *)
    | 0x80006170 => 0x00400613 (* li a2,4  *)
    | 0x80006174 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80006178 => 0x00040513 (* mv a0,s0  *)
    | 0x8000617c => 0xd90ff0ef (* jal 8000570c <prvReadBytesFromBuffer>  *)
    | 0x80006180 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80006184 => 0xfc9ff06f (* j 8000614c <xStreamBufferNextMessageLengthBytes+0x34>  *)
    | 0x80006188 => 0xfc0500e3 (* beqz a0,80006148 <xStreamBufferNextMessageLengthBytes+0x30>  *)
    | 0x8000618c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006190 => 0x4ae00593 (* li a1,1198  *)
    | 0x80006194 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x80006198 => 0x0f80c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000619c => 0xfadff06f (* j 80006148 <xStreamBufferNextMessageLengthBytes+0x30>  *)
    (* <xStreamBufferReceiveFromISR> *)
    | 0x800061a0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800061a4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800061a8 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800061ac => 0x01312623 (* sw s3,12(sp)  *)
    | 0x800061b0 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x800061b4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800061b8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800061bc => 0x00050413 (* mv s0,a0  *)
    | 0x800061c0 => 0x00058913 (* mv s2,a1  *)
    | 0x800061c4 => 0x00060a13 (* mv s4,a2  *)
    | 0x800061c8 => 0x00068993 (* mv s3,a3  *)
    | 0x800061cc => 0x00059a63 (* bnez a1,800061e0 <xStreamBufferReceiveFromISR+0x40>  *)
    | 0x800061d0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800061d4 => 0x4c700593 (* li a1,1223  *)
    | 0x800061d8 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800061dc => 0x0b40c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800061e0 => 0x00041a63 (* bnez s0,800061f4 <xStreamBufferReceiveFromISR+0x54>  *)
    | 0x800061e4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800061e8 => 0x4c800593 (* li a1,1224  *)
    | 0x800061ec => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800061f0 => 0x0a00c0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800061f4 => 0x01c44483 (* lbu s1,28(s0)  *)
    | 0x800061f8 => 0x00040513 (* mv a0,s0  *)
    | 0x800061fc => 0xb7cff0ef (* jal 80005578 <prvBytesInBuffer>  *)
    | 0x80006200 => 0x0014f493 (* and s1,s1,1  *)
    | 0x80006204 => 0x00249493 (* sll s1,s1,0x2  *)
    | 0x80006208 => 0x00050693 (* mv a3,a0  *)
    | 0x8000620c => 0x02a4e663 (* bltu s1,a0,80006238 <xStreamBufferReceiveFromISR+0x98>  *)
    | 0x80006210 => 0x00000493 (* li s1,0  *)
    | 0x80006214 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80006218 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000621c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80006220 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80006224 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80006228 => 0x00048513 (* mv a0,s1  *)
    | 0x8000622c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80006230 => 0x02010113 (* add sp,sp,32  *)
    | 0x80006234 => 0x00008067 (* ret  *)
    | 0x80006238 => 0x000a0613 (* mv a2,s4  *)
    | 0x8000623c => 0x00090593 (* mv a1,s2  *)
    | 0x80006240 => 0x00040513 (* mv a0,s0  *)
    | 0x80006244 => 0xd88ff0ef (* jal 800057cc <prvReadMessageFromBuffer>  *)
    | 0x80006248 => 0x00050493 (* mv s1,a0  *)
    | 0x8000624c => 0xfc0502e3 (* beqz a0,80006210 <xStreamBufferReceiveFromISR+0x70>  *)
    | 0x80006250 => 0x01442783 (* lw a5,20(s0)  *)
    | 0x80006254 => 0xfc0780e3 (* beqz a5,80006214 <xStreamBufferReceiveFromISR+0x74>  *)
    | 0x80006258 => 0x01442503 (* lw a0,20(s0)  *)
    | 0x8000625c => 0x02442583 (* lw a1,36(s0)  *)
    | 0x80006260 => 0x00098793 (* mv a5,s3  *)
    | 0x80006264 => 0x00000713 (* li a4,0  *)
    | 0x80006268 => 0x00000693 (* li a3,0  *)
    | 0x8000626c => 0x00000613 (* li a2,0  *)
    | 0x80006270 => 0xc78fc0ef (* jal 800026e8 <xTaskGenericNotifyFromISR>  *)
    | 0x80006274 => 0x00042a23 (* sw zero,20(s0)  *)
    | 0x80006278 => 0xf9dff06f (* j 80006214 <xStreamBufferReceiveFromISR+0x74>  *)
    (* <xStreamBufferIsEmpty> *)
    | 0x8000627c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80006280 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80006284 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80006288 => 0x00050413 (* mv s0,a0  *)
    | 0x8000628c => 0x00051a63 (* bnez a0,800062a0 <xStreamBufferIsEmpty+0x24>  *)
    | 0x80006290 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006294 => 0x53b00593 (* li a1,1339  *)
    | 0x80006298 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x8000629c => 0x7f50b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800062a0 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x800062a4 => 0x00442503 (* lw a0,4(s0)  *)
    | 0x800062a8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800062ac => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800062b0 => 0x40f50533 (* sub a0,a0,a5  *)
    | 0x800062b4 => 0x00153513 (* seqz a0,a0  *)
    | 0x800062b8 => 0x01010113 (* add sp,sp,16  *)
    | 0x800062bc => 0x00008067 (* ret  *)
    (* <xStreamBufferIsFull> *)
    | 0x800062c0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800062c4 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800062c8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800062cc => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800062d0 => 0x00050493 (* mv s1,a0  *)
    | 0x800062d4 => 0x00051a63 (* bnez a0,800062e8 <xStreamBufferIsFull+0x28>  *)
    | 0x800062d8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800062dc => 0x55700593 (* li a1,1367  *)
    | 0x800062e0 => 0xc6c50513 (* add a0,a0,-916 # 80013c6c <_etext+0x9c>  *)
    | 0x800062e4 => 0x7ad0b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800062e8 => 0x01c4c403 (* lbu s0,28(s1)  *)
    | 0x800062ec => 0x00048513 (* mv a0,s1  *)
    | 0x800062f0 => 0x925ff0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x800062f4 => 0x00147413 (* and s0,s0,1  *)
    | 0x800062f8 => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x800062fc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80006300 => 0x00a43533 (* sltu a0,s0,a0  *)
    | 0x80006304 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80006308 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000630c => 0x00154513 (* xor a0,a0,1  *)
    | 0x80006310 => 0x01010113 (* add sp,sp,16  *)
    | 0x80006314 => 0x00008067 (* ret  *)
    (* <pvPortMalloc> *)
    | 0x80006318 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000631c => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80006320 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80006324 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80006328 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000632c => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80006330 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80006334 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80006338 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000633c => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80006340 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x80006344 => 0xfff50713 (* add a4,a0,-1  *)
    | 0x80006348 => 0xfee00793 (* li a5,-18  *)
    | 0x8000634c => 0x00000493 (* li s1,0  *)
    | 0x80006350 => 0x02e7e063 (* bltu a5,a4,80006370 <pvPortMalloc+0x58>  *)
    | 0x80006354 => 0x00f57793 (* and a5,a0,15  *)
    | 0x80006358 => 0x01050493 (* add s1,a0,16  *)
    | 0x8000635c => 0x00078a63 (* beqz a5,80006370 <pvPortMalloc+0x58>  *)
    | 0x80006360 => 0xfef78713 (* add a4,a5,-17  *)
    | 0x80006364 => 0x0a976e63 (* bltu a4,s1,80006420 <pvPortMalloc+0x108>  *)
    | 0x80006368 => 0x02050513 (* add a0,a0,32  *)
    | 0x8000636c => 0x40f504b3 (* sub s1,a0,a5  *)
    | 0x80006370 => 0xaf5fa0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80006374 => 0x8c01a783 (* lw a5,-1856(gp) # 800800c0 <pxEnd>  *)
    | 0x80006378 => 0x06079263 (* bnez a5,800063dc <pvPortMalloc+0xc4>  *)
    | 0x8000637c => 0x80080737 (* lui a4,0x80080  *)
    | 0x80006380 => 0x72470713 (* add a4,a4,1828 # 80080724 <ucHeap>  *)
    | 0x80006384 => 0x00f77693 (* and a3,a4,15  *)
    | 0x80006388 => 0x000147b7 (* lui a5,0x14  *)
    | 0x8000638c => 0x00068c63 (* beqz a3,800063a4 <pvPortMalloc+0x8c>  *)
    | 0x80006390 => 0x00f70693 (* add a3,a4,15  *)
    | 0x80006394 => 0xff06f693 (* and a3,a3,-16  *)
    | 0x80006398 => 0x00f707b3 (* add a5,a4,a5  *)
    | 0x8000639c => 0x40d787b3 (* sub a5,a5,a3  *)
    | 0x800063a0 => 0x00068713 (* mv a4,a3  *)
    | 0x800063a4 => 0x00f707b3 (* add a5,a4,a5  *)
    | 0x800063a8 => 0x8c418693 (* add a3,gp,-1852 # 800800c4 <xStart>  *)
    | 0x800063ac => 0xff078793 (* add a5,a5,-16 # 13ff0 <__stack_size+0x13e92>  *)
    | 0x800063b0 => 0xff07f793 (* and a5,a5,-16  *)
    | 0x800063b4 => 0x0006a223 (* sw zero,4(a3)  *)
    | 0x800063b8 => 0x00e6a023 (* sw a4,0(a3)  *)
    | 0x800063bc => 0x0007a223 (* sw zero,4(a5)  *)
    | 0x800063c0 => 0x0007a023 (* sw zero,0(a5)  *)
    | 0x800063c4 => 0x40e786b3 (* sub a3,a5,a4  *)
    | 0x800063c8 => 0x8cf1a023 (* sw a5,-1856(gp) # 800800c0 <pxEnd>  *)
    | 0x800063cc => 0x00f72023 (* sw a5,0(a4)  *)
    | 0x800063d0 => 0x8ad1ac23 (* sw a3,-1864(gp) # 800800b8 <xMinimumEverFreeBytesRemaining>  *)
    | 0x800063d4 => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x800063d8 => 0x8ad1ae23 (* sw a3,-1860(gp) # 800800bc <xFreeBytesRemaining>  *)
    | 0x800063dc => 0x04904663 (* bgtz s1,80006428 <pvPortMalloc+0x110>  *)
    | 0x800063e0 => 0xc99fa0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x800063e4 => 0x6710b0ef (* jal 80012254 <vApplicationMallocFailedHook>  *)
    | 0x800063e8 => 0x00000a13 (* li s4,0  *)
    | 0x800063ec => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x800063f0 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x800063f4 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x800063f8 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x800063fc => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x80006400 => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x80006404 => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x80006408 => 0x00c12b83 (* lw s7,12(sp)  *)
    | 0x8000640c => 0x00812c03 (* lw s8,8(sp)  *)
    | 0x80006410 => 0x000a0513 (* mv a0,s4  *)
    | 0x80006414 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x80006418 => 0x03010113 (* add sp,sp,48  *)
    | 0x8000641c => 0x00008067 (* ret  *)
    | 0x80006420 => 0x00000493 (* li s1,0  *)
    | 0x80006424 => 0xf4dff06f (* j 80006370 <pvPortMalloc+0x58>  *)
    | 0x80006428 => 0x8bc1a783 (* lw a5,-1860(gp) # 800800bc <xFreeBytesRemaining>  *)
    | 0x8000642c => 0xfa97eae3 (* bltu a5,s1,800063e0 <pvPortMalloc+0xc8>  *)
    | 0x80006430 => 0x8c41a403 (* lw s0,-1852(gp) # 800800c4 <xStart>  *)
    | 0x80006434 => 0x800809b7 (* lui s3,0x80080  *)
    | 0x80006438 => 0x72498993 (* add s3,s3,1828 # 80080724 <ucHeap>  *)
    | 0x8000643c => 0x8c418913 (* add s2,gp,-1852 # 800800c4 <xStart>  *)
    | 0x80006440 => 0x01346863 (* bltu s0,s3,80006450 <pvPortMalloc+0x138>  *)
    | 0x80006444 => 0x800947b7 (* lui a5,0x80094  *)
    | 0x80006448 => 0x72378793 (* add a5,a5,1827 # 80094723 <__global_pointer$+0x13f23>  *)
    | 0x8000644c => 0x0087fa63 (* bgeu a5,s0,80006460 <pvPortMalloc+0x148>  *)
    | 0x80006450 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006454 => 0x0f600593 (* li a1,246  *)
    | 0x80006458 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x8000645c => 0x6350b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006460 => 0x80094bb7 (* lui s7,0x80094  *)
    | 0x80006464 => 0x80014c37 (* lui s8,0x80014  *)
    | 0x80006468 => 0x723b8b93 (* add s7,s7,1827 # 80094723 <__global_pointer$+0x13f23>  *)
    | 0x8000646c => 0x00442783 (* lw a5,4(s0)  *)
    | 0x80006470 => 0x0097f663 (* bgeu a5,s1,8000647c <pvPortMalloc+0x164>  *)
    | 0x80006474 => 0x00042a03 (* lw s4,0(s0)  *)
    | 0x80006478 => 0x0e0a1a63 (* bnez s4,8000656c <pvPortMalloc+0x254>  *)
    | 0x8000647c => 0x8c01a783 (* lw a5,-1856(gp) # 800800c0 <pxEnd>  *)
    | 0x80006480 => 0xf68780e3 (* beq a5,s0,800063e0 <pvPortMalloc+0xc8>  *)
    | 0x80006484 => 0x00092a03 (* lw s4,0(s2)  *)
    | 0x80006488 => 0x010a0a13 (* add s4,s4,16  *)
    | 0x8000648c => 0x013a6863 (* bltu s4,s3,8000649c <pvPortMalloc+0x184>  *)
    | 0x80006490 => 0x800947b7 (* lui a5,0x80094  *)
    | 0x80006494 => 0x72378793 (* add a5,a5,1827 # 80094723 <__global_pointer$+0x13f23>  *)
    | 0x80006498 => 0x0147fa63 (* bgeu a5,s4,800064ac <pvPortMalloc+0x194>  *)
    | 0x8000649c => 0x80014537 (* lui a0,0x80014  *)
    | 0x800064a0 => 0x10600593 (* li a1,262  *)
    | 0x800064a4 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x800064a8 => 0x5e90b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800064ac => 0x00042783 (* lw a5,0(s0)  *)
    | 0x800064b0 => 0x00f92023 (* sw a5,0(s2)  *)
    | 0x800064b4 => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800064b8 => 0x0097fa63 (* bgeu a5,s1,800064cc <pvPortMalloc+0x1b4>  *)
    | 0x800064bc => 0x80014537 (* lui a0,0x80014  *)
    | 0x800064c0 => 0x10e00593 (* li a1,270  *)
    | 0x800064c4 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x800064c8 => 0x5c90b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800064cc => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800064d0 => 0x02000713 (* li a4,32  *)
    | 0x800064d4 => 0x409787b3 (* sub a5,a5,s1  *)
    | 0x800064d8 => 0x02f77e63 (* bgeu a4,a5,80006514 <pvPortMalloc+0x1fc>  *)
    | 0x800064dc => 0x009409b3 (* add s3,s0,s1  *)
    | 0x800064e0 => 0x00f9f793 (* and a5,s3,15  *)
    | 0x800064e4 => 0x00078a63 (* beqz a5,800064f8 <pvPortMalloc+0x1e0>  *)
    | 0x800064e8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800064ec => 0x11700593 (* li a1,279  *)
    | 0x800064f0 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x800064f4 => 0x59d0b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800064f8 => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800064fc => 0x409787b3 (* sub a5,a5,s1  *)
    | 0x80006500 => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x80006504 => 0x00092783 (* lw a5,0(s2)  *)
    | 0x80006508 => 0x00942223 (* sw s1,4(s0)  *)
    | 0x8000650c => 0x00f9a023 (* sw a5,0(s3)  *)
    | 0x80006510 => 0x01392023 (* sw s3,0(s2)  *)
    | 0x80006514 => 0x8bc1a783 (* lw a5,-1860(gp) # 800800bc <xFreeBytesRemaining>  *)
    | 0x80006518 => 0x00442703 (* lw a4,4(s0)  *)
    | 0x8000651c => 0x8b81a603 (* lw a2,-1864(gp) # 800800b8 <xMinimumEverFreeBytesRemaining>  *)
    | 0x80006520 => 0x40e787b3 (* sub a5,a5,a4  *)
    | 0x80006524 => 0x8af1ae23 (* sw a5,-1860(gp) # 800800bc <xFreeBytesRemaining>  *)
    | 0x80006528 => 0x00c7f463 (* bgeu a5,a2,80006530 <pvPortMalloc+0x218>  *)
    | 0x8000652c => 0x8af1ac23 (* sw a5,-1864(gp) # 800800b8 <xMinimumEverFreeBytesRemaining>  *)
    | 0x80006530 => 0x800007b7 (* lui a5,0x80000  *)
    | 0x80006534 => 0x00f76733 (* or a4,a4,a5  *)
    | 0x80006538 => 0x00e42223 (* sw a4,4(s0)  *)
    | 0x8000653c => 0x8b41a783 (* lw a5,-1868(gp) # 800800b4 <xNumberOfSuccessfulAllocations>  *)
    | 0x80006540 => 0x00042023 (* sw zero,0(s0)  *)
    | 0x80006544 => 0x00178793 (* add a5,a5,1 # 80000001 <_start+0x1>  *)
    | 0x80006548 => 0x8af1aa23 (* sw a5,-1868(gp) # 800800b4 <xNumberOfSuccessfulAllocations>  *)
    | 0x8000654c => 0xb2dfa0ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80006550 => 0x00fa7793 (* and a5,s4,15  *)
    | 0x80006554 => 0xe8078ce3 (* beqz a5,800063ec <pvPortMalloc+0xd4>  *)
    | 0x80006558 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000655c => 0x15d00593 (* li a1,349  *)
    | 0x80006560 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x80006564 => 0x52d0b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006568 => 0xe85ff06f (* j 800063ec <pvPortMalloc+0xd4>  *)
    | 0x8000656c => 0x013a6463 (* bltu s4,s3,80006574 <pvPortMalloc+0x25c>  *)
    | 0x80006570 => 0x014bf863 (* bgeu s7,s4,80006580 <pvPortMalloc+0x268>  *)
    | 0x80006574 => 0x0fc00593 (* li a1,252  *)
    | 0x80006578 => 0xc94c0513 (* add a0,s8,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x8000657c => 0x5150b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006580 => 0x00040913 (* mv s2,s0  *)
    | 0x80006584 => 0x000a0413 (* mv s0,s4  *)
    | 0x80006588 => 0xee5ff06f (* j 8000646c <pvPortMalloc+0x154>  *)
    (* <vPortFree> *)
    | 0x8000658c => 0x16050e63 (* beqz a0,80006708 <vPortFree+0x17c>  *)
    | 0x80006590 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80006594 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80006598 => 0x800809b7 (* lui s3,0x80080  *)
    | 0x8000659c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800065a0 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800065a4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800065a8 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800065ac => 0xff050413 (* add s0,a0,-16  *)
    | 0x800065b0 => 0x72498993 (* add s3,s3,1828 # 80080724 <ucHeap>  *)
    | 0x800065b4 => 0x00050493 (* mv s1,a0  *)
    | 0x800065b8 => 0x01346863 (* bltu s0,s3,800065c8 <vPortFree+0x3c>  *)
    | 0x800065bc => 0x800947b7 (* lui a5,0x80094  *)
    | 0x800065c0 => 0x72378793 (* add a5,a5,1827 # 80094723 <__global_pointer$+0x13f23>  *)
    | 0x800065c4 => 0x0087fa63 (* bgeu a5,s0,800065d8 <vPortFree+0x4c>  *)
    | 0x800065c8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800065cc => 0x17000593 (* li a1,368  *)
    | 0x800065d0 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x800065d4 => 0x4bd0b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800065d8 => 0xff44a783 (* lw a5,-12(s1)  *)
    | 0x800065dc => 0x0007ca63 (* bltz a5,800065f0 <vPortFree+0x64>  *)
    | 0x800065e0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800065e4 => 0x17100593 (* li a1,369  *)
    | 0x800065e8 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x800065ec => 0x4a50b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800065f0 => 0xff04a783 (* lw a5,-16(s1)  *)
    | 0x800065f4 => 0x00078a63 (* beqz a5,80006608 <vPortFree+0x7c>  *)
    | 0x800065f8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800065fc => 0x17200593 (* li a1,370  *)
    | 0x80006600 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x80006604 => 0x48d0b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006608 => 0xff44a783 (* lw a5,-12(s1)  *)
    | 0x8000660c => 0x0e07d063 (* bgez a5,800066ec <vPortFree+0x160>  *)
    | 0x80006610 => 0xff04a703 (* lw a4,-16(s1)  *)
    | 0x80006614 => 0x0c071c63 (* bnez a4,800066ec <vPortFree+0x160>  *)
    | 0x80006618 => 0x00179793 (* sll a5,a5,0x1  *)
    | 0x8000661c => 0x0017d793 (* srl a5,a5,0x1  *)
    | 0x80006620 => 0xfef4aa23 (* sw a5,-12(s1)  *)
    | 0x80006624 => 0x841fa0ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80006628 => 0x8bc1a683 (* lw a3,-1860(gp) # 800800bc <xFreeBytesRemaining>  *)
    | 0x8000662c => 0xff44a783 (* lw a5,-12(s1)  *)
    | 0x80006630 => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x80006634 => 0x8af1ae23 (* sw a5,-1860(gp) # 800800bc <xFreeBytesRemaining>  *)
    | 0x80006638 => 0x8c418713 (* add a4,gp,-1852 # 800800c4 <xStart>  *)
    | 0x8000663c => 0x8c418793 (* add a5,gp,-1852 # 800800c4 <xStart>  *)
    | 0x80006640 => 0x00070913 (* mv s2,a4  *)
    | 0x80006644 => 0x00072703 (* lw a4,0(a4)  *)
    | 0x80006648 => 0xfe876ce3 (* bltu a4,s0,80006640 <vPortFree+0xb4>  *)
    | 0x8000664c => 0x02f90263 (* beq s2,a5,80006670 <vPortFree+0xe4>  *)
    | 0x80006650 => 0x01396863 (* bltu s2,s3,80006660 <vPortFree+0xd4>  *)
    | 0x80006654 => 0x800947b7 (* lui a5,0x80094  *)
    | 0x80006658 => 0x72378793 (* add a5,a5,1827 # 80094723 <__global_pointer$+0x13f23>  *)
    | 0x8000665c => 0x0127fa63 (* bgeu a5,s2,80006670 <vPortFree+0xe4>  *)
    | 0x80006660 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006664 => 0x20000593 (* li a1,512  *)
    | 0x80006668 => 0xc9450513 (* add a0,a0,-876 # 80013c94 <_etext+0xc4>  *)
    | 0x8000666c => 0x4250b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006670 => 0x00492703 (* lw a4,4(s2)  *)
    | 0x80006674 => 0x00e907b3 (* add a5,s2,a4  *)
    | 0x80006678 => 0x00f41a63 (* bne s0,a5,8000668c <vPortFree+0x100>  *)
    | 0x8000667c => 0xff44a783 (* lw a5,-12(s1)  *)
    | 0x80006680 => 0x00090413 (* mv s0,s2  *)
    | 0x80006684 => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80006688 => 0x00f92223 (* sw a5,4(s2)  *)
    | 0x8000668c => 0x00442683 (* lw a3,4(s0)  *)
    | 0x80006690 => 0x00092703 (* lw a4,0(s2)  *)
    | 0x80006694 => 0x00d40633 (* add a2,s0,a3  *)
    | 0x80006698 => 0x00070793 (* mv a5,a4  *)
    | 0x8000669c => 0x00c71e63 (* bne a4,a2,800066b8 <vPortFree+0x12c>  *)
    | 0x800066a0 => 0x8c01a783 (* lw a5,-1856(gp) # 800800c0 <pxEnd>  *)
    | 0x800066a4 => 0x00f70a63 (* beq a4,a5,800066b8 <vPortFree+0x12c>  *)
    | 0x800066a8 => 0x00472783 (* lw a5,4(a4)  *)
    | 0x800066ac => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x800066b0 => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x800066b4 => 0x00072783 (* lw a5,0(a4)  *)
    | 0x800066b8 => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x800066bc => 0x00890463 (* beq s2,s0,800066c4 <vPortFree+0x138>  *)
    | 0x800066c0 => 0x00892023 (* sw s0,0(s2)  *)
    | 0x800066c4 => 0x8b01a783 (* lw a5,-1872(gp) # 800800b0 <xNumberOfSuccessfulFrees>  *)
    | 0x800066c8 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800066cc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800066d0 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800066d4 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800066d8 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800066dc => 0x00178793 (* add a5,a5,1  *)
    | 0x800066e0 => 0x8af1a823 (* sw a5,-1872(gp) # 800800b0 <xNumberOfSuccessfulFrees>  *)
    | 0x800066e4 => 0x02010113 (* add sp,sp,32  *)
    | 0x800066e8 => 0x991fa06f (* j 80001078 <xTaskResumeAll>  *)
    | 0x800066ec => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800066f0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800066f4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800066f8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800066fc => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80006700 => 0x02010113 (* add sp,sp,32  *)
    | 0x80006704 => 0x00008067 (* ret  *)
    | 0x80006708 => 0x00008067 (* ret  *)
    (* <vPortSetupTimerInterrupt> *)
    | 0x8000670c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80006710 => 0xf14027f3 (* csrr a5,mhartid  *)
    | 0x80006714 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80006718 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000671c => 0x004017b7 (* lui a5,0x401  *)
    | 0x80006720 => 0x80078793 (* add a5,a5,-2048 # 400800 <__stack_size+0x4006a2>  *)
    | 0x80006724 => 0x00f70733 (* add a4,a4,a5  *)
    | 0x80006728 => 0x00371713 (* sll a4,a4,0x3  *)
    | 0x8000672c => 0x0200c6b7 (* lui a3,0x200c  *)
    | 0x80006730 => 0x0200c5b7 (* lui a1,0x200c  *)
    | 0x80006734 => 0x8ce1a823 (* sw a4,-1840(gp) # 800800d0 <pullMachineTimerCompareRegister>  *)
    | 0x80006738 => 0xffc68693 (* add a3,a3,-4 # 200bffc <__stack_size+0x200be9e>  *)
    | 0x8000673c => 0xff858593 (* add a1,a1,-8 # 200bff8 <__stack_size+0x200be9a>  *)
    | 0x80006740 => 0x0006a503 (* lw a0,0(a3)  *)
    | 0x80006744 => 0x0005a783 (* lw a5,0(a1)  *)
    | 0x80006748 => 0x0006a603 (* lw a2,0(a3)  *)
    | 0x8000674c => 0xfea61ae3 (* bne a2,a0,80006740 <vPortSetupTimerInterrupt+0x34>  *)
    | 0x80006750 => 0x000066b7 (* lui a3,0x6  *)
    | 0x80006754 => 0x1a868693 (* add a3,a3,424 # 61a8 <__stack_size+0x604a>  *)
    | 0x80006758 => 0x00d786b3 (* add a3,a5,a3  *)
    | 0x8000675c => 0x00f6b833 (* sltu a6,a3,a5  *)
    | 0x80006760 => 0x00d72023 (* sw a3,0(a4)  *)
    | 0x80006764 => 0x00c805b3 (* add a1,a6,a2  *)
    | 0x80006768 => 0x00b72223 (* sw a1,4(a4)  *)
    | 0x8000676c => 0x0000c737 (* lui a4,0xc  *)
    | 0x80006770 => 0x35070713 (* add a4,a4,848 # c350 <__stack_size+0xc1f2>  *)
    | 0x80006774 => 0x00e78733 (* add a4,a5,a4  *)
    | 0x80006778 => 0x00f737b3 (* sltu a5,a4,a5  *)
    | 0x8000677c => 0x00c787b3 (* add a5,a5,a2  *)
    | 0x80006780 => 0x8ce1ac23 (* sw a4,-1832(gp) # 800800d8 <ullNextTime>  *)
    | 0x80006784 => 0x8cf1ae23 (* sw a5,-1828(gp) # 800800dc <ullNextTime+0x4>  *)
    | 0x80006788 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000678c => 0x00008067 (* ret  *)
    (* <xPortStartScheduler> *)
    | 0x80006790 => 0x80094537 (* lui a0,0x80094  *)
    | 0x80006794 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80006798 => 0x4b000613 (* li a2,1200  *)
    | 0x8000679c => 0x0ee00593 (* li a1,238  *)
    | 0x800067a0 => 0x73050513 (* add a0,a0,1840 # 80094730 <xISRStack>  *)
    | 0x800067a4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800067a8 => 0x7a10c0ef (* jal 80013748 <memset>  *)
    | 0x800067ac => 0xf61ff0ef (* jal 8000670c <vPortSetupTimerInterrupt>  *)
    | 0x800067b0 => 0x000017b7 (* lui a5,0x1  *)
    | 0x800067b4 => 0x88078793 (* add a5,a5,-1920 # 880 <__stack_size+0x722>  *)
    | 0x800067b8 => 0x3047a073 (* csrs mie,a5  *)
    | 0x800067bc => 0x5b80c0ef (* jal 80012d74 <xPortStartFirstTask>  *)
    | 0x800067c0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800067c4 => 0x00000513 (* li a0,0  *)
    | 0x800067c8 => 0x01010113 (* add sp,sp,16  *)
    | 0x800067cc => 0x00008067 (* ret  *)
    (* <prvCheckExpectedTimeIsWithinAnAcceptableMargin> *)
    | 0x800067d0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800067d4 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800067d8 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800067dc => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800067e0 => 0x00050493 (* mv s1,a0  *)
    | 0x800067e4 => 0x00058413 (* mv s0,a1  *)
    | 0x800067e8 => 0xe8cfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800067ec => 0x40950533 (* sub a0,a0,s1  *)
    | 0x800067f0 => 0x00857663 (* bgeu a0,s0,800067fc <prvCheckExpectedTimeIsWithinAnAcceptableMargin+0x2c>  *)
    | 0x800067f4 => 0x2f700713 (* li a4,759  *)
    | 0x800067f8 => 0x8ee1aa23 (* sw a4,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x800067fc => 0x00740413 (* add s0,s0,7  *)
    | 0x80006800 => 0x00a47663 (* bgeu s0,a0,8000680c <prvCheckExpectedTimeIsWithinAnAcceptableMargin+0x3c>  *)
    | 0x80006804 => 0x2ff00713 (* li a4,767  *)
    | 0x80006808 => 0x8ee1aa23 (* sw a4,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x8000680c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80006810 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80006814 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80006818 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000681c => 0x00008067 (* ret  *)
    (* <prvBlockingTask> *)
    | 0x80006820 => 0xfa010113 (* add sp,sp,-96  *)
    | 0x80006824 => 0x04112e23 (* sw ra,92(sp)  *)
    | 0x80006828 => 0x04812c23 (* sw s0,88(sp)  *)
    | 0x8000682c => 0x04912a23 (* sw s1,84(sp)  *)
    | 0x80006830 => 0x05212823 (* sw s2,80(sp)  *)
    | 0x80006834 => 0x05312623 (* sw s3,76(sp)  *)
    | 0x80006838 => 0x05412423 (* sw s4,72(sp)  *)
    | 0x8000683c => 0x05512223 (* sw s5,68(sp)  *)
    | 0x80006840 => 0x05612023 (* sw s6,64(sp)  *)
    | 0x80006844 => 0x03712e23 (* sw s7,60(sp)  *)
    | 0x80006848 => 0x03812c23 (* sw s8,56(sp)  *)
    | 0x8000684c => 0xdd4fb0ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x80006850 => 0xc75fa0ef (* jal 800014c4 <xTaskAbortDelay>  *)
    | 0x80006854 => 0x00050663 (* beqz a0,80006860 <prvBlockingTask+0x40>  *)
    | 0x80006858 => 0x12300713 (* li a4,291  *)
    | 0x8000685c => 0x8ee1aa23 (* sw a4,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006860 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006864 => 0xcc450513 (* add a0,a0,-828 # 80013cc4 <_etext+0xf4>  *)
    | 0x80006868 => 0xb19fa0ef (* jal 80001380 <xTaskGetHandle>  *)
    | 0x8000686c => 0x00050913 (* mv s2,a0  *)
    | 0x80006870 => 0x00051a63 (* bnez a0,80006884 <prvBlockingTask+0x64>  *)
    | 0x80006874 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006878 => 0x0df00593 (* li a1,223  *)
    | 0x8000687c => 0xccc50513 (* add a0,a0,-820 # 80013ccc <_etext+0xfc>  *)
    | 0x80006880 => 0x2110b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006884 => 0x800159b7 (* lui s3,0x80015  *)
    | 0x80006888 => 0xc3c98993 (* add s3,s3,-964 # 80014c3c <_etext+0x106c>  *)
    | 0x8000688c => 0x22400a93 (* li s5,548  *)
    | 0x80006890 => 0x80095b37 (* lui s6,0x80095  *)
    | 0x80006894 => 0xfff00713 (* li a4,-1  *)
    | 0x80006898 => 0x00410693 (* add a3,sp,4  *)
    | 0x8000689c => 0xfff00613 (* li a2,-1  *)
    | 0x800068a0 => 0x00000593 (* li a1,0  *)
    | 0x800068a4 => 0x00000513 (* li a0,0  *)
    | 0x800068a8 => 0xa99fb0ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800068ac => 0x00412783 (* lw a5,4(sp)  *)
    | 0x800068b0 => 0x00700713 (* li a4,7  *)
    | 0x800068b4 => 0x0af76c63 (* bltu a4,a5,8000696c <prvBlockingTask+0x14c>  *)
    | 0x800068b8 => 0x00279793 (* sll a5,a5,0x2  *)
    | 0x800068bc => 0x013787b3 (* add a5,a5,s3  *)
    | 0x800068c0 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x800068c4 => 0x00078067 (* jr a5  *)
    | 0x800068c8 => 0xdacfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800068cc => 0x00050493 (* mv s1,a0  *)
    | 0x800068d0 => 0x06400713 (* li a4,100  *)
    | 0x800068d4 => 0x00000693 (* li a3,0  *)
    | 0x800068d8 => 0x00000613 (* li a2,0  *)
    | 0x800068dc => 0x00000593 (* li a1,0  *)
    | 0x800068e0 => 0x00000513 (* li a0,0  *)
    | 0x800068e4 => 0xa5dfb0ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800068e8 => 0x00050663 (* beqz a0,800068f4 <prvBlockingTask+0xd4>  *)
    | 0x800068ec => 0x2ca00793 (* li a5,714  *)
    | 0x800068f0 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x800068f4 => 0x06400593 (* li a1,100  *)
    | 0x800068f8 => 0x00048513 (* mv a0,s1  *)
    | 0x800068fc => 0xed5ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006900 => 0xd74fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006904 => 0x00050493 (* mv s1,a0  *)
    | 0x80006908 => 0xfff00713 (* li a4,-1  *)
    | 0x8000690c => 0x00000693 (* li a3,0  *)
    | 0x80006910 => 0x00000613 (* li a2,0  *)
    | 0x80006914 => 0x00000593 (* li a1,0  *)
    | 0x80006918 => 0x00000513 (* li a0,0  *)
    | 0x8000691c => 0xa25fb0ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80006920 => 0x00050663 (* beqz a0,8000692c <prvBlockingTask+0x10c>  *)
    | 0x80006924 => 0x2d800793 (* li a5,728  *)
    | 0x80006928 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x8000692c => 0x03200593 (* li a1,50  *)
    | 0x80006930 => 0x00048513 (* mv a0,s1  *)
    | 0x80006934 => 0xe9dff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006938 => 0xd3cfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000693c => 0x00050493 (* mv s1,a0  *)
    | 0x80006940 => 0x06400713 (* li a4,100  *)
    | 0x80006944 => 0x00000693 (* li a3,0  *)
    | 0x80006948 => 0x00000613 (* li a2,0  *)
    | 0x8000694c => 0x00000593 (* li a1,0  *)
    | 0x80006950 => 0x00000513 (* li a0,0  *)
    | 0x80006954 => 0x9edfb0ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80006958 => 0x2e500793 (* li a5,741  *)
    | 0x8000695c => 0x0a051c63 (* bnez a0,80006a14 <prvBlockingTask+0x1f4>  *)
    | 0x80006960 => 0x06400593 (* li a1,100  *)
    | 0x80006964 => 0x00048513 (* mv a0,s1  *)
    | 0x80006968 => 0xe69ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x8000696c => 0x00000713 (* li a4,0  *)
    | 0x80006970 => 0x00200693 (* li a3,2  *)
    | 0x80006974 => 0x00000613 (* li a2,0  *)
    | 0x80006978 => 0x00000593 (* li a1,0  *)
    | 0x8000697c => 0x00090513 (* mv a0,s2  *)
    | 0x80006980 => 0xb45fb0ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80006984 => 0x8f81a783 (* lw a5,-1800(gp) # 800800f8 <xBlockingCycles>  *)
    | 0x80006988 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000698c => 0x8ef1ac23 (* sw a5,-1800(gp) # 800800f8 <xBlockingCycles>  *)
    | 0x80006990 => 0xf05ff06f (* j 80006894 <prvBlockingTask+0x74>  *)
    | 0x80006994 => 0xce0fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006998 => 0x00050493 (* mv s1,a0  *)
    | 0x8000699c => 0x06400613 (* li a2,100  *)
    | 0x800069a0 => 0x00000593 (* li a1,0  *)
    | 0x800069a4 => 0x00000513 (* li a0,0  *)
    | 0x800069a8 => 0x86dfb0ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x800069ac => 0x00050663 (* beqz a0,800069b8 <prvBlockingTask+0x198>  *)
    | 0x800069b0 => 0x17e00793 (* li a5,382  *)
    | 0x800069b4 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x800069b8 => 0x06400593 (* li a1,100  *)
    | 0x800069bc => 0x00048513 (* mv a0,s1  *)
    | 0x800069c0 => 0xe11ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x800069c4 => 0xcb0fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800069c8 => 0x00050493 (* mv s1,a0  *)
    | 0x800069cc => 0x06400613 (* li a2,100  *)
    | 0x800069d0 => 0x00000593 (* li a1,0  *)
    | 0x800069d4 => 0x00000513 (* li a0,0  *)
    | 0x800069d8 => 0x83dfb0ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x800069dc => 0x00050663 (* beqz a0,800069e8 <prvBlockingTask+0x1c8>  *)
    | 0x800069e0 => 0x18c00793 (* li a5,396  *)
    | 0x800069e4 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x800069e8 => 0x03200593 (* li a1,50  *)
    | 0x800069ec => 0x00048513 (* mv a0,s1  *)
    | 0x800069f0 => 0xde1ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x800069f4 => 0xc80fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800069f8 => 0x00050493 (* mv s1,a0  *)
    | 0x800069fc => 0x06400613 (* li a2,100  *)
    | 0x80006a00 => 0x00000593 (* li a1,0  *)
    | 0x80006a04 => 0x00000513 (* li a0,0  *)
    | 0x80006a08 => 0x80dfb0ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x80006a0c => 0xf4050ae3 (* beqz a0,80006960 <prvBlockingTask+0x140>  *)
    | 0x80006a10 => 0x19900793 (* li a5,409  *)
    | 0x80006a14 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006a18 => 0xf49ff06f (* j 80006960 <prvBlockingTask+0x140>  *)
    | 0x80006a1c => 0xc58fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006a20 => 0x00050493 (* mv s1,a0  *)
    | 0x80006a24 => 0x06400513 (* li a0,100  *)
    | 0x80006a28 => 0x8f1fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80006a2c => 0x06400593 (* li a1,100  *)
    | 0x80006a30 => 0x00048513 (* mv a0,s1  *)
    | 0x80006a34 => 0xd9dff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006a38 => 0xc3cfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006a3c => 0x00050493 (* mv s1,a0  *)
    | 0x80006a40 => 0x06400513 (* li a0,100  *)
    | 0x80006a44 => 0x8d5fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80006a48 => 0x03200593 (* li a1,50  *)
    | 0x80006a4c => 0x00048513 (* mv a0,s1  *)
    | 0x80006a50 => 0xd81ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006a54 => 0xc20fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006a58 => 0x00050493 (* mv s1,a0  *)
    | 0x80006a5c => 0x06400513 (* li a0,100  *)
    | 0x80006a60 => 0x8b9fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80006a64 => 0xefdff06f (* j 80006960 <prvBlockingTask+0x140>  *)
    | 0x80006a68 => 0xc0cfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006a6c => 0x00050493 (* mv s1,a0  *)
    | 0x80006a70 => 0x00a12423 (* sw a0,8(sp)  *)
    | 0x80006a74 => 0x06400593 (* li a1,100  *)
    | 0x80006a78 => 0x00810513 (* add a0,sp,8  *)
    | 0x80006a7c => 0xfc4fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x80006a80 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006a84 => 0x06400593 (* li a1,100  *)
    | 0x80006a88 => 0x00048513 (* mv a0,s1  *)
    | 0x80006a8c => 0xd45ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006a90 => 0x00100793 (* li a5,1  *)
    | 0x80006a94 => 0x00fc0a63 (* beq s8,a5,80006aa8 <prvBlockingTask+0x288>  *)
    | 0x80006a98 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006a9c => 0x13800593 (* li a1,312  *)
    | 0x80006aa0 => 0xccc50513 (* add a0,a0,-820 # 80013ccc <_etext+0xfc>  *)
    | 0x80006aa4 => 0x7ec0b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006aa8 => 0xbccfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006aac => 0x00050493 (* mv s1,a0  *)
    | 0x80006ab0 => 0x00a12423 (* sw a0,8(sp)  *)
    | 0x80006ab4 => 0x06400593 (* li a1,100  *)
    | 0x80006ab8 => 0x00810513 (* add a0,sp,8  *)
    | 0x80006abc => 0xf84fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x80006ac0 => 0x03200593 (* li a1,50  *)
    | 0x80006ac4 => 0x00048513 (* mv a0,s1  *)
    | 0x80006ac8 => 0xd09ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006acc => 0xba8fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006ad0 => 0x00050493 (* mv s1,a0  *)
    | 0x80006ad4 => 0x00a12423 (* sw a0,8(sp)  *)
    | 0x80006ad8 => 0x06400593 (* li a1,100  *)
    | 0x80006adc => 0x00810513 (* add a0,sp,8  *)
    | 0x80006ae0 => 0xf60fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x80006ae4 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006ae8 => 0x06400593 (* li a1,100  *)
    | 0x80006aec => 0x00048513 (* mv a0,s1  *)
    | 0x80006af0 => 0xce1ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006af4 => 0x00100793 (* li a5,1  *)
    | 0x80006af8 => 0xe6fc0ae3 (* beq s8,a5,8000696c <prvBlockingTask+0x14c>  *)
    | 0x80006afc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006b00 => 0x14d00593 (* li a1,333  *)
    | 0x80006b04 => 0xccc50513 (* add a0,a0,-820 # 80013ccc <_etext+0xfc>  *)
    | 0x80006b08 => 0x7880b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006b0c => 0xe61ff06f (* j 8000696c <prvBlockingTask+0x14c>  *)
    | 0x80006b10 => 0x800956b7 (* lui a3,0x80095  *)
    | 0x80006b14 => 0x00000593 (* li a1,0  *)
    | 0x80006b18 => 0x00300713 (* li a4,3  *)
    | 0x80006b1c => 0xc5468693 (* add a3,a3,-940 # 80094c54 <xSemaphoreBuffer.6>  *)
    | 0x80006b20 => 0x00000613 (* li a2,0  *)
    | 0x80006b24 => 0x00100513 (* li a0,1  *)
    | 0x80006b28 => 0xdbcfc0ef (* jal 800030e4 <xQueueGenericCreateStatic>  *)
    | 0x80006b2c => 0x00050493 (* mv s1,a0  *)
    | 0x80006b30 => 0xb44fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006b34 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006b38 => 0x06400593 (* li a1,100  *)
    | 0x80006b3c => 0x00048513 (* mv a0,s1  *)
    | 0x80006b40 => 0x87cfd0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80006b44 => 0x00050663 (* beqz a0,80006b50 <prvBlockingTask+0x330>  *)
    | 0x80006b48 => 0x29800793 (* li a5,664  *)
    | 0x80006b4c => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006b50 => 0x06400593 (* li a1,100  *)
    | 0x80006b54 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006b58 => 0xc79ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006b5c => 0xb18fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006b60 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006b64 => 0xfff00593 (* li a1,-1  *)
    | 0x80006b68 => 0x00048513 (* mv a0,s1  *)
    | 0x80006b6c => 0x850fd0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80006b70 => 0x00050663 (* beqz a0,80006b7c <prvBlockingTask+0x35c>  *)
    | 0x80006b74 => 0x2a600793 (* li a5,678  *)
    | 0x80006b78 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006b7c => 0x03200593 (* li a1,50  *)
    | 0x80006b80 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006b84 => 0xc4dff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006b88 => 0xaecfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006b8c => 0x00050c13 (* mv s8,a0  *)
    | 0x80006b90 => 0x06400593 (* li a1,100  *)
    | 0x80006b94 => 0x00048513 (* mv a0,s1  *)
    | 0x80006b98 => 0x824fd0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80006b9c => 0x2b300793 (* li a5,691  *)
    | 0x80006ba0 => 0x1a051463 (* bnez a0,80006d48 <prvBlockingTask+0x528>  *)
    | 0x80006ba4 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006ba8 => 0x06400593 (* li a1,100  *)
    | 0x80006bac => 0xc25ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006bb0 => 0x00048513 (* mv a0,s1  *)
    | 0x80006bb4 => 0x849fd0ef (* jal 800043fc <vQueueDelete>  *)
    | 0x80006bb8 => 0xdb5ff06f (* j 8000696c <prvBlockingTask+0x14c>  *)
    | 0x80006bbc => 0x80095537 (* lui a0,0x80095  *)
    | 0x80006bc0 => 0xc3450513 (* add a0,a0,-972 # 80094c34 <xEventGroupBuffer.5>  *)
    | 0x80006bc4 => 0xbfcfe0ef (* jal 80004fc0 <xEventGroupCreateStatic>  *)
    | 0x80006bc8 => 0x00050493 (* mv s1,a0  *)
    | 0x80006bcc => 0xaa8fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006bd0 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006bd4 => 0x06400713 (* li a4,100  *)
    | 0x80006bd8 => 0x00100693 (* li a3,1  *)
    | 0x80006bdc => 0x00100613 (* li a2,1  *)
    | 0x80006be0 => 0x00100593 (* li a1,1  *)
    | 0x80006be4 => 0x00048513 (* mv a0,s1  *)
    | 0x80006be8 => 0xc88fe0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80006bec => 0x00050663 (* beqz a0,80006bf8 <prvBlockingTask+0x3d8>  *)
    | 0x80006bf0 => 0x1bd00793 (* li a5,445  *)
    | 0x80006bf4 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006bf8 => 0x06400593 (* li a1,100  *)
    | 0x80006bfc => 0x000c0513 (* mv a0,s8  *)
    | 0x80006c00 => 0xbd1ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006c04 => 0xa70fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006c08 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006c0c => 0x06400713 (* li a4,100  *)
    | 0x80006c10 => 0x00100693 (* li a3,1  *)
    | 0x80006c14 => 0x00100613 (* li a2,1  *)
    | 0x80006c18 => 0x00100593 (* li a1,1  *)
    | 0x80006c1c => 0x00048513 (* mv a0,s1  *)
    | 0x80006c20 => 0xc50fe0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80006c24 => 0x00050663 (* beqz a0,80006c30 <prvBlockingTask+0x410>  *)
    | 0x80006c28 => 0x1cb00793 (* li a5,459  *)
    | 0x80006c2c => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006c30 => 0x03200593 (* li a1,50  *)
    | 0x80006c34 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006c38 => 0xb99ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006c3c => 0xa38fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006c40 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006c44 => 0x06400713 (* li a4,100  *)
    | 0x80006c48 => 0x00100693 (* li a3,1  *)
    | 0x80006c4c => 0x00100613 (* li a2,1  *)
    | 0x80006c50 => 0x00100593 (* li a1,1  *)
    | 0x80006c54 => 0x00048513 (* mv a0,s1  *)
    | 0x80006c58 => 0xc18fe0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80006c5c => 0x00050663 (* beqz a0,80006c68 <prvBlockingTask+0x448>  *)
    | 0x80006c60 => 0x1d800793 (* li a5,472  *)
    | 0x80006c64 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006c68 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006c6c => 0x06400593 (* li a1,100  *)
    | 0x80006c70 => 0xb61ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006c74 => 0x00048513 (* mv a0,s1  *)
    | 0x80006c78 => 0x845fe0ef (* jal 800054bc <vEventGroupDelete>  *)
    | 0x80006c7c => 0xcf1ff06f (* j 8000696c <prvBlockingTask+0x14c>  *)
    | 0x80006c80 => 0x00000713 (* li a4,0  *)
    | 0x80006c84 => 0xbe0b0693 (* add a3,s6,-1056 # 80094be0 <xQueueBuffer.3>  *)
    | 0x80006c88 => 0x8f018613 (* add a2,gp,-1808 # 800800f0 <ucQueueStorage.4>  *)
    | 0x80006c8c => 0x00100593 (* li a1,1  *)
    | 0x80006c90 => 0x00100513 (* li a0,1  *)
    | 0x80006c94 => 0xc50fc0ef (* jal 800030e4 <xQueueGenericCreateStatic>  *)
    | 0x80006c98 => 0x00000693 (* li a3,0  *)
    | 0x80006c9c => 0x06400613 (* li a2,100  *)
    | 0x80006ca0 => 0x00810593 (* add a1,sp,8  *)
    | 0x80006ca4 => 0x00050493 (* mv s1,a0  *)
    | 0x80006ca8 => 0xf24fc0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80006cac => 0x00100793 (* li a5,1  *)
    | 0x80006cb0 => 0x00f50663 (* beq a0,a5,80006cbc <prvBlockingTask+0x49c>  *)
    | 0x80006cb4 => 0x24c00793 (* li a5,588  *)
    | 0x80006cb8 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006cbc => 0x9b8fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006cc0 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006cc4 => 0x00000693 (* li a3,0  *)
    | 0x80006cc8 => 0x06400613 (* li a2,100  *)
    | 0x80006ccc => 0x00810593 (* add a1,sp,8  *)
    | 0x80006cd0 => 0x00048513 (* mv a0,s1  *)
    | 0x80006cd4 => 0xef8fc0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80006cd8 => 0x00050663 (* beqz a0,80006ce4 <prvBlockingTask+0x4c4>  *)
    | 0x80006cdc => 0x25700793 (* li a5,599  *)
    | 0x80006ce0 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006ce4 => 0x06400593 (* li a1,100  *)
    | 0x80006ce8 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006cec => 0xae5ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006cf0 => 0x984fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006cf4 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006cf8 => 0x00000693 (* li a3,0  *)
    | 0x80006cfc => 0x06400613 (* li a2,100  *)
    | 0x80006d00 => 0x00810593 (* add a1,sp,8  *)
    | 0x80006d04 => 0x00048513 (* mv a0,s1  *)
    | 0x80006d08 => 0xec4fc0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80006d0c => 0x00050663 (* beqz a0,80006d18 <prvBlockingTask+0x4f8>  *)
    | 0x80006d10 => 0x26500793 (* li a5,613  *)
    | 0x80006d14 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006d18 => 0x03200593 (* li a1,50  *)
    | 0x80006d1c => 0x000c0513 (* mv a0,s8  *)
    | 0x80006d20 => 0xab1ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006d24 => 0x950fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006d28 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006d2c => 0x00000693 (* li a3,0  *)
    | 0x80006d30 => 0x06400613 (* li a2,100  *)
    | 0x80006d34 => 0x00810593 (* add a1,sp,8  *)
    | 0x80006d38 => 0x00048513 (* mv a0,s1  *)
    | 0x80006d3c => 0xe90fc0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80006d40 => 0xe60502e3 (* beqz a0,80006ba4 <prvBlockingTask+0x384>  *)
    | 0x80006d44 => 0x27200793 (* li a5,626  *)
    | 0x80006d48 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006d4c => 0xe59ff06f (* j 80006ba4 <prvBlockingTask+0x384>  *)
    | 0x80006d50 => 0x8e818693 (* add a3,gp,-1816 # 800800e8 <ucStorageBuffer.2>  *)
    | 0x80006d54 => 0x00000613 (* li a2,0  *)
    | 0x80006d58 => 0x00100593 (* li a1,1  *)
    | 0x80006d5c => 0x00000813 (* li a6,0  *)
    | 0x80006d60 => 0x00000793 (* li a5,0  *)
    | 0x80006d64 => 0x00810713 (* add a4,sp,8  *)
    | 0x80006d68 => 0x00500513 (* li a0,5  *)
    | 0x80006d6c => 0xc65fe0ef (* jal 800059d0 <xStreamBufferGenericCreateStatic>  *)
    | 0x80006d70 => 0x00050493 (* mv s1,a0  *)
    | 0x80006d74 => 0x900fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006d78 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006d7c => 0x06400693 (* li a3,100  *)
    | 0x80006d80 => 0x00100613 (* li a2,1  *)
    | 0x80006d84 => 0x00310593 (* add a1,sp,3  *)
    | 0x80006d88 => 0x00048513 (* mv a0,s1  *)
    | 0x80006d8c => 0x9fcff0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x80006d90 => 0x00050663 (* beqz a0,80006d9c <prvBlockingTask+0x57c>  *)
    | 0x80006d94 => 0x20900793 (* li a5,521  *)
    | 0x80006d98 => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006d9c => 0x06400593 (* li a1,100  *)
    | 0x80006da0 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006da4 => 0xa2dff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006da8 => 0x8ccfa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006dac => 0x00050c13 (* mv s8,a0  *)
    | 0x80006db0 => 0x06400693 (* li a3,100  *)
    | 0x80006db4 => 0x00100613 (* li a2,1  *)
    | 0x80006db8 => 0x00310593 (* add a1,sp,3  *)
    | 0x80006dbc => 0x00048513 (* mv a0,s1  *)
    | 0x80006dc0 => 0x9c8ff0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x80006dc4 => 0x00050663 (* beqz a0,80006dd0 <prvBlockingTask+0x5b0>  *)
    | 0x80006dc8 => 0x21700793 (* li a5,535  *)
    | 0x80006dcc => 0x8ef1aa23 (* sw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006dd0 => 0x03200593 (* li a1,50  *)
    | 0x80006dd4 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006dd8 => 0x9f9ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006ddc => 0x898fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006de0 => 0x00050c13 (* mv s8,a0  *)
    | 0x80006de4 => 0x06400693 (* li a3,100  *)
    | 0x80006de8 => 0x00100613 (* li a2,1  *)
    | 0x80006dec => 0x00310593 (* add a1,sp,3  *)
    | 0x80006df0 => 0x00048513 (* mv a0,s1  *)
    | 0x80006df4 => 0x994ff0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x80006df8 => 0x00050463 (* beqz a0,80006e00 <prvBlockingTask+0x5e0>  *)
    | 0x80006dfc => 0x8f51aa23 (* sw s5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006e00 => 0x000c0513 (* mv a0,s8  *)
    | 0x80006e04 => 0x06400593 (* li a1,100  *)
    | 0x80006e08 => 0x9c9ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006e0c => 0x00048513 (* mv a0,s1  *)
    | 0x80006e10 => 0xd01fe0ef (* jal 80005b10 <vStreamBufferDelete>  *)
    | 0x80006e14 => 0xb59ff06f (* j 8000696c <prvBlockingTask+0x14c>  *)
    (* <prvControllingTask> *)
    | 0x80006e18 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006e1c => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80006e20 => 0xcfc50513 (* add a0,a0,-772 # 80013cfc <_etext+0x12c>  *)
    | 0x80006e24 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80006e28 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80006e2c => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80006e30 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80006e34 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80006e38 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80006e3c => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80006e40 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80006e44 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80006e48 => 0xd38fa0ef (* jal 80001380 <xTaskGetHandle>  *)
    | 0x80006e4c => 0x00050493 (* mv s1,a0  *)
    | 0x80006e50 => 0x00051a63 (* bnez a0,80006e64 <prvControllingTask+0x4c>  *)
    | 0x80006e54 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80006e58 => 0x09c00593 (* li a1,156  *)
    | 0x80006e5c => 0xccc50513 (* add a0,a0,-820 # 80013ccc <_etext+0xfc>  *)
    | 0x80006e60 => 0x4300b0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80006e64 => 0x00000413 (* li s0,0  *)
    | 0x80006e68 => 0x00100a13 (* li s4,1  *)
    | 0x80006e6c => 0x0b400b93 (* li s7,180  *)
    | 0x80006e70 => 0x00800a93 (* li s5,8  *)
    | 0x80006e74 => 0x800fa0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006e78 => 0x00000713 (* li a4,0  *)
    | 0x80006e7c => 0x00300693 (* li a3,3  *)
    | 0x80006e80 => 0x00040613 (* mv a2,s0  *)
    | 0x80006e84 => 0x00000593 (* li a1,0  *)
    | 0x80006e88 => 0x00050913 (* mv s2,a0  *)
    | 0x80006e8c => 0x00048513 (* mv a0,s1  *)
    | 0x80006e90 => 0xe34fb0ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80006e94 => 0x00700593 (* li a1,7  *)
    | 0x80006e98 => 0x00000513 (* li a0,0  *)
    | 0x80006e9c => 0xc75f90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80006ea0 => 0x09800513 (* li a0,152  *)
    | 0x80006ea4 => 0xc74fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80006ea8 => 0x00048513 (* mv a0,s1  *)
    | 0x80006eac => 0xe18fa0ef (* jal 800014c4 <xTaskAbortDelay>  *)
    | 0x80006eb0 => 0x01450463 (* beq a0,s4,80006eb8 <prvControllingTask+0xa0>  *)
    | 0x80006eb4 => 0x8f71aa23 (* sw s7,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006eb8 => 0x00600593 (* li a1,6  *)
    | 0x80006ebc => 0x00000513 (* li a0,0  *)
    | 0x80006ec0 => 0xc51f90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80006ec4 => 0xfff00613 (* li a2,-1  *)
    | 0x80006ec8 => 0x00100593 (* li a1,1  *)
    | 0x80006ecc => 0x00000513 (* li a0,0  *)
    | 0x80006ed0 => 0xb44fb0ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x80006ed4 => 0x0fa00593 (* li a1,250  *)
    | 0x80006ed8 => 0x00090513 (* mv a0,s2  *)
    | 0x80006edc => 0x00140413 (* add s0,s0,1  *)
    | 0x80006ee0 => 0x8f1ff0ef (* jal 800067d0 <prvCheckExpectedTimeIsWithinAnAcceptableMargin>  *)
    | 0x80006ee4 => 0x01541463 (* bne s0,s5,80006eec <prvControllingTask+0xd4>  *)
    | 0x80006ee8 => 0x00000413 (* li s0,0  *)
    | 0x80006eec => 0x8fc1a783 (* lw a5,-1796(gp) # 800800fc <xControllingCycles>  *)
    | 0x80006ef0 => 0x00178793 (* add a5,a5,1  *)
    | 0x80006ef4 => 0x8ef1ae23 (* sw a5,-1796(gp) # 800800fc <xControllingCycles>  *)
    | 0x80006ef8 => 0xf7dff06f (* j 80006e74 <prvControllingTask+0x5c>  *)
    (* <vCreateAbortDelayTasks> *)
    | 0x80006efc => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80006f00 => 0x80007537 (* lui a0,0x80007  *)
    | 0x80006f04 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80006f08 => 0x00000793 (* li a5,0  *)
    | 0x80006f0c => 0x00600713 (* li a4,6  *)
    | 0x80006f10 => 0x00000693 (* li a3,0  *)
    | 0x80006f14 => 0x07800613 (* li a2,120  *)
    | 0x80006f18 => 0xcc458593 (* add a1,a1,-828 # 80013cc4 <_etext+0xf4>  *)
    | 0x80006f1c => 0xe1850513 (* add a0,a0,-488 # 80006e18 <prvControllingTask>  *)
    | 0x80006f20 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80006f24 => 0x8d9f90ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80006f28 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80006f2c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80006f30 => 0x80007537 (* lui a0,0x80007  *)
    | 0x80006f34 => 0x00000793 (* li a5,0  *)
    | 0x80006f38 => 0x00700713 (* li a4,7  *)
    | 0x80006f3c => 0x00000693 (* li a3,0  *)
    | 0x80006f40 => 0x07800613 (* li a2,120  *)
    | 0x80006f44 => 0xcfc58593 (* add a1,a1,-772 # 80013cfc <_etext+0x12c>  *)
    | 0x80006f48 => 0x82050513 (* add a0,a0,-2016 # 80006820 <prvBlockingTask>  *)
    | 0x80006f4c => 0x01010113 (* add sp,sp,16  *)
    | 0x80006f50 => 0x8adf906f (* j 800007fc <xTaskCreate>  *)
    (* <xAreAbortDelayTestTasksStillRunning> *)
    | 0x80006f54 => 0x8fc1a783 (* lw a5,-1796(gp) # 800800fc <xControllingCycles>  *)
    | 0x80006f58 => 0x8e01a883 (* lw a7,-1824(gp) # 800800e0 <xLastBlockingCycleCount.0>  *)
    | 0x80006f5c => 0x8f81a303 (* lw t1,-1800(gp) # 800800f8 <xBlockingCycles>  *)
    | 0x80006f60 => 0x8e41a803 (* lw a6,-1820(gp) # 800800e4 <xLastControllingCycleCount.1>  *)
    | 0x80006f64 => 0x00000513 (* li a0,0  *)
    | 0x80006f68 => 0x01130663 (* beq t1,a7,80006f74 <xAreAbortDelayTestTasksStillRunning+0x20>  *)
    | 0x80006f6c => 0x410787b3 (* sub a5,a5,a6  *)
    | 0x80006f70 => 0x00f03533 (* snez a0,a5  *)
    | 0x80006f74 => 0x8f41a783 (* lw a5,-1804(gp) # 800800f4 <xErrorOccurred>  *)
    | 0x80006f78 => 0x00078463 (* beqz a5,80006f80 <xAreAbortDelayTestTasksStillRunning+0x2c>  *)
    | 0x80006f7c => 0x00000513 (* li a0,0  *)
    | 0x80006f80 => 0x8f81a783 (* lw a5,-1800(gp) # 800800f8 <xBlockingCycles>  *)
    | 0x80006f84 => 0x8ef1a023 (* sw a5,-1824(gp) # 800800e0 <xLastBlockingCycleCount.0>  *)
    | 0x80006f88 => 0x8fc1a783 (* lw a5,-1796(gp) # 800800fc <xControllingCycles>  *)
    | 0x80006f8c => 0x8ef1a223 (* sw a5,-1820(gp) # 800800e4 <xLastControllingCycleCount.1>  *)
    | 0x80006f90 => 0x00008067 (* ret  *)
    (* <vSecondaryBlockTimeTestTask> *)
    | 0x80006f94 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80006f98 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80006f9c => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80006fa0 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80006fa4 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80006fa8 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80006fac => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80006fb0 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80006fb4 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80006fb8 => 0x05500913 (* li s2,85  *)
    | 0x80006fbc => 0x19e00a93 (* li s5,414  *)
    | 0x80006fc0 => 0x00000513 (* li a0,0  *)
    | 0x80006fc4 => 0xf28fa0ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80006fc8 => 0xeadf90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006fcc => 0x00050b13 (* mv s6,a0  *)
    | 0x80006fd0 => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80006fd4 => 0x00000693 (* li a3,0  *)
    | 0x80006fd8 => 0x0af00613 (* li a2,175  *)
    | 0x80006fdc => 0x00c10593 (* add a1,sp,12  *)
    | 0x80006fe0 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80006fe4 => 0x9121a423 (* sw s2,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80006fe8 => 0xbe4fc0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80006fec => 0x00050463 (* beqz a0,80006ff4 <vSecondaryBlockTimeTestTask+0x60>  *)
    | 0x80006ff0 => 0x9151a623 (* sw s5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80006ff4 => 0xe81f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80006ff8 => 0x41650533 (* sub a0,a0,s6  *)
    | 0x80006ffc => 0x0ae00793 (* li a5,174  *)
    | 0x80007000 => 0x06a7e663 (* bltu a5,a0,8000706c <vSecondaryBlockTimeTestTask+0xd8>  *)
    | 0x80007004 => 0x1a700793 (* li a5,423  *)
    | 0x80007008 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x8000700c => 0x00000513 (* li a0,0  *)
    | 0x80007010 => 0x9121a423 (* sw s2,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80007014 => 0xed8fa0ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007018 => 0xe5df90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000701c => 0x00050b13 (* mv s6,a0  *)
    | 0x80007020 => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80007024 => 0x0af00613 (* li a2,175  *)
    | 0x80007028 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000702c => 0x9121a423 (* sw s2,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80007030 => 0x999fc0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x80007034 => 0x00050663 (* beqz a0,80007040 <vSecondaryBlockTimeTestTask+0xac>  *)
    | 0x80007038 => 0x1c200793 (* li a5,450  *)
    | 0x8000703c => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007040 => 0xe35f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80007044 => 0x41650533 (* sub a0,a0,s6  *)
    | 0x80007048 => 0x0ae00793 (* li a5,174  *)
    | 0x8000704c => 0x02a7e863 (* bltu a5,a0,8000707c <vSecondaryBlockTimeTestTask+0xe8>  *)
    | 0x80007050 => 0x1ca00793 (* li a5,458  *)
    | 0x80007054 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007058 => 0x9121a423 (* sw s2,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x8000705c => 0x9101a783 (* lw a5,-1776(gp) # 80080110 <xSecondaryCycles>  *)
    | 0x80007060 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007064 => 0x90f1a823 (* sw a5,-1776(gp) # 80080110 <xSecondaryCycles>  *)
    | 0x80007068 => 0xf59ff06f (* j 80006fc0 <vSecondaryBlockTimeTestTask+0x2c>  *)
    | 0x8000706c => 0x0be00793 (* li a5,190  *)
    | 0x80007070 => 0xf8a7fee3 (* bgeu a5,a0,8000700c <vSecondaryBlockTimeTestTask+0x78>  *)
    | 0x80007074 => 0x1af00793 (* li a5,431  *)
    | 0x80007078 => 0xf91ff06f (* j 80007008 <vSecondaryBlockTimeTestTask+0x74>  *)
    | 0x8000707c => 0x0be00793 (* li a5,190  *)
    | 0x80007080 => 0xfca7fce3 (* bgeu a5,a0,80007058 <vSecondaryBlockTimeTestTask+0xc4>  *)
    | 0x80007084 => 0x1d200793 (* li a5,466  *)
    | 0x80007088 => 0xfcdff06f (* j 80007054 <vSecondaryBlockTimeTestTask+0xc0>  *)
    (* <vPrimaryBlockTimeTestTask> *)
    | 0x8000708c => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80007090 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x80007094 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x80007098 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000709c => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x800070a0 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x800070a4 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x800070a8 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x800070ac => 0x03612023 (* sw s6,32(sp)  *)
    | 0x800070b0 => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x800070b4 => 0x01812c23 (* sw s8,24(sp)  *)
    | 0x800070b8 => 0x01912a23 (* sw s9,20(sp)  *)
    | 0x800070bc => 0x20100a13 (* li s4,513  *)
    | 0x800070c0 => 0x00500593 (* li a1,5  *)
    | 0x800070c4 => 0x00000513 (* li a0,0  *)
    | 0x800070c8 => 0xa49f90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x800070cc => 0xda9f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800070d0 => 0x00050493 (* mv s1,a0  *)
    | 0x800070d4 => 0x0af00513 (* li a0,175  *)
    | 0x800070d8 => 0xa40fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800070dc => 0xd99f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800070e0 => 0x40950533 (* sub a0,a0,s1  *)
    | 0x800070e4 => 0x0b600793 (* li a5,182  *)
    | 0x800070e8 => 0x00a7f663 (* bgeu a5,a0,800070f4 <vPrimaryBlockTimeTestTask+0x68>  *)
    | 0x800070ec => 0x1f000793 (* li a5,496  *)
    | 0x800070f0 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800070f4 => 0xd81f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800070f8 => 0x00050a93 (* mv s5,a0  *)
    | 0x800070fc => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x80007100 => 0x00000493 (* li s1,0  *)
    | 0x80007104 => 0x0b600b93 (* li s7,182  *)
    | 0x80007108 => 0x17700b13 (* li s6,375  *)
    | 0x8000710c => 0x04b00593 (* li a1,75  *)
    | 0x80007110 => 0x00c10513 (* add a0,sp,12  *)
    | 0x80007114 => 0x92cfa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x80007118 => 0xd5df90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000711c => 0x415507b3 (* sub a5,a0,s5  *)
    | 0x80007120 => 0x409787b3 (* sub a5,a5,s1  *)
    | 0x80007124 => 0x00fbf463 (* bgeu s7,a5,8000712c <vPrimaryBlockTimeTestTask+0xa0>  *)
    | 0x80007128 => 0x9141a623 (* sw s4,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x8000712c => 0x9141a783 (* lw a5,-1772(gp) # 80080114 <xPrimaryCycles>  *)
    | 0x80007130 => 0x04b48493 (* add s1,s1,75  *)
    | 0x80007134 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007138 => 0x90f1aa23 (* sw a5,-1772(gp) # 80080114 <xPrimaryCycles>  *)
    | 0x8000713c => 0xfd6498e3 (* bne s1,s6,8000710c <vPrimaryBlockTimeTestTask+0x80>  *)
    | 0x80007140 => 0x04b00593 (* li a1,75  *)
    | 0x80007144 => 0x00c10513 (* add a0,sp,12  *)
    | 0x80007148 => 0x8f8fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x8000714c => 0x00100793 (* li a5,1  *)
    | 0x80007150 => 0x00f50663 (* beq a0,a5,8000715c <vPrimaryBlockTimeTestTask+0xd0>  *)
    | 0x80007154 => 0x20d00793 (* li a5,525  *)
    | 0x80007158 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x8000715c => 0x02500513 (* li a0,37  *)
    | 0x80007160 => 0x9b8fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007164 => 0x04b00593 (* li a1,75  *)
    | 0x80007168 => 0x00c10513 (* add a0,sp,12  *)
    | 0x8000716c => 0x8d4fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x80007170 => 0x00100793 (* li a5,1  *)
    | 0x80007174 => 0x00f50663 (* beq a0,a5,80007180 <vPrimaryBlockTimeTestTask+0xf4>  *)
    | 0x80007178 => 0x21700793 (* li a5,535  *)
    | 0x8000717c => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007180 => 0x04b00513 (* li a0,75  *)
    | 0x80007184 => 0x994fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007188 => 0x04b00593 (* li a1,75  *)
    | 0x8000718c => 0x00c10513 (* add a0,sp,12  *)
    | 0x80007190 => 0x8b0fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x80007194 => 0x00050663 (* beqz a0,800071a0 <vPrimaryBlockTimeTestTask+0x114>  *)
    | 0x80007198 => 0x22100793 (* li a5,545  *)
    | 0x8000719c => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800071a0 => 0x04b00593 (* li a1,75  *)
    | 0x800071a4 => 0x00c10513 (* add a0,sp,12  *)
    | 0x800071a8 => 0x898fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x800071ac => 0x00100793 (* li a5,1  *)
    | 0x800071b0 => 0x00f50663 (* beq a0,a5,800071bc <vPrimaryBlockTimeTestTask+0x130>  *)
    | 0x800071b4 => 0x22900793 (* li a5,553  *)
    | 0x800071b8 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800071bc => 0x05200513 (* li a0,82  *)
    | 0x800071c0 => 0x958fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800071c4 => 0x04b00593 (* li a1,75  *)
    | 0x800071c8 => 0x00c10513 (* add a0,sp,12  *)
    | 0x800071cc => 0x874fa0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x800071d0 => 0x00050663 (* beqz a0,800071dc <vPrimaryBlockTimeTestTask+0x150>  *)
    | 0x800071d4 => 0x23300793 (* li a5,563  *)
    | 0x800071d8 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800071dc => 0x00500593 (* li a1,5  *)
    | 0x800071e0 => 0x00000513 (* li a0,0  *)
    | 0x800071e4 => 0x92df90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x800071e8 => 0x00000613 (* li a2,0  *)
    | 0x800071ec => 0x00400a93 (* li s5,4  *)
    | 0x800071f0 => 0x00a00b13 (* li s6,10  *)
    | 0x800071f4 => 0x09b00b93 (* li s7,155  *)
    | 0x800071f8 => 0x0a400c13 (* li s8,164  *)
    | 0x800071fc => 0x00c12223 (* sw a2,4(sp)  *)
    | 0x80007200 => 0x10cad063 (* bge s5,a2,80007300 <vPrimaryBlockTimeTestTask+0x274>  *)
    | 0x80007204 => 0x00000793 (* li a5,0  *)
    | 0x80007208 => 0x00400493 (* li s1,4  *)
    | 0x8000720c => 0x00100a93 (* li s5,1  *)
    | 0x80007210 => 0x0ba00b13 (* li s6,186  *)
    | 0x80007214 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x80007218 => 0x12f4dc63 (* bge s1,a5,80007350 <vPrimaryBlockTimeTestTask+0x2c4>  *)
    | 0x8000721c => 0x00000613 (* li a2,0  *)
    | 0x80007220 => 0x00400a93 (* li s5,4  *)
    | 0x80007224 => 0x00a00b13 (* li s6,10  *)
    | 0x80007228 => 0x0ce00b93 (* li s7,206  *)
    | 0x8000722c => 0x0d700c13 (* li s8,215  *)
    | 0x80007230 => 0x00c12223 (* sw a2,4(sp)  *)
    | 0x80007234 => 0x14cad263 (* bge s5,a2,80007378 <vPrimaryBlockTimeTestTask+0x2ec>  *)
    | 0x80007238 => 0x9181a503 (* lw a0,-1768(gp) # 80080118 <xSecondary>  *)
    | 0x8000723c => 0x9001a423 (* sw zero,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80007240 => 0x05500b13 (* li s6,85  *)
    | 0x80007244 => 0xa59f90ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80007248 => 0x9081a783 (* lw a5,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x8000724c => 0x01400513 (* li a0,20  *)
    | 0x80007250 => 0x17679e63 (* bne a5,s6,800073cc <vPrimaryBlockTimeTestTask+0x340>  *)
    | 0x80007254 => 0x8c4fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007258 => 0x00000793 (* li a5,0  *)
    | 0x8000725c => 0x9001a423 (* sw zero,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80007260 => 0x00400b93 (* li s7,4  *)
    | 0x80007264 => 0x00100b13 (* li s6,1  *)
    | 0x80007268 => 0x10300c13 (* li s8,259  *)
    | 0x8000726c => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x80007270 => 0x16fbd263 (* bge s7,a5,800073d4 <vPrimaryBlockTimeTestTask+0x348>  *)
    | 0x80007274 => 0x05500b13 (* li s6,85  *)
    | 0x80007278 => 0x9081a783 (* lw a5,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x8000727c => 0x01400513 (* li a0,20  *)
    | 0x80007280 => 0x1d679c63 (* bne a5,s6,80007458 <vPrimaryBlockTimeTestTask+0x3cc>  *)
    | 0x80007284 => 0x894fa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007288 => 0x00000793 (* li a5,0  *)
    | 0x8000728c => 0x9001a423 (* sw zero,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80007290 => 0x00400b13 (* li s6,4  *)
    | 0x80007294 => 0x00100b93 (* li s7,1  *)
    | 0x80007298 => 0x13a00c13 (* li s8,314  *)
    | 0x8000729c => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x800072a0 => 0x1cfb5063 (* bge s6,a5,80007460 <vPrimaryBlockTimeTestTask+0x3d4>  *)
    | 0x800072a4 => 0x9181a503 (* lw a0,-1768(gp) # 80080118 <xSecondary>  *)
    | 0x800072a8 => 0x05500b13 (* li s6,85  *)
    | 0x800072ac => 0x9f1f90ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800072b0 => 0x9081a783 (* lw a5,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x800072b4 => 0x01400513 (* li a0,20  *)
    | 0x800072b8 => 0x1d679663 (* bne a5,s6,80007484 <vPrimaryBlockTimeTestTask+0x3f8>  *)
    | 0x800072bc => 0x85cfa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800072c0 => 0x00000793 (* li a5,0  *)
    | 0x800072c4 => 0x9001a423 (* sw zero,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x800072c8 => 0x00400b93 (* li s7,4  *)
    | 0x800072cc => 0x00100b13 (* li s6,1  *)
    | 0x800072d0 => 0x15100c13 (* li s8,337  *)
    | 0x800072d4 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x800072d8 => 0x1afbda63 (* bge s7,a5,8000748c <vPrimaryBlockTimeTestTask+0x400>  *)
    | 0x800072dc => 0x05500a93 (* li s5,85  *)
    | 0x800072e0 => 0x9081a783 (* lw a5,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x800072e4 => 0x01400513 (* li a0,20  *)
    | 0x800072e8 => 0x23579463 (* bne a5,s5,80007510 <vPrimaryBlockTimeTestTask+0x484>  *)
    | 0x800072ec => 0x82cfa0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800072f0 => 0x9141a783 (* lw a5,-1772(gp) # 80080114 <xPrimaryCycles>  *)
    | 0x800072f4 => 0x00178793 (* add a5,a5,1  *)
    | 0x800072f8 => 0x90f1aa23 (* sw a5,-1772(gp) # 80080114 <xPrimaryCycles>  *)
    | 0x800072fc => 0xdc5ff06f (* j 800070c0 <vPrimaryBlockTimeTestTask+0x34>  *)
    | 0x80007300 => 0x00cb14b3 (* sll s1,s6,a2  *)
    | 0x80007304 => 0xb71f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80007308 => 0x00050c93 (* mv s9,a0  *)
    | 0x8000730c => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80007310 => 0x00048613 (* mv a2,s1  *)
    | 0x80007314 => 0x00810593 (* add a1,sp,8  *)
    | 0x80007318 => 0xeb0fc0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000731c => 0x00050463 (* beqz a0,80007324 <vPrimaryBlockTimeTestTask+0x298>  *)
    | 0x80007320 => 0x9171a623 (* sw s7,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007324 => 0xb51f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80007328 => 0x41950533 (* sub a0,a0,s9  *)
    | 0x8000732c => 0x00957463 (* bgeu a0,s1,80007334 <vPrimaryBlockTimeTestTask+0x2a8>  *)
    | 0x80007330 => 0x9181a623 (* sw s8,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007334 => 0x00f48613 (* add a2,s1,15  *)
    | 0x80007338 => 0x00a67663 (* bgeu a2,a0,80007344 <vPrimaryBlockTimeTestTask+0x2b8>  *)
    | 0x8000733c => 0x0ac00793 (* li a5,172  *)
    | 0x80007340 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007344 => 0x00412603 (* lw a2,4(sp)  *)
    | 0x80007348 => 0x00160613 (* add a2,a2,1  *)
    | 0x8000734c => 0xeb1ff06f (* j 800071fc <vPrimaryBlockTimeTestTask+0x170>  *)
    | 0x80007350 => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80007354 => 0x00000693 (* li a3,0  *)
    | 0x80007358 => 0x00000613 (* li a2,0  *)
    | 0x8000735c => 0x00410593 (* add a1,sp,4  *)
    | 0x80007360 => 0x86cfc0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80007364 => 0x01550463 (* beq a0,s5,8000736c <vPrimaryBlockTimeTestTask+0x2e0>  *)
    | 0x80007368 => 0x9161a623 (* sw s6,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x8000736c => 0x00412783 (* lw a5,4(sp)  *)
    | 0x80007370 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007374 => 0xea1ff06f (* j 80007214 <vPrimaryBlockTimeTestTask+0x188>  *)
    | 0x80007378 => 0x00cb14b3 (* sll s1,s6,a2  *)
    | 0x8000737c => 0xaf9f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80007380 => 0x00050c93 (* mv s9,a0  *)
    | 0x80007384 => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80007388 => 0x00000693 (* li a3,0  *)
    | 0x8000738c => 0x00048613 (* mv a2,s1  *)
    | 0x80007390 => 0x00410593 (* add a1,sp,4  *)
    | 0x80007394 => 0x838fc0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80007398 => 0x00050463 (* beqz a0,800073a0 <vPrimaryBlockTimeTestTask+0x314>  *)
    | 0x8000739c => 0x9171a623 (* sw s7,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800073a0 => 0xad5f90ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800073a4 => 0x41950533 (* sub a0,a0,s9  *)
    | 0x800073a8 => 0x00957463 (* bgeu a0,s1,800073b0 <vPrimaryBlockTimeTestTask+0x324>  *)
    | 0x800073ac => 0x9181a623 (* sw s8,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800073b0 => 0x00f48613 (* add a2,s1,15  *)
    | 0x800073b4 => 0x00a67663 (* bgeu a2,a0,800073c0 <vPrimaryBlockTimeTestTask+0x334>  *)
    | 0x800073b8 => 0x0df00793 (* li a5,223  *)
    | 0x800073bc => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800073c0 => 0x00412603 (* lw a2,4(sp)  *)
    | 0x800073c4 => 0x00160613 (* add a2,a2,1  *)
    | 0x800073c8 => 0xe69ff06f (* j 80007230 <vPrimaryBlockTimeTestTask+0x1a4>  *)
    | 0x800073cc => 0xf4df90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800073d0 => 0xe79ff06f (* j 80007248 <vPrimaryBlockTimeTestTask+0x1bc>  *)
    | 0x800073d4 => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x800073d8 => 0x00000613 (* li a2,0  *)
    | 0x800073dc => 0x00810593 (* add a1,sp,8  *)
    | 0x800073e0 => 0xde8fc0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x800073e4 => 0x01650463 (* beq a0,s6,800073ec <vPrimaryBlockTimeTestTask+0x360>  *)
    | 0x800073e8 => 0x9181a623 (* sw s8,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800073ec => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x800073f0 => 0x00000693 (* li a3,0  *)
    | 0x800073f4 => 0x00000613 (* li a2,0  *)
    | 0x800073f8 => 0x00410593 (* add a1,sp,4  *)
    | 0x800073fc => 0xfd1fb0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80007400 => 0x01650663 (* beq a0,s6,8000740c <vPrimaryBlockTimeTestTask+0x380>  *)
    | 0x80007404 => 0x10b00793 (* li a5,267  *)
    | 0x80007408 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x8000740c => 0x9081a703 (* lw a4,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80007410 => 0x05500793 (* li a5,85  *)
    | 0x80007414 => 0x00f71663 (* bne a4,a5,80007420 <vPrimaryBlockTimeTestTask+0x394>  *)
    | 0x80007418 => 0x11100793 (* li a5,273  *)
    | 0x8000741c => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007420 => 0x9181a503 (* lw a0,-1768(gp) # 80080118 <xSecondary>  *)
    | 0x80007424 => 0x00700593 (* li a1,7  *)
    | 0x80007428 => 0xee8f90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000742c => 0x9081a703 (* lw a4,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x80007430 => 0x05500793 (* li a5,85  *)
    | 0x80007434 => 0x00f71663 (* bne a4,a5,80007440 <vPrimaryBlockTimeTestTask+0x3b4>  *)
    | 0x80007438 => 0x11e00793 (* li a5,286  *)
    | 0x8000743c => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007440 => 0x9181a503 (* lw a0,-1768(gp) # 80080118 <xSecondary>  *)
    | 0x80007444 => 0x00400593 (* li a1,4  *)
    | 0x80007448 => 0xec8f90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000744c => 0x00412783 (* lw a5,4(sp)  *)
    | 0x80007450 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007454 => 0xe19ff06f (* j 8000726c <vPrimaryBlockTimeTestTask+0x1e0>  *)
    | 0x80007458 => 0xec1f90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000745c => 0xe1dff06f (* j 80007278 <vPrimaryBlockTimeTestTask+0x1ec>  *)
    | 0x80007460 => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80007464 => 0x00000613 (* li a2,0  *)
    | 0x80007468 => 0x00810593 (* add a1,sp,8  *)
    | 0x8000746c => 0xd5cfc0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x80007470 => 0x01750463 (* beq a0,s7,80007478 <vPrimaryBlockTimeTestTask+0x3ec>  *)
    | 0x80007474 => 0x9181a623 (* sw s8,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x80007478 => 0x00412783 (* lw a5,4(sp)  *)
    | 0x8000747c => 0x00178793 (* add a5,a5,1  *)
    | 0x80007480 => 0xe1dff06f (* j 8000729c <vPrimaryBlockTimeTestTask+0x210>  *)
    | 0x80007484 => 0xe95f90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007488 => 0xe29ff06f (* j 800072b0 <vPrimaryBlockTimeTestTask+0x224>  *)
    | 0x8000748c => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80007490 => 0x00000693 (* li a3,0  *)
    | 0x80007494 => 0x00000613 (* li a2,0  *)
    | 0x80007498 => 0x00410593 (* add a1,sp,4  *)
    | 0x8000749c => 0xf31fb0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800074a0 => 0x01650463 (* beq a0,s6,800074a8 <vPrimaryBlockTimeTestTask+0x41c>  *)
    | 0x800074a4 => 0x9181a623 (* sw s8,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800074a8 => 0x91c1a503 (* lw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x800074ac => 0x00000613 (* li a2,0  *)
    | 0x800074b0 => 0x00810593 (* add a1,sp,8  *)
    | 0x800074b4 => 0xd14fc0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x800074b8 => 0x01650663 (* beq a0,s6,800074c4 <vPrimaryBlockTimeTestTask+0x438>  *)
    | 0x800074bc => 0x15900793 (* li a5,345  *)
    | 0x800074c0 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800074c4 => 0x9081a703 (* lw a4,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x800074c8 => 0x05500793 (* li a5,85  *)
    | 0x800074cc => 0x00f71663 (* bne a4,a5,800074d8 <vPrimaryBlockTimeTestTask+0x44c>  *)
    | 0x800074d0 => 0x15f00793 (* li a5,351  *)
    | 0x800074d4 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800074d8 => 0x9181a503 (* lw a0,-1768(gp) # 80080118 <xSecondary>  *)
    | 0x800074dc => 0x00700593 (* li a1,7  *)
    | 0x800074e0 => 0xe30f90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x800074e4 => 0x9081a703 (* lw a4,-1784(gp) # 80080108 <xRunIndicator>  *)
    | 0x800074e8 => 0x05500793 (* li a5,85  *)
    | 0x800074ec => 0x00f71663 (* bne a4,a5,800074f8 <vPrimaryBlockTimeTestTask+0x46c>  *)
    | 0x800074f0 => 0x16c00793 (* li a5,364  *)
    | 0x800074f4 => 0x90f1a623 (* sw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800074f8 => 0x9181a503 (* lw a0,-1768(gp) # 80080118 <xSecondary>  *)
    | 0x800074fc => 0x00400593 (* li a1,4  *)
    | 0x80007500 => 0xe10f90ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80007504 => 0x00412783 (* lw a5,4(sp)  *)
    | 0x80007508 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000750c => 0xdc9ff06f (* j 800072d4 <vPrimaryBlockTimeTestTask+0x248>  *)
    | 0x80007510 => 0xe09f90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007514 => 0xdcdff06f (* j 800072e0 <vPrimaryBlockTimeTestTask+0x254>  *)
    (* <vCreateBlockTimeTasks> *)
    | 0x80007518 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000751c => 0x00000613 (* li a2,0  *)
    | 0x80007520 => 0x00400593 (* li a1,4  *)
    | 0x80007524 => 0x00500513 (* li a0,5  *)
    | 0x80007528 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000752c => 0xca1fb0ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x80007530 => 0x90a1ae23 (* sw a0,-1764(gp) # 8008011c <xTestQueue>  *)
    | 0x80007534 => 0x06050063 (* beqz a0,80007594 <vCreateBlockTimeTasks+0x7c>  *)
    | 0x80007538 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000753c => 0xd0458593 (* add a1,a1,-764 # 80013d04 <_etext+0x134>  *)
    | 0x80007540 => 0xdb5fc0ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x80007544 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007548 => 0x80007537 (* lui a0,0x80007  *)
    | 0x8000754c => 0x00000793 (* li a5,0  *)
    | 0x80007550 => 0x00500713 (* li a4,5  *)
    | 0x80007554 => 0x00000693 (* li a3,0  *)
    | 0x80007558 => 0x07800613 (* li a2,120  *)
    | 0x8000755c => 0xd1858593 (* add a1,a1,-744 # 80013d18 <_etext+0x148>  *)
    | 0x80007560 => 0x08c50513 (* add a0,a0,140 # 8000708c <vPrimaryBlockTimeTestTask>  *)
    | 0x80007564 => 0xa98f90ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007568 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000756c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007570 => 0x80007537 (* lui a0,0x80007  *)
    | 0x80007574 => 0x91818793 (* add a5,gp,-1768 # 80080118 <xSecondary>  *)
    | 0x80007578 => 0x00400713 (* li a4,4  *)
    | 0x8000757c => 0x00000693 (* li a3,0  *)
    | 0x80007580 => 0x07800613 (* li a2,120  *)
    | 0x80007584 => 0xd2058593 (* add a1,a1,-736 # 80013d20 <_etext+0x150>  *)
    | 0x80007588 => 0xf9450513 (* add a0,a0,-108 # 80006f94 <vSecondaryBlockTimeTestTask>  *)
    | 0x8000758c => 0x01010113 (* add sp,sp,16  *)
    | 0x80007590 => 0xa6cf906f (* j 800007fc <xTaskCreate>  *)
    | 0x80007594 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80007598 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000759c => 0x00008067 (* ret  *)
    (* <xAreBlockTimeTestTasksStillRunning> *)
    | 0x800075a0 => 0x9141a783 (* lw a5,-1772(gp) # 80080114 <xPrimaryCycles>  *)
    | 0x800075a4 => 0x9001a883 (* lw a7,-1792(gp) # 80080100 <xLastSecondaryCycleCount.0>  *)
    | 0x800075a8 => 0x9101a303 (* lw t1,-1776(gp) # 80080110 <xSecondaryCycles>  *)
    | 0x800075ac => 0x9041a803 (* lw a6,-1788(gp) # 80080104 <xLastPrimaryCycleCount.1>  *)
    | 0x800075b0 => 0x00000513 (* li a0,0  *)
    | 0x800075b4 => 0x01130663 (* beq t1,a7,800075c0 <xAreBlockTimeTestTasksStillRunning+0x20>  *)
    | 0x800075b8 => 0x410787b3 (* sub a5,a5,a6  *)
    | 0x800075bc => 0x00f03533 (* snez a0,a5  *)
    | 0x800075c0 => 0x90c1a783 (* lw a5,-1780(gp) # 8008010c <xErrorOccurred>  *)
    | 0x800075c4 => 0x00078463 (* beqz a5,800075cc <xAreBlockTimeTestTasksStillRunning+0x2c>  *)
    | 0x800075c8 => 0x00000513 (* li a0,0  *)
    | 0x800075cc => 0x9101a783 (* lw a5,-1776(gp) # 80080110 <xSecondaryCycles>  *)
    | 0x800075d0 => 0x90f1a023 (* sw a5,-1792(gp) # 80080100 <xLastSecondaryCycleCount.0>  *)
    | 0x800075d4 => 0x9141a783 (* lw a5,-1772(gp) # 80080114 <xPrimaryCycles>  *)
    | 0x800075d8 => 0x90f1a223 (* sw a5,-1788(gp) # 80080104 <xLastPrimaryCycleCount.1>  *)
    | 0x800075dc => 0x00008067 (* ret  *)
    (* <prvDecrementSemaphoreCount> *)
    | 0x800075e0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800075e4 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800075e8 => 0x00000693 (* li a3,0  *)
    | 0x800075ec => 0x00058913 (* mv s2,a1  *)
    | 0x800075f0 => 0x00000613 (* li a2,0  *)
    | 0x800075f4 => 0x00000593 (* li a1,0  *)
    | 0x800075f8 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800075fc => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80007600 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80007604 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80007608 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000760c => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80007610 => 0x01612023 (* sw s6,0(sp)  *)
    | 0x80007614 => 0x00050413 (* mv s0,a0  *)
    | 0x80007618 => 0xdb5fb0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000761c => 0x00100793 (* li a5,1  *)
    | 0x80007620 => 0x00f51463 (* bne a0,a5,80007628 <prvDecrementSemaphoreCount+0x48>  *)
    | 0x80007624 => 0x92a1a423 (* sw a0,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x80007628 => 0x0c800493 (* li s1,200  *)
    | 0x8000762c => 0x80014a37 (* lui s4,0x80014  *)
    | 0x80007630 => 0x00100993 (* li s3,1  *)
    | 0x80007634 => 0x00100b13 (* li s6,1  *)
    | 0x80007638 => 0x00040513 (* mv a0,s0  *)
    | 0x8000763c => 0xc11fc0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80007640 => 0x00950863 (* beq a0,s1,80007650 <prvDecrementSemaphoreCount+0x70>  *)
    | 0x80007644 => 0x09b00593 (* li a1,155  *)
    | 0x80007648 => 0xd28a0513 (* add a0,s4,-728 # 80013d28 <_etext+0x158>  *)
    | 0x8000764c => 0x4450a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007650 => 0x00000593 (* li a1,0  *)
    | 0x80007654 => 0x00040513 (* mv a0,s0  *)
    | 0x80007658 => 0xd64fc0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000765c => 0x01350463 (* beq a0,s3,80007664 <prvDecrementSemaphoreCount+0x84>  *)
    | 0x80007660 => 0x9361a423 (* sw s6,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x80007664 => 0x00092783 (* lw a5,0(s2)  *)
    | 0x80007668 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x8000766c => 0x00178793 (* add a5,a5,1  *)
    | 0x80007670 => 0x00f92023 (* sw a5,0(s2)  *)
    | 0x80007674 => 0xfc0492e3 (* bnez s1,80007638 <prvDecrementSemaphoreCount+0x58>  *)
    | 0x80007678 => 0x00040513 (* mv a0,s0  *)
    | 0x8000767c => 0xbd1fc0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80007680 => 0x00050a63 (* beqz a0,80007694 <prvDecrementSemaphoreCount+0xb4>  *)
    | 0x80007684 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80007688 => 0x0ac00593 (* li a1,172  *)
    | 0x8000768c => 0xd2850513 (* add a0,a0,-728 # 80013d28 <_etext+0x158>  *)
    | 0x80007690 => 0x4010a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007694 => 0x00000593 (* li a1,0  *)
    | 0x80007698 => 0x00040513 (* mv a0,s0  *)
    | 0x8000769c => 0xd20fc0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x800076a0 => 0x00100793 (* li a5,1  *)
    | 0x800076a4 => 0x00f51463 (* bne a0,a5,800076ac <prvDecrementSemaphoreCount+0xcc>  *)
    | 0x800076a8 => 0x92a1a423 (* sw a0,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x800076ac => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800076b0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800076b4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800076b8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800076bc => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x800076c0 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x800076c4 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x800076c8 => 0x00012b03 (* lw s6,0(sp)  *)
    | 0x800076cc => 0x02010113 (* add sp,sp,32  *)
    | 0x800076d0 => 0x00008067 (* ret  *)
    (* <prvCountingSemaphoreTask> *)
    | 0x800076d4 => 0x00452703 (* lw a4,4(a0)  *)
    | 0x800076d8 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x800076dc => 0x02812423 (* sw s0,40(sp)  *)
    | 0x800076e0 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x800076e4 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x800076e8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x800076ec => 0x03212023 (* sw s2,32(sp)  *)
    | 0x800076f0 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x800076f4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x800076f8 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x800076fc => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80007700 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x80007704 => 0x0aa00793 (* li a5,170  *)
    | 0x80007708 => 0x00050413 (* mv s0,a0  *)
    | 0x8000770c => 0x00850a93 (* add s5,a0,8  *)
    | 0x80007710 => 0x00f71863 (* bne a4,a5,80007720 <prvCountingSemaphoreTask+0x4c>  *)
    | 0x80007714 => 0x00052503 (* lw a0,0(a0)  *)
    | 0x80007718 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000771c => 0xec5ff0ef (* jal 800075e0 <prvDecrementSemaphoreCount>  *)
    | 0x80007720 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x80007724 => 0x00000593 (* li a1,0  *)
    | 0x80007728 => 0xc94fc0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000772c => 0x00100793 (* li a5,1  *)
    | 0x80007730 => 0x00f51463 (* bne a0,a5,80007738 <prvCountingSemaphoreTask+0x64>  *)
    | 0x80007734 => 0x92a1a423 (* sw a0,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x80007738 => 0x00100493 (* li s1,1  *)
    | 0x8000773c => 0x80014bb7 (* lui s7,0x80014  *)
    | 0x80007740 => 0x0c800b13 (* li s6,200  *)
    | 0x80007744 => 0x00100c13 (* li s8,1  *)
    | 0x80007748 => 0x00042903 (* lw s2,0(s0)  *)
    | 0x8000774c => 0x00000593 (* li a1,0  *)
    | 0x80007750 => 0x00090513 (* mv a0,s2  *)
    | 0x80007754 => 0xc68fc0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80007758 => 0x00951463 (* bne a0,s1,80007760 <prvCountingSemaphoreTask+0x8c>  *)
    | 0x8000775c => 0x9291a423 (* sw s1,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x80007760 => 0x00000993 (* li s3,0  *)
    | 0x80007764 => 0x00090513 (* mv a0,s2  *)
    | 0x80007768 => 0xae5fc0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000776c => 0x01350863 (* beq a0,s3,8000777c <prvCountingSemaphoreTask+0xa8>  *)
    | 0x80007770 => 0x0c400593 (* li a1,196  *)
    | 0x80007774 => 0xd28b8513 (* add a0,s7,-728 # 80013d28 <_etext+0x158>  *)
    | 0x80007778 => 0x3190a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000777c => 0x00000693 (* li a3,0  *)
    | 0x80007780 => 0x00000613 (* li a2,0  *)
    | 0x80007784 => 0x00000593 (* li a1,0  *)
    | 0x80007788 => 0x00090513 (* mv a0,s2  *)
    | 0x8000778c => 0xc41fb0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80007790 => 0x00950463 (* beq a0,s1,80007798 <prvCountingSemaphoreTask+0xc4>  *)
    | 0x80007794 => 0x9381a423 (* sw s8,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x80007798 => 0x00842783 (* lw a5,8(s0)  *)
    | 0x8000779c => 0x00198993 (* add s3,s3,1  *)
    | 0x800077a0 => 0x00178793 (* add a5,a5,1  *)
    | 0x800077a4 => 0x00f42423 (* sw a5,8(s0)  *)
    | 0x800077a8 => 0xfb699ee3 (* bne s3,s6,80007764 <prvCountingSemaphoreTask+0x90>  *)
    | 0x800077ac => 0x00000693 (* li a3,0  *)
    | 0x800077b0 => 0x00000613 (* li a2,0  *)
    | 0x800077b4 => 0x00000593 (* li a1,0  *)
    | 0x800077b8 => 0x00090513 (* mv a0,s2  *)
    | 0x800077bc => 0xc11fb0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800077c0 => 0x00951463 (* bne a0,s1,800077c8 <prvCountingSemaphoreTask+0xf4>  *)
    | 0x800077c4 => 0x9291a423 (* sw s1,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x800077c8 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x800077cc => 0x000a8593 (* mv a1,s5  *)
    | 0x800077d0 => 0xe11ff0ef (* jal 800075e0 <prvDecrementSemaphoreCount>  *)
    | 0x800077d4 => 0xf75ff06f (* j 80007748 <prvCountingSemaphoreTask+0x74>  *)
    (* <vStartCountingSemaphoreTasks> *)
    | 0x800077d8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800077dc => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800077e0 => 0x0c800593 (* li a1,200  *)
    | 0x800077e4 => 0x0c800513 (* li a0,200  *)
    | 0x800077e8 => 0x800954b7 (* lui s1,0x80095  *)
    | 0x800077ec => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800077f0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800077f4 => 0xb85fb0ef (* jal 80003378 <xQueueCreateCountingSemaphore>  *)
    | 0x800077f8 => 0xca848413 (* add s0,s1,-856 # 80094ca8 <xParameters>  *)
    | 0x800077fc => 0x0aa00793 (* li a5,170  *)
    | 0x80007800 => 0x00a42023 (* sw a0,0(s0)  *)
    | 0x80007804 => 0x00000593 (* li a1,0  *)
    | 0x80007808 => 0x0c800513 (* li a0,200  *)
    | 0x8000780c => 0x00f42223 (* sw a5,4(s0)  *)
    | 0x80007810 => 0x00042423 (* sw zero,8(s0)  *)
    | 0x80007814 => 0xb65fb0ef (* jal 80003378 <xQueueCreateCountingSemaphore>  *)
    | 0x80007818 => 0x00050793 (* mv a5,a0  *)
    | 0x8000781c => 0x00a42623 (* sw a0,12(s0)  *)
    | 0x80007820 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x80007824 => 0x00042823 (* sw zero,16(s0)  *)
    | 0x80007828 => 0x00042a23 (* sw zero,20(s0)  *)
    | 0x8000782c => 0x00051463 (* bnez a0,80007834 <vStartCountingSemaphoreTasks+0x5c>  *)
    | 0x80007830 => 0x06078c63 (* beqz a5,800078a8 <vStartCountingSemaphoreTasks+0xd0>  *)
    | 0x80007834 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007838 => 0xd5858593 (* add a1,a1,-680 # 80013d58 <_etext+0x188>  *)
    | 0x8000783c => 0xab9fc0ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x80007840 => 0x00c42503 (* lw a0,12(s0)  *)
    | 0x80007844 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007848 => 0xd6858593 (* add a1,a1,-664 # 80013d68 <_etext+0x198>  *)
    | 0x8000784c => 0xaa9fc0ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x80007850 => 0x80007437 (* lui s0,0x80007  *)
    | 0x80007854 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007858 => 0xca848693 (* add a3,s1,-856  *)
    | 0x8000785c => 0x00000793 (* li a5,0  *)
    | 0x80007860 => 0x00000713 (* li a4,0  *)
    | 0x80007864 => 0x07800613 (* li a2,120  *)
    | 0x80007868 => 0xd7858593 (* add a1,a1,-648 # 80013d78 <_etext+0x1a8>  *)
    | 0x8000786c => 0x6d440513 (* add a0,s0,1748 # 800076d4 <prvCountingSemaphoreTask>  *)
    | 0x80007870 => 0xf8df80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007874 => 0x6d440513 (* add a0,s0,1748  *)
    | 0x80007878 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000787c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80007880 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80007884 => 0x800956b7 (* lui a3,0x80095  *)
    | 0x80007888 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000788c => 0x00000793 (* li a5,0  *)
    | 0x80007890 => 0x00000713 (* li a4,0  *)
    | 0x80007894 => 0xcb468693 (* add a3,a3,-844 # 80094cb4 <xParameters+0xc>  *)
    | 0x80007898 => 0x07800613 (* li a2,120  *)
    | 0x8000789c => 0xd8058593 (* add a1,a1,-640 # 80013d80 <_etext+0x1b0>  *)
    | 0x800078a0 => 0x01010113 (* add sp,sp,16  *)
    | 0x800078a4 => 0xf59f806f (* j 800007fc <xTaskCreate>  *)
    | 0x800078a8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800078ac => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800078b0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800078b4 => 0x01010113 (* add sp,sp,16  *)
    | 0x800078b8 => 0x00008067 (* ret  *)
    (* <xAreCountingSemaphoreTasksStillRunning> *)
    | 0x800078bc => 0x9281a683 (* lw a3,-1752(gp) # 80080128 <xErrorDetected>  *)
    | 0x800078c0 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x800078c4 => 0xca878713 (* add a4,a5,-856 # 80094ca8 <xParameters>  *)
    | 0x800078c8 => 0x00872583 (* lw a1,8(a4)  *)
    | 0x800078cc => 0x9241a603 (* lw a2,-1756(gp) # 80080124 <uxLastCount0.1>  *)
    | 0x800078d0 => 0xca878793 (* add a5,a5,-856  *)
    | 0x800078d4 => 0x00000513 (* li a0,0  *)
    | 0x800078d8 => 0x00c58863 (* beq a1,a2,800078e8 <xAreCountingSemaphoreTasksStillRunning+0x2c>  *)
    | 0x800078dc => 0x0016b513 (* seqz a0,a3  *)
    | 0x800078e0 => 0x0087a683 (* lw a3,8(a5)  *)
    | 0x800078e4 => 0x92d1a223 (* sw a3,-1756(gp) # 80080124 <uxLastCount0.1>  *)
    | 0x800078e8 => 0x0147a603 (* lw a2,20(a5)  *)
    | 0x800078ec => 0x9201a683 (* lw a3,-1760(gp) # 80080120 <uxLastCount1.0>  *)
    | 0x800078f0 => 0x00d60863 (* beq a2,a3,80007900 <xAreCountingSemaphoreTasksStillRunning+0x44>  *)
    | 0x800078f4 => 0x0147a783 (* lw a5,20(a5)  *)
    | 0x800078f8 => 0x92f1a023 (* sw a5,-1760(gp) # 80080120 <uxLastCount1.0>  *)
    | 0x800078fc => 0x00008067 (* ret  *)
    | 0x80007900 => 0x00000513 (* li a0,0  *)
    | 0x80007904 => 0x00008067 (* ret  *)
    (* <vCreateTasks> *)
    | 0x80007908 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000790c => 0x3e800513 (* li a0,1000  *)
    | 0x80007910 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80007914 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80007918 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000791c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80007920 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80007924 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80007928 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000792c => 0x9edf90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007930 => 0xd54f90ef (* jal 80000e84 <uxTaskGetNumberOfTasks>  *)
    | 0x80007934 => 0x92a1a823 (* sw a0,-1744(gp) # 80080130 <uxTasksRunningAtStart>  *)
    | 0x80007938 => 0x00000513 (* li a0,0  *)
    | 0x8000793c => 0x9b0f90ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80007940 => 0x00050413 (* mv s0,a0  *)
    | 0x80007944 => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x80007948 => 0x800089b7 (* lui s3,0x80008  *)
    | 0x8000794c => 0x80014a37 (* lui s4,0x80014  *)
    | 0x80007950 => 0x3e800513 (* li a0,1000  *)
    | 0x80007954 => 0x9c5f90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007958 => 0x92c18793 (* add a5,gp,-1748 # 8008012c <xCreatedTask>  *)
    | 0x8000795c => 0x00040713 (* mv a4,s0  *)
    | 0x80007960 => 0x00000693 (* li a3,0  *)
    | 0x80007964 => 0x07800613 (* li a2,120  *)
    | 0x80007968 => 0xd88a8593 (* add a1,s5,-632 # 80013d88 <_etext+0x1b8>  *)
    | 0x8000796c => 0x9ac98513 (* add a0,s3,-1620 # 800079ac <vSuicidalTask>  *)
    | 0x80007970 => 0x9201a623 (* sw zero,-1748(gp) # 8008012c <xCreatedTask>  *)
    | 0x80007974 => 0xe89f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007978 => 0x00000793 (* li a5,0  *)
    | 0x8000797c => 0x00040713 (* mv a4,s0  *)
    | 0x80007980 => 0x92c18693 (* add a3,gp,-1748 # 8008012c <xCreatedTask>  *)
    | 0x80007984 => 0x07800613 (* li a2,120  *)
    | 0x80007988 => 0xd90a0593 (* add a1,s4,-624 # 80013d90 <_etext+0x1c0>  *)
    | 0x8000798c => 0x9ac98513 (* add a0,s3,-1620  *)
    | 0x80007990 => 0xe6df80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007994 => 0x9341d783 (* lhu a5,-1740(gp) # 80080134 <usCreationCount>  *)
    | 0x80007998 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000799c => 0x01079793 (* sll a5,a5,0x10  *)
    | 0x800079a0 => 0x0107d793 (* srl a5,a5,0x10  *)
    | 0x800079a4 => 0x92f19a23 (* sh a5,-1740(gp) # 80080134 <usCreationCount>  *)
    | 0x800079a8 => 0xfa9ff06f (* j 80007950 <vCreateTasks+0x48>  *)
    (* <vSuicidalTask> *)
    | 0x800079ac => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800079b0 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800079b4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800079b8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800079bc => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800079c0 => 0x00050413 (* mv s0,a0  *)
    | 0x800079c4 => 0x00050463 (* beqz a0,800079cc <vSuicidalTask+0x20>  *)
    | 0x800079c8 => 0x00052403 (* lw s0,0(a0)  *)
    | 0x800079cc => 0x00200493 (* li s1,2  *)
    | 0x800079d0 => 0x05900913 (* li s2,89  *)
    | 0x800079d4 => 0x00912423 (* sw s1,8(sp)  *)
    | 0x800079d8 => 0x01212623 (* sw s2,12(sp)  *)
    | 0x800079dc => 0x00812703 (* lw a4,8(sp)  *)
    | 0x800079e0 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x800079e4 => 0x0c800513 (* li a0,200  *)
    | 0x800079e8 => 0x02e787b3 (* mul a5,a5,a4  *)
    | 0x800079ec => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x800079f0 => 0x929f90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800079f4 => 0xfe0400e3 (* beqz s0,800079d4 <vSuicidalTask+0x28>  *)
    | 0x800079f8 => 0x00000513 (* li a0,0  *)
    | 0x800079fc => 0x91df90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007a00 => 0x00040513 (* mv a0,s0  *)
    | 0x80007a04 => 0xed1f80ef (* jal 800008d4 <vTaskDelete>  *)
    | 0x80007a08 => 0x00000513 (* li a0,0  *)
    | 0x80007a0c => 0xec9f80ef (* jal 800008d4 <vTaskDelete>  *)
    | 0x80007a10 => 0xfc5ff06f (* j 800079d4 <vSuicidalTask+0x28>  *)
    (* <vCreateSuicidalTasks> *)
    | 0x80007a14 => 0x00050713 (* mv a4,a0  *)
    | 0x80007a18 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007a1c => 0x80008537 (* lui a0,0x80008  *)
    | 0x80007a20 => 0x00000793 (* li a5,0  *)
    | 0x80007a24 => 0x00000693 (* li a3,0  *)
    | 0x80007a28 => 0x0b400613 (* li a2,180  *)
    | 0x80007a2c => 0xd9858593 (* add a1,a1,-616 # 80013d98 <_etext+0x1c8>  *)
    | 0x80007a30 => 0x90850513 (* add a0,a0,-1784 # 80007908 <vCreateTasks>  *)
    | 0x80007a34 => 0xdc9f806f (* j 800007fc <xTaskCreate>  *)
    (* <xIsCreateTaskStillRunning> *)
    | 0x80007a38 => 0x9341d683 (* lhu a3,-1740(gp) # 80080134 <usCreationCount>  *)
    | 0x80007a3c => 0x80c1d603 (* lhu a2,-2036(gp) # 8008000c <usLastCreationCount.1>  *)
    | 0x80007a40 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80007a44 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80007a48 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80007a4c => 0x00000413 (* li s0,0  *)
    | 0x80007a50 => 0x00d60863 (* beq a2,a3,80007a60 <xIsCreateTaskStillRunning+0x28>  *)
    | 0x80007a54 => 0x9341d703 (* lhu a4,-1740(gp) # 80080134 <usCreationCount>  *)
    | 0x80007a58 => 0x00100413 (* li s0,1  *)
    | 0x80007a5c => 0x80e19623 (* sh a4,-2036(gp) # 8008000c <usLastCreationCount.1>  *)
    | 0x80007a60 => 0xc24f90ef (* jal 80000e84 <uxTaskGetNumberOfTasks>  *)
    | 0x80007a64 => 0x9301a703 (* lw a4,-1744(gp) # 80080130 <uxTasksRunningAtStart>  *)
    | 0x80007a68 => 0x02e56463 (* bltu a0,a4,80007a90 <xIsCreateTaskStillRunning+0x58>  *)
    | 0x80007a6c => 0x9301a783 (* lw a5,-1744(gp) # 80080130 <uxTasksRunningAtStart>  *)
    | 0x80007a70 => 0x40f50533 (* sub a0,a0,a5  *)
    | 0x80007a74 => 0x00300793 (* li a5,3  *)
    | 0x80007a78 => 0x00a7ec63 (* bltu a5,a0,80007a90 <xIsCreateTaskStillRunning+0x58>  *)
    | 0x80007a7c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80007a80 => 0x00040513 (* mv a0,s0  *)
    | 0x80007a84 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80007a88 => 0x01010113 (* add sp,sp,16  *)
    | 0x80007a8c => 0x00008067 (* ret  *)
    | 0x80007a90 => 0x00000413 (* li s0,0  *)
    | 0x80007a94 => 0xfe9ff06f (* j 80007a7c <xIsCreateTaskStillRunning+0x44>  *)
    (* <vQueueReceiveWhenSuspendedTask> *)
    | 0x80007a98 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80007a9c => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80007aa0 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80007aa4 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80007aa8 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80007aac => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80007ab0 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80007ab4 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80007ab8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80007abc => 0x00100a13 (* li s4,1  *)
    | 0x80007ac0 => 0x00100a93 (* li s5,1  *)
    | 0x80007ac4 => 0x00100b13 (* li s6,1  *)
    | 0x80007ac8 => 0xb9cf90ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80007acc => 0xb98f90ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80007ad0 => 0x9481a503 (* lw a0,-1720(gp) # 80080148 <xSuspendedTestQueue>  *)
    | 0x80007ad4 => 0x00000613 (* li a2,0  *)
    | 0x80007ad8 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80007adc => 0xeedfb0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x80007ae0 => 0x00050493 (* mv s1,a0  *)
    | 0x80007ae4 => 0xd94f90ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80007ae8 => 0x00050463 (* beqz a0,80007af0 <vQueueReceiveWhenSuspendedTask+0x58>  *)
    | 0x80007aec => 0x9561a623 (* sw s6,-1716(gp) # 8008014c <xSuspendedQueueReceiveError>  *)
    | 0x80007af0 => 0xd88f90ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80007af4 => 0xfc048ae3 (* beqz s1,80007ac8 <vQueueReceiveWhenSuspendedTask+0x30>  *)
    | 0x80007af8 => 0x9441a783 (* lw a5,-1724(gp) # 80080144 <ulExpectedValue>  *)
    | 0x80007afc => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x80007b00 => 0x00f70463 (* beq a4,a5,80007b08 <vQueueReceiveWhenSuspendedTask+0x70>  *)
    | 0x80007b04 => 0x9551a623 (* sw s5,-1716(gp) # 8008014c <xSuspendedQueueReceiveError>  *)
    | 0x80007b08 => 0x94c1a703 (* lw a4,-1716(gp) # 8008014c <xSuspendedQueueReceiveError>  *)
    | 0x80007b0c => 0xfb470ee3 (* beq a4,s4,80007ac8 <vQueueReceiveWhenSuspendedTask+0x30>  *)
    | 0x80007b10 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007b14 => 0x94f1a223 (* sw a5,-1724(gp) # 80080144 <ulExpectedValue>  *)
    | 0x80007b18 => 0xfb1ff06f (* j 80007ac8 <vQueueReceiveWhenSuspendedTask+0x30>  *)
    (* <vQueueSendWhenSuspendedTask> *)
    | 0x80007b1c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80007b20 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80007b24 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80007b28 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80007b2c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80007b30 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80007b34 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80007b38 => 0x00100913 (* li s2,1  *)
    | 0x80007b3c => 0x00100a13 (* li s4,1  *)
    | 0x80007b40 => 0xb24f90ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80007b44 => 0x9481a503 (* lw a0,-1720(gp) # 80080148 <xSuspendedTestQueue>  *)
    | 0x80007b48 => 0x00000693 (* li a3,0  *)
    | 0x80007b4c => 0x00000613 (* li a2,0  *)
    | 0x80007b50 => 0x94018593 (* add a1,gp,-1728 # 80080140 <ulValueToSend.2>  *)
    | 0x80007b54 => 0x879fb0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80007b58 => 0x01250463 (* beq a0,s2,80007b60 <vQueueSendWhenSuspendedTask+0x44>  *)
    | 0x80007b5c => 0x9541a823 (* sw s4,-1712(gp) # 80080150 <xSuspendedQueueSendError>  *)
    | 0x80007b60 => 0xd18f90ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80007b64 => 0x08000513 (* li a0,128  *)
    | 0x80007b68 => 0xfb0f90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007b6c => 0x9401a783 (* lw a5,-1728(gp) # 80080140 <ulValueToSend.2>  *)
    | 0x80007b70 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007b74 => 0x94f1a023 (* sw a5,-1728(gp) # 80080140 <ulValueToSend.2>  *)
    | 0x80007b78 => 0xfc9ff06f (* j 80007b40 <vQueueSendWhenSuspendedTask+0x24>  *)
    (* <vLimitedIncrementTask> *)
    | 0x80007b7c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80007b80 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80007b84 => 0x00050413 (* mv s0,a0  *)
    | 0x80007b88 => 0x00000513 (* li a0,0  *)
    | 0x80007b8c => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80007b90 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80007b94 => 0x0fe00493 (* li s1,254  *)
    | 0x80007b98 => 0xb55f90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007b9c => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80007ba0 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007ba4 => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x80007ba8 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80007bac => 0xfef4f8e3 (* bgeu s1,a5,80007b9c <vLimitedIncrementTask+0x20>  *)
    | 0x80007bb0 => 0x00000513 (* li a0,0  *)
    | 0x80007bb4 => 0xb39f90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007bb8 => 0xfe5ff06f (* j 80007b9c <vLimitedIncrementTask+0x20>  *)
    (* <vCounterControlTask> *)
    | 0x80007bbc => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80007bc0 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80007bc4 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80007bc8 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80007bcc => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80007bd0 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80007bd4 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80007bd8 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80007bdc => 0x01812423 (* sw s8,8(sp)  *)
    | 0x80007be0 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80007be4 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80007be8 => 0x01912223 (* sw s9,4(sp)  *)
    | 0x80007bec => 0x01a12023 (* sw s10,0(sp)  *)
    | 0x80007bf0 => 0x00000a13 (* li s4,0  *)
    | 0x80007bf4 => 0x00300a93 (* li s5,3  *)
    | 0x80007bf8 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x80007bfc => 0x80080c37 (* lui s8,0x80080  *)
    | 0x80007c00 => 0x9401ac23 (* sw zero,-1704(gp) # 80080158 <ulCounter>  *)
    | 0x80007c04 => 0x00500913 (* li s2,5  *)
    | 0x80007c08 => 0x00100c93 (* li s9,1  *)
    | 0x80007c0c => 0x9601a503 (* lw a0,-1696(gp) # 80080160 <xContinuousIncrementHandle>  *)
    | 0x80007c10 => 0xaddf90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007c14 => 0x9601a503 (* lw a0,-1696(gp) # 80080160 <xContinuousIncrementHandle>  *)
    | 0x80007c18 => 0xe0df80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80007c1c => 0x01550863 (* beq a0,s5,80007c2c <vCounterControlTask+0x70>  *)
    | 0x80007c20 => 0x10c00593 (* li a1,268  *)
    | 0x80007c24 => 0xda098513 (* add a0,s3,-608 # 80013da0 <_etext+0x1d0>  *)
    | 0x80007c28 => 0x6680a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007c2c => 0x9601a503 (* lw a0,-1696(gp) # 80080160 <xContinuousIncrementHandle>  *)
    | 0x80007c30 => 0x9581ad03 (* lw s10,-1704(gp) # 80080158 <ulCounter>  *)
    | 0x80007c34 => 0x868f90ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80007c38 => 0x9601a503 (* lw a0,-1696(gp) # 80080160 <xContinuousIncrementHandle>  *)
    | 0x80007c3c => 0xde9f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80007c40 => 0x01950863 (* beq a0,s9,80007c50 <vCounterControlTask+0x94>  *)
    | 0x80007c44 => 0x12100593 (* li a1,289  *)
    | 0x80007c48 => 0xda098513 (* add a0,s3,-608  *)
    | 0x80007c4c => 0x6440a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007c50 => 0x08000513 (* li a0,128  *)
    | 0x80007c54 => 0xec4f90ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80007c58 => 0xa0cf90ef (* jal 80000e64 <vTaskSuspendAll>  *)
    | 0x80007c5c => 0x9581a783 (* lw a5,-1704(gp) # 80080158 <ulCounter>  *)
    | 0x80007c60 => 0x01a79463 (* bne a5,s10,80007c68 <vCounterControlTask+0xac>  *)
    | 0x80007c64 => 0x00100a13 (* li s4,1  *)
    | 0x80007c68 => 0xfff90913 (* add s2,s2,-1  *)
    | 0x80007c6c => 0x01091913 (* sll s2,s2,0x10  *)
    | 0x80007c70 => 0x01095913 (* srl s2,s2,0x10  *)
    | 0x80007c74 => 0xc04f90ef (* jal 80001078 <xTaskResumeAll>  *)
    | 0x80007c78 => 0xf8091ae3 (* bnez s2,80007c0c <vCounterControlTask+0x50>  *)
    | 0x80007c7c => 0x9601a503 (* lw a0,-1696(gp) # 80080160 <xContinuousIncrementHandle>  *)
    | 0x80007c80 => 0xa6df90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007c84 => 0x95c1a503 (* lw a0,-1700(gp) # 8008015c <xLimitedIncrementHandle>  *)
    | 0x80007c88 => 0x9401ac23 (* sw zero,-1704(gp) # 80080158 <ulCounter>  *)
    | 0x80007c8c => 0xd99f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80007c90 => 0x01550863 (* beq a0,s5,80007ca0 <vCounterControlTask+0xe4>  *)
    | 0x80007c94 => 0x14400593 (* li a1,324  *)
    | 0x80007c98 => 0xda098513 (* add a0,s3,-608  *)
    | 0x80007c9c => 0x5f40a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007ca0 => 0x95c1a503 (* lw a0,-1700(gp) # 8008015c <xLimitedIncrementHandle>  *)
    | 0x80007ca4 => 0xff9f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80007ca8 => 0x95c1a503 (* lw a0,-1700(gp) # 8008015c <xLimitedIncrementHandle>  *)
    | 0x80007cac => 0xd79f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80007cb0 => 0x01550863 (* beq a0,s5,80007cc0 <vCounterControlTask+0x104>  *)
    | 0x80007cb4 => 0x15500593 (* li a1,341  *)
    | 0x80007cb8 => 0xda098513 (* add a0,s3,-608  *)
    | 0x80007cbc => 0x5d40a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007cc0 => 0x9581a703 (* lw a4,-1704(gp) # 80080158 <ulCounter>  *)
    | 0x80007cc4 => 0x0ff00793 (* li a5,255  *)
    | 0x80007cc8 => 0x02f71c63 (* bne a4,a5,80007d00 <vCounterControlTask+0x144>  *)
    | 0x80007ccc => 0x020a1463 (* bnez s4,80007cf4 <vCounterControlTask+0x138>  *)
    | 0x80007cd0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80007cd4 => 0x9541d783 (* lhu a5,-1708(gp) # 80080154 <usCheckVariable>  *)
    | 0x80007cd8 => 0x004c2703 (* lw a4,4(s8) # 80080004 <xCriticalNesting>  *)
    | 0x80007cdc => 0x00178793 (* add a5,a5,1  *)
    | 0x80007ce0 => 0x01079793 (* sll a5,a5,0x10  *)
    | 0x80007ce4 => 0x0107d793 (* srl a5,a5,0x10  *)
    | 0x80007ce8 => 0x94f19a23 (* sh a5,-1708(gp) # 80080154 <usCheckVariable>  *)
    | 0x80007cec => 0x00071463 (* bnez a4,80007cf4 <vCounterControlTask+0x138>  *)
    | 0x80007cf0 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80007cf4 => 0x9601a503 (* lw a0,-1696(gp) # 80080160 <xContinuousIncrementHandle>  *)
    | 0x80007cf8 => 0xfa5f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80007cfc => 0xf05ff06f (* j 80007c00 <vCounterControlTask+0x44>  *)
    | 0x80007d00 => 0x00100a13 (* li s4,1  *)
    | 0x80007d04 => 0xff1ff06f (* j 80007cf4 <vCounterControlTask+0x138>  *)
    (* <vContinuousIncrementTask> *)
    | 0x80007d08 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80007d0c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80007d10 => 0x00050493 (* mv s1,a0  *)
    | 0x80007d14 => 0x00000513 (* li a0,0  *)
    | 0x80007d18 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80007d1c => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80007d20 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80007d24 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80007d28 => 0xdc5f80ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80007d2c => 0x00050413 (* mv s0,a0  *)
    | 0x80007d30 => 0x00150993 (* add s3,a0,1  *)
    | 0x80007d34 => 0x80014937 (* lui s2,0x80014  *)
    | 0x80007d38 => 0x00000513 (* li a0,0  *)
    | 0x80007d3c => 0x00098593 (* mv a1,s3  *)
    | 0x80007d40 => 0xdd1f80ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80007d44 => 0x00000513 (* li a0,0  *)
    | 0x80007d48 => 0xda5f80ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80007d4c => 0x00a98863 (* beq s3,a0,80007d5c <vContinuousIncrementTask+0x54>  *)
    | 0x80007d50 => 0x0e000593 (* li a1,224  *)
    | 0x80007d54 => 0xda090513 (* add a0,s2,-608 # 80013da0 <_etext+0x1d0>  *)
    | 0x80007d58 => 0x5380a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007d5c => 0x0004a783 (* lw a5,0(s1)  *)
    | 0x80007d60 => 0x00000513 (* li a0,0  *)
    | 0x80007d64 => 0x00040593 (* mv a1,s0  *)
    | 0x80007d68 => 0x00178793 (* add a5,a5,1  *)
    | 0x80007d6c => 0x00f4a023 (* sw a5,0(s1)  *)
    | 0x80007d70 => 0xda1f80ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80007d74 => 0x00000513 (* li a0,0  *)
    | 0x80007d78 => 0xd75f80ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80007d7c => 0xfa850ee3 (* beq a0,s0,80007d38 <vContinuousIncrementTask+0x30>  *)
    | 0x80007d80 => 0x0e900593 (* li a1,233  *)
    | 0x80007d84 => 0xda090513 (* add a0,s2,-608  *)
    | 0x80007d88 => 0x5080a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007d8c => 0xfadff06f (* j 80007d38 <vContinuousIncrementTask+0x30>  *)
    (* <vStartDynamicPriorityTasks> *)
    | 0x80007d90 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80007d94 => 0x00000613 (* li a2,0  *)
    | 0x80007d98 => 0x00400593 (* li a1,4  *)
    | 0x80007d9c => 0x00100513 (* li a0,1  *)
    | 0x80007da0 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80007da4 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80007da8 => 0xc24fb0ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x80007dac => 0x94a1a423 (* sw a0,-1720(gp) # 80080148 <xSuspendedTestQueue>  *)
    | 0x80007db0 => 0x0c050863 (* beqz a0,80007e80 <vStartDynamicPriorityTasks+0xf0>  *)
    | 0x80007db4 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007db8 => 0xdcc58593 (* add a1,a1,-564 # 80013dcc <_etext+0x1fc>  *)
    | 0x80007dbc => 0xd38fc0ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x80007dc0 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007dc4 => 0x80008537 (* lui a0,0x80008  *)
    | 0x80007dc8 => 0x95818693 (* add a3,gp,-1704 # 80080158 <ulCounter>  *)
    | 0x80007dcc => 0x96018793 (* add a5,gp,-1696 # 80080160 <xContinuousIncrementHandle>  *)
    | 0x80007dd0 => 0x00000713 (* li a4,0  *)
    | 0x80007dd4 => 0x07800613 (* li a2,120  *)
    | 0x80007dd8 => 0xde458593 (* add a1,a1,-540 # 80013de4 <_etext+0x214>  *)
    | 0x80007ddc => 0xd0850513 (* add a0,a0,-760 # 80007d08 <vContinuousIncrementTask>  *)
    | 0x80007de0 => 0xa1df80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007de4 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007de8 => 0x80008537 (* lui a0,0x80008  *)
    | 0x80007dec => 0x95818693 (* add a3,gp,-1704 # 80080158 <ulCounter>  *)
    | 0x80007df0 => 0x95c18793 (* add a5,gp,-1700 # 8008015c <xLimitedIncrementHandle>  *)
    | 0x80007df4 => 0x00100713 (* li a4,1  *)
    | 0x80007df8 => 0x07800613 (* li a2,120  *)
    | 0x80007dfc => 0xdec58593 (* add a1,a1,-532 # 80013dec <_etext+0x21c>  *)
    | 0x80007e00 => 0xb7c50513 (* add a0,a0,-1156 # 80007b7c <vLimitedIncrementTask>  *)
    | 0x80007e04 => 0x9f9f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007e08 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007e0c => 0x80008537 (* lui a0,0x80008  *)
    | 0x80007e10 => 0x00000793 (* li a5,0  *)
    | 0x80007e14 => 0x00000713 (* li a4,0  *)
    | 0x80007e18 => 0x00000693 (* li a3,0  *)
    | 0x80007e1c => 0x07800613 (* li a2,120  *)
    | 0x80007e20 => 0xdf458593 (* add a1,a1,-524 # 80013df4 <_etext+0x224>  *)
    | 0x80007e24 => 0xbbc50513 (* add a0,a0,-1092 # 80007bbc <vCounterControlTask>  *)
    | 0x80007e28 => 0x9d5f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007e2c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007e30 => 0x80008537 (* lui a0,0x80008  *)
    | 0x80007e34 => 0x00000793 (* li a5,0  *)
    | 0x80007e38 => 0x00000713 (* li a4,0  *)
    | 0x80007e3c => 0x00000693 (* li a3,0  *)
    | 0x80007e40 => 0x07800613 (* li a2,120  *)
    | 0x80007e44 => 0xdfc58593 (* add a1,a1,-516 # 80013dfc <_etext+0x22c>  *)
    | 0x80007e48 => 0xb1c50513 (* add a0,a0,-1252 # 80007b1c <vQueueSendWhenSuspendedTask>  *)
    | 0x80007e4c => 0x9b1f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80007e50 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80007e54 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80007e58 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80007e5c => 0x80008537 (* lui a0,0x80008  *)
    | 0x80007e60 => 0x00000793 (* li a5,0  *)
    | 0x80007e64 => 0x00000713 (* li a4,0  *)
    | 0x80007e68 => 0x00000693 (* li a3,0  *)
    | 0x80007e6c => 0x07800613 (* li a2,120  *)
    | 0x80007e70 => 0xe0458593 (* add a1,a1,-508 # 80013e04 <_etext+0x234>  *)
    | 0x80007e74 => 0xa9850513 (* add a0,a0,-1384 # 80007a98 <vQueueReceiveWhenSuspendedTask>  *)
    | 0x80007e78 => 0x01010113 (* add sp,sp,16  *)
    | 0x80007e7c => 0x981f806f (* j 800007fc <xTaskCreate>  *)
    | 0x80007e80 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80007e84 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80007e88 => 0x01010113 (* add sp,sp,16  *)
    | 0x80007e8c => 0x00008067 (* ret  *)
    (* <xAreDynamicPriorityTasksStillRunning> *)
    | 0x80007e90 => 0x9541d783 (* lhu a5,-1708(gp) # 80080154 <usCheckVariable>  *)
    | 0x80007e94 => 0x9441a683 (* lw a3,-1724(gp) # 80080144 <ulExpectedValue>  *)
    | 0x80007e98 => 0x9381a883 (* lw a7,-1736(gp) # 80080138 <ulLastExpectedValue.0>  *)
    | 0x80007e9c => 0x01079793 (* sll a5,a5,0x10  *)
    | 0x80007ea0 => 0x93c1d803 (* lhu a6,-1732(gp) # 8008013c <usLastTaskCheck.1>  *)
    | 0x80007ea4 => 0x0107d793 (* srl a5,a5,0x10  *)
    | 0x80007ea8 => 0x00000513 (* li a0,0  *)
    | 0x80007eac => 0x01168663 (* beq a3,a7,80007eb8 <xAreDynamicPriorityTasksStillRunning+0x28>  *)
    | 0x80007eb0 => 0x410787b3 (* sub a5,a5,a6  *)
    | 0x80007eb4 => 0x00f03533 (* snez a0,a5  *)
    | 0x80007eb8 => 0x9501a803 (* lw a6,-1712(gp) # 80080150 <xSuspendedQueueSendError>  *)
    | 0x80007ebc => 0x00100793 (* li a5,1  *)
    | 0x80007ec0 => 0x00f81463 (* bne a6,a5,80007ec8 <xAreDynamicPriorityTasksStillRunning+0x38>  *)
    | 0x80007ec4 => 0x00000513 (* li a0,0  *)
    | 0x80007ec8 => 0x94c1a803 (* lw a6,-1716(gp) # 8008014c <xSuspendedQueueReceiveError>  *)
    | 0x80007ecc => 0x00100793 (* li a5,1  *)
    | 0x80007ed0 => 0x00f81463 (* bne a6,a5,80007ed8 <xAreDynamicPriorityTasksStillRunning+0x48>  *)
    | 0x80007ed4 => 0x00000513 (* li a0,0  *)
    | 0x80007ed8 => 0x9541d783 (* lhu a5,-1708(gp) # 80080154 <usCheckVariable>  *)
    | 0x80007edc => 0x92d1ac23 (* sw a3,-1736(gp) # 80080138 <ulLastExpectedValue.0>  *)
    | 0x80007ee0 => 0x92f19e23 (* sh a5,-1732(gp) # 8008013c <usLastTaskCheck.1>  *)
    | 0x80007ee4 => 0x00008067 (* ret  *)
    (* <prvSyncTask> *)
    | 0x80007ee8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80007eec => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80007ef0 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80007ef4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80007ef8 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80007efc => 0x00050413 (* mv s0,a0  *)
    | 0x80007f00 => 0xf21f90ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x80007f04 => 0x97c1a783 (* lw a5,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80007f08 => 0x00300913 (* li s2,3  *)
    | 0x80007f0c => 0x00a78463 (* beq a5,a0,80007f14 <prvSyncTask+0x2c>  *)
    | 0x80007f10 => 0x00500913 (* li s2,5  *)
    | 0x80007f14 => 0x00000513 (* li a0,0  *)
    | 0x80007f18 => 0xfd4f90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007f1c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80007f20 => 0xfff00713 (* li a4,-1  *)
    | 0x80007f24 => 0x00000693 (* li a3,0  *)
    | 0x80007f28 => 0x00100613 (* li a2,1  *)
    | 0x80007f2c => 0x00090593 (* mv a1,s2  *)
    | 0x80007f30 => 0x940fd0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80007f34 => 0xfe0510e3 (* bnez a0,80007f14 <prvSyncTask+0x2c>  *)
    | 0x80007f38 => 0x80014937 (* lui s2,0x80014  *)
    | 0x80007f3c => 0x00000513 (* li a0,0  *)
    | 0x80007f40 => 0xfacf90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007f44 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80007f48 => 0x00000693 (* li a3,0  *)
    | 0x80007f4c => 0x00f00613 (* li a2,15  *)
    | 0x80007f50 => 0x00040593 (* mv a1,s0  *)
    | 0x80007f54 => 0xc28fd0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x80007f58 => 0x00f57513 (* and a0,a0,15  *)
    | 0x80007f5c => 0x00f00793 (* li a5,15  *)
    | 0x80007f60 => 0x00f51863 (* bne a0,a5,80007f70 <prvSyncTask+0x88>  *)
    | 0x80007f64 => 0x13000593 (* li a1,304  *)
    | 0x80007f68 => 0xe0c90513 (* add a0,s2,-500 # 80013e0c <_etext+0x23c>  *)
    | 0x80007f6c => 0x3240a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007f70 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80007f74 => 0xfff00693 (* li a3,-1  *)
    | 0x80007f78 => 0x00f00613 (* li a2,15  *)
    | 0x80007f7c => 0x00040593 (* mv a1,s0  *)
    | 0x80007f80 => 0xbfcfd0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x80007f84 => 0x00f57513 (* and a0,a0,15  *)
    | 0x80007f88 => 0x00f00793 (* li a5,15  *)
    | 0x80007f8c => 0x00f50863 (* beq a0,a5,80007f9c <prvSyncTask+0xb4>  *)
    | 0x80007f90 => 0x13a00593 (* li a1,314  *)
    | 0x80007f94 => 0xe0c90513 (* add a0,s2,-500  *)
    | 0x80007f98 => 0x2f80a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007f9c => 0x00000513 (* li a0,0  *)
    | 0x80007fa0 => 0xf4cf90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80007fa4 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80007fa8 => 0xfff00693 (* li a3,-1  *)
    | 0x80007fac => 0x00f00613 (* li a2,15  *)
    | 0x80007fb0 => 0x00040593 (* mv a1,s0  *)
    | 0x80007fb4 => 0xbc8fd0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x80007fb8 => 0x00f57513 (* and a0,a0,15  *)
    | 0x80007fbc => 0x00f00793 (* li a5,15  *)
    | 0x80007fc0 => 0x00f50863 (* beq a0,a5,80007fd0 <prvSyncTask+0xe8>  *)
    | 0x80007fc4 => 0x14a00593 (* li a1,330  *)
    | 0x80007fc8 => 0xe0c90513 (* add a0,s2,-500  *)
    | 0x80007fcc => 0x2c40a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007fd0 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80007fd4 => 0xfff00713 (* li a4,-1  *)
    | 0x80007fd8 => 0x00100693 (* li a3,1  *)
    | 0x80007fdc => 0x00000613 (* li a2,0  *)
    | 0x80007fe0 => 0x00f00593 (* li a1,15  *)
    | 0x80007fe4 => 0x88cfd0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80007fe8 => 0xf4050ae3 (* beqz a0,80007f3c <prvSyncTask+0x54>  *)
    | 0x80007fec => 0x15000593 (* li a1,336  *)
    | 0x80007ff0 => 0xe0c90513 (* add a0,s2,-500  *)
    | 0x80007ff4 => 0x29c0a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80007ff8 => 0xf45ff06f (* j 80007f3c <prvSyncTask+0x54>  *)
    (* <prvTestSlaveTask> *)
    | 0x80007ffc => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80008000 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80008004 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80008008 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000800c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80008010 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80008014 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80008018 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000801c => 0x00000493 (* li s1,0  *)
    | 0x80008020 => 0x0a200993 (* li s3,162  *)
    | 0x80008024 => 0x0ff00a13 (* li s4,255  *)
    | 0x80008028 => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x8000802c => 0x00000513 (* li a0,0  *)
    | 0x80008030 => 0xebcf90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80008034 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008038 => 0xfff00713 (* li a4,-1  *)
    | 0x8000803c => 0x00100693 (* li a3,1  *)
    | 0x80008040 => 0x00100613 (* li a2,1  *)
    | 0x80008044 => 0x00200593 (* li a1,2  *)
    | 0x80008048 => 0x828fd0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x8000804c => 0x01350463 (* beq a0,s3,80008054 <prvTestSlaveTask+0x58>  *)
    | 0x80008050 => 0x00100493 (* li s1,1  *)
    | 0x80008054 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008058 => 0xfff00713 (* li a4,-1  *)
    | 0x8000805c => 0x00100693 (* li a3,1  *)
    | 0x80008060 => 0x00000613 (* li a2,0  *)
    | 0x80008064 => 0x0a200593 (* li a1,162  *)
    | 0x80008068 => 0x808fd0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x8000806c => 0x0a257513 (* and a0,a0,162  *)
    | 0x80008070 => 0x01350463 (* beq a0,s3,80008078 <prvTestSlaveTask+0x7c>  *)
    | 0x80008074 => 0x00100493 (* li s1,1  *)
    | 0x80008078 => 0x00000513 (* li a0,0  *)
    | 0x8000807c => 0xe70f90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80008080 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008084 => 0xfff00713 (* li a4,-1  *)
    | 0x80008088 => 0x00100693 (* li a3,1  *)
    | 0x8000808c => 0x00100613 (* li a2,1  *)
    | 0x80008090 => 0x0a200593 (* li a1,162  *)
    | 0x80008094 => 0xfddfc0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80008098 => 0x01450463 (* beq a0,s4,800080a0 <prvTestSlaveTask+0xa4>  *)
    | 0x8000809c => 0x00100493 (* li s1,1  *)
    | 0x800080a0 => 0x00000513 (* li a0,0  *)
    | 0x800080a4 => 0xe48f90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x800080a8 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800080ac => 0xfff00693 (* li a3,-1  *)
    | 0x800080b0 => 0x00f00613 (* li a2,15  *)
    | 0x800080b4 => 0x00200593 (* li a1,2  *)
    | 0x800080b8 => 0xac4fd0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x800080bc => 0x00f57513 (* and a0,a0,15  *)
    | 0x800080c0 => 0x00f00793 (* li a5,15  *)
    | 0x800080c4 => 0x00f50463 (* beq a0,a5,800080cc <prvTestSlaveTask+0xd0>  *)
    | 0x800080c8 => 0x00100493 (* li s1,1  *)
    | 0x800080cc => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800080d0 => 0x00000593 (* li a1,0  *)
    | 0x800080d4 => 0x9acfd0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x800080d8 => 0x00050463 (* beqz a0,800080e0 <prvTestSlaveTask+0xe4>  *)
    | 0x800080dc => 0x00100493 (* li s1,1  *)
    | 0x800080e0 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800080e4 => 0x00000593 (* li a1,0  *)
    | 0x800080e8 => 0x8f4fd0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x800080ec => 0x00a4e533 (* or a0,s1,a0  *)
    | 0x800080f0 => 0x00100493 (* li s1,1  *)
    | 0x800080f4 => 0x00051a63 (* bnez a0,80008108 <prvTestSlaveTask+0x10c>  *)
    | 0x800080f8 => 0x98c1a783 (* lw a5,-1652(gp) # 8008018c <ulTestSlaveCycles>  *)
    | 0x800080fc => 0x00000493 (* li s1,0  *)
    | 0x80008100 => 0x00178793 (* add a5,a5,1  *)
    | 0x80008104 => 0x98f1a623 (* sw a5,-1652(gp) # 8008018c <ulTestSlaveCycles>  *)
    | 0x80008108 => 0x00000513 (* li a0,0  *)
    | 0x8000810c => 0xde0f90ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80008110 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008114 => 0xfff00693 (* li a3,-1  *)
    | 0x80008118 => 0x00f00613 (* li a2,15  *)
    | 0x8000811c => 0x00200593 (* li a1,2  *)
    | 0x80008120 => 0xa5cfd0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x80008124 => 0x00f57513 (* and a0,a0,15  *)
    | 0x80008128 => 0x00f00793 (* li a5,15  *)
    | 0x8000812c => 0x00f50463 (* beq a0,a5,80008134 <prvTestSlaveTask+0x138>  *)
    | 0x80008130 => 0x00100493 (* li s1,1  *)
    | 0x80008134 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008138 => 0x00000593 (* li a1,0  *)
    | 0x8000813c => 0x944fd0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x80008140 => 0x00050463 (* beqz a0,80008148 <prvTestSlaveTask+0x14c>  *)
    | 0x80008144 => 0x00100493 (* li s1,1  *)
    | 0x80008148 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x8000814c => 0xfff00713 (* li a4,-1  *)
    | 0x80008150 => 0x00100693 (* li a3,1  *)
    | 0x80008154 => 0x00000613 (* li a2,0  *)
    | 0x80008158 => 0x00f00593 (* li a1,15  *)
    | 0x8000815c => 0xf15fc0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80008160 => 0x00a4e4b3 (* or s1,s1,a0  *)
    | 0x80008164 => 0x00048c63 (* beqz s1,8000817c <prvTestSlaveTask+0x180>  *)
    | 0x80008168 => 0x1f400593 (* li a1,500  *)
    | 0x8000816c => 0xe0ca8513 (* add a0,s5,-500 # 80013e0c <_etext+0x23c>  *)
    | 0x80008170 => 0x1200a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80008174 => 0x00100493 (* li s1,1  *)
    | 0x80008178 => 0xeb5ff06f (* j 8000802c <prvTestSlaveTask+0x30>  *)
    | 0x8000817c => 0x98c1a783 (* lw a5,-1652(gp) # 8008018c <ulTestSlaveCycles>  *)
    | 0x80008180 => 0x00000493 (* li s1,0  *)
    | 0x80008184 => 0x00178793 (* add a5,a5,1  *)
    | 0x80008188 => 0x98f1a623 (* sw a5,-1652(gp) # 8008018c <ulTestSlaveCycles>  *)
    | 0x8000818c => 0xea1ff06f (* j 8000802c <prvTestSlaveTask+0x30>  *)
    (* <prvTestMasterTask> *)
    | 0x80008190 => 0xfb010113 (* add sp,sp,-80  *)
    | 0x80008194 => 0x04912223 (* sw s1,68(sp)  *)
    | 0x80008198 => 0x04112623 (* sw ra,76(sp)  *)
    | 0x8000819c => 0x04812423 (* sw s0,72(sp)  *)
    | 0x800081a0 => 0x05212023 (* sw s2,64(sp)  *)
    | 0x800081a4 => 0x03312e23 (* sw s3,60(sp)  *)
    | 0x800081a8 => 0x03412c23 (* sw s4,56(sp)  *)
    | 0x800081ac => 0x03512a23 (* sw s5,52(sp)  *)
    | 0x800081b0 => 0x03612823 (* sw s6,48(sp)  *)
    | 0x800081b4 => 0x03712623 (* sw s7,44(sp)  *)
    | 0x800081b8 => 0x03812423 (* sw s8,40(sp)  *)
    | 0x800081bc => 0x03912223 (* sw s9,36(sp)  *)
    | 0x800081c0 => 0x03a12023 (* sw s10,32(sp)  *)
    | 0x800081c4 => 0x01b12e23 (* sw s11,28(sp)  *)
    | 0x800081c8 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x800081cc => 0xe65fc0ef (* jal 80005030 <xEventGroupCreate>  *)
    | 0x800081d0 => 0x98a1a223 (* sw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800081d4 => 0x00051a63 (* bnez a0,800081e8 <prvTestMasterTask+0x58>  *)
    | 0x800081d8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800081dc => 0x0d900593 (* li a1,217  *)
    | 0x800081e0 => 0xe0c50513 (* add a0,a0,-500 # 80013e0c <_etext+0x23c>  *)
    | 0x800081e4 => 0x0ac0a0ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800081e8 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x800081ec => 0x00100413 (* li s0,1  *)
    | 0x800081f0 => 0x835f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800081f4 => 0x00050913 (* mv s2,a0  *)
    | 0x800081f8 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x800081fc => 0x829f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008200 => 0x00300793 (* li a5,3  *)
    | 0x80008204 => 0x00f51663 (* bne a0,a5,80008210 <prvTestMasterTask+0x80>  *)
    | 0x80008208 => 0xffd90913 (* add s2,s2,-3  *)
    | 0x8000820c => 0x01203433 (* snez s0,s2  *)
    | 0x80008210 => 0x00800b13 (* li s6,8  *)
    | 0x80008214 => 0x00100913 (* li s2,1  *)
    | 0x80008218 => 0x00200993 (* li s3,2  *)
    | 0x8000821c => 0x00300b93 (* li s7,3  *)
    | 0x80008220 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008224 => 0xa79f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008228 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x8000822c => 0xa71f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008230 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008234 => 0xff0f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008238 => 0x01350463 (* beq a0,s3,80008240 <prvTestMasterTask+0xb0>  *)
    | 0x8000823c => 0x00100413 (* li s0,1  *)
    | 0x80008240 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008244 => 0xfe0f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008248 => 0x01350463 (* beq a0,s3,80008250 <prvTestMasterTask+0xc0>  *)
    | 0x8000824c => 0x00100413 (* li s0,1  *)
    | 0x80008250 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008254 => 0x00090593 (* mv a1,s2  *)
    | 0x80008258 => 0x828fd0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x8000825c => 0x00397793 (* and a5,s2,3  *)
    | 0x80008260 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008264 => 0x46079063 (* bnez a5,800086c4 <prvTestMasterTask+0x534>  *)
    | 0x80008268 => 0xfbcf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000826c => 0x01350463 (* beq a0,s3,80008274 <prvTestMasterTask+0xe4>  *)
    | 0x80008270 => 0x00100413 (* li s0,1  *)
    | 0x80008274 => 0x00597793 (* and a5,s2,5  *)
    | 0x80008278 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x8000827c => 0x44079a63 (* bnez a5,800086d0 <prvTestMasterTask+0x540>  *)
    | 0x80008280 => 0xfa4f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008284 => 0x01350463 (* beq a0,s3,8000828c <prvTestMasterTask+0xfc>  *)
    | 0x80008288 => 0x00100413 (* li s0,1  *)
    | 0x8000828c => 0xfffb0b13 (* add s6,s6,-1  *)
    | 0x80008290 => 0x00191913 (* sll s2,s2,0x1  *)
    | 0x80008294 => 0xf80b16e3 (* bnez s6,80008220 <prvTestMasterTask+0x90>  *)
    | 0x80008298 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x8000829c => 0x80014d37 (* lui s10,0x80014  *)
    | 0x800082a0 => 0x00200913 (* li s2,2  *)
    | 0x800082a4 => 0x9f9f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800082a8 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x800082ac => 0x00100c93 (* li s9,1  *)
    | 0x800082b0 => 0x00300993 (* li s3,3  *)
    | 0x800082b4 => 0x9e9f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800082b8 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800082bc => 0xa00fd0ef (* jal 800054bc <vEventGroupDelete>  *)
    | 0x800082c0 => 0xd71fc0ef (* jal 80005030 <xEventGroupCreate>  *)
    | 0x800082c4 => 0x98a1a223 (* sw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800082c8 => 0x00051863 (* bnez a0,800082d8 <prvTestMasterTask+0x148>  *)
    | 0x800082cc => 0x0e400593 (* li a1,228  *)
    | 0x800082d0 => 0xe0cd0513 (* add a0,s10,-500 # 80013e0c <_etext+0x23c>  *)
    | 0x800082d4 => 0x7bd090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800082d8 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800082dc => 0x9c1f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800082e0 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800082e4 => 0xf40f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800082e8 => 0x01250463 (* beq a0,s2,800082f0 <prvTestMasterTask+0x160>  *)
    | 0x800082ec => 0x00100413 (* li s0,1  *)
    | 0x800082f0 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800082f4 => 0x0a200593 (* li a1,162  *)
    | 0x800082f8 => 0xf89fc0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x800082fc => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008300 => 0x00000713 (* li a4,0  *)
    | 0x80008304 => 0x00000693 (* li a3,0  *)
    | 0x80008308 => 0x00000613 (* li a2,0  *)
    | 0x8000830c => 0x0ff00593 (* li a1,255  *)
    | 0x80008310 => 0xd61fc0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80008314 => 0x0a000793 (* li a5,160  *)
    | 0x80008318 => 0x00f50463 (* beq a0,a5,80008320 <prvTestMasterTask+0x190>  *)
    | 0x8000831c => 0x00100413 (* li s0,1  *)
    | 0x80008320 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008324 => 0xf00f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008328 => 0x01250463 (* beq a0,s2,80008330 <prvTestMasterTask+0x1a0>  *)
    | 0x8000832c => 0x00100413 (* li s0,1  *)
    | 0x80008330 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008334 => 0x0fd00593 (* li a1,253  *)
    | 0x80008338 => 0xf49fc0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x8000833c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008340 => 0x00000713 (* li a4,0  *)
    | 0x80008344 => 0x00000693 (* li a3,0  *)
    | 0x80008348 => 0x00000613 (* li a2,0  *)
    | 0x8000834c => 0x0ff00593 (* li a1,255  *)
    | 0x80008350 => 0xd21fc0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80008354 => 0x0fd00793 (* li a5,253  *)
    | 0x80008358 => 0x00f50463 (* beq a0,a5,80008360 <prvTestMasterTask+0x1d0>  *)
    | 0x8000835c => 0x00100413 (* li s0,1  *)
    | 0x80008360 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008364 => 0xec0f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008368 => 0x01250463 (* beq a0,s2,80008370 <prvTestMasterTask+0x1e0>  *)
    | 0x8000836c => 0x00100413 (* li s0,1  *)
    | 0x80008370 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008374 => 0x00200593 (* li a1,2  *)
    | 0x80008378 => 0xf09fc0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x8000837c => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008380 => 0xea4f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008384 => 0x01350463 (* beq a0,s3,8000838c <prvTestMasterTask+0x1fc>  *)
    | 0x80008388 => 0x00100413 (* li s0,1  *)
    | 0x8000838c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008390 => 0x00000593 (* li a1,0  *)
    | 0x80008394 => 0xeedfc0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x80008398 => 0x0ff00793 (* li a5,255  *)
    | 0x8000839c => 0x00f50463 (* beq a0,a5,800083a4 <prvTestMasterTask+0x214>  *)
    | 0x800083a0 => 0x00100413 (* li s0,1  *)
    | 0x800083a4 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800083a8 => 0x00200593 (* li a1,2  *)
    | 0x800083ac => 0xe31fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x800083b0 => 0x0ff00793 (* li a5,255  *)
    | 0x800083b4 => 0x00f50463 (* beq a0,a5,800083bc <prvTestMasterTask+0x22c>  *)
    | 0x800083b8 => 0x00100413 (* li s0,1  *)
    | 0x800083bc => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800083c0 => 0x8ddf80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800083c4 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800083c8 => 0xe5cf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800083cc => 0x01250463 (* beq a0,s2,800083d4 <prvTestMasterTask+0x244>  *)
    | 0x800083d0 => 0x00100413 (* li s0,1  *)
    | 0x800083d4 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800083d8 => 0x00200593 (* li a1,2  *)
    | 0x800083dc => 0xea5fc0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x800083e0 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800083e4 => 0xe40f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800083e8 => 0x01350463 (* beq a0,s3,800083f0 <prvTestMasterTask+0x260>  *)
    | 0x800083ec => 0x00100413 (* li s0,1  *)
    | 0x800083f0 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800083f4 => 0x00000713 (* li a4,0  *)
    | 0x800083f8 => 0x00000693 (* li a3,0  *)
    | 0x800083fc => 0x00000613 (* li a2,0  *)
    | 0x80008400 => 0x0ff00593 (* li a1,255  *)
    | 0x80008404 => 0xc6dfc0ef (* jal 80005070 <xEventGroupWaitBits>  *)
    | 0x80008408 => 0x05d00793 (* li a5,93  *)
    | 0x8000840c => 0x00f50463 (* beq a0,a5,80008414 <prvTestMasterTask+0x284>  *)
    | 0x80008410 => 0x00100413 (* li s0,1  *)
    | 0x80008414 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008418 => 0x0ff00593 (* li a1,255  *)
    | 0x8000841c => 0xdc1fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x80008420 => 0x05d00793 (* li a5,93  *)
    | 0x80008424 => 0x00f50463 (* beq a0,a5,8000842c <prvTestMasterTask+0x29c>  *)
    | 0x80008428 => 0x00100413 (* li s0,1  *)
    | 0x8000842c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008430 => 0x00000593 (* li a1,0  *)
    | 0x80008434 => 0xda9fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x80008438 => 0x00050463 (* beqz a0,80008440 <prvTestMasterTask+0x2b0>  *)
    | 0x8000843c => 0x00100413 (* li s0,1  *)
    | 0x80008440 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008444 => 0xde0f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008448 => 0x01350463 (* beq a0,s3,80008450 <prvTestMasterTask+0x2c0>  *)
    | 0x8000844c => 0x00100413 (* li s0,1  *)
    | 0x80008450 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008454 => 0xdd0f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008458 => 0x01350463 (* beq a0,s3,80008460 <prvTestMasterTask+0x2d0>  *)
    | 0x8000845c => 0x00100413 (* li s0,1  *)
    | 0x80008460 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008464 => 0xdc0f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008468 => 0x01350463 (* beq a0,s3,80008470 <prvTestMasterTask+0x2e0>  *)
    | 0x8000846c => 0x00100413 (* li s0,1  *)
    | 0x80008470 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008474 => 0x00e00593 (* li a1,14  *)
    | 0x80008478 => 0xe09fc0ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x8000847c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008480 => 0xfff00693 (* li a3,-1  *)
    | 0x80008484 => 0x00100613 (* li a2,1  *)
    | 0x80008488 => 0x00100593 (* li a1,1  *)
    | 0x8000848c => 0xef1fc0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x80008490 => 0x00157513 (* and a0,a0,1  *)
    | 0x80008494 => 0x00051463 (* bnez a0,8000849c <prvTestMasterTask+0x30c>  *)
    | 0x80008498 => 0x00100413 (* li s0,1  *)
    | 0x8000849c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800084a0 => 0x00000593 (* li a1,0  *)
    | 0x800084a4 => 0xd39fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x800084a8 => 0x00e00793 (* li a5,14  *)
    | 0x800084ac => 0x00f50463 (* beq a0,a5,800084b4 <prvTestMasterTask+0x324>  *)
    | 0x800084b0 => 0x00100413 (* li s0,1  *)
    | 0x800084b4 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800084b8 => 0x00e00593 (* li a1,14  *)
    | 0x800084bc => 0xd21fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x800084c0 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800084c4 => 0x00000593 (* li a1,0  *)
    | 0x800084c8 => 0xd15fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x800084cc => 0x00050463 (* beqz a0,800084d4 <prvTestMasterTask+0x344>  *)
    | 0x800084d0 => 0x00100413 (* li s0,1  *)
    | 0x800084d4 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800084d8 => 0xfc4f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800084dc => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x800084e0 => 0xfbcf80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800084e4 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x800084e8 => 0xfb4f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x800084ec => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800084f0 => 0xd34f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800084f4 => 0x01250463 (* beq a0,s2,800084fc <prvTestMasterTask+0x36c>  *)
    | 0x800084f8 => 0x00100413 (* li s0,1  *)
    | 0x800084fc => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008500 => 0xd24f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008504 => 0x01250463 (* beq a0,s2,8000850c <prvTestMasterTask+0x37c>  *)
    | 0x80008508 => 0x00100413 (* li s0,1  *)
    | 0x8000850c => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008510 => 0xd14f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008514 => 0x01250463 (* beq a0,s2,8000851c <prvTestMasterTask+0x38c>  *)
    | 0x80008518 => 0x00100413 (* li s0,1  *)
    | 0x8000851c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008520 => 0xfff00693 (* li a3,-1  *)
    | 0x80008524 => 0x00f00613 (* li a2,15  *)
    | 0x80008528 => 0x00100593 (* li a1,1  *)
    | 0x8000852c => 0xe51fc0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x80008530 => 0x00f57513 (* and a0,a0,15  *)
    | 0x80008534 => 0x00f00793 (* li a5,15  *)
    | 0x80008538 => 0x00f50463 (* beq a0,a5,80008540 <prvTestMasterTask+0x3b0>  *)
    | 0x8000853c => 0x00100413 (* li s0,1  *)
    | 0x80008540 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008544 => 0x00000593 (* li a1,0  *)
    | 0x80008548 => 0xc95fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x8000854c => 0x00050463 (* beqz a0,80008554 <prvTestMasterTask+0x3c4>  *)
    | 0x80008550 => 0x00100413 (* li s0,1  *)
    | 0x80008554 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008558 => 0xcccf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000855c => 0x01350463 (* beq a0,s3,80008564 <prvTestMasterTask+0x3d4>  *)
    | 0x80008560 => 0x00100413 (* li s0,1  *)
    | 0x80008564 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008568 => 0xcbcf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000856c => 0x01350463 (* beq a0,s3,80008574 <prvTestMasterTask+0x3e4>  *)
    | 0x80008570 => 0x00100413 (* li s0,1  *)
    | 0x80008574 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008578 => 0xcacf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000857c => 0x01350463 (* beq a0,s3,80008584 <prvTestMasterTask+0x3f4>  *)
    | 0x80008580 => 0x00100413 (* li s0,1  *)
    | 0x80008584 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008588 => 0xf14f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000858c => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008590 => 0xf0cf80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008594 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008598 => 0xf04f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000859c => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x800085a0 => 0xc84f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800085a4 => 0x01250463 (* beq a0,s2,800085ac <prvTestMasterTask+0x41c>  *)
    | 0x800085a8 => 0x00100413 (* li s0,1  *)
    | 0x800085ac => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x800085b0 => 0xc74f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800085b4 => 0x01250463 (* beq a0,s2,800085bc <prvTestMasterTask+0x42c>  *)
    | 0x800085b8 => 0x00100413 (* li s0,1  *)
    | 0x800085bc => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x800085c0 => 0xc64f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800085c4 => 0x01250463 (* beq a0,s2,800085cc <prvTestMasterTask+0x43c>  *)
    | 0x800085c8 => 0x00100413 (* li s0,1  *)
    | 0x800085cc => 0x00200593 (* li a1,2  *)
    | 0x800085d0 => 0x00000513 (* li a0,0  *)
    | 0x800085d4 => 0xd3cf80ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x800085d8 => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x800085dc => 0xfff00693 (* li a3,-1  *)
    | 0x800085e0 => 0x00f00613 (* li a2,15  *)
    | 0x800085e4 => 0x00100593 (* li a1,1  *)
    | 0x800085e8 => 0xd95fc0ef (* jal 8000537c <xEventGroupSync>  *)
    | 0x800085ec => 0x00f57513 (* and a0,a0,15  *)
    | 0x800085f0 => 0x00f00793 (* li a5,15  *)
    | 0x800085f4 => 0x00f50463 (* beq a0,a5,800085fc <prvTestMasterTask+0x46c>  *)
    | 0x800085f8 => 0x00100413 (* li s0,1  *)
    | 0x800085fc => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008600 => 0x00000593 (* li a1,0  *)
    | 0x80008604 => 0xbd9fc0ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x80008608 => 0x00050463 (* beqz a0,80008610 <prvTestMasterTask+0x480>  *)
    | 0x8000860c => 0x00100413 (* li s0,1  *)
    | 0x80008610 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008614 => 0xc10f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008618 => 0x01950463 (* beq a0,s9,80008620 <prvTestMasterTask+0x490>  *)
    | 0x8000861c => 0x00100413 (* li s0,1  *)
    | 0x80008620 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008624 => 0xc00f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008628 => 0x01950463 (* beq a0,s9,80008630 <prvTestMasterTask+0x4a0>  *)
    | 0x8000862c => 0x00100413 (* li s0,1  *)
    | 0x80008630 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008634 => 0xbf0f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008638 => 0x01950463 (* beq a0,s9,80008640 <prvTestMasterTask+0x4b0>  *)
    | 0x8000863c => 0x00100413 (* li s0,1  *)
    | 0x80008640 => 0x00000513 (* li a0,0  *)
    | 0x80008644 => 0x00000593 (* li a1,0  *)
    | 0x80008648 => 0xcc8f80ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000864c => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008650 => 0xbd4f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008654 => 0x01250463 (* beq a0,s2,8000865c <prvTestMasterTask+0x4cc>  *)
    | 0x80008658 => 0x00100413 (* li s0,1  *)
    | 0x8000865c => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008660 => 0xbc4f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008664 => 0x01250463 (* beq a0,s2,8000866c <prvTestMasterTask+0x4dc>  *)
    | 0x80008668 => 0x00100413 (* li s0,1  *)
    | 0x8000866c => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008670 => 0xbb4f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008674 => 0x01250463 (* beq a0,s2,8000867c <prvTestMasterTask+0x4ec>  *)
    | 0x80008678 => 0x00100413 (* li s0,1  *)
    | 0x8000867c => 0x9841a503 (* lw a0,-1660(gp) # 80080184 <xEventGroup>  *)
    | 0x80008680 => 0xe3dfc0ef (* jal 800054bc <vEventGroupDelete>  *)
    | 0x80008684 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80008688 => 0xb9cf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000868c => 0x01350463 (* beq a0,s3,80008694 <prvTestMasterTask+0x504>  *)
    | 0x80008690 => 0x00100413 (* li s0,1  *)
    | 0x80008694 => 0x97c1a503 (* lw a0,-1668(gp) # 8008017c <xSyncTask1>  *)
    | 0x80008698 => 0xb8cf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000869c => 0x01350463 (* beq a0,s3,800086a4 <prvTestMasterTask+0x514>  *)
    | 0x800086a0 => 0x00100413 (* li s0,1  *)
    | 0x800086a4 => 0x9781a503 (* lw a0,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x800086a8 => 0xb7cf80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800086ac => 0x03351863 (* bne a0,s3,800086dc <prvTestMasterTask+0x54c>  *)
    | 0x800086b0 => 0x02041663 (* bnez s0,800086dc <prvTestMasterTask+0x54c>  *)
    | 0x800086b4 => 0x9901a783 (* lw a5,-1648(gp) # 80080190 <ulTestMasterCycles>  *)
    | 0x800086b8 => 0x00178793 (* add a5,a5,1  *)
    | 0x800086bc => 0x98f1a823 (* sw a5,-1648(gp) # 80080190 <ulTestMasterCycles>  *)
    | 0x800086c0 => 0xc01ff06f (* j 800082c0 <prvTestMasterTask+0x130>  *)
    | 0x800086c4 => 0xb60f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800086c8 => 0xbb7514e3 (* bne a0,s7,80008270 <prvTestMasterTask+0xe0>  *)
    | 0x800086cc => 0xba9ff06f (* j 80008274 <prvTestMasterTask+0xe4>  *)
    | 0x800086d0 => 0xb54f80ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800086d4 => 0xbb751ae3 (* bne a0,s7,80008288 <prvTestMasterTask+0xf8>  *)
    | 0x800086d8 => 0xbb5ff06f (* j 8000828c <prvTestMasterTask+0xfc>  *)
    | 0x800086dc => 0x10700593 (* li a1,263  *)
    | 0x800086e0 => 0xe0cd0513 (* add a0,s10,-500  *)
    | 0x800086e4 => 0x3ad090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800086e8 => 0x00100413 (* li s0,1  *)
    | 0x800086ec => 0xbd5ff06f (* j 800082c0 <prvTestMasterTask+0x130>  *)
    (* <vStartEventGroupTasks> *)
    | 0x800086f0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800086f4 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x800086f8 => 0x80008537 (* lui a0,0x80008  *)
    | 0x800086fc => 0x00c10793 (* add a5,sp,12  *)
    | 0x80008700 => 0x00100713 (* li a4,1  *)
    | 0x80008704 => 0x00000693 (* li a3,0  *)
    | 0x80008708 => 0x07800613 (* li a2,120  *)
    | 0x8000870c => 0xe4058593 (* add a1,a1,-448 # 80013e40 <_etext+0x270>  *)
    | 0x80008710 => 0xffc50513 (* add a0,a0,-4 # 80007ffc <prvTestSlaveTask>  *)
    | 0x80008714 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80008718 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000871c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80008720 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80008724 => 0x8d8f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80008728 => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x8000872c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80008730 => 0x80008537 (* lui a0,0x80008  *)
    | 0x80008734 => 0x00000793 (* li a5,0  *)
    | 0x80008738 => 0x00000713 (* li a4,0  *)
    | 0x8000873c => 0x07800613 (* li a2,120  *)
    | 0x80008740 => 0xe4858593 (* add a1,a1,-440 # 80013e48 <_etext+0x278>  *)
    | 0x80008744 => 0x19050513 (* add a0,a0,400 # 80008190 <prvTestMasterTask>  *)
    | 0x80008748 => 0x8b4f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000874c => 0x80014937 (* lui s2,0x80014  *)
    | 0x80008750 => 0x800084b7 (* lui s1,0x80008  *)
    | 0x80008754 => 0x97c18793 (* add a5,gp,-1668 # 8008017c <xSyncTask1>  *)
    | 0x80008758 => 0x00100713 (* li a4,1  *)
    | 0x8000875c => 0x00400693 (* li a3,4  *)
    | 0x80008760 => 0x07800613 (* li a2,120  *)
    | 0x80008764 => 0xe5090593 (* add a1,s2,-432 # 80013e50 <_etext+0x280>  *)
    | 0x80008768 => 0xee848513 (* add a0,s1,-280 # 80007ee8 <prvSyncTask>  *)
    | 0x8000876c => 0x890f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80008770 => 0x97818793 (* add a5,gp,-1672 # 80080178 <xSyncTask2>  *)
    | 0x80008774 => 0x00100713 (* li a4,1  *)
    | 0x80008778 => 0x00800693 (* li a3,8  *)
    | 0x8000877c => 0x07800613 (* li a2,120  *)
    | 0x80008780 => 0xe5090593 (* add a1,s2,-432  *)
    | 0x80008784 => 0xee848513 (* add a0,s1,-280  *)
    | 0x80008788 => 0x874f80ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000878c => 0x9781a783 (* lw a5,-1672(gp) # 80080178 <xSyncTask2>  *)
    | 0x80008790 => 0x00079a63 (* bnez a5,800087a4 <vStartEventGroupTasks+0xb4>  *)
    | 0x80008794 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80008798 => 0x0c400593 (* li a1,196  *)
    | 0x8000879c => 0xe0c50513 (* add a0,a0,-500 # 80013e0c <_etext+0x23c>  *)
    | 0x800087a0 => 0x2f1090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800087a4 => 0x88dfc0ef (* jal 80005030 <xEventGroupCreate>  *)
    | 0x800087a8 => 0x98a1a023 (* sw a0,-1664(gp) # 80080180 <xISREventGroup>  *)
    | 0x800087ac => 0x00051a63 (* bnez a0,800087c0 <vStartEventGroupTasks+0xd0>  *)
    | 0x800087b0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800087b4 => 0x0c900593 (* li a1,201  *)
    | 0x800087b8 => 0xe0c50513 (* add a0,a0,-500 # 80013e0c <_etext+0x23c>  *)
    | 0x800087bc => 0x2d5090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800087c0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800087c4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800087c8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800087cc => 0x01012903 (* lw s2,16(sp)  *)
    | 0x800087d0 => 0x02010113 (* add sp,sp,32  *)
    | 0x800087d4 => 0x00008067 (* ret  *)
    (* <vPeriodicEventGroupsProcessing> *)
    | 0x800087d8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800087dc => 0x00812423 (* sw s0,8(sp)  *)
    | 0x800087e0 => 0x9801a783 (* lw a5,-1664(gp) # 80080180 <xISREventGroup>  *)
    | 0x800087e4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800087e8 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x800087ec => 0x00079a63 (* bnez a5,80008800 <vPeriodicEventGroupsProcessing+0x28>  *)
    | 0x800087f0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800087f4 => 0x3c500593 (* li a1,965  *)
    | 0x800087f8 => 0xe0c50513 (* add a0,a0,-500 # 80013e0c <_etext+0x23c>  *)
    | 0x800087fc => 0x295090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80008800 => 0x9741a783 (* lw a5,-1676(gp) # 80080174 <xCallCount.4>  *)
    | 0x80008804 => 0x06400713 (* li a4,100  *)
    | 0x80008808 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000880c => 0x96f1aa23 (* sw a5,-1676(gp) # 80080174 <xCallCount.4>  *)
    | 0x80008810 => 0x04e79463 (* bne a5,a4,80008858 <vPeriodicEventGroupsProcessing+0x80>  *)
    | 0x80008814 => 0x9801a503 (* lw a0,-1664(gp) # 80080180 <xISREventGroup>  *)
    | 0x80008818 => 0xa61fc0ef (* jal 80005278 <xEventGroupGetBitsFromISR>  *)
    | 0x8000881c => 0x02050063 (* beqz a0,8000883c <vPeriodicEventGroupsProcessing+0x64>  *)
    | 0x80008820 => 0x00100713 (* li a4,1  *)
    | 0x80008824 => 0x96e1a823 (* sw a4,-1680(gp) # 80080170 <xISRTestError.3>  *)
    | 0x80008828 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000882c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80008830 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80008834 => 0x01010113 (* add sp,sp,16  *)
    | 0x80008838 => 0x00008067 (* ret  *)
    | 0x8000883c => 0x9801a503 (* lw a0,-1664(gp) # 80080180 <xISREventGroup>  *)
    | 0x80008840 => 0x00000613 (* li a2,0  *)
    | 0x80008844 => 0x01200593 (* li a1,18  *)
    | 0x80008848 => 0xd19fc0ef (* jal 80005560 <xEventGroupSetBitsFromISR>  *)
    | 0x8000884c => 0x00100793 (* li a5,1  *)
    | 0x80008850 => 0xfcf518e3 (* bne a0,a5,80008820 <vPeriodicEventGroupsProcessing+0x48>  *)
    | 0x80008854 => 0xfd5ff06f (* j 80008828 <vPeriodicEventGroupsProcessing+0x50>  *)
    | 0x80008858 => 0x0c800713 (* li a4,200  *)
    | 0x8000885c => 0x00e79a63 (* bne a5,a4,80008870 <vPeriodicEventGroupsProcessing+0x98>  *)
    | 0x80008860 => 0x9801a503 (* lw a0,-1664(gp) # 80080180 <xISREventGroup>  *)
    | 0x80008864 => 0xa15fc0ef (* jal 80005278 <xEventGroupGetBitsFromISR>  *)
    | 0x80008868 => 0x01200793 (* li a5,18  *)
    | 0x8000886c => 0xfe5ff06f (* j 80008850 <vPeriodicEventGroupsProcessing+0x78>  *)
    | 0x80008870 => 0x12c00713 (* li a4,300  *)
    | 0x80008874 => 0xfae79ae3 (* bne a5,a4,80008828 <vPeriodicEventGroupsProcessing+0x50>  *)
    | 0x80008878 => 0x9801a503 (* lw a0,-1664(gp) # 80080180 <xISREventGroup>  *)
    | 0x8000887c => 0x01200593 (* li a1,18  *)
    | 0x80008880 => 0x9e1fc0ef (* jal 80005260 <xEventGroupClearBitsFromISR>  *)
    | 0x80008884 => 0x00100713 (* li a4,1  *)
    | 0x80008888 => 0x00e50463 (* beq a0,a4,80008890 <vPeriodicEventGroupsProcessing+0xb8>  *)
    | 0x8000888c => 0x96e1a823 (* sw a4,-1680(gp) # 80080170 <xISRTestError.3>  *)
    | 0x80008890 => 0x9701a783 (* lw a5,-1680(gp) # 80080170 <xISRTestError.3>  *)
    | 0x80008894 => 0x9601aa23 (* sw zero,-1676(gp) # 80080174 <xCallCount.4>  *)
    | 0x80008898 => 0xf80798e3 (* bnez a5,80008828 <vPeriodicEventGroupsProcessing+0x50>  *)
    | 0x8000889c => 0x9881a783 (* lw a5,-1656(gp) # 80080188 <ulISRCycles>  *)
    | 0x800088a0 => 0x00178793 (* add a5,a5,1  *)
    | 0x800088a4 => 0x98f1a423 (* sw a5,-1656(gp) # 80080188 <ulISRCycles>  *)
    | 0x800088a8 => 0xf81ff06f (* j 80008828 <vPeriodicEventGroupsProcessing+0x50>  *)
    (* <xAreEventGroupTasksStillRunning> *)
    | 0x800088ac => 0x9901a603 (* lw a2,-1648(gp) # 80080190 <ulTestMasterCycles>  *)
    | 0x800088b0 => 0x9901a683 (* lw a3,-1648(gp) # 80080190 <ulTestMasterCycles>  *)
    | 0x800088b4 => 0x96c1a783 (* lw a5,-1684(gp) # 8008016c <ulPreviousSetBitCycles.2>  *)
    | 0x800088b8 => 0x96d1a623 (* sw a3,-1684(gp) # 8008016c <ulPreviousSetBitCycles.2>  *)
    | 0x800088bc => 0x98c1a583 (* lw a1,-1652(gp) # 8008018c <ulTestSlaveCycles>  *)
    | 0x800088c0 => 0x9681a803 (* lw a6,-1688(gp) # 80080168 <ulPreviousWaitBitCycles.1>  *)
    | 0x800088c4 => 0x00000513 (* li a0,0  *)
    | 0x800088c8 => 0x00b80663 (* beq a6,a1,800088d4 <xAreEventGroupTasksStillRunning+0x28>  *)
    | 0x800088cc => 0x40c787b3 (* sub a5,a5,a2  *)
    | 0x800088d0 => 0x00f03533 (* snez a0,a5  *)
    | 0x800088d4 => 0x98c1a783 (* lw a5,-1652(gp) # 8008018c <ulTestSlaveCycles>  *)
    | 0x800088d8 => 0x96f1a423 (* sw a5,-1688(gp) # 80080168 <ulPreviousWaitBitCycles.1>  *)
    | 0x800088dc => 0x9881a683 (* lw a3,-1656(gp) # 80080188 <ulISRCycles>  *)
    | 0x800088e0 => 0x9641a603 (* lw a2,-1692(gp) # 80080164 <ulPreviousISRCycles.0>  *)
    | 0x800088e4 => 0x00d61463 (* bne a2,a3,800088ec <xAreEventGroupTasksStillRunning+0x40>  *)
    | 0x800088e8 => 0x00000513 (* li a0,0  *)
    | 0x800088ec => 0x9881a703 (* lw a4,-1656(gp) # 80080188 <ulISRCycles>  *)
    | 0x800088f0 => 0x96e1a223 (* sw a4,-1692(gp) # 80080164 <ulPreviousISRCycles.0>  *)
    | 0x800088f4 => 0x00008067 (* ret  *)
    (* <prvMediumPriorityMutexTask> *)
    | 0x800088f8 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800088fc => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80008900 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80008904 => 0x00000513 (* li a0,0  *)
    | 0x80008908 => 0xde5f80ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000890c => 0x9b01a783 (* lw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008910 => 0x00178793 (* add a5,a5,1  *)
    | 0x80008914 => 0x9af1a823 (* sw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008918 => 0xfedff06f (* j 80008904 <prvMediumPriorityMutexTask+0xc>  *)
    (* <prvHighPriorityMutexTask> *)
    | 0x8000891c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80008920 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80008924 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80008928 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000892c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80008930 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80008934 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80008938 => 0x00050413 (* mv s0,a0  *)
    | 0x8000893c => 0x00100493 (* li s1,1  *)
    | 0x80008940 => 0x00100a13 (* li s4,1  *)
    | 0x80008944 => 0x00000513 (* li a0,0  *)
    | 0x80008948 => 0xda5f80ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000894c => 0xfff00593 (* li a1,-1  *)
    | 0x80008950 => 0x00040513 (* mv a0,s0  *)
    | 0x80008954 => 0xa68fb0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80008958 => 0x00950e63 (* beq a0,s1,80008974 <prvHighPriorityMutexTask+0x58>  *)
    | 0x8000895c => 0x9a01a783 (* lw a5,-1632(gp) # 800801a0 <xBlockWasAborted>  *)
    | 0x80008960 => 0x00079663 (* bnez a5,8000896c <prvHighPriorityMutexTask+0x50>  *)
    | 0x80008964 => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008968 => 0xfddff06f (* j 80008944 <prvHighPriorityMutexTask+0x28>  *)
    | 0x8000896c => 0x9a01a023 (* sw zero,-1632(gp) # 800801a0 <xBlockWasAborted>  *)
    | 0x80008970 => 0xfd5ff06f (* j 80008944 <prvHighPriorityMutexTask+0x28>  *)
    | 0x80008974 => 0x00000693 (* li a3,0  *)
    | 0x80008978 => 0x00000613 (* li a2,0  *)
    | 0x8000897c => 0x00000593 (* li a1,0  *)
    | 0x80008980 => 0x00040513 (* mv a0,s0  *)
    | 0x80008984 => 0xa49fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008988 => 0xfa950ee3 (* beq a0,s1,80008944 <prvHighPriorityMutexTask+0x28>  *)
    | 0x8000898c => 0x9a91ae23 (* sw s1,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008990 => 0xfb5ff06f (* j 80008944 <prvHighPriorityMutexTask+0x28>  *)
    (* <prvLowPriorityMutexTask> *)
    | 0x80008994 => 0xfb010113 (* add sp,sp,-80  *)
    | 0x80008998 => 0x00a12423 (* sw a0,8(sp)  *)
    | 0x8000899c => 0x00100513 (* li a0,1  *)
    | 0x800089a0 => 0x03612823 (* sw s6,48(sp)  *)
    | 0x800089a4 => 0x04112623 (* sw ra,76(sp)  *)
    | 0x800089a8 => 0x04812423 (* sw s0,72(sp)  *)
    | 0x800089ac => 0x04912223 (* sw s1,68(sp)  *)
    | 0x800089b0 => 0x05212023 (* sw s2,64(sp)  *)
    | 0x800089b4 => 0x03312e23 (* sw s3,60(sp)  *)
    | 0x800089b8 => 0x03412c23 (* sw s4,56(sp)  *)
    | 0x800089bc => 0x03512a23 (* sw s5,52(sp)  *)
    | 0x800089c0 => 0x03712623 (* sw s7,44(sp)  *)
    | 0x800089c4 => 0x03812423 (* sw s8,40(sp)  *)
    | 0x800089c8 => 0x03912223 (* sw s9,36(sp)  *)
    | 0x800089cc => 0x03a12023 (* sw s10,32(sp)  *)
    | 0x800089d0 => 0x01b12e23 (* sw s11,28(sp)  *)
    | 0x800089d4 => 0xd25fa0ef (* jal 800036f8 <xQueueCreateMutex>  *)
    | 0x800089d8 => 0x00050b13 (* mv s6,a0  *)
    | 0x800089dc => 0x00051a63 (* bnez a0,800089f0 <prvLowPriorityMutexTask+0x5c>  *)
    | 0x800089e0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800089e4 => 0x39600593 (* li a1,918  *)
    | 0x800089e8 => 0xe5850513 (* add a0,a0,-424 # 80013e58 <_etext+0x288>  *)
    | 0x800089ec => 0x0a5090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800089f0 => 0x00100913 (* li s2,1  *)
    | 0x800089f4 => 0x00100413 (* li s0,1  *)
    | 0x800089f8 => 0x00200b93 (* li s7,2  *)
    | 0x800089fc => 0x80014c37 (* lui s8,0x80014  *)
    | 0x80008a00 => 0x00300a93 (* li s5,3  *)
    | 0x80008a04 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008a08 => 0x00000593 (* li a1,0  *)
    | 0x80008a0c => 0x9b0fb0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80008a10 => 0x01250463 (* beq a0,s2,80008a18 <prvLowPriorityMutexTask+0x84>  *)
    | 0x80008a14 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008a18 => 0x00000513 (* li a0,0  *)
    | 0x80008a1c => 0x9a01a823 (* sw zero,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008a20 => 0x8ccf80ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008a24 => 0x00050463 (* beqz a0,80008a2c <prvLowPriorityMutexTask+0x98>  *)
    | 0x80008a28 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008a2c => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008a30 => 0xa6cf80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008a34 => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008a38 => 0xfedf70ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008a3c => 0x01750863 (* beq a0,s7,80008a4c <prvLowPriorityMutexTask+0xb8>  *)
    | 0x80008a40 => 0x2ab00593 (* li a1,683  *)
    | 0x80008a44 => 0xe58c0513 (* add a0,s8,-424 # 80013e58 <_etext+0x288>  *)
    | 0x80008a48 => 0x049090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80008a4c => 0x00000513 (* li a0,0  *)
    | 0x80008a50 => 0x89cf80ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008a54 => 0x01550463 (* beq a0,s5,80008a5c <prvLowPriorityMutexTask+0xc8>  *)
    | 0x80008a58 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008a5c => 0x00000513 (* li a0,0  *)
    | 0x80008a60 => 0x00100593 (* li a1,1  *)
    | 0x80008a64 => 0x8acf80ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80008a68 => 0x00000513 (* li a0,0  *)
    | 0x80008a6c => 0x880f80ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008a70 => 0x01550463 (* beq a0,s5,80008a78 <prvLowPriorityMutexTask+0xe4>  *)
    | 0x80008a74 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008a78 => 0x9a81a503 (* lw a0,-1624(gp) # 800801a8 <xMediumPriorityMutexTask>  *)
    | 0x80008a7c => 0xa20f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008a80 => 0x9b01a783 (* lw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008a84 => 0x00078463 (* beqz a5,80008a8c <prvLowPriorityMutexTask+0xf8>  *)
    | 0x80008a88 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008a8c => 0x00000593 (* li a1,0  *)
    | 0x80008a90 => 0x000b0513 (* mv a0,s6  *)
    | 0x80008a94 => 0x928fb0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80008a98 => 0x01250463 (* beq a0,s2,80008aa0 <prvLowPriorityMutexTask+0x10c>  *)
    | 0x80008a9c => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008aa0 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008aa4 => 0x00000693 (* li a3,0  *)
    | 0x80008aa8 => 0x00000613 (* li a2,0  *)
    | 0x80008aac => 0x00000593 (* li a1,0  *)
    | 0x80008ab0 => 0x91dfa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008ab4 => 0x01250463 (* beq a0,s2,80008abc <prvLowPriorityMutexTask+0x128>  *)
    | 0x80008ab8 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008abc => 0x9b01a783 (* lw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008ac0 => 0x00078463 (* beqz a5,80008ac8 <prvLowPriorityMutexTask+0x134>  *)
    | 0x80008ac4 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008ac8 => 0x00000513 (* li a0,0  *)
    | 0x80008acc => 0x820f80ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008ad0 => 0x01550463 (* beq a0,s5,80008ad8 <prvLowPriorityMutexTask+0x144>  *)
    | 0x80008ad4 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008ad8 => 0x00000693 (* li a3,0  *)
    | 0x80008adc => 0x00000613 (* li a2,0  *)
    | 0x80008ae0 => 0x00000593 (* li a1,0  *)
    | 0x80008ae4 => 0x000b0513 (* mv a0,s6  *)
    | 0x80008ae8 => 0x8e5fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008aec => 0x01250463 (* beq a0,s2,80008af4 <prvLowPriorityMutexTask+0x160>  *)
    | 0x80008af0 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008af4 => 0x9b01a783 (* lw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008af8 => 0x01278463 (* beq a5,s2,80008b00 <prvLowPriorityMutexTask+0x16c>  *)
    | 0x80008afc => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008b00 => 0x00000513 (* li a0,0  *)
    | 0x80008b04 => 0xfe9f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008b08 => 0x01250463 (* beq a0,s2,80008b10 <prvLowPriorityMutexTask+0x17c>  *)
    | 0x80008b0c => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008b10 => 0x00000593 (* li a1,0  *)
    | 0x80008b14 => 0x00000513 (* li a0,0  *)
    | 0x80008b18 => 0xff9f70ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80008b1c => 0x9b41a783 (* lw a5,-1612(gp) # 800801b4 <ulLoopCounter2>  *)
    | 0x80008b20 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008b24 => 0x00000593 (* li a1,0  *)
    | 0x80008b28 => 0x00178793 (* add a5,a5,1  *)
    | 0x80008b2c => 0x9af1aa23 (* sw a5,-1612(gp) # 800801b4 <ulLoopCounter2>  *)
    | 0x80008b30 => 0x88cfb0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80008b34 => 0x01250463 (* beq a0,s2,80008b3c <prvLowPriorityMutexTask+0x1a8>  *)
    | 0x80008b38 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008b3c => 0x00000513 (* li a0,0  *)
    | 0x80008b40 => 0x9a01a823 (* sw zero,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008b44 => 0xfa9f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008b48 => 0x00050463 (* beqz a0,80008b50 <prvLowPriorityMutexTask+0x1bc>  *)
    | 0x80008b4c => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008b50 => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008b54 => 0x948f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008b58 => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008b5c => 0xec9f70ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80008b60 => 0x01750863 (* beq a0,s7,80008b70 <prvLowPriorityMutexTask+0x1dc>  *)
    | 0x80008b64 => 0x33000593 (* li a1,816  *)
    | 0x80008b68 => 0xe58c0513 (* add a0,s8,-424  *)
    | 0x80008b6c => 0x724090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80008b70 => 0x00000513 (* li a0,0  *)
    | 0x80008b74 => 0xf79f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008b78 => 0x01550463 (* beq a0,s5,80008b80 <prvLowPriorityMutexTask+0x1ec>  *)
    | 0x80008b7c => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008b80 => 0x9a81a503 (* lw a0,-1624(gp) # 800801a8 <xMediumPriorityMutexTask>  *)
    | 0x80008b84 => 0x918f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008b88 => 0x9b01a783 (* lw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008b8c => 0x00078463 (* beqz a5,80008b94 <prvLowPriorityMutexTask+0x200>  *)
    | 0x80008b90 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008b94 => 0x00000593 (* li a1,0  *)
    | 0x80008b98 => 0x000b0513 (* mv a0,s6  *)
    | 0x80008b9c => 0x820fb0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80008ba0 => 0x01250463 (* beq a0,s2,80008ba8 <prvLowPriorityMutexTask+0x214>  *)
    | 0x80008ba4 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008ba8 => 0x00000693 (* li a3,0  *)
    | 0x80008bac => 0x00000613 (* li a2,0  *)
    | 0x80008bb0 => 0x00000593 (* li a1,0  *)
    | 0x80008bb4 => 0x000b0513 (* mv a0,s6  *)
    | 0x80008bb8 => 0x815fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008bbc => 0x01250463 (* beq a0,s2,80008bc4 <prvLowPriorityMutexTask+0x230>  *)
    | 0x80008bc0 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008bc4 => 0x9b01a783 (* lw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008bc8 => 0x00078463 (* beqz a5,80008bd0 <prvLowPriorityMutexTask+0x23c>  *)
    | 0x80008bcc => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008bd0 => 0x00000513 (* li a0,0  *)
    | 0x80008bd4 => 0xf19f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008bd8 => 0x01550463 (* beq a0,s5,80008be0 <prvLowPriorityMutexTask+0x24c>  *)
    | 0x80008bdc => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008be0 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008be4 => 0x00000693 (* li a3,0  *)
    | 0x80008be8 => 0x00000613 (* li a2,0  *)
    | 0x80008bec => 0x00000593 (* li a1,0  *)
    | 0x80008bf0 => 0xfdcfa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008bf4 => 0x01250463 (* beq a0,s2,80008bfc <prvLowPriorityMutexTask+0x268>  *)
    | 0x80008bf8 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008bfc => 0x9b01a783 (* lw a5,-1616(gp) # 800801b0 <ulGuardedVariable>  *)
    | 0x80008c00 => 0x01278463 (* beq a5,s2,80008c08 <prvLowPriorityMutexTask+0x274>  *)
    | 0x80008c04 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008c08 => 0x00000513 (* li a0,0  *)
    | 0x80008c0c => 0xee1f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008c10 => 0x00050463 (* beqz a0,80008c18 <prvLowPriorityMutexTask+0x284>  *)
    | 0x80008c14 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008c18 => 0x9b41a783 (* lw a5,-1612(gp) # 800801b4 <ulLoopCounter2>  *)
    | 0x80008c1c => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008c20 => 0x00178793 (* add a5,a5,1  *)
    | 0x80008c24 => 0x9af1aa23 (* sw a5,-1612(gp) # 800801b4 <ulLoopCounter2>  *)
    | 0x80008c28 => 0xe58fa0ef (* jal 80003280 <xQueueGetMutexHolder>  *)
    | 0x80008c2c => 0x00050463 (* beqz a0,80008c34 <prvLowPriorityMutexTask+0x2a0>  *)
    | 0x80008c30 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008c34 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008c38 => 0x00000593 (* li a1,0  *)
    | 0x80008c3c => 0xf81fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80008c40 => 0x01250463 (* beq a0,s2,80008c48 <prvLowPriorityMutexTask+0x2b4>  *)
    | 0x80008c44 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008c48 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008c4c => 0xe34fa0ef (* jal 80003280 <xQueueGetMutexHolder>  *)
    | 0x80008c50 => 0x00050c93 (* mv s9,a0  *)
    | 0x80008c54 => 0x9ccf90ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x80008c58 => 0x00ac8463 (* beq s9,a0,80008c60 <prvLowPriorityMutexTask+0x2cc>  *)
    | 0x80008c5c => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008c60 => 0x00000513 (* li a0,0  *)
    | 0x80008c64 => 0xe89f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008c68 => 0x00050463 (* beqz a0,80008c70 <prvLowPriorityMutexTask+0x2dc>  *)
    | 0x80008c6c => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008c70 => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008c74 => 0x828f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008c78 => 0x00000513 (* li a0,0  *)
    | 0x80008c7c => 0xe71f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008c80 => 0x01550463 (* beq a0,s5,80008c88 <prvLowPriorityMutexTask+0x2f4>  *)
    | 0x80008c84 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008c88 => 0x9a41a503 (* lw a0,-1628(gp) # 800801a4 <xSecondMediumPriorityMutexTask>  *)
    | 0x80008c8c => 0x810f80ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008c90 => 0x00000513 (* li a0,0  *)
    | 0x80008c94 => 0xe59f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008c98 => 0x01550463 (* beq a0,s5,80008ca0 <prvLowPriorityMutexTask+0x30c>  *)
    | 0x80008c9c => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008ca0 => 0x99c1a503 (* lw a0,-1636(gp) # 8008019c <uxLoopCount.2>  *)
    | 0x80008ca4 => 0x00757513 (* and a0,a0,7  *)
    | 0x80008ca8 => 0xe70f80ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80008cac => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008cb0 => 0x9a81a023 (* sw s0,-1632(gp) # 800801a0 <xBlockWasAborted>  *)
    | 0x80008cb4 => 0x811f80ef (* jal 800014c4 <xTaskAbortDelay>  *)
    | 0x80008cb8 => 0x01250463 (* beq a0,s2,80008cc0 <prvLowPriorityMutexTask+0x32c>  *)
    | 0x80008cbc => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008cc0 => 0x00000513 (* li a0,0  *)
    | 0x80008cc4 => 0xe29f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008cc8 => 0x15751263 (* bne a0,s7,80008e0c <prvLowPriorityMutexTask+0x478>  *)
    | 0x80008ccc => 0x9a41a503 (* lw a0,-1628(gp) # 800801a4 <xSecondMediumPriorityMutexTask>  *)
    | 0x80008cd0 => 0x9a81a023 (* sw s0,-1632(gp) # 800801a0 <xBlockWasAborted>  *)
    | 0x80008cd4 => 0xff0f80ef (* jal 800014c4 <xTaskAbortDelay>  *)
    | 0x80008cd8 => 0x01250463 (* beq a0,s2,80008ce0 <prvLowPriorityMutexTask+0x34c>  *)
    | 0x80008cdc => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008ce0 => 0x00000513 (* li a0,0  *)
    | 0x80008ce4 => 0xe09f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008ce8 => 0x12051863 (* bnez a0,80008e18 <prvLowPriorityMutexTask+0x484>  *)
    | 0x80008cec => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008cf0 => 0xde8fa0ef (* jal 800032d8 <xQueueGetMutexHolderFromISR>  *)
    | 0x80008cf4 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x80008cf8 => 0x928f90ef (* jal 80001e20 <xTaskGetCurrentTaskHandle>  *)
    | 0x80008cfc => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80008d00 => 0x00a78463 (* beq a5,a0,80008d08 <prvLowPriorityMutexTask+0x374>  *)
    | 0x80008d04 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008d08 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008d0c => 0x00000693 (* li a3,0  *)
    | 0x80008d10 => 0x00000613 (* li a2,0  *)
    | 0x80008d14 => 0x00000593 (* li a1,0  *)
    | 0x80008d18 => 0xeb4fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008d1c => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008d20 => 0xdb8fa0ef (* jal 800032d8 <xQueueGetMutexHolderFromISR>  *)
    | 0x80008d24 => 0x00050463 (* beqz a0,80008d2c <prvLowPriorityMutexTask+0x398>  *)
    | 0x80008d28 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008d2c => 0x9bc1a783 (* lw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008d30 => 0x00078863 (* beqz a5,80008d40 <prvLowPriorityMutexTask+0x3ac>  *)
    | 0x80008d34 => 0x23400593 (* li a1,564  *)
    | 0x80008d38 => 0xe58c0513 (* add a0,s8,-424  *)
    | 0x80008d3c => 0x554090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80008d40 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008d44 => 0x00000593 (* li a1,0  *)
    | 0x80008d48 => 0xe75fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80008d4c => 0x01250463 (* beq a0,s2,80008d54 <prvLowPriorityMutexTask+0x3c0>  *)
    | 0x80008d50 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008d54 => 0x00000513 (* li a0,0  *)
    | 0x80008d58 => 0xd95f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008d5c => 0x00050463 (* beqz a0,80008d64 <prvLowPriorityMutexTask+0x3d0>  *)
    | 0x80008d60 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008d64 => 0x9a41a503 (* lw a0,-1628(gp) # 800801a4 <xSecondMediumPriorityMutexTask>  *)
    | 0x80008d68 => 0xf35f70ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008d6c => 0x00000513 (* li a0,0  *)
    | 0x80008d70 => 0xd7df70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008d74 => 0x01750463 (* beq a0,s7,80008d7c <prvLowPriorityMutexTask+0x3e8>  *)
    | 0x80008d78 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008d7c => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008d80 => 0xf1df70ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80008d84 => 0x00000513 (* li a0,0  *)
    | 0x80008d88 => 0xd65f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008d8c => 0x01550463 (* beq a0,s5,80008d94 <prvLowPriorityMutexTask+0x400>  *)
    | 0x80008d90 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008d94 => 0x9ac1a503 (* lw a0,-1620(gp) # 800801ac <xHighPriorityMutexTask>  *)
    | 0x80008d98 => 0x9a81a023 (* sw s0,-1632(gp) # 800801a0 <xBlockWasAborted>  *)
    | 0x80008d9c => 0xf28f80ef (* jal 800014c4 <xTaskAbortDelay>  *)
    | 0x80008da0 => 0x01250463 (* beq a0,s2,80008da8 <prvLowPriorityMutexTask+0x414>  *)
    | 0x80008da4 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008da8 => 0x00000513 (* li a0,0  *)
    | 0x80008dac => 0xd41f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008db0 => 0x07751a63 (* bne a0,s7,80008e24 <prvLowPriorityMutexTask+0x490>  *)
    | 0x80008db4 => 0x9a41a503 (* lw a0,-1628(gp) # 800801a4 <xSecondMediumPriorityMutexTask>  *)
    | 0x80008db8 => 0x9a81a023 (* sw s0,-1632(gp) # 800801a0 <xBlockWasAborted>  *)
    | 0x80008dbc => 0xf08f80ef (* jal 800014c4 <xTaskAbortDelay>  *)
    | 0x80008dc0 => 0x01250463 (* beq a0,s2,80008dc8 <prvLowPriorityMutexTask+0x434>  *)
    | 0x80008dc4 => 0x9a81ae23 (* sw s0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008dc8 => 0x00000513 (* li a0,0  *)
    | 0x80008dcc => 0xd21f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80008dd0 => 0x06051063 (* bnez a0,80008e30 <prvLowPriorityMutexTask+0x49c>  *)
    | 0x80008dd4 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x80008dd8 => 0x00000693 (* li a3,0  *)
    | 0x80008ddc => 0x00000613 (* li a2,0  *)
    | 0x80008de0 => 0x00000593 (* li a1,0  *)
    | 0x80008de4 => 0xde8fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008de8 => 0x9bc1a783 (* lw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008dec => 0x00078863 (* beqz a5,80008dfc <prvLowPriorityMutexTask+0x468>  *)
    | 0x80008df0 => 0x28200593 (* li a1,642  *)
    | 0x80008df4 => 0xe58c0513 (* add a0,s8,-424  *)
    | 0x80008df8 => 0x498090ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80008dfc => 0x99c1a783 (* lw a5,-1636(gp) # 8008019c <uxLoopCount.2>  *)
    | 0x80008e00 => 0x00178793 (* add a5,a5,1  *)
    | 0x80008e04 => 0x98f1ae23 (* sw a5,-1636(gp) # 8008019c <uxLoopCount.2>  *)
    | 0x80008e08 => 0xbfdff06f (* j 80008a04 <prvLowPriorityMutexTask+0x70>  *)
    | 0x80008e0c => 0x00200513 (* li a0,2  *)
    | 0x80008e10 => 0xd08f80ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80008e14 => 0xeadff06f (* j 80008cc0 <prvLowPriorityMutexTask+0x32c>  *)
    | 0x80008e18 => 0x00200513 (* li a0,2  *)
    | 0x80008e1c => 0xcfcf80ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80008e20 => 0xec1ff06f (* j 80008ce0 <prvLowPriorityMutexTask+0x34c>  *)
    | 0x80008e24 => 0x00200513 (* li a0,2  *)
    | 0x80008e28 => 0xcf0f80ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80008e2c => 0xf7dff06f (* j 80008da8 <prvLowPriorityMutexTask+0x414>  *)
    | 0x80008e30 => 0x00200513 (* li a0,2  *)
    | 0x80008e34 => 0xce4f80ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80008e38 => 0xf91ff06f (* j 80008dc8 <prvLowPriorityMutexTask+0x434>  *)
    (* <prvSendFrontAndBackTest> *)
    | 0x80008e3c => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80008e40 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80008e44 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80008e48 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80008e4c => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80008e50 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80008e54 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80008e58 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80008e5c => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80008e60 => 0x00050413 (* mv s0,a0  *)
    | 0x80008e64 => 0x00200993 (* li s3,2  *)
    | 0x80008e68 => 0x9b81a783 (* lw a5,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x80008e6c => 0x00100693 (* li a3,1  *)
    | 0x80008e70 => 0x00000613 (* li a2,0  *)
    | 0x80008e74 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80008e78 => 0x00040513 (* mv a0,s0  *)
    | 0x80008e7c => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80008e80 => 0xd4cfa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008e84 => 0x00040513 (* mv a0,s0  *)
    | 0x80008e88 => 0xbc4fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80008e8c => 0x00100793 (* li a5,1  *)
    | 0x80008e90 => 0x00f50463 (* beq a0,a5,80008e98 <prvSendFrontAndBackTest+0x5c>  *)
    | 0x80008e94 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008e98 => 0x00000613 (* li a2,0  *)
    | 0x80008e9c => 0x00410593 (* add a1,sp,4  *)
    | 0x80008ea0 => 0x00040513 (* mv a0,s0  *)
    | 0x80008ea4 => 0xb25fa0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x80008ea8 => 0x00100793 (* li a5,1  *)
    | 0x80008eac => 0x00f50463 (* beq a0,a5,80008eb4 <prvSendFrontAndBackTest+0x78>  *)
    | 0x80008eb0 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008eb4 => 0x9b81a703 (* lw a4,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x80008eb8 => 0x00412783 (* lw a5,4(sp)  *)
    | 0x80008ebc => 0x00f70663 (* beq a4,a5,80008ec8 <prvSendFrontAndBackTest+0x8c>  *)
    | 0x80008ec0 => 0x00100793 (* li a5,1  *)
    | 0x80008ec4 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008ec8 => 0x00040513 (* mv a0,s0  *)
    | 0x80008ecc => 0xb80fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80008ed0 => 0x00050663 (* beqz a0,80008edc <prvSendFrontAndBackTest+0xa0>  *)
    | 0x80008ed4 => 0x00100793 (* li a5,1  *)
    | 0x80008ed8 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008edc => 0x9b81a783 (* lw a5,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x80008ee0 => 0x00000693 (* li a3,0  *)
    | 0x80008ee4 => 0x00000613 (* li a2,0  *)
    | 0x80008ee8 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80008eec => 0x00040513 (* mv a0,s0  *)
    | 0x80008ef0 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80008ef4 => 0xcd8fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008ef8 => 0x00040513 (* mv a0,s0  *)
    | 0x80008efc => 0xb50fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80008f00 => 0x00100793 (* li a5,1  *)
    | 0x80008f04 => 0x00f50463 (* beq a0,a5,80008f0c <prvSendFrontAndBackTest+0xd0>  *)
    | 0x80008f08 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008f0c => 0x00000613 (* li a2,0  *)
    | 0x80008f10 => 0x00410593 (* add a1,sp,4  *)
    | 0x80008f14 => 0x00040513 (* mv a0,s0  *)
    | 0x80008f18 => 0xab1fa0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x80008f1c => 0x00100793 (* li a5,1  *)
    | 0x80008f20 => 0x00f50463 (* beq a0,a5,80008f28 <prvSendFrontAndBackTest+0xec>  *)
    | 0x80008f24 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008f28 => 0x00040513 (* mv a0,s0  *)
    | 0x80008f2c => 0xb20fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80008f30 => 0x00050663 (* beqz a0,80008f3c <prvSendFrontAndBackTest+0x100>  *)
    | 0x80008f34 => 0x00100793 (* li a5,1  *)
    | 0x80008f38 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008f3c => 0x9b81a703 (* lw a4,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x80008f40 => 0x00412783 (* lw a5,4(sp)  *)
    | 0x80008f44 => 0x00f70663 (* beq a4,a5,80008f50 <prvSendFrontAndBackTest+0x114>  *)
    | 0x80008f48 => 0x00100793 (* li a5,1  *)
    | 0x80008f4c => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008f50 => 0x00200793 (* li a5,2  *)
    | 0x80008f54 => 0x00400a13 (* li s4,4  *)
    | 0x80008f58 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x80008f5c => 0x1cfa7c63 (* bgeu s4,a5,80009134 <prvSendFrontAndBackTest+0x2f8>  *)
    | 0x80008f60 => 0x00040513 (* mv a0,s0  *)
    | 0x80008f64 => 0xae8fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80008f68 => 0x00300793 (* li a5,3  *)
    | 0x80008f6c => 0x00f50663 (* beq a0,a5,80008f78 <prvSendFrontAndBackTest+0x13c>  *)
    | 0x80008f70 => 0x00100793 (* li a5,1  *)
    | 0x80008f74 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008f78 => 0x00100693 (* li a3,1  *)
    | 0x80008f7c => 0x00000613 (* li a2,0  *)
    | 0x80008f80 => 0x00410593 (* add a1,sp,4  *)
    | 0x80008f84 => 0x00100a13 (* li s4,1  *)
    | 0x80008f88 => 0x00040513 (* mv a0,s0  *)
    | 0x80008f8c => 0x01412223 (* sw s4,4(sp)  *)
    | 0x80008f90 => 0xc3cfa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008f94 => 0x00100693 (* li a3,1  *)
    | 0x80008f98 => 0x00000613 (* li a2,0  *)
    | 0x80008f9c => 0x00410593 (* add a1,sp,4  *)
    | 0x80008fa0 => 0x00040513 (* mv a0,s0  *)
    | 0x80008fa4 => 0x00012223 (* sw zero,4(sp)  *)
    | 0x80008fa8 => 0xc24fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008fac => 0x00040513 (* mv a0,s0  *)
    | 0x80008fb0 => 0xa9cfb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80008fb4 => 0x00500793 (* li a5,5  *)
    | 0x80008fb8 => 0x00f50463 (* beq a0,a5,80008fc0 <prvSendFrontAndBackTest+0x184>  *)
    | 0x80008fbc => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008fc0 => 0x00100693 (* li a3,1  *)
    | 0x80008fc4 => 0x00000613 (* li a2,0  *)
    | 0x80008fc8 => 0x00410593 (* add a1,sp,4  *)
    | 0x80008fcc => 0x00040513 (* mv a0,s0  *)
    | 0x80008fd0 => 0xbfcfa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008fd4 => 0x00050663 (* beqz a0,80008fe0 <prvSendFrontAndBackTest+0x1a4>  *)
    | 0x80008fd8 => 0x00100793 (* li a5,1  *)
    | 0x80008fdc => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80008fe0 => 0x00000693 (* li a3,0  *)
    | 0x80008fe4 => 0x00000613 (* li a2,0  *)
    | 0x80008fe8 => 0x00410593 (* add a1,sp,4  *)
    | 0x80008fec => 0x00040513 (* mv a0,s0  *)
    | 0x80008ff0 => 0xbdcfa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80008ff4 => 0x00050663 (* beqz a0,80009000 <prvSendFrontAndBackTest+0x1c4>  *)
    | 0x80008ff8 => 0x00100793 (* li a5,1  *)
    | 0x80008ffc => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80009000 => 0x00000793 (* li a5,0  *)
    | 0x80009004 => 0x00400b13 (* li s6,4  *)
    | 0x80009008 => 0x00100a93 (* li s5,1  *)
    | 0x8000900c => 0x00100a13 (* li s4,1  *)
    | 0x80009010 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x80009014 => 0x14fb7063 (* bgeu s6,a5,80009154 <prvSendFrontAndBackTest+0x318>  *)
    | 0x80009018 => 0x00040513 (* mv a0,s0  *)
    | 0x8000901c => 0xa30fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80009020 => 0x00050663 (* beqz a0,8000902c <prvSendFrontAndBackTest+0x1f0>  *)
    | 0x80009024 => 0x00100793 (* li a5,1  *)
    | 0x80009028 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x8000902c => 0x00a00793 (* li a5,10  *)
    | 0x80009030 => 0x00000693 (* li a3,0  *)
    | 0x80009034 => 0x00000613 (* li a2,0  *)
    | 0x80009038 => 0x00410593 (* add a1,sp,4  *)
    | 0x8000903c => 0x00040513 (* mv a0,s0  *)
    | 0x80009040 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x80009044 => 0xb88fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80009048 => 0x00100793 (* li a5,1  *)
    | 0x8000904c => 0x00f50463 (* beq a0,a5,80009054 <prvSendFrontAndBackTest+0x218>  *)
    | 0x80009050 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80009054 => 0x00b00793 (* li a5,11  *)
    | 0x80009058 => 0x00000693 (* li a3,0  *)
    | 0x8000905c => 0x00000613 (* li a2,0  *)
    | 0x80009060 => 0x00410593 (* add a1,sp,4  *)
    | 0x80009064 => 0x00040513 (* mv a0,s0  *)
    | 0x80009068 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x8000906c => 0xb60fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80009070 => 0x00100793 (* li a5,1  *)
    | 0x80009074 => 0x00f50463 (* beq a0,a5,8000907c <prvSendFrontAndBackTest+0x240>  *)
    | 0x80009078 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x8000907c => 0x00040513 (* mv a0,s0  *)
    | 0x80009080 => 0x9ccfb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80009084 => 0x01350663 (* beq a0,s3,80009090 <prvSendFrontAndBackTest+0x254>  *)
    | 0x80009088 => 0x00100793 (* li a5,1  *)
    | 0x8000908c => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80009090 => 0x00900793 (* li a5,9  *)
    | 0x80009094 => 0x00600a13 (* li s4,6  *)
    | 0x80009098 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x8000909c => 0x10fa6c63 (* bltu s4,a5,800091b4 <prvSendFrontAndBackTest+0x378>  *)
    | 0x800090a0 => 0x00040513 (* mv a0,s0  *)
    | 0x800090a4 => 0x9a8fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x800090a8 => 0x00500793 (* li a5,5  *)
    | 0x800090ac => 0x00f50663 (* beq a0,a5,800090b8 <prvSendFrontAndBackTest+0x27c>  *)
    | 0x800090b0 => 0x00100793 (* li a5,1  *)
    | 0x800090b4 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x800090b8 => 0x00100693 (* li a3,1  *)
    | 0x800090bc => 0x00000613 (* li a2,0  *)
    | 0x800090c0 => 0x00410593 (* add a1,sp,4  *)
    | 0x800090c4 => 0x00040513 (* mv a0,s0  *)
    | 0x800090c8 => 0xb04fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800090cc => 0x00050663 (* beqz a0,800090d8 <prvSendFrontAndBackTest+0x29c>  *)
    | 0x800090d0 => 0x00100793 (* li a5,1  *)
    | 0x800090d4 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x800090d8 => 0x00000693 (* li a3,0  *)
    | 0x800090dc => 0x00000613 (* li a2,0  *)
    | 0x800090e0 => 0x00410593 (* add a1,sp,4  *)
    | 0x800090e4 => 0x00040513 (* mv a0,s0  *)
    | 0x800090e8 => 0xae4fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800090ec => 0x00050663 (* beqz a0,800090f8 <prvSendFrontAndBackTest+0x2bc>  *)
    | 0x800090f0 => 0x00100793 (* li a5,1  *)
    | 0x800090f4 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x800090f8 => 0x00700793 (* li a5,7  *)
    | 0x800090fc => 0x00b00a93 (* li s5,11  *)
    | 0x80009100 => 0x00100b13 (* li s6,1  *)
    | 0x80009104 => 0x00100a13 (* li s4,1  *)
    | 0x80009108 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x8000910c => 0x0cfafa63 (* bgeu s5,a5,800091e0 <prvSendFrontAndBackTest+0x3a4>  *)
    | 0x80009110 => 0x00040513 (* mv a0,s0  *)
    | 0x80009114 => 0x938fb0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x80009118 => 0x00050663 (* beqz a0,80009124 <prvSendFrontAndBackTest+0x2e8>  *)
    | 0x8000911c => 0x00100793 (* li a5,1  *)
    | 0x80009120 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80009124 => 0x9b81a783 (* lw a5,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x80009128 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000912c => 0x9af1ac23 (* sw a5,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x80009130 => 0xd39ff06f (* j 80008e68 <prvSendFrontAndBackTest+0x2c>  *)
    | 0x80009134 => 0x00000693 (* li a3,0  *)
    | 0x80009138 => 0x00000613 (* li a2,0  *)
    | 0x8000913c => 0x00410593 (* add a1,sp,4  *)
    | 0x80009140 => 0x00040513 (* mv a0,s0  *)
    | 0x80009144 => 0xa88fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80009148 => 0x00412783 (* lw a5,4(sp)  *)
    | 0x8000914c => 0x00178793 (* add a5,a5,1  *)
    | 0x80009150 => 0xe09ff06f (* j 80008f58 <prvSendFrontAndBackTest+0x11c>  *)
    | 0x80009154 => 0x00000613 (* li a2,0  *)
    | 0x80009158 => 0x00810593 (* add a1,sp,8  *)
    | 0x8000915c => 0x00040513 (* mv a0,s0  *)
    | 0x80009160 => 0xd49fa0ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x80009164 => 0x01550463 (* beq a0,s5,8000916c <prvSendFrontAndBackTest+0x330>  *)
    | 0x80009168 => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x8000916c => 0x00812783 (* lw a5,8(sp)  *)
    | 0x80009170 => 0x00412703 (* lw a4,4(sp)  *)
    | 0x80009174 => 0x00f70463 (* beq a4,a5,8000917c <prvSendFrontAndBackTest+0x340>  *)
    | 0x80009178 => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x8000917c => 0xfff7c793 (* not a5,a5  *)
    | 0x80009180 => 0x00000613 (* li a2,0  *)
    | 0x80009184 => 0x00810593 (* add a1,sp,8  *)
    | 0x80009188 => 0x00040513 (* mv a0,s0  *)
    | 0x8000918c => 0x00f12423 (* sw a5,8(sp)  *)
    | 0x80009190 => 0x839fa0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x80009194 => 0x01550463 (* beq a0,s5,8000919c <prvSendFrontAndBackTest+0x360>  *)
    | 0x80009198 => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x8000919c => 0x00412783 (* lw a5,4(sp)  *)
    | 0x800091a0 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x800091a4 => 0x00e78463 (* beq a5,a4,800091ac <prvSendFrontAndBackTest+0x370>  *)
    | 0x800091a8 => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x800091ac => 0x00178793 (* add a5,a5,1  *)
    | 0x800091b0 => 0xe61ff06f (* j 80009010 <prvSendFrontAndBackTest+0x1d4>  *)
    | 0x800091b4 => 0x00100693 (* li a3,1  *)
    | 0x800091b8 => 0x00000613 (* li a2,0  *)
    | 0x800091bc => 0x00410593 (* add a1,sp,4  *)
    | 0x800091c0 => 0x00040513 (* mv a0,s0  *)
    | 0x800091c4 => 0xa08fa0ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800091c8 => 0x00100793 (* li a5,1  *)
    | 0x800091cc => 0x00f50463 (* beq a0,a5,800091d4 <prvSendFrontAndBackTest+0x398>  *)
    | 0x800091d0 => 0x9af1ae23 (* sw a5,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x800091d4 => 0x00412783 (* lw a5,4(sp)  *)
    | 0x800091d8 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800091dc => 0xebdff06f (* j 80009098 <prvSendFrontAndBackTest+0x25c>  *)
    | 0x800091e0 => 0x00000613 (* li a2,0  *)
    | 0x800091e4 => 0x00810593 (* add a1,sp,8  *)
    | 0x800091e8 => 0x00040513 (* mv a0,s0  *)
    | 0x800091ec => 0xfdcfa0ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x800091f0 => 0x01650463 (* beq a0,s6,800091f8 <prvSendFrontAndBackTest+0x3bc>  *)
    | 0x800091f4 => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x800091f8 => 0x00412783 (* lw a5,4(sp)  *)
    | 0x800091fc => 0x00812703 (* lw a4,8(sp)  *)
    | 0x80009200 => 0x00e78463 (* beq a5,a4,80009208 <prvSendFrontAndBackTest+0x3cc>  *)
    | 0x80009204 => 0x9b41ae23 (* sw s4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80009208 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000920c => 0xefdff06f (* j 80009108 <prvSendFrontAndBackTest+0x2cc>  *)
    (* <vStartGenericQueueTasks> *)
    | 0x80009210 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80009214 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80009218 => 0x00000613 (* li a2,0  *)
    | 0x8000921c => 0x00050413 (* mv s0,a0  *)
    | 0x80009220 => 0x00400593 (* li a1,4  *)
    | 0x80009224 => 0x00500513 (* li a0,5  *)
    | 0x80009228 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000922c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80009230 => 0xf9df90ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x80009234 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x80009238 => 0x02050a63 (* beqz a0,8000926c <vStartGenericQueueTasks+0x5c>  *)
    | 0x8000923c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80009240 => 0xe8858593 (* add a1,a1,-376 # 80013e88 <_etext+0x2b8>  *)
    | 0x80009244 => 0x8b0fb0ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x80009248 => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x8000924c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80009250 => 0x80009537 (* lui a0,0x80009  *)
    | 0x80009254 => 0x00000793 (* li a5,0  *)
    | 0x80009258 => 0x00040713 (* mv a4,s0  *)
    | 0x8000925c => 0x07800613 (* li a2,120  *)
    | 0x80009260 => 0xe9858593 (* add a1,a1,-360 # 80013e98 <_etext+0x2c8>  *)
    | 0x80009264 => 0xe3c50513 (* add a0,a0,-452 # 80008e3c <prvSendFrontAndBackTest>  *)
    | 0x80009268 => 0xd94f70ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000926c => 0x00100513 (* li a0,1  *)
    | 0x80009270 => 0xc88fa0ef (* jal 800036f8 <xQueueCreateMutex>  *)
    | 0x80009274 => 0x00050413 (* mv s0,a0  *)
    | 0x80009278 => 0x0a050663 (* beqz a0,80009324 <vStartGenericQueueTasks+0x114>  *)
    | 0x8000927c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80009280 => 0xea058593 (* add a1,a1,-352 # 80013ea0 <_etext+0x2d0>  *)
    | 0x80009284 => 0x870fb0ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x80009288 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000928c => 0x80009537 (* lui a0,0x80009  *)
    | 0x80009290 => 0x00040693 (* mv a3,s0  *)
    | 0x80009294 => 0x00000793 (* li a5,0  *)
    | 0x80009298 => 0x00000713 (* li a4,0  *)
    | 0x8000929c => 0x07800613 (* li a2,120  *)
    | 0x800092a0 => 0xeb058593 (* add a1,a1,-336 # 80013eb0 <_etext+0x2e0>  *)
    | 0x800092a4 => 0x99450513 (* add a0,a0,-1644 # 80008994 <prvLowPriorityMutexTask>  *)
    | 0x800092a8 => 0xd54f70ef (* jal 800007fc <xTaskCreate>  *)
    | 0x800092ac => 0x800145b7 (* lui a1,0x80014  *)
    | 0x800092b0 => 0x80009537 (* lui a0,0x80009  *)
    | 0x800092b4 => 0x9a818793 (* add a5,gp,-1624 # 800801a8 <xMediumPriorityMutexTask>  *)
    | 0x800092b8 => 0x00200713 (* li a4,2  *)
    | 0x800092bc => 0x00000693 (* li a3,0  *)
    | 0x800092c0 => 0x07800613 (* li a2,120  *)
    | 0x800092c4 => 0xeb858593 (* add a1,a1,-328 # 80013eb8 <_etext+0x2e8>  *)
    | 0x800092c8 => 0x8f850513 (* add a0,a0,-1800 # 800088f8 <prvMediumPriorityMutexTask>  *)
    | 0x800092cc => 0xd30f70ef (* jal 800007fc <xTaskCreate>  *)
    | 0x800092d0 => 0x800094b7 (* lui s1,0x80009  *)
    | 0x800092d4 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x800092d8 => 0x00040693 (* mv a3,s0  *)
    | 0x800092dc => 0x9ac18793 (* add a5,gp,-1620 # 800801ac <xHighPriorityMutexTask>  *)
    | 0x800092e0 => 0x00300713 (* li a4,3  *)
    | 0x800092e4 => 0x07800613 (* li a2,120  *)
    | 0x800092e8 => 0xec058593 (* add a1,a1,-320 # 80013ec0 <_etext+0x2f0>  *)
    | 0x800092ec => 0x91c48513 (* add a0,s1,-1764 # 8000891c <prvHighPriorityMutexTask>  *)
    | 0x800092f0 => 0xd0cf70ef (* jal 800007fc <xTaskCreate>  *)
    | 0x800092f4 => 0x00040693 (* mv a3,s0  *)
    | 0x800092f8 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800092fc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80009300 => 0x91c48513 (* add a0,s1,-1764  *)
    | 0x80009304 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80009308 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000930c => 0x9a418793 (* add a5,gp,-1628 # 800801a4 <xSecondMediumPriorityMutexTask>  *)
    | 0x80009310 => 0x00200713 (* li a4,2  *)
    | 0x80009314 => 0x07800613 (* li a2,120  *)
    | 0x80009318 => 0xec858593 (* add a1,a1,-312 # 80013ec8 <_etext+0x2f8>  *)
    | 0x8000931c => 0x02010113 (* add sp,sp,32  *)
    | 0x80009320 => 0xcdcf706f (* j 800007fc <xTaskCreate>  *)
    | 0x80009324 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80009328 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000932c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80009330 => 0x02010113 (* add sp,sp,32  *)
    | 0x80009334 => 0x00008067 (* ret  *)
    (* <xAreGenericQueueTasksStillRunning> *)
    | 0x80009338 => 0x9b81a703 (* lw a4,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x8000933c => 0x9981a683 (* lw a3,-1640(gp) # 80080198 <ulLastLoopCounter.1>  *)
    | 0x80009340 => 0x00e69663 (* bne a3,a4,8000934c <xAreGenericQueueTasksStillRunning+0x14>  *)
    | 0x80009344 => 0x00100713 (* li a4,1  *)
    | 0x80009348 => 0x9ae1ae23 (* sw a4,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x8000934c => 0x9b41a503 (* lw a0,-1612(gp) # 800801b4 <ulLoopCounter2>  *)
    | 0x80009350 => 0x9941a803 (* lw a6,-1644(gp) # 80080194 <ulLastLoopCounter2.0>  *)
    | 0x80009354 => 0x00a81663 (* bne a6,a0,80009360 <xAreGenericQueueTasksStillRunning+0x28>  *)
    | 0x80009358 => 0x00100513 (* li a0,1  *)
    | 0x8000935c => 0x9aa1ae23 (* sw a0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x80009360 => 0x9b81a583 (* lw a1,-1608(gp) # 800801b8 <ulLoopCounter>  *)
    | 0x80009364 => 0x9b41a683 (* lw a3,-1612(gp) # 800801b4 <ulLoopCounter2>  *)
    | 0x80009368 => 0x9bc1a503 (* lw a0,-1604(gp) # 800801bc <xErrorDetected>  *)
    | 0x8000936c => 0x98b1ac23 (* sw a1,-1640(gp) # 80080198 <ulLastLoopCounter.1>  *)
    | 0x80009370 => 0x98d1aa23 (* sw a3,-1644(gp) # 80080194 <ulLastLoopCounter2.0>  *)
    | 0x80009374 => 0x00153513 (* seqz a0,a0  *)
    | 0x80009378 => 0x00008067 (* ret  *)
    (* <vInterruptCountingSemaphoreTask> *)
    | 0x8000937c => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80009380 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80009384 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80009388 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000938c => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80009390 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80009394 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80009398 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x8000939c => 0x01812423 (* sw s8,8(sp)  *)
    | 0x800093a0 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x800093a4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x800093a8 => 0x19d00c13 (* li s8,413  *)
    | 0x800093ac => 0x00100b93 (* li s7,1  *)
    | 0x800093b0 => 0x00100a93 (* li s5,1  *)
    | 0x800093b4 => 0x00300b13 (* li s6,3  *)
    | 0x800093b8 => 0x9d81a503 (* lw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x800093bc => 0xe91fa0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x800093c0 => 0x00050463 (* beqz a0,800093c8 <vInterruptCountingSemaphoreTask+0x4c>  *)
    | 0x800093c4 => 0x9f81a623 (* sw s8,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800093c8 => 0x19000513 (* li a0,400  *)
    | 0x800093cc => 0x9d51a623 (* sw s5,-1588(gp) # 800801cc <xOkToGiveCountingSemaphore>  *)
    | 0x800093d0 => 0xf49f70ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800093d4 => 0x9d81a503 (* lw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x800093d8 => 0x9c01a623 (* sw zero,-1588(gp) # 800801cc <xOkToGiveCountingSemaphore>  *)
    | 0x800093dc => 0xe71fa0ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x800093e0 => 0x01650663 (* beq a0,s6,800093ec <vInterruptCountingSemaphoreTask+0x70>  *)
    | 0x800093e4 => 0x1a900793 (* li a5,425  *)
    | 0x800093e8 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800093ec => 0x9d81a503 (* lw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x800093f0 => 0xeadfa0ef (* jal 8000429c <uxQueueSpacesAvailable>  *)
    | 0x800093f4 => 0x00050663 (* beqz a0,80009400 <vInterruptCountingSemaphoreTask+0x84>  *)
    | 0x800093f8 => 0x1ae00793 (* li a5,430  *)
    | 0x800093fc => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009400 => 0x9e41a783 (* lw a5,-1564(gp) # 800801e4 <ulCountingSemaphoreLoops>  *)
    | 0x80009404 => 0x00000a13 (* li s4,0  *)
    | 0x80009408 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000940c => 0x9ef1a223 (* sw a5,-1564(gp) # 800801e4 <ulCountingSemaphoreLoops>  *)
    | 0x80009410 => 0x9d81a503 (* lw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x80009414 => 0x00000593 (* li a1,0  *)
    | 0x80009418 => 0xfa4fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000941c => 0x05750c63 (* beq a0,s7,80009474 <vInterruptCountingSemaphoreTask+0xf8>  *)
    | 0x80009420 => 0x016a0663 (* beq s4,s6,8000942c <vInterruptCountingSemaphoreTask+0xb0>  *)
    | 0x80009424 => 0x1bf00793 (* li a5,447  *)
    | 0x80009428 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x8000942c => 0x00800593 (* li a1,8  *)
    | 0x80009430 => 0x00000513 (* li a0,0  *)
    | 0x80009434 => 0xedcf70ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80009438 => 0x9d81a503 (* lw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x8000943c => 0xfff00593 (* li a1,-1  *)
    | 0x80009440 => 0x9d51a623 (* sw s5,-1588(gp) # 800801cc <xOkToGiveCountingSemaphore>  *)
    | 0x80009444 => 0xf78fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80009448 => 0x9d81a503 (* lw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x8000944c => 0xfff00593 (* li a1,-1  *)
    | 0x80009450 => 0xf6cfa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80009454 => 0x00000593 (* li a1,0  *)
    | 0x80009458 => 0x00000513 (* li a0,0  *)
    | 0x8000945c => 0x9c01a623 (* sw zero,-1588(gp) # 800801cc <xOkToGiveCountingSemaphore>  *)
    | 0x80009460 => 0xeb0f70ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80009464 => 0x9e41a783 (* lw a5,-1564(gp) # 800801e4 <ulCountingSemaphoreLoops>  *)
    | 0x80009468 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000946c => 0x9ef1a223 (* sw a5,-1564(gp) # 800801e4 <ulCountingSemaphoreLoops>  *)
    | 0x80009470 => 0xf49ff06f (* j 800093b8 <vInterruptCountingSemaphoreTask+0x3c>  *)
    | 0x80009474 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x80009478 => 0xf99ff06f (* j 80009410 <vInterruptCountingSemaphoreTask+0x94>  *)
    (* <vInterruptMutexMasterTask> *)
    | 0x8000947c => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80009480 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80009484 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80009488 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000948c => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80009490 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80009494 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x80009498 => 0x01912223 (* sw s9,4(sp)  *)
    | 0x8000949c => 0x02112623 (* sw ra,44(sp)  *)
    | 0x800094a0 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x800094a4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x800094a8 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x800094ac => 0x00300b93 (* li s7,3  *)
    | 0x800094b0 => 0x0bb00c93 (* li s9,187  *)
    | 0x800094b4 => 0x00100493 (* li s1,1  *)
    | 0x800094b8 => 0x00100c13 (* li s8,1  *)
    | 0x800094bc => 0x9e01a503 (* lw a0,-1568(gp) # 800801e0 <xSlaveHandle>  *)
    | 0x800094c0 => 0xd64f70ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800094c4 => 0x01750a63 (* beq a0,s7,800094d8 <vInterruptMutexMasterTask+0x5c>  *)
    | 0x800094c8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800094cc => 0x0b500593 (* li a1,181  *)
    | 0x800094d0 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x800094d4 => 0x5bd080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800094d8 => 0x00000513 (* li a0,0  *)
    | 0x800094dc => 0xe10f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x800094e0 => 0x00050463 (* beqz a0,800094e8 <vInterruptMutexMasterTask+0x6c>  *)
    | 0x800094e4 => 0x9f91a623 (* sw s9,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800094e8 => 0x9d41a503 (* lw a0,-1580(gp) # 800801d4 <xMasterSlaveMutex>  *)
    | 0x800094ec => 0x00000593 (* li a1,0  *)
    | 0x800094f0 => 0xeccfa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x800094f4 => 0x00950663 (* beq a0,s1,80009500 <vInterruptMutexMasterTask+0x84>  *)
    | 0x800094f8 => 0x0c100793 (* li a5,193  *)
    | 0x800094fc => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009500 => 0x9e01a503 (* lw a0,-1568(gp) # 800801e0 <xSlaveHandle>  *)
    | 0x80009504 => 0xf98f70ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80009508 => 0x9e01a503 (* lw a0,-1568(gp) # 800801e0 <xSlaveHandle>  *)
    | 0x8000950c => 0xd18f70ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80009510 => 0x00200793 (* li a5,2  *)
    | 0x80009514 => 0x00f50a63 (* beq a0,a5,80009528 <vInterruptMutexMasterTask+0xac>  *)
    | 0x80009518 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000951c => 0x0cc00593 (* li a1,204  *)
    | 0x80009520 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009524 => 0x56d080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009528 => 0x00000513 (* li a0,0  *)
    | 0x8000952c => 0xdc0f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80009530 => 0x00950663 (* beq a0,s1,8000953c <vInterruptMutexMasterTask+0xc0>  *)
    | 0x80009534 => 0x0d400793 (* li a5,212  *)
    | 0x80009538 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x8000953c => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x80009540 => 0x0c800593 (* li a1,200  *)
    | 0x80009544 => 0x9d81a823 (* sw s8,-1584(gp) # 800801d0 <xOkToGiveMutex>  *)
    | 0x80009548 => 0xe74fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000954c => 0x00950663 (* beq a0,s1,80009558 <vInterruptMutexMasterTask+0xdc>  *)
    | 0x80009550 => 0x0dd00793 (* li a5,221  *)
    | 0x80009554 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009558 => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x8000955c => 0x00000593 (* li a1,0  *)
    | 0x80009560 => 0x9c01a823 (* sw zero,-1584(gp) # 800801d0 <xOkToGiveMutex>  *)
    | 0x80009564 => 0xe58fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80009568 => 0x00050663 (* beqz a0,80009574 <vInterruptMutexMasterTask+0xf8>  *)
    | 0x8000956c => 0x0e600793 (* li a5,230  *)
    | 0x80009570 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009574 => 0x00000513 (* li a0,0  *)
    | 0x80009578 => 0xd74f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000957c => 0x00950663 (* beq a0,s1,80009588 <vInterruptMutexMasterTask+0x10c>  *)
    | 0x80009580 => 0x0ec00793 (* li a5,236  *)
    | 0x80009584 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009588 => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x8000958c => 0x00000693 (* li a3,0  *)
    | 0x80009590 => 0x00000613 (* li a2,0  *)
    | 0x80009594 => 0x00000593 (* li a1,0  *)
    | 0x80009598 => 0xe35f90ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000959c => 0x00950663 (* beq a0,s1,800095a8 <vInterruptMutexMasterTask+0x12c>  *)
    | 0x800095a0 => 0x0f400793 (* li a5,244  *)
    | 0x800095a4 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800095a8 => 0x00000513 (* li a0,0  *)
    | 0x800095ac => 0xd40f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x800095b0 => 0x00950663 (* beq a0,s1,800095bc <vInterruptMutexMasterTask+0x140>  *)
    | 0x800095b4 => 0x0f900793 (* li a5,249  *)
    | 0x800095b8 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800095bc => 0x9d41a503 (* lw a0,-1580(gp) # 800801d4 <xMasterSlaveMutex>  *)
    | 0x800095c0 => 0x00000693 (* li a3,0  *)
    | 0x800095c4 => 0x00000613 (* li a2,0  *)
    | 0x800095c8 => 0x00000593 (* li a1,0  *)
    | 0x800095cc => 0xe01f90ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800095d0 => 0x00950663 (* beq a0,s1,800095dc <vInterruptMutexMasterTask+0x160>  *)
    | 0x800095d4 => 0x10200793 (* li a5,258  *)
    | 0x800095d8 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800095dc => 0x00000513 (* li a0,0  *)
    | 0x800095e0 => 0xd0cf70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x800095e4 => 0x00050663 (* beqz a0,800095f0 <vInterruptMutexMasterTask+0x174>  *)
    | 0x800095e8 => 0x10700793 (* li a5,263  *)
    | 0x800095ec => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800095f0 => 0x9e01a503 (* lw a0,-1568(gp) # 800801e0 <xSlaveHandle>  *)
    | 0x800095f4 => 0xc30f70ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x800095f8 => 0x01750a63 (* beq a0,s7,8000960c <vInterruptMutexMasterTask+0x190>  *)
    | 0x800095fc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80009600 => 0x10c00593 (* li a1,268  *)
    | 0x80009604 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009608 => 0x489080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000960c => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x80009610 => 0x00000593 (* li a1,0  *)
    | 0x80009614 => 0x9d1f90ef (* jal 80002fe4 <xQueueGenericReset>  *)
    | 0x80009618 => 0x9e81a783 (* lw a5,-1560(gp) # 800801e8 <ulMasterLoops>  *)
    | 0x8000961c => 0x06400513 (* li a0,100  *)
    | 0x80009620 => 0x00178793 (* add a5,a5,1  *)
    | 0x80009624 => 0x9ef1a423 (* sw a5,-1560(gp) # 800801e8 <ulMasterLoops>  *)
    | 0x80009628 => 0xcf1f70ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000962c => 0x9e01a503 (* lw a0,-1568(gp) # 800801e0 <xSlaveHandle>  *)
    | 0x80009630 => 0xbf4f70ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80009634 => 0x01750a63 (* beq a0,s7,80009648 <vInterruptMutexMasterTask+0x1cc>  *)
    | 0x80009638 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000963c => 0x11b00593 (* li a1,283  *)
    | 0x80009640 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009644 => 0x44d080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009648 => 0x00000513 (* li a0,0  *)
    | 0x8000964c => 0xca0f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80009650 => 0x00050663 (* beqz a0,8000965c <vInterruptMutexMasterTask+0x1e0>  *)
    | 0x80009654 => 0x12100793 (* li a5,289  *)
    | 0x80009658 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x8000965c => 0x9d41a503 (* lw a0,-1580(gp) # 800801d4 <xMasterSlaveMutex>  *)
    | 0x80009660 => 0x00000593 (* li a1,0  *)
    | 0x80009664 => 0xd58fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x80009668 => 0x00950663 (* beq a0,s1,80009674 <vInterruptMutexMasterTask+0x1f8>  *)
    | 0x8000966c => 0x12700793 (* li a5,295  *)
    | 0x80009670 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009674 => 0x9e01a503 (* lw a0,-1568(gp) # 800801e0 <xSlaveHandle>  *)
    | 0x80009678 => 0xe24f70ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000967c => 0x9e01a503 (* lw a0,-1568(gp) # 800801e0 <xSlaveHandle>  *)
    | 0x80009680 => 0xba4f70ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80009684 => 0x00200793 (* li a5,2  *)
    | 0x80009688 => 0x00f50a63 (* beq a0,a5,8000969c <vInterruptMutexMasterTask+0x220>  *)
    | 0x8000968c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80009690 => 0x13200593 (* li a1,306  *)
    | 0x80009694 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009698 => 0x3f9080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000969c => 0x00000513 (* li a0,0  *)
    | 0x800096a0 => 0xc4cf70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x800096a4 => 0x00950663 (* beq a0,s1,800096b0 <vInterruptMutexMasterTask+0x234>  *)
    | 0x800096a8 => 0x13a00793 (* li a5,314  *)
    | 0x800096ac => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800096b0 => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x800096b4 => 0x0c800593 (* li a1,200  *)
    | 0x800096b8 => 0x9d81a823 (* sw s8,-1584(gp) # 800801d0 <xOkToGiveMutex>  *)
    | 0x800096bc => 0xd00fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x800096c0 => 0x00950663 (* beq a0,s1,800096cc <vInterruptMutexMasterTask+0x250>  *)
    | 0x800096c4 => 0x14300793 (* li a5,323  *)
    | 0x800096c8 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800096cc => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x800096d0 => 0x00000593 (* li a1,0  *)
    | 0x800096d4 => 0x9c01a823 (* sw zero,-1584(gp) # 800801d0 <xOkToGiveMutex>  *)
    | 0x800096d8 => 0xce4fa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x800096dc => 0x00050663 (* beqz a0,800096e8 <vInterruptMutexMasterTask+0x26c>  *)
    | 0x800096e0 => 0x14c00793 (* li a5,332  *)
    | 0x800096e4 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800096e8 => 0x00000513 (* li a0,0  *)
    | 0x800096ec => 0xc00f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x800096f0 => 0x00950663 (* beq a0,s1,800096fc <vInterruptMutexMasterTask+0x280>  *)
    | 0x800096f4 => 0x15200793 (* li a5,338  *)
    | 0x800096f8 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800096fc => 0x9d41a503 (* lw a0,-1580(gp) # 800801d4 <xMasterSlaveMutex>  *)
    | 0x80009700 => 0x00000693 (* li a3,0  *)
    | 0x80009704 => 0x00000613 (* li a2,0  *)
    | 0x80009708 => 0x00000593 (* li a1,0  *)
    | 0x8000970c => 0xcc1f90ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80009710 => 0x00950663 (* beq a0,s1,8000971c <vInterruptMutexMasterTask+0x2a0>  *)
    | 0x80009714 => 0x15a00793 (* li a5,346  *)
    | 0x80009718 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x8000971c => 0x00000513 (* li a0,0  *)
    | 0x80009720 => 0xbccf70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80009724 => 0x00950663 (* beq a0,s1,80009730 <vInterruptMutexMasterTask+0x2b4>  *)
    | 0x80009728 => 0x16200793 (* li a5,354  *)
    | 0x8000972c => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009730 => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x80009734 => 0x00000693 (* li a3,0  *)
    | 0x80009738 => 0x00000613 (* li a2,0  *)
    | 0x8000973c => 0x00000593 (* li a1,0  *)
    | 0x80009740 => 0xc8df90ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x80009744 => 0x00950663 (* beq a0,s1,80009750 <vInterruptMutexMasterTask+0x2d4>  *)
    | 0x80009748 => 0x16900793 (* li a5,361  *)
    | 0x8000974c => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009750 => 0x00000513 (* li a0,0  *)
    | 0x80009754 => 0xb98f70ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80009758 => 0x00050663 (* beqz a0,80009764 <vInterruptMutexMasterTask+0x2e8>  *)
    | 0x8000975c => 0x16e00793 (* li a5,366  *)
    | 0x80009760 => 0x9ef1a623 (* sw a5,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x80009764 => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x80009768 => 0x00000593 (* li a1,0  *)
    | 0x8000976c => 0x879f90ef (* jal 80002fe4 <xQueueGenericReset>  *)
    | 0x80009770 => 0x9e81a783 (* lw a5,-1560(gp) # 800801e8 <ulMasterLoops>  *)
    | 0x80009774 => 0x06400513 (* li a0,100  *)
    | 0x80009778 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000977c => 0x9ef1a423 (* sw a5,-1560(gp) # 800801e8 <ulMasterLoops>  *)
    | 0x80009780 => 0xb99f70ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80009784 => 0xd39ff06f (* j 800094bc <vInterruptMutexMasterTask+0x40>  *)
    (* <vInterruptMutexSlaveTask> *)
    | 0x80009788 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000978c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80009790 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80009794 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80009798 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000979c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x800097a0 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800097a4 => 0x00100913 (* li s2,1  *)
    | 0x800097a8 => 0x18600a13 (* li s4,390  *)
    | 0x800097ac => 0x18b00993 (* li s3,395  *)
    | 0x800097b0 => 0x00000513 (* li a0,0  *)
    | 0x800097b4 => 0xf39f70ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x800097b8 => 0x9d41a503 (* lw a0,-1580(gp) # 800801d4 <xMasterSlaveMutex>  *)
    | 0x800097bc => 0xfff00593 (* li a1,-1  *)
    | 0x800097c0 => 0xbfcfa0ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x800097c4 => 0x01250463 (* beq a0,s2,800097cc <vInterruptMutexSlaveTask+0x44>  *)
    | 0x800097c8 => 0x9f41a623 (* sw s4,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800097cc => 0x9d41a503 (* lw a0,-1580(gp) # 800801d4 <xMasterSlaveMutex>  *)
    | 0x800097d0 => 0x00000693 (* li a3,0  *)
    | 0x800097d4 => 0x00000613 (* li a2,0  *)
    | 0x800097d8 => 0x00000593 (* li a1,0  *)
    | 0x800097dc => 0xbf1f90ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x800097e0 => 0xfd2508e3 (* beq a0,s2,800097b0 <vInterruptMutexSlaveTask+0x28>  *)
    | 0x800097e4 => 0x9f31a623 (* sw s3,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800097e8 => 0xfc9ff06f (* j 800097b0 <vInterruptMutexSlaveTask+0x28>  *)
    (* <vStartInterruptSemaphoreTasks> *)
    | 0x800097ec => 0xff010113 (* add sp,sp,-16  *)
    | 0x800097f0 => 0x00100513 (* li a0,1  *)
    | 0x800097f4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x800097f8 => 0xf01f90ef (* jal 800036f8 <xQueueCreateMutex>  *)
    | 0x800097fc => 0x9ca1ae23 (* sw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x80009800 => 0x00051a63 (* bnez a0,80009814 <vStartInterruptSemaphoreTasks+0x28>  *)
    | 0x80009804 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80009808 => 0x08600593 (* li a1,134  *)
    | 0x8000980c => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009810 => 0x281080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009814 => 0x00000593 (* li a1,0  *)
    | 0x80009818 => 0x00300513 (* li a0,3  *)
    | 0x8000981c => 0xb5df90ef (* jal 80003378 <xQueueCreateCountingSemaphore>  *)
    | 0x80009820 => 0x9ca1ac23 (* sw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x80009824 => 0x00051a63 (* bnez a0,80009838 <vStartInterruptSemaphoreTasks+0x4c>  *)
    | 0x80009828 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000982c => 0x08800593 (* li a1,136  *)
    | 0x80009830 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009834 => 0x25d080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009838 => 0x00100513 (* li a0,1  *)
    | 0x8000983c => 0xebdf90ef (* jal 800036f8 <xQueueCreateMutex>  *)
    | 0x80009840 => 0x9ca1aa23 (* sw a0,-1580(gp) # 800801d4 <xMasterSlaveMutex>  *)
    | 0x80009844 => 0x00051a63 (* bnez a0,80009858 <vStartInterruptSemaphoreTasks+0x6c>  *)
    | 0x80009848 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000984c => 0x08e00593 (* li a1,142  *)
    | 0x80009850 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009854 => 0x23d080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009858 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000985c => 0x80009537 (* lui a0,0x80009  *)
    | 0x80009860 => 0x9e018793 (* add a5,gp,-1568 # 800801e0 <xSlaveHandle>  *)
    | 0x80009864 => 0x00100713 (* li a4,1  *)
    | 0x80009868 => 0x00000693 (* li a3,0  *)
    | 0x8000986c => 0x07800613 (* li a2,120  *)
    | 0x80009870 => 0xf0058593 (* add a1,a1,-256 # 80013f00 <_etext+0x330>  *)
    | 0x80009874 => 0x78850513 (* add a0,a0,1928 # 80009788 <vInterruptMutexSlaveTask>  *)
    | 0x80009878 => 0xf85f60ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000987c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80009880 => 0x80009537 (* lui a0,0x80009  *)
    | 0x80009884 => 0x00000793 (* li a5,0  *)
    | 0x80009888 => 0x00000713 (* li a4,0  *)
    | 0x8000988c => 0x00000693 (* li a3,0  *)
    | 0x80009890 => 0x07800613 (* li a2,120  *)
    | 0x80009894 => 0xf0858593 (* add a1,a1,-248 # 80013f08 <_etext+0x338>  *)
    | 0x80009898 => 0x47c50513 (* add a0,a0,1148 # 8000947c <vInterruptMutexMasterTask>  *)
    | 0x8000989c => 0xf61f60ef (* jal 800007fc <xTaskCreate>  *)
    | 0x800098a0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800098a4 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x800098a8 => 0x80009537 (* lui a0,0x80009  *)
    | 0x800098ac => 0x00000793 (* li a5,0  *)
    | 0x800098b0 => 0x00000713 (* li a4,0  *)
    | 0x800098b4 => 0x00000693 (* li a3,0  *)
    | 0x800098b8 => 0x07800613 (* li a2,120  *)
    | 0x800098bc => 0xf1058593 (* add a1,a1,-240 # 80013f10 <_etext+0x340>  *)
    | 0x800098c0 => 0x37c50513 (* add a0,a0,892 # 8000937c <vInterruptCountingSemaphoreTask>  *)
    | 0x800098c4 => 0x01010113 (* add sp,sp,16  *)
    | 0x800098c8 => 0xf35f606f (* j 800007fc <xTaskCreate>  *)
    (* <vInterruptSemaphorePeriodicTest> *)
    | 0x800098cc => 0xfe010113 (* add sp,sp,-32  *)
    | 0x800098d0 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x800098d4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800098d8 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x800098dc => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x800098e0 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x800098e4 => 0xd98f70ef (* jal 80000e7c <xTaskGetTickCountFromISR>  *)
    | 0x800098e8 => 0x9c81a783 (* lw a5,-1592(gp) # 800801c8 <xLastGiveTime.2>  *)
    | 0x800098ec => 0x06300713 (* li a4,99  *)
    | 0x800098f0 => 0x40f507b3 (* sub a5,a0,a5  *)
    | 0x800098f4 => 0x06f77663 (* bgeu a4,a5,80009960 <vInterruptSemaphorePeriodicTest+0x94>  *)
    | 0x800098f8 => 0x9dc1a783 (* lw a5,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x800098fc => 0x00050413 (* mv s0,a0  *)
    | 0x80009900 => 0x00079a63 (* bnez a5,80009914 <vInterruptSemaphorePeriodicTest+0x48>  *)
    | 0x80009904 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80009908 => 0x1e000593 (* li a1,480  *)
    | 0x8000990c => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009910 => 0x181080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009914 => 0x9d01a783 (* lw a5,-1584(gp) # 800801d0 <xOkToGiveMutex>  *)
    | 0x80009918 => 0x02078863 (* beqz a5,80009948 <vInterruptSemaphorePeriodicTest+0x7c>  *)
    | 0x8000991c => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x80009920 => 0x00000593 (* li a1,0  *)
    | 0x80009924 => 0xf89f90ef (* jal 800038ac <xQueueGiveFromISR>  *)
    | 0x80009928 => 0x9dc1a503 (* lw a0,-1572(gp) # 800801dc <xISRMutex>  *)
    | 0x8000992c => 0x00c10593 (* add a1,sp,12  *)
    | 0x80009930 => 0xf7df90ef (* jal 800038ac <xQueueGiveFromISR>  *)
    | 0x80009934 => 0x00050a63 (* beqz a0,80009948 <vInterruptSemaphorePeriodicTest+0x7c>  *)
    | 0x80009938 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000993c => 0x1e900593 (* li a1,489  *)
    | 0x80009940 => 0xed050513 (* add a0,a0,-304 # 80013ed0 <_etext+0x300>  *)
    | 0x80009944 => 0x14d080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009948 => 0x9cc1a783 (* lw a5,-1588(gp) # 800801cc <xOkToGiveCountingSemaphore>  *)
    | 0x8000994c => 0x00078863 (* beqz a5,8000995c <vInterruptSemaphorePeriodicTest+0x90>  *)
    | 0x80009950 => 0x9d81a503 (* lw a0,-1576(gp) # 800801d8 <xISRCountingSemaphore>  *)
    | 0x80009954 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80009958 => 0xf55f90ef (* jal 800038ac <xQueueGiveFromISR>  *)
    | 0x8000995c => 0x9c81a423 (* sw s0,-1592(gp) # 800801c8 <xLastGiveTime.2>  *)
    | 0x80009960 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80009964 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80009968 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000996c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80009970 => 0x02010113 (* add sp,sp,32  *)
    | 0x80009974 => 0x00008067 (* ret  *)
    (* <xAreInterruptSemaphoreTasksStillRunning> *)
    | 0x80009978 => 0x9e81a603 (* lw a2,-1560(gp) # 800801e8 <ulMasterLoops>  *)
    | 0x8000997c => 0x9c41a583 (* lw a1,-1596(gp) # 800801c4 <ulLastMasterLoopCounter.1>  *)
    | 0x80009980 => 0x00c59663 (* bne a1,a2,8000998c <xAreInterruptSemaphoreTasksStillRunning+0x14>  *)
    | 0x80009984 => 0x20300613 (* li a2,515  *)
    | 0x80009988 => 0x9ec1a623 (* sw a2,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x8000998c => 0x9e81a683 (* lw a3,-1560(gp) # 800801e8 <ulMasterLoops>  *)
    | 0x80009990 => 0x9cd1a223 (* sw a3,-1596(gp) # 800801c4 <ulLastMasterLoopCounter.1>  *)
    | 0x80009994 => 0x9e41a603 (* lw a2,-1564(gp) # 800801e4 <ulCountingSemaphoreLoops>  *)
    | 0x80009998 => 0x9c01a583 (* lw a1,-1600(gp) # 800801c0 <ulLastCountingSemaphoreLoops.0>  *)
    | 0x8000999c => 0x00c59663 (* bne a1,a2,800099a8 <xAreInterruptSemaphoreTasksStillRunning+0x30>  *)
    | 0x800099a0 => 0x20a00613 (* li a2,522  *)
    | 0x800099a4 => 0x9ec1a623 (* sw a2,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800099a8 => 0x9e41a603 (* lw a2,-1564(gp) # 800801e4 <ulCountingSemaphoreLoops>  *)
    | 0x800099ac => 0x00160593 (* add a1,a2,1  *)
    | 0x800099b0 => 0x9eb1a223 (* sw a1,-1564(gp) # 800801e4 <ulCountingSemaphoreLoops>  *)
    | 0x800099b4 => 0x9ec1a503 (* lw a0,-1556(gp) # 800801ec <xErrorDetected>  *)
    | 0x800099b8 => 0x9cc1a023 (* sw a2,-1600(gp) # 800801c0 <ulLastCountingSemaphoreLoops.0>  *)
    | 0x800099bc => 0x00153513 (* seqz a0,a0  *)
    | 0x800099c0 => 0x00008067 (* ret  *)
    (* <prvCoreBTasks> *)
    | 0x800099c4 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x800099c8 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x800099cc => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x800099d0 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x800099d4 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x800099d8 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x800099dc => 0x03412423 (* sw s4,40(sp)  *)
    | 0x800099e0 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x800099e4 => 0x03612023 (* sw s6,32(sp)  *)
    | 0x800099e8 => 0x00100793 (* li a5,1  *)
    | 0x800099ec => 0x00050413 (* mv s0,a0  *)
    | 0x800099f0 => 0x00a7da63 (* bge a5,a0,80009a04 <prvCoreBTasks+0x40>  *)
    | 0x800099f4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800099f8 => 0x0d400593 (* li a1,212  *)
    | 0x800099fc => 0xf1850513 (* add a0,a0,-232 # 80013f18 <_etext+0x348>  *)
    | 0x80009a00 => 0x091080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009a04 => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x80009a08 => 0xa0418493 (* add s1,gp,-1532 # 80080204 <xCoreBMessageBuffers>  *)
    | 0x80009a0c => 0x9f818793 (* add a5,gp,-1544 # 800801f8 <ulCycleCounters>  *)
    | 0x80009a10 => 0x008484b3 (* add s1,s1,s0  *)
    | 0x80009a14 => 0x00000913 (* li s2,0  *)
    | 0x80009a18 => 0x80014a37 (* lui s4,0x80014  *)
    | 0x80009a1c => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x80009a20 => 0x00878433 (* add s0,a5,s0  *)
    | 0x80009a24 => 0x00090613 (* mv a2,s2  *)
    | 0x80009a28 => 0xf50a0593 (* add a1,s4,-176 # 80013f50 <_etext+0x380>  *)
    | 0x80009a2c => 0x00010513 (* mv a0,sp  *)
    | 0x80009a30 => 0x2a4090ef (* jal 80012cd4 <sprintf>  *)
    | 0x80009a34 => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x80009a38 => 0xfff00693 (* li a3,-1  *)
    | 0x80009a3c => 0x00f00613 (* li a2,15  *)
    | 0x80009a40 => 0x01010593 (* add a1,sp,16  *)
    | 0x80009a44 => 0x00012823 (* sw zero,16(sp)  *)
    | 0x80009a48 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x80009a4c => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x80009a50 => 0x00011e23 (* sh zero,28(sp)  *)
    | 0x80009a54 => 0x00010f23 (* sb zero,30(sp)  *)
    | 0x80009a58 => 0xd30fc0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x80009a5c => 0x00050993 (* mv s3,a0  *)
    | 0x80009a60 => 0x00010513 (* mv a0,sp  *)
    | 0x80009a64 => 0x765090ef (* jal 800139c8 <strlen>  *)
    | 0x80009a68 => 0x01350863 (* beq a0,s3,80009a78 <prvCoreBTasks+0xb4>  *)
    | 0x80009a6c => 0x0e700593 (* li a1,231  *)
    | 0x80009a70 => 0xf18a8513 (* add a0,s5,-232 # 80013f18 <_etext+0x348>  *)
    | 0x80009a74 => 0x01d080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009a78 => 0x00010593 (* mv a1,sp  *)
    | 0x80009a7c => 0x01010513 (* add a0,sp,16  *)
    | 0x80009a80 => 0x7d5090ef (* jal 80013a54 <strcmp>  *)
    | 0x80009a84 => 0x00051c63 (* bnez a0,80009a9c <prvCoreBTasks+0xd8>  *)
    | 0x80009a88 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x80009a8c => 0x00178793 (* add a5,a5,1  *)
    | 0x80009a90 => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x80009a94 => 0x00190913 (* add s2,s2,1  *)
    | 0x80009a98 => 0xf8dff06f (* j 80009a24 <prvCoreBTasks+0x60>  *)
    | 0x80009a9c => 0x8001a823 (* sw zero,-2032(gp) # 80080010 <xDemoStatus>  *)
    | 0x80009aa0 => 0xff5ff06f (* j 80009a94 <prvCoreBTasks+0xd0>  *)
    (* <prvCoreATask> *)
    | 0x80009aa4 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80009aa8 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80009aac => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80009ab0 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80009ab4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80009ab8 => 0x00000493 (* li s1,0  *)
    | 0x80009abc => 0x80014937 (* lui s2,0x80014  *)
    | 0x80009ac0 => 0xa0418413 (* add s0,gp,-1532 # 80080204 <xCoreBMessageBuffers>  *)
    | 0x80009ac4 => 0x00048613 (* mv a2,s1  *)
    | 0x80009ac8 => 0xf5090593 (* add a1,s2,-176 # 80013f50 <_etext+0x380>  *)
    | 0x80009acc => 0x00010513 (* mv a0,sp  *)
    | 0x80009ad0 => 0x204090ef (* jal 80012cd4 <sprintf>  *)
    | 0x80009ad4 => 0x00010513 (* mv a0,sp  *)
    | 0x80009ad8 => 0x6f1090ef (* jal 800139c8 <strlen>  *)
    | 0x80009adc => 0x00050613 (* mv a2,a0  *)
    | 0x80009ae0 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x80009ae4 => 0x00000693 (* li a3,0  *)
    | 0x80009ae8 => 0x00010593 (* mv a1,sp  *)
    | 0x80009aec => 0x9c0fc0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x80009af0 => 0x00010513 (* mv a0,sp  *)
    | 0x80009af4 => 0x6d5090ef (* jal 800139c8 <strlen>  *)
    | 0x80009af8 => 0x00050613 (* mv a2,a0  *)
    | 0x80009afc => 0x00442503 (* lw a0,4(s0)  *)
    | 0x80009b00 => 0x00000693 (* li a3,0  *)
    | 0x80009b04 => 0x00010593 (* mv a1,sp  *)
    | 0x80009b08 => 0x9a4fc0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x80009b0c => 0x0fa00513 (* li a0,250  *)
    | 0x80009b10 => 0x809f70ef (* jal 80001318 <vTaskDelay>  *)
    | 0x80009b14 => 0x00148493 (* add s1,s1,1  *)
    | 0x80009b18 => 0xfadff06f (* j 80009ac4 <prvCoreATask+0x20>  *)
    (* <vStartMessageBufferAMPTasks> *)
    | 0x80009b1c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80009b20 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80009b24 => 0x00000713 (* li a4,0  *)
    | 0x80009b28 => 0x00050493 (* mv s1,a0  *)
    | 0x80009b2c => 0x00000693 (* li a3,0  *)
    | 0x80009b30 => 0x00100613 (* li a2,1  *)
    | 0x80009b34 => 0x00000593 (* li a1,0  *)
    | 0x80009b38 => 0x01800513 (* li a0,24  *)
    | 0x80009b3c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80009b40 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80009b44 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80009b48 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80009b4c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80009b50 => 0xdadfb0ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x80009b54 => 0xa0a1a023 (* sw a0,-1536(gp) # 80080200 <xControlMessageBuffer>  *)
    | 0x80009b58 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80009b5c => 0x8000a537 (* lui a0,0x8000a  *)
    | 0x80009b60 => 0x00000793 (* li a5,0  *)
    | 0x80009b64 => 0x00000713 (* li a4,0  *)
    | 0x80009b68 => 0x00000693 (* li a3,0  *)
    | 0x80009b6c => 0x00048613 (* mv a2,s1  *)
    | 0x80009b70 => 0xf5458593 (* add a1,a1,-172 # 80013f54 <_etext+0x384>  *)
    | 0x80009b74 => 0xaa450513 (* add a0,a0,-1372 # 80009aa4 <prvCoreATask>  *)
    | 0x80009b78 => 0xc85f60ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80009b7c => 0xa0418413 (* add s0,gp,-1532 # 80080204 <xCoreBMessageBuffers>  *)
    | 0x80009b80 => 0x00000913 (* li s2,0  *)
    | 0x80009b84 => 0x80014a37 (* lui s4,0x80014  *)
    | 0x80009b88 => 0x8000a9b7 (* lui s3,0x8000a  *)
    | 0x80009b8c => 0x00000713 (* li a4,0  *)
    | 0x80009b90 => 0x00000693 (* li a3,0  *)
    | 0x80009b94 => 0x00100613 (* li a2,1  *)
    | 0x80009b98 => 0x00000593 (* li a1,0  *)
    | 0x80009b9c => 0x03c00513 (* li a0,60  *)
    | 0x80009ba0 => 0xd5dfb0ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x80009ba4 => 0x00a42023 (* sw a0,0(s0)  *)
    | 0x80009ba8 => 0x00051a63 (* bnez a0,80009bbc <vStartMessageBufferAMPTasks+0xa0>  *)
    | 0x80009bac => 0x80014537 (* lui a0,0x80014  *)
    | 0x80009bb0 => 0x09000593 (* li a1,144  *)
    | 0x80009bb4 => 0xf1850513 (* add a0,a0,-232 # 80013f18 <_etext+0x348>  *)
    | 0x80009bb8 => 0x6d8080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009bbc => 0x00000793 (* li a5,0  *)
    | 0x80009bc0 => 0x00100713 (* li a4,1  *)
    | 0x80009bc4 => 0x00090693 (* mv a3,s2  *)
    | 0x80009bc8 => 0x00048613 (* mv a2,s1  *)
    | 0x80009bcc => 0xf60a0593 (* add a1,s4,-160 # 80013f60 <_etext+0x390>  *)
    | 0x80009bd0 => 0x9c498513 (* add a0,s3,-1596 # 800099c4 <prvCoreBTasks>  *)
    | 0x80009bd4 => 0xc29f60ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80009bd8 => 0x00440413 (* add s0,s0,4  *)
    | 0x80009bdc => 0x02090263 (* beqz s2,80009c00 <vStartMessageBufferAMPTasks+0xe4>  *)
    | 0x80009be0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80009be4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80009be8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80009bec => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80009bf0 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80009bf4 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80009bf8 => 0x02010113 (* add sp,sp,32  *)
    | 0x80009bfc => 0x00008067 (* ret  *)
    | 0x80009c00 => 0x00100913 (* li s2,1  *)
    | 0x80009c04 => 0xf89ff06f (* j 80009b8c <vStartMessageBufferAMPTasks+0x70>  *)
    (* <xAreMessageBufferAMPTasksStillRunning> *)
    | 0x80009c08 => 0x9f81a603 (* lw a2,-1544(gp) # 800801f8 <ulCycleCounters>  *)
    | 0x80009c0c => 0x9f01a583 (* lw a1,-1552(gp) # 800801f0 <ulLastCycleCounters.0>  *)
    | 0x80009c10 => 0x9f818713 (* add a4,gp,-1544 # 800801f8 <ulCycleCounters>  *)
    | 0x80009c14 => 0x9f018793 (* add a5,gp,-1552 # 800801f0 <ulLastCycleCounters.0>  *)
    | 0x80009c18 => 0x02c58063 (* beq a1,a2,80009c38 <xAreMessageBufferAMPTasksStillRunning+0x30>  *)
    | 0x80009c1c => 0x00c7a023 (* sw a2,0(a5)  *)
    | 0x80009c20 => 0x00472703 (* lw a4,4(a4)  *)
    | 0x80009c24 => 0x0047a603 (* lw a2,4(a5)  *)
    | 0x80009c28 => 0x00e60c63 (* beq a2,a4,80009c40 <xAreMessageBufferAMPTasksStillRunning+0x38>  *)
    | 0x80009c2c => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x80009c30 => 0x8101a503 (* lw a0,-2032(gp) # 80080010 <xDemoStatus>  *)
    | 0x80009c34 => 0x00008067 (* ret  *)
    | 0x80009c38 => 0x8001a823 (* sw zero,-2032(gp) # 80080010 <xDemoStatus>  *)
    | 0x80009c3c => 0xfe5ff06f (* j 80009c20 <xAreMessageBufferAMPTasksStillRunning+0x18>  *)
    | 0x80009c40 => 0x8001a823 (* sw zero,-2032(gp) # 80080010 <xDemoStatus>  *)
    | 0x80009c44 => 0xfedff06f (* j 80009c30 <xAreMessageBufferAMPTasksStillRunning+0x28>  *)
    (* <prvSpaceAvailableCoherenceTester> *)
    | 0x80009c48 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80009c4c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80009c50 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80009c54 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80009c58 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80009c5c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80009c60 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80009c64 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80009c68 => 0x00000413 (* li s0,0  *)
    | 0x80009c6c => 0x01400a13 (* li s4,20  *)
    | 0x80009c70 => 0x80014937 (* lui s2,0x80014  *)
    | 0x80009c74 => 0x00b00a93 (* li s5,11  *)
    | 0x80009c78 => 0xa381a503 (* lw a0,-1480(gp) # 80080238 <xCoherenceTestMessageBuffer>  *)
    | 0x80009c7c => 0xf99fb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x80009c80 => 0x01450463 (* beq a0,s4,80009c88 <prvSpaceAvailableCoherenceTester+0x40>  *)
    | 0x80009c84 => 0x01551c63 (* bne a0,s5,80009c9c <prvSpaceAvailableCoherenceTester+0x54>  *)
    | 0x80009c88 => 0x00041a63 (* bnez s0,80009c9c <prvSpaceAvailableCoherenceTester+0x54>  *)
    | 0x80009c8c => 0xa341a783 (* lw a5,-1484(gp) # 80080234 <ulSizeCoherencyTestCycles>  *)
    | 0x80009c90 => 0x00178793 (* add a5,a5,1  *)
    | 0x80009c94 => 0xa2f1aa23 (* sw a5,-1484(gp) # 80080234 <ulSizeCoherencyTestCycles>  *)
    | 0x80009c98 => 0xfe1ff06f (* j 80009c78 <prvSpaceAvailableCoherenceTester+0x30>  *)
    | 0x80009c9c => 0x38600593 (* li a1,902  *)
    | 0x80009ca0 => 0xf6c90513 (* add a0,s2,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x80009ca4 => 0x5ec080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009ca8 => 0x00100413 (* li s0,1  *)
    | 0x80009cac => 0xfcdff06f (* j 80009c78 <prvSpaceAvailableCoherenceTester+0x30>  *)
    (* <prvSpaceAvailableCoherenceActor> *)
    | 0x80009cb0 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80009cb4 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80009cb8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80009cbc => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80009cc0 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80009cc4 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80009cc8 => 0x80014937 (* lui s2,0x80014  *)
    | 0x80009ccc => 0x00b00993 (* li s3,11  *)
    | 0x80009cd0 => 0x800144b7 (* lui s1,0x80014  *)
    | 0x80009cd4 => 0xa381a503 (* lw a0,-1480(gp) # 80080238 <xCoherenceTestMessageBuffer>  *)
    | 0x80009cd8 => 0x00000693 (* li a3,0  *)
    | 0x80009cdc => 0x00500613 (* li a2,5  *)
    | 0x80009ce0 => 0xfa490593 (* add a1,s2,-92 # 80013fa4 <_etext+0x3d4>  *)
    | 0x80009ce4 => 0xfc9fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x80009ce8 => 0xa381a503 (* lw a0,-1480(gp) # 80080238 <xCoherenceTestMessageBuffer>  *)
    | 0x80009cec => 0xf29fb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x80009cf0 => 0x01350863 (* beq a0,s3,80009d00 <prvSpaceAvailableCoherenceActor+0x50>  *)
    | 0x80009cf4 => 0x35e00593 (* li a1,862  *)
    | 0x80009cf8 => 0xf6c48513 (* add a0,s1,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x80009cfc => 0x594080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009d00 => 0xa381a503 (* lw a0,-1480(gp) # 80080238 <xCoherenceTestMessageBuffer>  *)
    | 0x80009d04 => 0x00810593 (* add a1,sp,8  *)
    | 0x80009d08 => 0x00000693 (* li a3,0  *)
    | 0x80009d0c => 0x00500613 (* li a2,5  *)
    | 0x80009d10 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80009d14 => 0x00011623 (* sh zero,12(sp)  *)
    | 0x80009d18 => 0xa70fc0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x80009d1c => 0x00810593 (* add a1,sp,8  *)
    | 0x80009d20 => 0xfa490513 (* add a0,s2,-92  *)
    | 0x80009d24 => 0x531090ef (* jal 80013a54 <strcmp>  *)
    | 0x80009d28 => 0xfa0506e3 (* beqz a0,80009cd4 <prvSpaceAvailableCoherenceActor+0x24>  *)
    | 0x80009d2c => 0x36400593 (* li a1,868  *)
    | 0x80009d30 => 0xf6c48513 (* add a0,s1,-148  *)
    | 0x80009d34 => 0x55c080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009d38 => 0xf9dff06f (* j 80009cd4 <prvSpaceAvailableCoherenceActor+0x24>  *)
    (* <prvReceiverTask> *)
    | 0x80009d3c => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80009d40 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x80009d44 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x80009d48 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x80009d4c => 0x03312623 (* sw s3,44(sp)  *)
    | 0x80009d50 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x80009d54 => 0x00050493 (* mv s1,a0  *)
    | 0x80009d58 => 0x00000413 (* li s0,0  *)
    | 0x80009d5c => 0x80014937 (* lui s2,0x80014  *)
    | 0x80009d60 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x80009d64 => 0x00040613 (* mv a2,s0  *)
    | 0x80009d68 => 0xfac90593 (* add a1,s2,-84 # 80013fac <_etext+0x3dc>  *)
    | 0x80009d6c => 0x00810513 (* add a0,sp,8  *)
    | 0x80009d70 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80009d74 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80009d78 => 0x00012823 (* sw zero,16(sp)  *)
    | 0x80009d7c => 0x759080ef (* jal 80012cd4 <sprintf>  *)
    | 0x80009d80 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x80009d84 => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x80009d88 => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x80009d8c => 0x00500693 (* li a3,5  *)
    | 0x80009d90 => 0x00c00613 (* li a2,12  *)
    | 0x80009d94 => 0x01410593 (* add a1,sp,20  *)
    | 0x80009d98 => 0x00048513 (* mv a0,s1  *)
    | 0x80009d9c => 0x9ecfc0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x80009da0 => 0xfe0506e3 (* beqz a0,80009d8c <prvReceiverTask+0x50>  *)
    | 0x80009da4 => 0x01410593 (* add a1,sp,20  *)
    | 0x80009da8 => 0x00810513 (* add a0,sp,8  *)
    | 0x80009dac => 0x4a9090ef (* jal 80013a54 <strcmp>  *)
    | 0x80009db0 => 0x00050863 (* beqz a0,80009dc0 <prvReceiverTask+0x84>  *)
    | 0x80009db4 => 0x2ae00593 (* li a1,686  *)
    | 0x80009db8 => 0xf6c98513 (* add a0,s3,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x80009dbc => 0x4d4080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009dc0 => 0x00140413 (* add s0,s0,1  *)
    | 0x80009dc4 => 0xfa1ff06f (* j 80009d64 <prvReceiverTask+0x28>  *)
    (* <prvNonBlockingSenderTask> *)
    | 0x80009dc8 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80009dcc => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80009dd0 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x80009dd4 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80009dd8 => 0x00000613 (* li a2,0  *)
    | 0x80009ddc => 0xfac98593 (* add a1,s3,-84 # 80013fac <_etext+0x3dc>  *)
    | 0x80009de0 => 0x00050913 (* mv s2,a0  *)
    | 0x80009de4 => 0x00410513 (* add a0,sp,4  *)
    | 0x80009de8 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80009dec => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80009df0 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80009df4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80009df8 => 0x00012223 (* sw zero,4(sp)  *)
    | 0x80009dfc => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80009e00 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80009e04 => 0x6d1080ef (* jal 80012cd4 <sprintf>  *)
    | 0x80009e08 => 0x00410513 (* add a0,sp,4  *)
    | 0x80009e0c => 0x3bd090ef (* jal 800139c8 <strlen>  *)
    | 0x80009e10 => 0x00050413 (* mv s0,a0  *)
    | 0x80009e14 => 0x00000493 (* li s1,0  *)
    | 0x80009e18 => 0x5dd00a13 (* li s4,1501  *)
    | 0x80009e1c => 0x00410513 (* add a0,sp,4  *)
    | 0x80009e20 => 0x3a9090ef (* jal 800139c8 <strlen>  *)
    | 0x80009e24 => 0x00050613 (* mv a2,a0  *)
    | 0x80009e28 => 0x00000693 (* li a3,0  *)
    | 0x80009e2c => 0x00410593 (* add a1,sp,4  *)
    | 0x80009e30 => 0x00090513 (* mv a0,s2  *)
    | 0x80009e34 => 0xe79fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x80009e38 => 0xfe8512e3 (* bne a0,s0,80009e1c <prvNonBlockingSenderTask+0x54>  *)
    | 0x80009e3c => 0x00148493 (* add s1,s1,1  *)
    | 0x80009e40 => 0x01449463 (* bne s1,s4,80009e48 <prvNonBlockingSenderTask+0x80>  *)
    | 0x80009e44 => 0x00000493 (* li s1,0  *)
    | 0x80009e48 => 0x00048613 (* mv a2,s1  *)
    | 0x80009e4c => 0xfac98593 (* add a1,s3,-84  *)
    | 0x80009e50 => 0x00410513 (* add a0,sp,4  *)
    | 0x80009e54 => 0x00012223 (* sw zero,4(sp)  *)
    | 0x80009e58 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80009e5c => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80009e60 => 0x675080ef (* jal 80012cd4 <sprintf>  *)
    | 0x80009e64 => 0x00410513 (* add a0,sp,4  *)
    | 0x80009e68 => 0x361090ef (* jal 800139c8 <strlen>  *)
    | 0x80009e6c => 0x00050413 (* mv s0,a0  *)
    | 0x80009e70 => 0xfadff06f (* j 80009e1c <prvNonBlockingSenderTask+0x54>  *)
    (* <prvNonBlockingReceiverTask> *)
    | 0x80009e74 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80009e78 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x80009e7c => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x80009e80 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x80009e84 => 0x00000613 (* li a2,0  *)
    | 0x80009e88 => 0xfaca8593 (* add a1,s5,-84 # 80013fac <_etext+0x3dc>  *)
    | 0x80009e8c => 0x00050993 (* mv s3,a0  *)
    | 0x80009e90 => 0x00810513 (* add a0,sp,8  *)
    | 0x80009e94 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x80009e98 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x80009e9c => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x80009ea0 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x80009ea4 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x80009ea8 => 0x03612023 (* sw s6,32(sp)  *)
    | 0x80009eac => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80009eb0 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80009eb4 => 0x00012823 (* sw zero,16(sp)  *)
    | 0x80009eb8 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x80009ebc => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x80009ec0 => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x80009ec4 => 0x611080ef (* jal 80012cd4 <sprintf>  *)
    | 0x80009ec8 => 0x00810513 (* add a0,sp,8  *)
    | 0x80009ecc => 0x2fd090ef (* jal 800139c8 <strlen>  *)
    | 0x80009ed0 => 0x00050413 (* mv s0,a0  *)
    | 0x80009ed4 => 0x00000493 (* li s1,0  *)
    | 0x80009ed8 => 0x00000913 (* li s2,0  *)
    | 0x80009edc => 0x5dd00b13 (* li s6,1501  *)
    | 0x80009ee0 => 0x00000693 (* li a3,0  *)
    | 0x80009ee4 => 0x00c00613 (* li a2,12  *)
    | 0x80009ee8 => 0x01410593 (* add a1,sp,20  *)
    | 0x80009eec => 0x00098513 (* mv a0,s3  *)
    | 0x80009ef0 => 0x898fc0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x80009ef4 => 0x06050863 (* beqz a0,80009f64 <prvNonBlockingReceiverTask+0xf0>  *)
    | 0x80009ef8 => 0x06a41a63 (* bne s0,a0,80009f6c <prvNonBlockingReceiverTask+0xf8>  *)
    | 0x80009efc => 0x00810593 (* add a1,sp,8  *)
    | 0x80009f00 => 0x01410513 (* add a0,sp,20  *)
    | 0x80009f04 => 0x351090ef (* jal 80013a54 <strcmp>  *)
    | 0x80009f08 => 0x00050463 (* beqz a0,80009f10 <prvNonBlockingReceiverTask+0x9c>  *)
    | 0x80009f0c => 0x00100913 (* li s2,1  *)
    | 0x80009f10 => 0x00148493 (* add s1,s1,1  *)
    | 0x80009f14 => 0x01649463 (* bne s1,s6,80009f1c <prvNonBlockingReceiverTask+0xa8>  *)
    | 0x80009f18 => 0x00000493 (* li s1,0  *)
    | 0x80009f1c => 0x00048613 (* mv a2,s1  *)
    | 0x80009f20 => 0xfaca8593 (* add a1,s5,-84  *)
    | 0x80009f24 => 0x00810513 (* add a0,sp,8  *)
    | 0x80009f28 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x80009f2c => 0x00012623 (* sw zero,12(sp)  *)
    | 0x80009f30 => 0x00012823 (* sw zero,16(sp)  *)
    | 0x80009f34 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x80009f38 => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x80009f3c => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x80009f40 => 0x595080ef (* jal 80012cd4 <sprintf>  *)
    | 0x80009f44 => 0x00810513 (* add a0,sp,8  *)
    | 0x80009f48 => 0x281090ef (* jal 800139c8 <strlen>  *)
    | 0x80009f4c => 0x00050413 (* mv s0,a0  *)
    | 0x80009f50 => 0xf80918e3 (* bnez s2,80009ee0 <prvNonBlockingReceiverTask+0x6c>  *)
    | 0x80009f54 => 0xa281a783 (* lw a5,-1496(gp) # 80080228 <ulNonBlockingRxCounter>  *)
    | 0x80009f58 => 0x00178793 (* add a5,a5,1  *)
    | 0x80009f5c => 0xa2f1a423 (* sw a5,-1496(gp) # 80080228 <ulNonBlockingRxCounter>  *)
    | 0x80009f60 => 0xf81ff06f (* j 80009ee0 <prvNonBlockingReceiverTask+0x6c>  *)
    | 0x80009f64 => 0xf6041ee3 (* bnez s0,80009ee0 <prvNonBlockingReceiverTask+0x6c>  *)
    | 0x80009f68 => 0xf95ff06f (* j 80009efc <prvNonBlockingReceiverTask+0x88>  *)
    | 0x80009f6c => 0x00100913 (* li s2,1  *)
    | 0x80009f70 => 0xf71ff06f (* j 80009ee0 <prvNonBlockingReceiverTask+0x6c>  *)
    (* <prvEchoClient> *)
    | 0x80009f74 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x80009f78 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80009f7c => 0x00050b13 (* mv s6,a0  *)
    | 0x80009f80 => 0x00000513 (* li a0,0  *)
    | 0x80009f84 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80009f88 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x80009f8c => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x80009f90 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x80009f94 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x80009f98 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x80009f9c => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x80009fa0 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80009fa4 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x80009fa8 => 0xb45f60ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80009fac => 0x00050a93 (* mv s5,a0  *)
    | 0x80009fb0 => 0x03200513 (* li a0,50  *)
    | 0x80009fb4 => 0xb64fc0ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80009fb8 => 0x00050913 (* mv s2,a0  *)
    | 0x80009fbc => 0x03200513 (* li a0,50  *)
    | 0x80009fc0 => 0xb58fc0ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x80009fc4 => 0x00050993 (* mv s3,a0  *)
    | 0x80009fc8 => 0x00091a63 (* bnez s2,80009fdc <prvEchoClient+0x68>  *)
    | 0x80009fcc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80009fd0 => 0x2ce00593 (* li a1,718  *)
    | 0x80009fd4 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x80009fd8 => 0x2b8080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009fdc => 0x00099a63 (* bnez s3,80009ff0 <prvEchoClient+0x7c>  *)
    | 0x80009fe0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80009fe4 => 0x2cf00593 (* li a1,719  *)
    | 0x80009fe8 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x80009fec => 0x2a4080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80009ff0 => 0x002a9a93 (* sll s5,s5,0x2  *)
    | 0x80009ff4 => 0xa2c18a13 (* add s4,gp,-1492 # 8008022c <ulEchoLoopCounters>  *)
    | 0x80009ff8 => 0x02000493 (* li s1,32  *)
    | 0x80009ffc => 0x00000413 (* li s0,0  *)
    | 0x8000a000 => 0x02f00b93 (* li s7,47  *)
    | 0x8000a004 => 0x015a0a33 (* add s4,s4,s5  *)
    | 0x8000a008 => 0x80014c37 (* lui s8,0x80014  *)
    | 0x8000a00c => 0x00140a93 (* add s5,s0,1  *)
    | 0x8000a010 => 0x017a9a63 (* bne s5,s7,8000a024 <prvEchoClient+0xb0>  *)
    | 0x8000a014 => 0x000a2783 (* lw a5,0(s4)  *)
    | 0x8000a018 => 0x00100a93 (* li s5,1  *)
    | 0x8000a01c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000a020 => 0x00fa2023 (* sw a5,0(s4)  *)
    | 0x8000a024 => 0x03200613 (* li a2,50  *)
    | 0x8000a028 => 0x00000593 (* li a1,0  *)
    | 0x8000a02c => 0x00090513 (* mv a0,s2  *)
    | 0x8000a030 => 0x718090ef (* jal 80013748 <memset>  *)
    | 0x8000a034 => 0x00000413 (* li s0,0  *)
    | 0x8000a038 => 0x07f00793 (* li a5,127  *)
    | 0x8000a03c => 0x00890733 (* add a4,s2,s0  *)
    | 0x8000a040 => 0x00970023 (* sb s1,0(a4)  *)
    | 0x8000a044 => 0x00148493 (* add s1,s1,1  *)
    | 0x8000a048 => 0x0ff4f493 (* zext.b s1,s1  *)
    | 0x8000a04c => 0x00f49463 (* bne s1,a5,8000a054 <prvEchoClient+0xe0>  *)
    | 0x8000a050 => 0x02000493 (* li s1,32  *)
    | 0x8000a054 => 0x00140413 (* add s0,s0,1  *)
    | 0x8000a058 => 0xfe8a92e3 (* bne s5,s0,8000a03c <prvEchoClient+0xc8>  *)
    | 0x8000a05c => 0x000b2503 (* lw a0,0(s6)  *)
    | 0x8000a060 => 0x03200693 (* li a3,50  *)
    | 0x8000a064 => 0x00040613 (* mv a2,s0  *)
    | 0x8000a068 => 0x00090593 (* mv a1,s2  *)
    | 0x8000a06c => 0xc41fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a070 => 0xfe0506e3 (* beqz a0,8000a05c <prvEchoClient+0xe8>  *)
    | 0x8000a074 => 0x03200613 (* li a2,50  *)
    | 0x8000a078 => 0x00000593 (* li a1,0  *)
    | 0x8000a07c => 0x00098513 (* mv a0,s3  *)
    | 0x8000a080 => 0x6c8090ef (* jal 80013748 <memset>  *)
    | 0x8000a084 => 0x004b2503 (* lw a0,4(s6)  *)
    | 0x8000a088 => 0x00098593 (* mv a1,s3  *)
    | 0x8000a08c => 0xfff00693 (* li a3,-1  *)
    | 0x8000a090 => 0x00040613 (* mv a2,s0  *)
    | 0x8000a094 => 0xef5fb0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000a098 => 0x00098593 (* mv a1,s3  *)
    | 0x8000a09c => 0x00090513 (* mv a0,s2  *)
    | 0x8000a0a0 => 0x1b5090ef (* jal 80013a54 <strcmp>  *)
    | 0x8000a0a4 => 0xf60504e3 (* beqz a0,8000a00c <prvEchoClient+0x98>  *)
    | 0x8000a0a8 => 0x30300593 (* li a1,771  *)
    | 0x8000a0ac => 0xf6cc0513 (* add a0,s8,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a0b0 => 0x1e0080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a0b4 => 0xf59ff06f (* j 8000a00c <prvEchoClient+0x98>  *)
    (* <prvSingleTaskTests> *)
    | 0x8000a0b8 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000a0bc => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000a0c0 => 0x00050413 (* mv s0,a0  *)
    | 0x8000a0c4 => 0x03200513 (* li a0,50  *)
    | 0x8000a0c8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000a0cc => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000a0d0 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000a0d4 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000a0d8 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000a0dc => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000a0e0 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000a0e4 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x8000a0e8 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x8000a0ec => 0xa2cfc0ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000a0f0 => 0x00050493 (* mv s1,a0  *)
    | 0x8000a0f4 => 0x00051a63 (* bnez a0,8000a108 <prvSingleTaskTests+0x50>  *)
    | 0x8000a0f8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a0fc => 0x0cc00593 (* li a1,204  *)
    | 0x8000a100 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a104 => 0x18c080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a108 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a10c => 0xb09fb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000a110 => 0x03200793 (* li a5,50  *)
    | 0x8000a114 => 0x01148993 (* add s3,s1,17  *)
    | 0x8000a118 => 0x00050913 (* mv s2,a0  *)
    | 0x8000a11c => 0x00f50a63 (* beq a0,a5,8000a130 <prvSingleTaskTests+0x78>  *)
    | 0x8000a120 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a124 => 0x0d400593 (* li a1,212  *)
    | 0x8000a128 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a12c => 0x164080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a130 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a134 => 0x948fc0ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000a138 => 0x00100793 (* li a5,1  *)
    | 0x8000a13c => 0x00f50a63 (* beq a0,a5,8000a150 <prvSingleTaskTests+0x98>  *)
    | 0x8000a140 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a144 => 0x0d500593 (* li a1,213  *)
    | 0x8000a148 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a14c => 0x144080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a150 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a154 => 0xfc5fb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a158 => 0x00050a63 (* beqz a0,8000a16c <prvSingleTaskTests+0xb4>  *)
    | 0x8000a15c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a160 => 0x0d700593 (* li a1,215  *)
    | 0x8000a164 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a168 => 0x128080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a16c => 0x00000693 (* li a3,0  *)
    | 0x8000a170 => 0x03600613 (* li a2,54  *)
    | 0x8000a174 => 0x00048593 (* mv a1,s1  *)
    | 0x8000a178 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a17c => 0xd25fb0ef (* jal 80005ea0 <xStreamBufferSendFromISR>  *)
    | 0x8000a180 => 0x00050a63 (* beqz a0,8000a194 <prvSingleTaskTests+0xdc>  *)
    | 0x8000a184 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a188 => 0x0df00593 (* li a1,223  *)
    | 0x8000a18c => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a190 => 0x100080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a194 => 0xfff00693 (* li a3,-1  *)
    | 0x8000a198 => 0x03600613 (* li a2,54  *)
    | 0x8000a19c => 0x00048593 (* mv a1,s1  *)
    | 0x8000a1a0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a1a4 => 0xb09fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a1a8 => 0x00050a63 (* beqz a0,8000a1bc <prvSingleTaskTests+0x104>  *)
    | 0x8000a1ac => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a1b0 => 0x0e300593 (* li a1,227  *)
    | 0x8000a1b4 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a1b8 => 0x0d8080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a1bc => 0x00090b93 (* mv s7,s2  *)
    | 0x8000a1c0 => 0x03000a13 (* li s4,48  *)
    | 0x8000a1c4 => 0x80014b37 (* lui s6,0x80014  *)
    | 0x8000a1c8 => 0x80080ab7 (* lui s5,0x80080  *)
    | 0x8000a1cc => 0x03500c13 (* li s8,53  *)
    | 0x8000a1d0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a1d4 => 0x8ecfc0ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000a1d8 => 0x00050863 (* beqz a0,8000a1e8 <prvSingleTaskTests+0x130>  *)
    | 0x8000a1dc => 0x0ef00593 (* li a1,239  *)
    | 0x8000a1e0 => 0xf6cb0513 (* add a0,s6,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a1e4 => 0x0ac080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a1e8 => 0x00600613 (* li a2,6  *)
    | 0x8000a1ec => 0x000a0593 (* mv a1,s4  *)
    | 0x8000a1f0 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a1f4 => 0x554090ef (* jal 80013748 <memset>  *)
    | 0x8000a1f8 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000a1fc => 0x004aa783 (* lw a5,4(s5) # 80080004 <xCriticalNesting>  *)
    | 0x8000a200 => 0x00000693 (* li a3,0  *)
    | 0x8000a204 => 0x00600613 (* li a2,6  *)
    | 0x8000a208 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000a20c => 0x00048593 (* mv a1,s1  *)
    | 0x8000a210 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a214 => 0x00faa223 (* sw a5,4(s5)  *)
    | 0x8000a218 => 0xc89fb0ef (* jal 80005ea0 <xStreamBufferSendFromISR>  *)
    | 0x8000a21c => 0x004aa783 (* lw a5,4(s5)  *)
    | 0x8000a220 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x8000a224 => 0x00faa223 (* sw a5,4(s5)  *)
    | 0x8000a228 => 0x00079463 (* bnez a5,8000a230 <prvSingleTaskTests+0x178>  *)
    | 0x8000a22c => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000a230 => 0x00600793 (* li a5,6  *)
    | 0x8000a234 => 0x00f50863 (* beq a0,a5,8000a244 <prvSingleTaskTests+0x18c>  *)
    | 0x8000a238 => 0x0fe00593 (* li a1,254  *)
    | 0x8000a23c => 0xf6cb0513 (* add a0,s6,-148  *)
    | 0x8000a240 => 0x050080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a244 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a248 => 0xff6b8b93 (* add s7,s7,-10  *)
    | 0x8000a24c => 0x9c9fb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000a250 => 0x00ab8863 (* beq s7,a0,8000a260 <prvSingleTaskTests+0x1a8>  *)
    | 0x8000a254 => 0x10600593 (* li a1,262  *)
    | 0x8000a258 => 0xf6cb0513 (* add a0,s6,-148  *)
    | 0x8000a25c => 0x034080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a260 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a264 => 0xeb5fb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a268 => 0x00600793 (* li a5,6  *)
    | 0x8000a26c => 0x00f50863 (* beq a0,a5,8000a27c <prvSingleTaskTests+0x1c4>  *)
    | 0x8000a270 => 0x10b00593 (* li a1,267  *)
    | 0x8000a274 => 0xf6cb0513 (* add a0,s6,-148  *)
    | 0x8000a278 => 0x018080ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a27c => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000a280 => 0xf58a18e3 (* bne s4,s8,8000a1d0 <prvSingleTaskTests+0x118>  *)
    | 0x8000a284 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a288 => 0x838fc0ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000a28c => 0x00100793 (* li a5,1  *)
    | 0x8000a290 => 0xfce90913 (* add s2,s2,-50  *)
    | 0x8000a294 => 0x00f50a63 (* beq a0,a5,8000a2a8 <prvSingleTaskTests+0x1f0>  *)
    | 0x8000a298 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a29c => 0x11100593 (* li a1,273  *)
    | 0x8000a2a0 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a2a4 => 0x7ed070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a2a8 => 0x00000693 (* li a3,0  *)
    | 0x8000a2ac => 0x00100613 (* li a2,1  *)
    | 0x8000a2b0 => 0x00048593 (* mv a1,s1  *)
    | 0x8000a2b4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a2b8 => 0x9f5fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a2bc => 0x00050a63 (* beqz a0,8000a2d0 <prvSingleTaskTests+0x218>  *)
    | 0x8000a2c0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a2c4 => 0x11300593 (* li a1,275  *)
    | 0x8000a2c8 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a2cc => 0x7c5070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a2d0 => 0x00000513 (* li a0,0  *)
    | 0x8000a2d4 => 0x819f60ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000a2d8 => 0x00800593 (* li a1,8  *)
    | 0x8000a2dc => 0x00050b13 (* mv s6,a0  *)
    | 0x8000a2e0 => 0x00000513 (* li a0,0  *)
    | 0x8000a2e4 => 0x82df60ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000a2e8 => 0xb8df60ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000a2ec => 0x01900693 (* li a3,25  *)
    | 0x8000a2f0 => 0x00100613 (* li a2,1  *)
    | 0x8000a2f4 => 0x00048593 (* mv a1,s1  *)
    | 0x8000a2f8 => 0x00050c13 (* mv s8,a0  *)
    | 0x8000a2fc => 0x00040513 (* mv a0,s0  *)
    | 0x8000a300 => 0x9adfb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a304 => 0x00050b93 (* mv s7,a0  *)
    | 0x8000a308 => 0xb6df60ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000a30c => 0x00050a13 (* mv s4,a0  *)
    | 0x8000a310 => 0x000b0593 (* mv a1,s6  *)
    | 0x8000a314 => 0x00000513 (* li a0,0  *)
    | 0x8000a318 => 0xff8f60ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000a31c => 0x418a07b3 (* sub a5,s4,s8  *)
    | 0x8000a320 => 0x01800713 (* li a4,24  *)
    | 0x8000a324 => 0x11f00593 (* li a1,287  *)
    | 0x8000a328 => 0x00f77863 (* bgeu a4,a5,8000a338 <prvSingleTaskTests+0x280>  *)
    | 0x8000a32c => 0x01b00713 (* li a4,27  *)
    | 0x8000a330 => 0x00f77a63 (* bgeu a4,a5,8000a344 <prvSingleTaskTests+0x28c>  *)
    | 0x8000a334 => 0x12000593 (* li a1,288  *)
    | 0x8000a338 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a33c => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a340 => 0x751070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a344 => 0x000b8a63 (* beqz s7,8000a358 <prvSingleTaskTests+0x2a0>  *)
    | 0x8000a348 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a34c => 0x12100593 (* li a1,289  *)
    | 0x8000a350 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a354 => 0x73d070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a358 => 0x03000b93 (* li s7,48  *)
    | 0x8000a35c => 0x80014a37 (* lui s4,0x80014  *)
    | 0x8000a360 => 0x03500c13 (* li s8,53  *)
    | 0x8000a364 => 0x00600613 (* li a2,6  *)
    | 0x8000a368 => 0x000b8593 (* mv a1,s7  *)
    | 0x8000a36c => 0x00048513 (* mv a0,s1  *)
    | 0x8000a370 => 0x3d8090ef (* jal 80013748 <memset>  *)
    | 0x8000a374 => 0x00000693 (* li a3,0  *)
    | 0x8000a378 => 0x00500613 (* li a2,5  *)
    | 0x8000a37c => 0x00098593 (* mv a1,s3  *)
    | 0x8000a380 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a384 => 0xc05fb0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000a388 => 0x00050863 (* beqz a0,8000a398 <prvSingleTaskTests+0x2e0>  *)
    | 0x8000a38c => 0x13100593 (* li a1,305  *)
    | 0x8000a390 => 0xf6ca0513 (* add a0,s4,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a394 => 0x6fd070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a398 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a39c => 0xd7dfb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a3a0 => 0x00600793 (* li a5,6  *)
    | 0x8000a3a4 => 0x00f50863 (* beq a0,a5,8000a3b4 <prvSingleTaskTests+0x2fc>  *)
    | 0x8000a3a8 => 0x13600593 (* li a1,310  *)
    | 0x8000a3ac => 0xf6ca0513 (* add a0,s4,-148  *)
    | 0x8000a3b0 => 0x6e1070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a3b4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000a3b8 => 0x004aa783 (* lw a5,4(s5)  *)
    | 0x8000a3bc => 0x00000693 (* li a3,0  *)
    | 0x8000a3c0 => 0x00600613 (* li a2,6  *)
    | 0x8000a3c4 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000a3c8 => 0x00098593 (* mv a1,s3  *)
    | 0x8000a3cc => 0x00040513 (* mv a0,s0  *)
    | 0x8000a3d0 => 0x00faa223 (* sw a5,4(s5)  *)
    | 0x8000a3d4 => 0xdcdfb0ef (* jal 800061a0 <xStreamBufferReceiveFromISR>  *)
    | 0x8000a3d8 => 0x004aa783 (* lw a5,4(s5)  *)
    | 0x8000a3dc => 0xfff78793 (* add a5,a5,-1  *)
    | 0x8000a3e0 => 0x00faa223 (* sw a5,4(s5)  *)
    | 0x8000a3e4 => 0x00079463 (* bnez a5,8000a3ec <prvSingleTaskTests+0x334>  *)
    | 0x8000a3e8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000a3ec => 0x00600793 (* li a5,6  *)
    | 0x8000a3f0 => 0x00f50863 (* beq a0,a5,8000a400 <prvSingleTaskTests+0x348>  *)
    | 0x8000a3f4 => 0x14300593 (* li a1,323  *)
    | 0x8000a3f8 => 0xf6ca0513 (* add a0,s4,-148  *)
    | 0x8000a3fc => 0x695070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a400 => 0x00600613 (* li a2,6  *)
    | 0x8000a404 => 0x00098593 (* mv a1,s3  *)
    | 0x8000a408 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a40c => 0x2c0090ef (* jal 800136cc <memcmp>  *)
    | 0x8000a410 => 0x00050863 (* beqz a0,8000a420 <prvSingleTaskTests+0x368>  *)
    | 0x8000a414 => 0x14700593 (* li a1,327  *)
    | 0x8000a418 => 0xf6ca0513 (* add a0,s4,-148  *)
    | 0x8000a41c => 0x675070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a420 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a424 => 0x00a90913 (* add s2,s2,10  *)
    | 0x8000a428 => 0xfecfb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000a42c => 0x00a90863 (* beq s2,a0,8000a43c <prvSingleTaskTests+0x384>  *)
    | 0x8000a430 => 0x14e00593 (* li a1,334  *)
    | 0x8000a434 => 0xf6ca0513 (* add a0,s4,-148  *)
    | 0x8000a438 => 0x659070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a43c => 0x001b8b93 (* add s7,s7,1  *)
    | 0x8000a440 => 0xf38b92e3 (* bne s7,s8,8000a364 <prvSingleTaskTests+0x2ac>  *)
    | 0x8000a444 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a448 => 0xe35fb0ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000a44c => 0x00100793 (* li a5,1  *)
    | 0x8000a450 => 0x00f50a63 (* beq a0,a5,8000a464 <prvSingleTaskTests+0x3ac>  *)
    | 0x8000a454 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a458 => 0x15300593 (* li a1,339  *)
    | 0x8000a45c => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a460 => 0x631070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a464 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a468 => 0xfacfb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000a46c => 0x03200793 (* li a5,50  *)
    | 0x8000a470 => 0x00f50a63 (* beq a0,a5,8000a484 <prvSingleTaskTests+0x3cc>  *)
    | 0x8000a474 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a478 => 0x15500593 (* li a1,341  *)
    | 0x8000a47c => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a480 => 0x611070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a484 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a488 => 0xc91fb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a48c => 0x00050a63 (* beqz a0,8000a4a0 <prvSingleTaskTests+0x3e8>  *)
    | 0x8000a490 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a494 => 0x15800593 (* li a1,344  *)
    | 0x8000a498 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a49c => 0x5f5070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a4a0 => 0x00800593 (* li a1,8  *)
    | 0x8000a4a4 => 0x00000513 (* li a0,0  *)
    | 0x8000a4a8 => 0xe68f60ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000a4ac => 0x9c9f60ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000a4b0 => 0x01900693 (* li a3,25  *)
    | 0x8000a4b4 => 0x00600613 (* li a2,6  *)
    | 0x8000a4b8 => 0x00098593 (* mv a1,s3  *)
    | 0x8000a4bc => 0x00050a93 (* mv s5,a0  *)
    | 0x8000a4c0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a4c4 => 0xac5fb0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000a4c8 => 0x00050a13 (* mv s4,a0  *)
    | 0x8000a4cc => 0x9a9f60ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000a4d0 => 0x00050913 (* mv s2,a0  *)
    | 0x8000a4d4 => 0x000b0593 (* mv a1,s6  *)
    | 0x8000a4d8 => 0x00000513 (* li a0,0  *)
    | 0x8000a4dc => 0xe34f60ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000a4e0 => 0x415907b3 (* sub a5,s2,s5  *)
    | 0x8000a4e4 => 0x01800713 (* li a4,24  *)
    | 0x8000a4e8 => 0x16400593 (* li a1,356  *)
    | 0x8000a4ec => 0x00f77863 (* bgeu a4,a5,8000a4fc <prvSingleTaskTests+0x444>  *)
    | 0x8000a4f0 => 0x01b00713 (* li a4,27  *)
    | 0x8000a4f4 => 0x00f77a63 (* bgeu a4,a5,8000a508 <prvSingleTaskTests+0x450>  *)
    | 0x8000a4f8 => 0x16500593 (* li a1,357  *)
    | 0x8000a4fc => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a500 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a504 => 0x58d070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a508 => 0x000a0a63 (* beqz s4,8000a51c <prvSingleTaskTests+0x464>  *)
    | 0x8000a50c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a510 => 0x16600593 (* li a1,358  *)
    | 0x8000a514 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a518 => 0x579070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a51c => 0x03000a13 (* li s4,48  *)
    | 0x8000a520 => 0x80014937 (* lui s2,0x80014  *)
    | 0x8000a524 => 0x01d00b13 (* li s6,29  *)
    | 0x8000a528 => 0x09400a93 (* li s5,148  *)
    | 0x8000a52c => 0x01100613 (* li a2,17  *)
    | 0x8000a530 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000a534 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a538 => 0x210090ef (* jal 80013748 <memset>  *)
    | 0x8000a53c => 0x00000693 (* li a3,0  *)
    | 0x8000a540 => 0x01100613 (* li a2,17  *)
    | 0x8000a544 => 0x00048593 (* mv a1,s1  *)
    | 0x8000a548 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a54c => 0xf60fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a550 => 0x01100793 (* li a5,17  *)
    | 0x8000a554 => 0x00f50863 (* beq a0,a5,8000a564 <prvSingleTaskTests+0x4ac>  *)
    | 0x8000a558 => 0x17c00593 (* li a1,380  *)
    | 0x8000a55c => 0xf6c90513 (* add a0,s2,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a560 => 0x531070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a564 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a568 => 0xbb1fb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a56c => 0x01100793 (* li a5,17  *)
    | 0x8000a570 => 0x00f50863 (* beq a0,a5,8000a580 <prvSingleTaskTests+0x4c8>  *)
    | 0x8000a574 => 0x18100593 (* li a1,385  *)
    | 0x8000a578 => 0xf6c90513 (* add a0,s2,-148  *)
    | 0x8000a57c => 0x515070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a580 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a584 => 0xe90fb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000a588 => 0x01650863 (* beq a0,s6,8000a598 <prvSingleTaskTests+0x4e0>  *)
    | 0x8000a58c => 0x18800593 (* li a1,392  *)
    | 0x8000a590 => 0xf6c90513 (* add a0,s2,-148  *)
    | 0x8000a594 => 0x4fd070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a598 => 0x00000693 (* li a3,0  *)
    | 0x8000a59c => 0x01100613 (* li a2,17  *)
    | 0x8000a5a0 => 0x00098593 (* mv a1,s3  *)
    | 0x8000a5a4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a5a8 => 0x9e1fb0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000a5ac => 0x01100793 (* li a5,17  *)
    | 0x8000a5b0 => 0x00f50863 (* beq a0,a5,8000a5c0 <prvSingleTaskTests+0x508>  *)
    | 0x8000a5b4 => 0x18d00593 (* li a1,397  *)
    | 0x8000a5b8 => 0xf6c90513 (* add a0,s2,-148  *)
    | 0x8000a5bc => 0x4d5070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a5c0 => 0x01100613 (* li a2,17  *)
    | 0x8000a5c4 => 0x00098593 (* mv a1,s3  *)
    | 0x8000a5c8 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a5cc => 0x100090ef (* jal 800136cc <memcmp>  *)
    | 0x8000a5d0 => 0x00050863 (* beqz a0,8000a5e0 <prvSingleTaskTests+0x528>  *)
    | 0x8000a5d4 => 0x19100593 (* li a1,401  *)
    | 0x8000a5d8 => 0xf6c90513 (* add a0,s2,-148  *)
    | 0x8000a5dc => 0x4b5070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a5e0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a5e4 => 0xb35fb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a5e8 => 0x00050863 (* beqz a0,8000a5f8 <prvSingleTaskTests+0x540>  *)
    | 0x8000a5ec => 0x19600593 (* li a1,406  *)
    | 0x8000a5f0 => 0xf6c90513 (* add a0,s2,-148  *)
    | 0x8000a5f4 => 0x49d070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a5f8 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000a5fc => 0xf35a18e3 (* bne s4,s5,8000a52c <prvSingleTaskTests+0x474>  *)
    | 0x8000a600 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a604 => 0xc79fb0ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000a608 => 0x00100793 (* li a5,1  *)
    | 0x8000a60c => 0x00f50a63 (* beq a0,a5,8000a620 <prvSingleTaskTests+0x568>  *)
    | 0x8000a610 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a614 => 0x19b00593 (* li a1,411  *)
    | 0x8000a618 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a61c => 0x475070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a620 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a624 => 0xdf0fb0ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000a628 => 0x03200793 (* li a5,50  *)
    | 0x8000a62c => 0x00f50a63 (* beq a0,a5,8000a640 <prvSingleTaskTests+0x588>  *)
    | 0x8000a630 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a634 => 0x19d00593 (* li a1,413  *)
    | 0x8000a638 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a63c => 0x455070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a640 => 0x80014937 (* lui s2,0x80014  *)
    | 0x8000a644 => 0x00000693 (* li a3,0  *)
    | 0x8000a648 => 0x03200613 (* li a2,50  *)
    | 0x8000a64c => 0xfb090593 (* add a1,s2,-80 # 80013fb0 <_etext+0x3e0>  *)
    | 0x8000a650 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a654 => 0xe58fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a658 => 0x00050a63 (* beqz a0,8000a66c <prvSingleTaskTests+0x5b4>  *)
    | 0x8000a65c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a660 => 0x1a300593 (* li a1,419  *)
    | 0x8000a664 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a668 => 0x429070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a66c => 0x00040513 (* mv a0,s0  *)
    | 0x8000a670 => 0xaa9fb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a674 => 0x00050a63 (* beqz a0,8000a688 <prvSingleTaskTests+0x5d0>  *)
    | 0x8000a678 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a67c => 0x1b800593 (* li a1,440  *)
    | 0x8000a680 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a684 => 0x40d070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a688 => 0x00000693 (* li a3,0  *)
    | 0x8000a68c => 0x02e00613 (* li a2,46  *)
    | 0x8000a690 => 0xfb090593 (* add a1,s2,-80  *)
    | 0x8000a694 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a698 => 0xe14fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a69c => 0x02e00793 (* li a5,46  *)
    | 0x8000a6a0 => 0x00f50a63 (* beq a0,a5,8000a6b4 <prvSingleTaskTests+0x5fc>  *)
    | 0x8000a6a4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a6a8 => 0x1bd00593 (* li a1,445  *)
    | 0x8000a6ac => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a6b0 => 0x3e1070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a6b4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a6b8 => 0xa61fb0ef (* jal 80006118 <xStreamBufferNextMessageLengthBytes>  *)
    | 0x8000a6bc => 0x02e00793 (* li a5,46  *)
    | 0x8000a6c0 => 0x00f50a63 (* beq a0,a5,8000a6d4 <prvSingleTaskTests+0x61c>  *)
    | 0x8000a6c4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a6c8 => 0x1c000593 (* li a1,448  *)
    | 0x8000a6cc => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a6d0 => 0x3c1070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a6d4 => 0x00000693 (* li a3,0  *)
    | 0x8000a6d8 => 0x02e00613 (* li a2,46  *)
    | 0x8000a6dc => 0x00048593 (* mv a1,s1  *)
    | 0x8000a6e0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000a6e4 => 0x8a5fb0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000a6e8 => 0x02e00793 (* li a5,46  *)
    | 0x8000a6ec => 0x00f50a63 (* beq a0,a5,8000a700 <prvSingleTaskTests+0x648>  *)
    | 0x8000a6f0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a6f4 => 0x1c300593 (* li a1,451  *)
    | 0x8000a6f8 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a6fc => 0x395070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a700 => 0x02e00613 (* li a2,46  *)
    | 0x8000a704 => 0xfb090593 (* add a1,s2,-80  *)
    | 0x8000a708 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a70c => 0x7c1080ef (* jal 800136cc <memcmp>  *)
    | 0x8000a710 => 0x00050a63 (* beqz a0,8000a724 <prvSingleTaskTests+0x66c>  *)
    | 0x8000a714 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a718 => 0x1c500593 (* li a1,453  *)
    | 0x8000a71c => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a720 => 0x371070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a724 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a728 => 0xe65fb0ef (* jal 8000658c <vPortFree>  *)
    | 0x8000a72c => 0x00040513 (* mv a0,s0  *)
    | 0x8000a730 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x8000a734 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x8000a738 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x8000a73c => 0x02012903 (* lw s2,32(sp)  *)
    | 0x8000a740 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x8000a744 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x8000a748 => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x8000a74c => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x8000a750 => 0x00c12b83 (* lw s7,12(sp)  *)
    | 0x8000a754 => 0x00812c03 (* lw s8,8(sp)  *)
    | 0x8000a758 => 0x03010113 (* add sp,sp,48  *)
    | 0x8000a75c => 0xc14fb06f (* j 80005b70 <xStreamBufferReset>  *)
    (* <prvSenderTask> *)
    | 0x8000a760 => 0xfa010113 (* add sp,sp,-96  *)
    | 0x8000a764 => 0x00000513 (* li a0,0  *)
    | 0x8000a768 => 0x04812c23 (* sw s0,88(sp)  *)
    | 0x8000a76c => 0x04112e23 (* sw ra,92(sp)  *)
    | 0x8000a770 => 0x04912a23 (* sw s1,84(sp)  *)
    | 0x8000a774 => 0x05212823 (* sw s2,80(sp)  *)
    | 0x8000a778 => 0x05312623 (* sw s3,76(sp)  *)
    | 0x8000a77c => 0x05412423 (* sw s4,72(sp)  *)
    | 0x8000a780 => 0xb6cf60ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000a784 => 0x00100793 (* li a5,1  *)
    | 0x8000a788 => 0x00050413 (* mv s0,a0  *)
    | 0x8000a78c => 0x00a7fa63 (* bgeu a5,a0,8000a7a0 <prvSenderTask+0x40>  *)
    | 0x8000a790 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a794 => 0x25200593 (* li a1,594  *)
    | 0x8000a798 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a79c => 0x2f5070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a7a0 => 0x02800693 (* li a3,40  *)
    | 0x8000a7a4 => 0x02d406b3 (* mul a3,s0,a3  *)
    | 0x8000a7a8 => 0x03300613 (* li a2,51  *)
    | 0x8000a7ac => 0x80095737 (* lui a4,0x80095  *)
    | 0x8000a7b0 => 0xd2870713 (* add a4,a4,-728 # 80094d28 <xStaticMessageBuffers>  *)
    | 0x8000a7b4 => 0x00000813 (* li a6,0  *)
    | 0x8000a7b8 => 0x00000793 (* li a5,0  *)
    | 0x8000a7bc => 0x00000593 (* li a1,0  *)
    | 0x8000a7c0 => 0x03300513 (* li a0,51  *)
    | 0x8000a7c4 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000a7c8 => 0x02c40633 (* mul a2,s0,a2  *)
    | 0x8000a7cc => 0x00d70733 (* add a4,a4,a3  *)
    | 0x8000a7d0 => 0x800956b7 (* lui a3,0x80095  *)
    | 0x8000a7d4 => 0xcc068693 (* add a3,a3,-832 # 80094cc0 <ucBufferStorage>  *)
    | 0x8000a7d8 => 0x8000a937 (* lui s2,0x8000a  *)
    | 0x8000a7dc => 0x00c686b3 (* add a3,a3,a2  *)
    | 0x8000a7e0 => 0x00100613 (* li a2,1  *)
    | 0x8000a7e4 => 0x9ecfb0ef (* jal 800059d0 <xStreamBufferGenericCreateStatic>  *)
    | 0x8000a7e8 => 0x00050493 (* mv s1,a0  *)
    | 0x8000a7ec => 0x00000513 (* li a0,0  *)
    | 0x8000a7f0 => 0xafcf60ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000a7f4 => 0x0c051a63 (* bnez a0,8000a8c8 <prvSenderTask+0x168>  *)
    | 0x8000a7f8 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a7fc => 0x8bdff0ef (* jal 8000a0b8 <prvSingleTaskTests>  *)
    | 0x8000a800 => 0x00000793 (* li a5,0  *)
    | 0x8000a804 => 0x00100713 (* li a4,1  *)
    | 0x8000a808 => 0xa241a603 (* lw a2,-1500(gp) # 80080224 <xBlockingStackSize>  *)
    | 0x8000a80c => 0xfe898593 (* add a1,s3,-24 # 80013fe8 <_etext+0x418>  *)
    | 0x8000a810 => 0xd3c90513 (* add a0,s2,-708 # 80009d3c <prvReceiverTask>  *)
    | 0x8000a814 => 0x00048693 (* mv a3,s1  *)
    | 0x8000a818 => 0xfe5f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000a81c => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x8000a820 => 0xa3c18793 (* add a5,gp,-1476 # 8008023c <ulSenderLoopCounters>  *)
    | 0x8000a824 => 0x00000913 (* li s2,0  *)
    | 0x8000a828 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000a82c => 0x06400a13 (* li s4,100  *)
    | 0x8000a830 => 0x00878433 (* add s0,a5,s0  *)
    | 0x8000a834 => 0x00090613 (* mv a2,s2  *)
    | 0x8000a838 => 0xfac98593 (* add a1,s3,-84 # 80013fac <_etext+0x3dc>  *)
    | 0x8000a83c => 0x00c10513 (* add a0,sp,12  *)
    | 0x8000a840 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x8000a844 => 0x00012823 (* sw zero,16(sp)  *)
    | 0x8000a848 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x8000a84c => 0x488080ef (* jal 80012cd4 <sprintf>  *)
    | 0x8000a850 => 0x00c10513 (* add a0,sp,12  *)
    | 0x8000a854 => 0x174090ef (* jal 800139c8 <strlen>  *)
    | 0x8000a858 => 0x00050613 (* mv a2,a0  *)
    | 0x8000a85c => 0x0af00693 (* li a3,175  *)
    | 0x8000a860 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000a864 => 0x00048513 (* mv a0,s1  *)
    | 0x8000a868 => 0xc44fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000a86c => 0xfe0502e3 (* beqz a0,8000a850 <prvSenderTask+0xf0>  *)
    | 0x8000a870 => 0x00190913 (* add s2,s2,1  *)
    | 0x8000a874 => 0x034967b3 (* rem a5,s2,s4  *)
    | 0x8000a878 => 0xfa079ee3 (* bnez a5,8000a834 <prvSenderTask+0xd4>  *)
    | 0x8000a87c => 0x00042783 (* lw a5,0(s0)  *)
    | 0x8000a880 => 0x00000513 (* li a0,0  *)
    | 0x8000a884 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000a888 => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x8000a88c => 0xa60f60ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000a890 => 0x00100793 (* li a5,1  *)
    | 0x8000a894 => 0x00f51663 (* bne a0,a5,8000a8a0 <prvSenderTask+0x140>  *)
    | 0x8000a898 => 0x03200513 (* li a0,50  *)
    | 0x8000a89c => 0xa7df60ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000a8a0 => 0x00000813 (* li a6,0  *)
    | 0x8000a8a4 => 0x00000793 (* li a5,0  *)
    | 0x8000a8a8 => 0x01810713 (* add a4,sp,24  *)
    | 0x8000a8ac => 0x00c10693 (* add a3,sp,12  *)
    | 0x8000a8b0 => 0x00100613 (* li a2,1  *)
    | 0x8000a8b4 => 0x00000593 (* li a1,0  *)
    | 0x8000a8b8 => 0x00c00513 (* li a0,12  *)
    | 0x8000a8bc => 0x914fb0ef (* jal 800059d0 <xStreamBufferGenericCreateStatic>  *)
    | 0x8000a8c0 => 0xa50fb0ef (* jal 80005b10 <vStreamBufferDelete>  *)
    | 0x8000a8c4 => 0xf71ff06f (* j 8000a834 <prvSenderTask+0xd4>  *)
    | 0x8000a8c8 => 0x00000793 (* li a5,0  *)
    | 0x8000a8cc => 0x00000713 (* li a4,0  *)
    | 0x8000a8d0 => 0xf39ff06f (* j 8000a808 <prvSenderTask+0xa8>  *)
    (* <prvEchoServer> *)
    | 0x8000a8d4 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000a8d8 => 0x00000713 (* li a4,0  *)
    | 0x8000a8dc => 0x00000693 (* li a3,0  *)
    | 0x8000a8e0 => 0x00100613 (* li a2,1  *)
    | 0x8000a8e4 => 0x00000593 (* li a1,0  *)
    | 0x8000a8e8 => 0x03200513 (* li a0,50  *)
    | 0x8000a8ec => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000a8f0 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000a8f4 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000a8f8 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000a8fc => 0x800fb0ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000a900 => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x8000a904 => 0x00000713 (* li a4,0  *)
    | 0x8000a908 => 0x00000693 (* li a3,0  *)
    | 0x8000a90c => 0x00100613 (* li a2,1  *)
    | 0x8000a910 => 0x00000593 (* li a1,0  *)
    | 0x8000a914 => 0x03200513 (* li a0,50  *)
    | 0x8000a918 => 0xfe5fa0ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000a91c => 0x01812783 (* lw a5,24(sp)  *)
    | 0x8000a920 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000a924 => 0x00079a63 (* bnez a5,8000a938 <prvEchoServer+0x64>  *)
    | 0x8000a928 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a92c => 0x31900593 (* li a1,793  *)
    | 0x8000a930 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a934 => 0x15d070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a938 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000a93c => 0x00079a63 (* bnez a5,8000a950 <prvEchoServer+0x7c>  *)
    | 0x8000a940 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a944 => 0x31a00593 (* li a1,794  *)
    | 0x8000a948 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a94c => 0x145070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a950 => 0x03200513 (* li a0,50  *)
    | 0x8000a954 => 0x9c5fb0ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000a958 => 0x00050413 (* mv s0,a0  *)
    | 0x8000a95c => 0x00051a63 (* bnez a0,8000a970 <prvEchoServer+0x9c>  *)
    | 0x8000a960 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a964 => 0x31e00593 (* li a1,798  *)
    | 0x8000a968 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a96c => 0x125070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a970 => 0xd04f60ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000a974 => 0x00050913 (* mv s2,a0  *)
    | 0x8000a978 => 0x01812503 (* lw a0,24(sp)  *)
    | 0x8000a97c => 0x0fa00693 (* li a3,250  *)
    | 0x8000a980 => 0x03200613 (* li a2,50  *)
    | 0x8000a984 => 0x00040593 (* mv a1,s0  *)
    | 0x8000a988 => 0xe00fb0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000a98c => 0x00050493 (* mv s1,a0  *)
    | 0x8000a990 => 0xce4f60ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000a994 => 0x41250533 (* sub a0,a0,s2  *)
    | 0x8000a998 => 0x0f900793 (* li a5,249  *)
    | 0x8000a99c => 0x00a7ea63 (* bltu a5,a0,8000a9b0 <prvEchoServer+0xdc>  *)
    | 0x8000a9a0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a9a4 => 0x32300593 (* li a1,803  *)
    | 0x8000a9a8 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a9ac => 0x0e5070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a9b0 => 0x00048a63 (* beqz s1,8000a9c4 <prvEchoServer+0xf0>  *)
    | 0x8000a9b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000a9b8 => 0x32400593 (* li a1,804  *)
    | 0x8000a9bc => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000a9c0 => 0x0d1070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000a9c4 => 0x00000513 (* li a0,0  *)
    | 0x8000a9c8 => 0x924f60ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000a9cc => 0x80014937 (* lui s2,0x80014  *)
    | 0x8000a9d0 => 0x8000a4b7 (* lui s1,0x8000a  *)
    | 0x8000a9d4 => 0x08051a63 (* bnez a0,8000aa68 <prvEchoServer+0x194>  *)
    | 0x8000a9d8 => 0x00000793 (* li a5,0  *)
    | 0x8000a9dc => 0x00100713 (* li a4,1  *)
    | 0x8000a9e0 => 0xf7448513 (* add a0,s1,-140 # 80009f74 <prvEchoClient>  *)
    | 0x8000a9e4 => 0x01810693 (* add a3,sp,24  *)
    | 0x8000a9e8 => 0x07800613 (* li a2,120  *)
    | 0x8000a9ec => 0xff490593 (* add a1,s2,-12 # 80013ff4 <_etext+0x424>  *)
    | 0x8000a9f0 => 0xe0df50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000a9f4 => 0x800144b7 (* lui s1,0x80014  *)
    | 0x8000a9f8 => 0x03200613 (* li a2,50  *)
    | 0x8000a9fc => 0x00000593 (* li a1,0  *)
    | 0x8000aa00 => 0x00040513 (* mv a0,s0  *)
    | 0x8000aa04 => 0x545080ef (* jal 80013748 <memset>  *)
    | 0x8000aa08 => 0x01812503 (* lw a0,24(sp)  *)
    | 0x8000aa0c => 0x03200613 (* li a2,50  *)
    | 0x8000aa10 => 0xfff00693 (* li a3,-1  *)
    | 0x8000aa14 => 0x00040593 (* mv a1,s0  *)
    | 0x8000aa18 => 0xd70fb0ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000aa1c => 0x00050613 (* mv a2,a0  *)
    | 0x8000aa20 => 0x00051c63 (* bnez a0,8000aa38 <prvEchoServer+0x164>  *)
    | 0x8000aa24 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x8000aa28 => 0x33f00593 (* li a1,831  *)
    | 0x8000aa2c => 0xf6c48513 (* add a0,s1,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000aa30 => 0x061070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000aa34 => 0x00c12603 (* lw a2,12(sp)  *)
    | 0x8000aa38 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8000aa3c => 0x00040593 (* mv a1,s0  *)
    | 0x8000aa40 => 0xfff00693 (* li a3,-1  *)
    | 0x8000aa44 => 0xa68fb0ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000aa48 => 0x00000713 (* li a4,0  *)
    | 0x8000aa4c => 0x00000693 (* li a3,0  *)
    | 0x8000aa50 => 0x00100613 (* li a2,1  *)
    | 0x8000aa54 => 0x00000593 (* li a1,0  *)
    | 0x8000aa58 => 0x03200513 (* li a0,50  *)
    | 0x8000aa5c => 0xea1fa0ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000aa60 => 0x8b0fb0ef (* jal 80005b10 <vStreamBufferDelete>  *)
    | 0x8000aa64 => 0xf95ff06f (* j 8000a9f8 <prvEchoServer+0x124>  *)
    | 0x8000aa68 => 0x01812503 (* lw a0,24(sp)  *)
    | 0x8000aa6c => 0xe4cff0ef (* jal 8000a0b8 <prvSingleTaskTests>  *)
    | 0x8000aa70 => 0x00000793 (* li a5,0  *)
    | 0x8000aa74 => 0x00000713 (* li a4,0  *)
    | 0x8000aa78 => 0xf69ff06f (* j 8000a9e0 <prvEchoServer+0x10c>  *)
    (* <vStartMessageBufferTasks> *)
    | 0x8000aa7c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000aa80 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000aa84 => 0x00155613 (* srl a2,a0,0x1  *)
    | 0x8000aa88 => 0x8000b937 (* lui s2,0x8000b  *)
    | 0x8000aa8c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000aa90 => 0x00a60633 (* add a2,a2,a0  *)
    | 0x8000aa94 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000aa98 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000aa9c => 0x00050413 (* mv s0,a0  *)
    | 0x8000aaa0 => 0x00000793 (* li a5,0  *)
    | 0x8000aaa4 => 0x00100713 (* li a4,1  *)
    | 0x8000aaa8 => 0x00000693 (* li a3,0  *)
    | 0x8000aaac => 0x00058593 (* mv a1,a1  *)
    | 0x8000aab0 => 0x8d490513 (* add a0,s2,-1836 # 8000a8d4 <prvEchoServer>  *)
    | 0x8000aab4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000aab8 => 0xa2c1a223 (* sw a2,-1500(gp) # 80080224 <xBlockingStackSize>  *)
    | 0x8000aabc => 0xd41f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000aac0 => 0xa241a603 (* lw a2,-1500(gp) # 80080224 <xBlockingStackSize>  *)
    | 0x8000aac4 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000aac8 => 0x00000793 (* li a5,0  *)
    | 0x8000aacc => 0x00000713 (* li a4,0  *)
    | 0x8000aad0 => 0x00000693 (* li a3,0  *)
    | 0x8000aad4 => 0x00c58593 (* add a1,a1,12 # 8001400c <_etext+0x43c>  *)
    | 0x8000aad8 => 0x8d490513 (* add a0,s2,-1836  *)
    | 0x8000aadc => 0xd21f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000aae0 => 0x00000713 (* li a4,0  *)
    | 0x8000aae4 => 0x00000693 (* li a3,0  *)
    | 0x8000aae8 => 0x00100613 (* li a2,1  *)
    | 0x8000aaec => 0x00000593 (* li a1,0  *)
    | 0x8000aaf0 => 0x03200513 (* li a0,50  *)
    | 0x8000aaf4 => 0xe09fa0ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000aaf8 => 0x00050693 (* mv a3,a0  *)
    | 0x8000aafc => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x8000ab00 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ab04 => 0x8000a537 (* lui a0,0x8000a  *)
    | 0x8000ab08 => 0x00040613 (* mv a2,s0  *)
    | 0x8000ab0c => 0x00000793 (* li a5,0  *)
    | 0x8000ab10 => 0x00000713 (* li a4,0  *)
    | 0x8000ab14 => 0x01858593 (* add a1,a1,24 # 80014018 <_etext+0x448>  *)
    | 0x8000ab18 => 0xe7450513 (* add a0,a0,-396 # 80009e74 <prvNonBlockingReceiverTask>  *)
    | 0x8000ab1c => 0xce1f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ab20 => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x8000ab24 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ab28 => 0x8000a537 (* lui a0,0x8000a  *)
    | 0x8000ab2c => 0x00040613 (* mv a2,s0  *)
    | 0x8000ab30 => 0x00000793 (* li a5,0  *)
    | 0x8000ab34 => 0x00000713 (* li a4,0  *)
    | 0x8000ab38 => 0x02458593 (* add a1,a1,36 # 80014024 <_etext+0x454>  *)
    | 0x8000ab3c => 0xdc850513 (* add a0,a0,-568 # 80009dc8 <prvNonBlockingSenderTask>  *)
    | 0x8000ab40 => 0xcbdf50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ab44 => 0xa241a603 (* lw a2,-1500(gp) # 80080224 <xBlockingStackSize>  *)
    | 0x8000ab48 => 0x8000a437 (* lui s0,0x8000a  *)
    | 0x8000ab4c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ab50 => 0x00000793 (* li a5,0  *)
    | 0x8000ab54 => 0x00100713 (* li a4,1  *)
    | 0x8000ab58 => 0x00000693 (* li a3,0  *)
    | 0x8000ab5c => 0x03058593 (* add a1,a1,48 # 80014030 <_etext+0x460>  *)
    | 0x8000ab60 => 0x76040513 (* add a0,s0,1888 # 8000a760 <prvSenderTask>  *)
    | 0x8000ab64 => 0xc99f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ab68 => 0xa241a603 (* lw a2,-1500(gp) # 80080224 <xBlockingStackSize>  *)
    | 0x8000ab6c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ab70 => 0x00000793 (* li a5,0  *)
    | 0x8000ab74 => 0x00000713 (* li a4,0  *)
    | 0x8000ab78 => 0x00000693 (* li a3,0  *)
    | 0x8000ab7c => 0x03858593 (* add a1,a1,56 # 80014038 <_etext+0x468>  *)
    | 0x8000ab80 => 0x76040513 (* add a0,s0,1888  *)
    | 0x8000ab84 => 0xc79f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ab88 => 0x00000713 (* li a4,0  *)
    | 0x8000ab8c => 0x00000693 (* li a3,0  *)
    | 0x8000ab90 => 0x00100613 (* li a2,1  *)
    | 0x8000ab94 => 0x00000593 (* li a1,0  *)
    | 0x8000ab98 => 0x01400513 (* li a0,20  *)
    | 0x8000ab9c => 0xd61fa0ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000aba0 => 0xa2a1ac23 (* sw a0,-1480(gp) # 80080238 <xCoherenceTestMessageBuffer>  *)
    | 0x8000aba4 => 0x00051a63 (* bnez a0,8000abb8 <vStartMessageBufferTasks+0x13c>  *)
    | 0x8000aba8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000abac => 0x0b200593 (* li a1,178  *)
    | 0x8000abb0 => 0xf6c50513 (* add a0,a0,-148 # 80013f6c <_etext+0x39c>  *)
    | 0x8000abb4 => 0x6dc070ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000abb8 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000abbc => 0x8000a537 (* lui a0,0x8000a  *)
    | 0x8000abc0 => 0x00000793 (* li a5,0  *)
    | 0x8000abc4 => 0x00000713 (* li a4,0  *)
    | 0x8000abc8 => 0x00000693 (* li a3,0  *)
    | 0x8000abcc => 0x07800613 (* li a2,120  *)
    | 0x8000abd0 => 0x04058593 (* add a1,a1,64 # 80014040 <_etext+0x470>  *)
    | 0x8000abd4 => 0xcb050513 (* add a0,a0,-848 # 80009cb0 <prvSpaceAvailableCoherenceActor>  *)
    | 0x8000abd8 => 0xc25f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000abdc => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000abe0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000abe4 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000abe8 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x8000abec => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000abf0 => 0x8000a537 (* lui a0,0x8000a  *)
    | 0x8000abf4 => 0x00000793 (* li a5,0  *)
    | 0x8000abf8 => 0x00000713 (* li a4,0  *)
    | 0x8000abfc => 0x00000693 (* li a3,0  *)
    | 0x8000ac00 => 0x07800613 (* li a2,120  *)
    | 0x8000ac04 => 0x04c58593 (* add a1,a1,76 # 8001404c <_etext+0x47c>  *)
    | 0x8000ac08 => 0xc4850513 (* add a0,a0,-952 # 80009c48 <prvSpaceAvailableCoherenceTester>  *)
    | 0x8000ac0c => 0x02010113 (* add sp,sp,32  *)
    | 0x8000ac10 => 0xbedf506f (* j 800007fc <xTaskCreate>  *)
    (* <xAreMessageBufferTasksStillRunning> *)
    | 0x8000ac14 => 0xa2c1a683 (* lw a3,-1492(gp) # 8008022c <ulEchoLoopCounters>  *)
    | 0x8000ac18 => 0xa1c1a603 (* lw a2,-1508(gp) # 8008021c <ulLastEchoLoopCounters.3>  *)
    | 0x8000ac1c => 0xa2c18713 (* add a4,gp,-1492 # 8008022c <ulEchoLoopCounters>  *)
    | 0x8000ac20 => 0xa1c18793 (* add a5,gp,-1508 # 8008021c <ulLastEchoLoopCounters.3>  *)
    | 0x8000ac24 => 0x00000513 (* li a0,0  *)
    | 0x8000ac28 => 0x00d60663 (* beq a2,a3,8000ac34 <xAreMessageBufferTasksStillRunning+0x20>  *)
    | 0x8000ac2c => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x8000ac30 => 0x00100513 (* li a0,1  *)
    | 0x8000ac34 => 0x00472703 (* lw a4,4(a4)  *)
    | 0x8000ac38 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x8000ac3c => 0x04e68a63 (* beq a3,a4,8000ac90 <xAreMessageBufferTasksStillRunning+0x7c>  *)
    | 0x8000ac40 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x8000ac44 => 0xa281a703 (* lw a4,-1496(gp) # 80080228 <ulNonBlockingRxCounter>  *)
    | 0x8000ac48 => 0xa181a683 (* lw a3,-1512(gp) # 80080218 <ulLastNonBlockingRxCounter.2>  *)
    | 0x8000ac4c => 0x04d70663 (* beq a4,a3,8000ac98 <xAreMessageBufferTasksStillRunning+0x84>  *)
    | 0x8000ac50 => 0xa0e1ac23 (* sw a4,-1512(gp) # 80080218 <ulLastNonBlockingRxCounter.2>  *)
    | 0x8000ac54 => 0xa3c1a683 (* lw a3,-1476(gp) # 8008023c <ulSenderLoopCounters>  *)
    | 0x8000ac58 => 0xa101a603 (* lw a2,-1520(gp) # 80080210 <ulLastSenderLoopCounters.1>  *)
    | 0x8000ac5c => 0xa3c18713 (* add a4,gp,-1476 # 8008023c <ulSenderLoopCounters>  *)
    | 0x8000ac60 => 0xa1018793 (* add a5,gp,-1520 # 80080210 <ulLastSenderLoopCounters.1>  *)
    | 0x8000ac64 => 0x02d60e63 (* beq a2,a3,8000aca0 <xAreMessageBufferTasksStillRunning+0x8c>  *)
    | 0x8000ac68 => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x8000ac6c => 0x00472703 (* lw a4,4(a4)  *)
    | 0x8000ac70 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x8000ac74 => 0x02e68a63 (* beq a3,a4,8000aca8 <xAreMessageBufferTasksStillRunning+0x94>  *)
    | 0x8000ac78 => 0x00e7a223 (* sw a4,4(a5)  *)
    | 0x8000ac7c => 0xa341a703 (* lw a4,-1484(gp) # 80080234 <ulSizeCoherencyTestCycles>  *)
    | 0x8000ac80 => 0xa0c1a683 (* lw a3,-1524(gp) # 8008020c <ullastSizeCoherencyTestCycles.0>  *)
    | 0x8000ac84 => 0x02e68663 (* beq a3,a4,8000acb0 <xAreMessageBufferTasksStillRunning+0x9c>  *)
    | 0x8000ac88 => 0xa0e1a623 (* sw a4,-1524(gp) # 8008020c <ullastSizeCoherencyTestCycles.0>  *)
    | 0x8000ac8c => 0x00008067 (* ret  *)
    | 0x8000ac90 => 0x00000513 (* li a0,0  *)
    | 0x8000ac94 => 0xfb1ff06f (* j 8000ac44 <xAreMessageBufferTasksStillRunning+0x30>  *)
    | 0x8000ac98 => 0x00000513 (* li a0,0  *)
    | 0x8000ac9c => 0xfb9ff06f (* j 8000ac54 <xAreMessageBufferTasksStillRunning+0x40>  *)
    | 0x8000aca0 => 0x00000513 (* li a0,0  *)
    | 0x8000aca4 => 0xfc9ff06f (* j 8000ac6c <xAreMessageBufferTasksStillRunning+0x58>  *)
    | 0x8000aca8 => 0x00000513 (* li a0,0  *)
    | 0x8000acac => 0xfd1ff06f (* j 8000ac7c <xAreMessageBufferTasksStillRunning+0x68>  *)
    | 0x8000acb0 => 0x00000513 (* li a0,0  *)
    | 0x8000acb4 => 0x00008067 (* ret  *)
    (* <vPolledQueueProducer> *)
    | 0x8000acb8 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000acbc => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000acc0 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000acc4 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000acc8 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000accc => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000acd0 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000acd4 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000acd8 => 0x00050413 (* mv s0,a0  *)
    | 0x8000acdc => 0x00011723 (* sh zero,14(sp)  *)
    | 0x8000ace0 => 0x00000913 (* li s2,0  *)
    | 0x8000ace4 => 0x00100a13 (* li s4,1  *)
    | 0x8000ace8 => 0x80080ab7 (* lui s5,0x80080  *)
    | 0x8000acec => 0x00300493 (* li s1,3  *)
    | 0x8000acf0 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x8000acf4 => 0x00000693 (* li a3,0  *)
    | 0x8000acf8 => 0x00000613 (* li a2,0  *)
    | 0x8000acfc => 0x00e10593 (* add a1,sp,14  *)
    | 0x8000ad00 => 0xeccf80ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000ad04 => 0x05451263 (* bne a0,s4,8000ad48 <vPolledQueueProducer+0x90>  *)
    | 0x8000ad08 => 0x02091063 (* bnez s2,8000ad28 <vPolledQueueProducer+0x70>  *)
    | 0x8000ad0c => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000ad10 => 0xa481a783 (* lw a5,-1464(gp) # 80080248 <xPollingProducerCount>  *)
    | 0x8000ad14 => 0x004aa703 (* lw a4,4(s5) # 80080004 <xCriticalNesting>  *)
    | 0x8000ad18 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000ad1c => 0xa4f1a423 (* sw a5,-1464(gp) # 80080248 <xPollingProducerCount>  *)
    | 0x8000ad20 => 0x00071463 (* bnez a4,8000ad28 <vPolledQueueProducer+0x70>  *)
    | 0x8000ad24 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000ad28 => 0x00e15783 (* lhu a5,14(sp)  *)
    | 0x8000ad2c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000ad30 => 0x00f11723 (* sh a5,14(sp)  *)
    | 0x8000ad34 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x8000ad38 => 0xfa049ce3 (* bnez s1,8000acf0 <vPolledQueueProducer+0x38>  *)
    | 0x8000ad3c => 0x0c800513 (* li a0,200  *)
    | 0x8000ad40 => 0xdd8f60ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000ad44 => 0xfa9ff06f (* j 8000acec <vPolledQueueProducer+0x34>  *)
    | 0x8000ad48 => 0x00100913 (* li s2,1  *)
    | 0x8000ad4c => 0xfe9ff06f (* j 8000ad34 <vPolledQueueProducer+0x7c>  *)
    (* <vPolledQueueConsumer> *)
    | 0x8000ad50 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000ad54 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000ad58 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000ad5c => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000ad60 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000ad64 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000ad68 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000ad6c => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000ad70 => 0x00050413 (* mv s0,a0  *)
    | 0x8000ad74 => 0x00000913 (* li s2,0  *)
    | 0x8000ad78 => 0x00000493 (* li s1,0  *)
    | 0x8000ad7c => 0x00100a13 (* li s4,1  *)
    | 0x8000ad80 => 0x80080ab7 (* lui s5,0x80080  *)
    | 0x8000ad84 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x8000ad88 => 0xcc4f90ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000ad8c => 0x00051863 (* bnez a0,8000ad9c <vPolledQueueConsumer+0x4c>  *)
    | 0x8000ad90 => 0x0b400513 (* li a0,180  *)
    | 0x8000ad94 => 0xd84f60ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000ad98 => 0xfedff06f (* j 8000ad84 <vPolledQueueConsumer+0x34>  *)
    | 0x8000ad9c => 0x00042503 (* lw a0,0(s0)  *)
    | 0x8000ada0 => 0x00000613 (* li a2,0  *)
    | 0x8000ada4 => 0x00e10593 (* add a1,sp,14  *)
    | 0x8000ada8 => 0xc21f80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000adac => 0xfd451ce3 (* bne a0,s4,8000ad84 <vPolledQueueConsumer+0x34>  *)
    | 0x8000adb0 => 0x00e15783 (* lhu a5,14(sp)  *)
    | 0x8000adb4 => 0x02979a63 (* bne a5,s1,8000ade8 <vPolledQueueConsumer+0x98>  *)
    | 0x8000adb8 => 0x02091063 (* bnez s2,8000add8 <vPolledQueueConsumer+0x88>  *)
    | 0x8000adbc => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000adc0 => 0xa4c1a703 (* lw a4,-1460(gp) # 8008024c <xPollingConsumerCount>  *)
    | 0x8000adc4 => 0x004aa683 (* lw a3,4(s5) # 80080004 <xCriticalNesting>  *)
    | 0x8000adc8 => 0x00170713 (* add a4,a4,1  *)
    | 0x8000adcc => 0xa4e1a623 (* sw a4,-1460(gp) # 8008024c <xPollingConsumerCount>  *)
    | 0x8000add0 => 0x00069463 (* bnez a3,8000add8 <vPolledQueueConsumer+0x88>  *)
    | 0x8000add4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000add8 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000addc => 0x01079493 (* sll s1,a5,0x10  *)
    | 0x8000ade0 => 0x0104d493 (* srl s1,s1,0x10  *)
    | 0x8000ade4 => 0xfa1ff06f (* j 8000ad84 <vPolledQueueConsumer+0x34>  *)
    | 0x8000ade8 => 0x00100913 (* li s2,1  *)
    | 0x8000adec => 0xfedff06f (* j 8000add8 <vPolledQueueConsumer+0x88>  *)
    (* <vStartPolledQueueTasks> *)
    | 0x8000adf0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000adf4 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000adf8 => 0x00000613 (* li a2,0  *)
    | 0x8000adfc => 0x00050413 (* mv s0,a0  *)
    | 0x8000ae00 => 0x00200593 (* li a1,2  *)
    | 0x8000ae04 => 0x00a00513 (* li a0,10  *)
    | 0x8000ae08 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x8000ae0c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000ae10 => 0xbbcf80ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000ae14 => 0xa4a1a223 (* sw a0,-1468(gp) # 80080244 <xPolledQueue.0>  *)
    | 0x8000ae18 => 0x06050463 (* beqz a0,8000ae80 <vStartPolledQueueTasks+0x90>  *)
    | 0x8000ae1c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ae20 => 0x05858593 (* add a1,a1,88 # 80014058 <_etext+0x488>  *)
    | 0x8000ae24 => 0xcd0f90ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x8000ae28 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ae2c => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000ae30 => 0x00040713 (* mv a4,s0  *)
    | 0x8000ae34 => 0xa4418693 (* add a3,gp,-1468 # 80080244 <xPolledQueue.0>  *)
    | 0x8000ae38 => 0x00000793 (* li a5,0  *)
    | 0x8000ae3c => 0x07800613 (* li a2,120  *)
    | 0x8000ae40 => 0x06858593 (* add a1,a1,104 # 80014068 <_etext+0x498>  *)
    | 0x8000ae44 => 0xd5050513 (* add a0,a0,-688 # 8000ad50 <vPolledQueueConsumer>  *)
    | 0x8000ae48 => 0x9b5f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ae4c => 0x00040713 (* mv a4,s0  *)
    | 0x8000ae50 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000ae54 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000ae58 => 0xa4418693 (* add a3,gp,-1468 # 80080244 <xPolledQueue.0>  *)
    | 0x8000ae5c => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000ae60 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ae64 => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000ae68 => 0x00000793 (* li a5,0  *)
    | 0x8000ae6c => 0x07800613 (* li a2,120  *)
    | 0x8000ae70 => 0x07058593 (* add a1,a1,112 # 80014070 <_etext+0x4a0>  *)
    | 0x8000ae74 => 0xcb850513 (* add a0,a0,-840 # 8000acb8 <vPolledQueueProducer>  *)
    | 0x8000ae78 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000ae7c => 0x981f506f (* j 800007fc <xTaskCreate>  *)
    | 0x8000ae80 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000ae84 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000ae88 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000ae8c => 0x01010113 (* add sp,sp,16  *)
    | 0x8000ae90 => 0x00008067 (* ret  *)
    (* <xArePollingQueuesStillRunning> *)
    | 0x8000ae94 => 0xa4c1a503 (* lw a0,-1460(gp) # 8008024c <xPollingConsumerCount>  *)
    | 0x8000ae98 => 0x00050663 (* beqz a0,8000aea4 <xArePollingQueuesStillRunning+0x10>  *)
    | 0x8000ae9c => 0xa481a503 (* lw a0,-1464(gp) # 80080248 <xPollingProducerCount>  *)
    | 0x8000aea0 => 0x00a03533 (* snez a0,a0  *)
    | 0x8000aea4 => 0xa401a623 (* sw zero,-1460(gp) # 8008024c <xPollingConsumerCount>  *)
    | 0x8000aea8 => 0xa401a423 (* sw zero,-1464(gp) # 80080248 <xPollingProducerCount>  *)
    | 0x8000aeac => 0x00008067 (* ret  *)
    (* <prvHighestPriorityPeekTask> *)
    | 0x8000aeb0 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000aeb4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000aeb8 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000aebc => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000aec0 => 0x11223a37 (* lui s4,0x11223  *)
    | 0x8000aec4 => 0x01234ab7 (* lui s5,0x1234  *)
    | 0x8000aec8 => 0xaabbbb37 (* lui s6,0xaabbb  *)
    | 0x8000aecc => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000aed0 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000aed4 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000aed8 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000aedc => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000aee0 => 0x00050913 (* mv s2,a0  *)
    | 0x8000aee4 => 0x00100993 (* li s3,1  *)
    | 0x8000aee8 => 0x00100493 (* li s1,1  *)
    | 0x8000aeec => 0x344a0a13 (* add s4,s4,836 # 11223344 <__stack_size+0x112231e6>  *)
    | 0x8000aef0 => 0x567a8a93 (* add s5,s5,1383 # 1234567 <__stack_size+0x1234409>  *)
    | 0x8000aef4 => 0xabbb0b13 (* add s6,s6,-1349 # aabbaabb <_stack_top+0x2ab24dcd>  *)
    | 0x8000aef8 => 0xfff00613 (* li a2,-1  *)
    | 0x8000aefc => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000af00 => 0x00090513 (* mv a0,s2  *)
    | 0x8000af04 => 0xfa5f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000af08 => 0x01350463 (* beq a0,s3,8000af10 <prvHighestPriorityPeekTask+0x60>  *)
    | 0x8000af0c => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af10 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000af14 => 0x01478463 (* beq a5,s4,8000af1c <prvHighestPriorityPeekTask+0x6c>  *)
    | 0x8000af18 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af1c => 0x00090513 (* mv a0,s2  *)
    | 0x8000af20 => 0xb2cf90ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000af24 => 0x01350463 (* beq a0,s3,8000af2c <prvHighestPriorityPeekTask+0x7c>  *)
    | 0x8000af28 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af2c => 0x00000613 (* li a2,0  *)
    | 0x8000af30 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000af34 => 0x00090513 (* mv a0,s2  *)
    | 0x8000af38 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x8000af3c => 0xa8df80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000af40 => 0x01350463 (* beq a0,s3,8000af48 <prvHighestPriorityPeekTask+0x98>  *)
    | 0x8000af44 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af48 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000af4c => 0x01478463 (* beq a5,s4,8000af54 <prvHighestPriorityPeekTask+0xa4>  *)
    | 0x8000af50 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af54 => 0xfff00613 (* li a2,-1  *)
    | 0x8000af58 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000af5c => 0x00090513 (* mv a0,s2  *)
    | 0x8000af60 => 0xf49f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000af64 => 0x01350463 (* beq a0,s3,8000af6c <prvHighestPriorityPeekTask+0xbc>  *)
    | 0x8000af68 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af6c => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000af70 => 0x01578463 (* beq a5,s5,8000af78 <prvHighestPriorityPeekTask+0xc8>  *)
    | 0x8000af74 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af78 => 0x00090513 (* mv a0,s2  *)
    | 0x8000af7c => 0xad0f90ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000af80 => 0x01350463 (* beq a0,s3,8000af88 <prvHighestPriorityPeekTask+0xd8>  *)
    | 0x8000af84 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000af88 => 0x00000513 (* li a0,0  *)
    | 0x8000af8c => 0xf60f60ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000af90 => 0xfff00613 (* li a2,-1  *)
    | 0x8000af94 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000af98 => 0x00090513 (* mv a0,s2  *)
    | 0x8000af9c => 0xf0df80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000afa0 => 0x01350463 (* beq a0,s3,8000afa8 <prvHighestPriorityPeekTask+0xf8>  *)
    | 0x8000afa4 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000afa8 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000afac => 0x01678463 (* beq a5,s6,8000afb4 <prvHighestPriorityPeekTask+0x104>  *)
    | 0x8000afb0 => 0xa691a223 (* sw s1,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000afb4 => 0x00000513 (* li a0,0  *)
    | 0x8000afb8 => 0xf34f60ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000afbc => 0xf3dff06f (* j 8000aef8 <prvHighestPriorityPeekTask+0x48>  *)
    (* <prvHighPriorityPeekTask> *)
    | 0x8000afc0 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000afc4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000afc8 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000afcc => 0x01234a37 (* lui s4,0x1234  *)
    | 0x8000afd0 => 0xaabbbab7 (* lui s5,0xaabbb  *)
    | 0x8000afd4 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000afd8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000afdc => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000afe0 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000afe4 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000afe8 => 0x00050413 (* mv s0,a0  *)
    | 0x8000afec => 0x00100993 (* li s3,1  *)
    | 0x8000aff0 => 0x00100913 (* li s2,1  *)
    | 0x8000aff4 => 0x567a0a13 (* add s4,s4,1383 # 1234567 <__stack_size+0x1234409>  *)
    | 0x8000aff8 => 0xabba8a93 (* add s5,s5,-1349 # aabbaabb <_stack_top+0x2ab24dcd>  *)
    | 0x8000affc => 0xfff00613 (* li a2,-1  *)
    | 0x8000b000 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b004 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b008 => 0xea1f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000b00c => 0x01350463 (* beq a0,s3,8000b014 <prvHighPriorityPeekTask+0x54>  *)
    | 0x8000b010 => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b014 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000b018 => 0x01478463 (* beq a5,s4,8000b020 <prvHighPriorityPeekTask+0x60>  *)
    | 0x8000b01c => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b020 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b024 => 0xa28f90ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b028 => 0x01350463 (* beq a0,s3,8000b030 <prvHighPriorityPeekTask+0x70>  *)
    | 0x8000b02c => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b030 => 0x00000513 (* li a0,0  *)
    | 0x8000b034 => 0xeb8f60ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000b038 => 0xfff00613 (* li a2,-1  *)
    | 0x8000b03c => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b040 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b044 => 0x985f80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000b048 => 0x01350463 (* beq a0,s3,8000b050 <prvHighPriorityPeekTask+0x90>  *)
    | 0x8000b04c => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b050 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000b054 => 0x01578463 (* beq a5,s5,8000b05c <prvHighPriorityPeekTask+0x9c>  *)
    | 0x8000b058 => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b05c => 0x00000513 (* li a0,0  *)
    | 0x8000b060 => 0xe8cf60ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000b064 => 0xf99ff06f (* j 8000affc <prvHighPriorityPeekTask+0x3c>  *)
    (* <prvMediumPriorityPeekTask> *)
    | 0x8000b068 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000b06c => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000b070 => 0x012344b7 (* lui s1,0x1234  *)
    | 0x8000b074 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000b078 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000b07c => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000b080 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000b084 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000b088 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000b08c => 0x00050413 (* mv s0,a0  *)
    | 0x8000b090 => 0x00100a93 (* li s5,1  *)
    | 0x8000b094 => 0x00100993 (* li s3,1  *)
    | 0x8000b098 => 0x56748493 (* add s1,s1,1383 # 1234567 <__stack_size+0x1234409>  *)
    | 0x8000b09c => 0xfff00613 (* li a2,-1  *)
    | 0x8000b0a0 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b0a4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b0a8 => 0xe01f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000b0ac => 0x01550463 (* beq a0,s5,8000b0b4 <prvMediumPriorityPeekTask+0x4c>  *)
    | 0x8000b0b0 => 0xa731a223 (* sw s3,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b0b4 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000b0b8 => 0x00978463 (* beq a5,s1,8000b0c0 <prvMediumPriorityPeekTask+0x58>  *)
    | 0x8000b0bc => 0xa731a223 (* sw s3,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b0c0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b0c4 => 0x988f90ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b0c8 => 0x01550463 (* beq a0,s5,8000b0d0 <prvMediumPriorityPeekTask+0x68>  *)
    | 0x8000b0cc => 0xa731a223 (* sw s3,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b0d0 => 0xa601a783 (* lw a5,-1440(gp) # 80080260 <ulLoopCounter>  *)
    | 0x8000b0d4 => 0x00000513 (* li a0,0  *)
    | 0x8000b0d8 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000b0dc => 0xa6f1a023 (* sw a5,-1440(gp) # 80080260 <ulLoopCounter>  *)
    | 0x8000b0e0 => 0xe0cf60ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000b0e4 => 0xfb9ff06f (* j 8000b09c <prvMediumPriorityPeekTask+0x34>  *)
    (* <prvLowPriorityPeekTask> *)
    | 0x8000b0e8 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000b0ec => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000b0f0 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000b0f4 => 0x01234a37 (* lui s4,0x1234  *)
    | 0x8000b0f8 => 0x11223ab7 (* lui s5,0x11223  *)
    | 0x8000b0fc => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000b100 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000b104 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000b108 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000b10c => 0x03612023 (* sw s6,32(sp)  *)
    | 0x8000b110 => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x8000b114 => 0x01812c23 (* sw s8,24(sp)  *)
    | 0x8000b118 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000b11c => 0x00050413 (* mv s0,a0  *)
    | 0x8000b120 => 0x344a8a93 (* add s5,s5,836 # 11223344 <__stack_size+0x112231e6>  *)
    | 0x8000b124 => 0x00100993 (* li s3,1  *)
    | 0x8000b128 => 0x00100913 (* li s2,1  *)
    | 0x8000b12c => 0x567a0a13 (* add s4,s4,1383 # 1234567 <__stack_size+0x1234409>  *)
    | 0x8000b130 => 0x00000693 (* li a3,0  *)
    | 0x8000b134 => 0x00000613 (* li a2,0  *)
    | 0x8000b138 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b13c => 0x00040513 (* mv a0,s0  *)
    | 0x8000b140 => 0x01512623 (* sw s5,12(sp)  *)
    | 0x8000b144 => 0xa88f80ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b148 => 0x01350463 (* beq a0,s3,8000b150 <prvLowPriorityPeekTask+0x68>  *)
    | 0x8000b14c => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b150 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b154 => 0x8f8f90ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b158 => 0x00050463 (* beqz a0,8000b160 <prvLowPriorityPeekTask+0x78>  *)
    | 0x8000b15c => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b160 => 0x00000693 (* li a3,0  *)
    | 0x8000b164 => 0x00000613 (* li a2,0  *)
    | 0x8000b168 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b16c => 0x00040513 (* mv a0,s0  *)
    | 0x8000b170 => 0x01412623 (* sw s4,12(sp)  *)
    | 0x8000b174 => 0xa58f80ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b178 => 0x01350463 (* beq a0,s3,8000b180 <prvLowPriorityPeekTask+0x98>  *)
    | 0x8000b17c => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b180 => 0x00000613 (* li a2,0  *)
    | 0x8000b184 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b188 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b18c => 0x00012623 (* sw zero,12(sp)  *)
    | 0x8000b190 => 0x839f80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000b194 => 0x01350463 (* beq a0,s3,8000b19c <prvLowPriorityPeekTask+0xb4>  *)
    | 0x8000b198 => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b19c => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000b1a0 => 0x01478463 (* beq a5,s4,8000b1a8 <prvLowPriorityPeekTask+0xc0>  *)
    | 0x8000b1a4 => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b1a8 => 0x00a00513 (* li a0,10  *)
    | 0x8000b1ac => 0x96cf60ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000b1b0 => 0xa5c1a503 (* lw a0,-1444(gp) # 8008025c <xMediumPriorityTask>  *)
    | 0x8000b1b4 => 0xae9f50ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000b1b8 => 0xa581a503 (* lw a0,-1448(gp) # 80080258 <xHighPriorityTask>  *)
    | 0x8000b1bc => 0xae1f50ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000b1c0 => 0xa541a503 (* lw a0,-1452(gp) # 80080254 <xHighestPriorityTask>  *)
    | 0x8000b1c4 => 0xad9f50ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000b1c8 => 0xaabbb7b7 (* lui a5,0xaabbb  *)
    | 0x8000b1cc => 0xabb78793 (* add a5,a5,-1349 # aabbaabb <_stack_top+0x2ab24dcd>  *)
    | 0x8000b1d0 => 0x00100693 (* li a3,1  *)
    | 0x8000b1d4 => 0x00000613 (* li a2,0  *)
    | 0x8000b1d8 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b1dc => 0x00040513 (* mv a0,s0  *)
    | 0x8000b1e0 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x8000b1e4 => 0x9e8f80ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b1e8 => 0x01350463 (* beq a0,s3,8000b1f0 <prvLowPriorityPeekTask+0x108>  *)
    | 0x8000b1ec => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b1f0 => 0x00000613 (* li a2,0  *)
    | 0x8000b1f4 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b1f8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b1fc => 0xcadf80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000b200 => 0x00050463 (* beqz a0,8000b208 <prvLowPriorityPeekTask+0x120>  *)
    | 0x8000b204 => 0xa721a223 (* sw s2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b208 => 0xa581a503 (* lw a0,-1448(gp) # 80080258 <xHighPriorityTask>  *)
    | 0x8000b20c => 0xa91f50ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000b210 => 0xa541a503 (* lw a0,-1452(gp) # 80080254 <xHighestPriorityTask>  *)
    | 0x8000b214 => 0xa89f50ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000b218 => 0x00a00513 (* li a0,10  *)
    | 0x8000b21c => 0x8fcf60ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000b220 => 0xf11ff06f (* j 8000b130 <prvLowPriorityPeekTask+0x48>  *)
    (* <vStartQueuePeekTasks> *)
    | 0x8000b224 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000b228 => 0x00000613 (* li a2,0  *)
    | 0x8000b22c => 0x00400593 (* li a1,4  *)
    | 0x8000b230 => 0x00500513 (* li a0,5  *)
    | 0x8000b234 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000b238 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000b23c => 0xf91f70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b240 => 0x0a050863 (* beqz a0,8000b2f0 <vStartQueuePeekTasks+0xcc>  *)
    | 0x8000b244 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000b248 => 0x07858593 (* add a1,a1,120 # 80014078 <_etext+0x4a8>  *)
    | 0x8000b24c => 0x00050413 (* mv s0,a0  *)
    | 0x8000b250 => 0x8a4f90ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x8000b254 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000b258 => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000b25c => 0x00040693 (* mv a3,s0  *)
    | 0x8000b260 => 0x00000793 (* li a5,0  *)
    | 0x8000b264 => 0x00000713 (* li a4,0  *)
    | 0x8000b268 => 0x07800613 (* li a2,120  *)
    | 0x8000b26c => 0x08c58593 (* add a1,a1,140 # 8001408c <_etext+0x4bc>  *)
    | 0x8000b270 => 0x0e850513 (* add a0,a0,232 # 8000b0e8 <prvLowPriorityPeekTask>  *)
    | 0x8000b274 => 0xd88f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000b278 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000b27c => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000b280 => 0x00040693 (* mv a3,s0  *)
    | 0x8000b284 => 0xa5c18793 (* add a5,gp,-1444 # 8008025c <xMediumPriorityTask>  *)
    | 0x8000b288 => 0x00100713 (* li a4,1  *)
    | 0x8000b28c => 0x07800613 (* li a2,120  *)
    | 0x8000b290 => 0x09458593 (* add a1,a1,148 # 80014094 <_etext+0x4c4>  *)
    | 0x8000b294 => 0x06850513 (* add a0,a0,104 # 8000b068 <prvMediumPriorityPeekTask>  *)
    | 0x8000b298 => 0xd64f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000b29c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000b2a0 => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000b2a4 => 0x00040693 (* mv a3,s0  *)
    | 0x8000b2a8 => 0xa5818793 (* add a5,gp,-1448 # 80080258 <xHighPriorityTask>  *)
    | 0x8000b2ac => 0x00200713 (* li a4,2  *)
    | 0x8000b2b0 => 0x07800613 (* li a2,120  *)
    | 0x8000b2b4 => 0x09c58593 (* add a1,a1,156 # 8001409c <_etext+0x4cc>  *)
    | 0x8000b2b8 => 0xfc050513 (* add a0,a0,-64 # 8000afc0 <prvHighPriorityPeekTask>  *)
    | 0x8000b2bc => 0xd40f50ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000b2c0 => 0x00040693 (* mv a3,s0  *)
    | 0x8000b2c4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000b2c8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000b2cc => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000b2d0 => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000b2d4 => 0xa5418793 (* add a5,gp,-1452 # 80080254 <xHighestPriorityTask>  *)
    | 0x8000b2d8 => 0x00300713 (* li a4,3  *)
    | 0x8000b2dc => 0x07800613 (* li a2,120  *)
    | 0x8000b2e0 => 0x0a458593 (* add a1,a1,164 # 800140a4 <_etext+0x4d4>  *)
    | 0x8000b2e4 => 0xeb050513 (* add a0,a0,-336 # 8000aeb0 <prvHighestPriorityPeekTask>  *)
    | 0x8000b2e8 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000b2ec => 0xd10f506f (* j 800007fc <xTaskCreate>  *)
    | 0x8000b2f0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000b2f4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000b2f8 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000b2fc => 0x00008067 (* ret  *)
    (* <xAreQueuePeekTasksStillRunning> *)
    | 0x8000b300 => 0xa601a603 (* lw a2,-1440(gp) # 80080260 <ulLoopCounter>  *)
    | 0x8000b304 => 0xa501a583 (* lw a1,-1456(gp) # 80080250 <ulLastLoopCounter.0>  *)
    | 0x8000b308 => 0x00c59663 (* bne a1,a2,8000b314 <xAreQueuePeekTasksStillRunning+0x14>  *)
    | 0x8000b30c => 0x00100613 (* li a2,1  *)
    | 0x8000b310 => 0xa6c1a223 (* sw a2,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b314 => 0xa601a683 (* lw a3,-1440(gp) # 80080260 <ulLoopCounter>  *)
    | 0x8000b318 => 0xa641a503 (* lw a0,-1436(gp) # 80080264 <xErrorDetected>  *)
    | 0x8000b31c => 0xa4d1a823 (* sw a3,-1456(gp) # 80080250 <ulLastLoopCounter.0>  *)
    | 0x8000b320 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000b324 => 0x00008067 (* ret  *)
    (* <prvQueueOverwriteTask> *)
    | 0x8000b328 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000b32c => 0x00000613 (* li a2,0  *)
    | 0x8000b330 => 0x00400593 (* li a1,4  *)
    | 0x8000b334 => 0x00100513 (* li a0,1  *)
    | 0x8000b338 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000b33c => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000b340 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000b344 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000b348 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000b34c => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000b350 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000b354 => 0xe79f70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b358 => 0x00050413 (* mv s0,a0  *)
    | 0x8000b35c => 0x00051a63 (* bnez a0,8000b370 <prvQueueOverwriteTask+0x48>  *)
    | 0x8000b360 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b364 => 0x05900593 (* li a1,89  *)
    | 0x8000b368 => 0x0ac50513 (* add a0,a0,172 # 800140ac <_etext+0x4dc>  *)
    | 0x8000b36c => 0x725060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b370 => 0x00100a93 (* li s5,1  *)
    | 0x8000b374 => 0x00a00993 (* li s3,10  *)
    | 0x8000b378 => 0x00400a13 (* li s4,4  *)
    | 0x8000b37c => 0x00100493 (* li s1,1  *)
    | 0x8000b380 => 0x00200693 (* li a3,2  *)
    | 0x8000b384 => 0x00000613 (* li a2,0  *)
    | 0x8000b388 => 0x00810593 (* add a1,sp,8  *)
    | 0x8000b38c => 0x00040513 (* mv a0,s0  *)
    | 0x8000b390 => 0x01312423 (* sw s3,8(sp)  *)
    | 0x8000b394 => 0x838f80ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b398 => 0x00000613 (* li a2,0  *)
    | 0x8000b39c => 0x00810593 (* add a1,sp,8  *)
    | 0x8000b3a0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b3a4 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x8000b3a8 => 0xe20f80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000b3ac => 0x00812783 (* lw a5,8(sp)  *)
    | 0x8000b3b0 => 0x01378463 (* beq a5,s3,8000b3b8 <prvQueueOverwriteTask+0x90>  *)
    | 0x8000b3b4 => 0x00000493 (* li s1,0  *)
    | 0x8000b3b8 => 0x00000793 (* li a5,0  *)
    | 0x8000b3bc => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x8000b3c0 => 0x02fa7e63 (* bgeu s4,a5,8000b3fc <prvQueueOverwriteTask+0xd4>  *)
    | 0x8000b3c4 => 0x00000613 (* li a2,0  *)
    | 0x8000b3c8 => 0x00810593 (* add a1,sp,8  *)
    | 0x8000b3cc => 0x00040513 (* mv a0,s0  *)
    | 0x8000b3d0 => 0xdf8f80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000b3d4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b3d8 => 0xe75f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b3dc => 0x00051c63 (* bnez a0,8000b3f4 <prvQueueOverwriteTask+0xcc>  *)
    | 0x8000b3e0 => 0xfa0480e3 (* beqz s1,8000b380 <prvQueueOverwriteTask+0x58>  *)
    | 0x8000b3e4 => 0xa701a783 (* lw a5,-1424(gp) # 80080270 <ulLoopCounter>  *)
    | 0x8000b3e8 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000b3ec => 0xa6f1a823 (* sw a5,-1424(gp) # 80080270 <ulLoopCounter>  *)
    | 0x8000b3f0 => 0xf8dff06f (* j 8000b37c <prvQueueOverwriteTask+0x54>  *)
    | 0x8000b3f4 => 0x00000493 (* li s1,0  *)
    | 0x8000b3f8 => 0xf89ff06f (* j 8000b380 <prvQueueOverwriteTask+0x58>  *)
    | 0x8000b3fc => 0x00200693 (* li a3,2  *)
    | 0x8000b400 => 0x00000613 (* li a2,0  *)
    | 0x8000b404 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b408 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b40c => 0xfc1f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b410 => 0x00000613 (* li a2,0  *)
    | 0x8000b414 => 0x00810593 (* add a1,sp,8  *)
    | 0x8000b418 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b41c => 0xa8df80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000b420 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000b424 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000b428 => 0x00f70463 (* beq a4,a5,8000b430 <prvQueueOverwriteTask+0x108>  *)
    | 0x8000b42c => 0x00000493 (* li s1,0  *)
    | 0x8000b430 => 0x00040513 (* mv a0,s0  *)
    | 0x8000b434 => 0xe19f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b438 => 0x01550463 (* beq a0,s5,8000b440 <prvQueueOverwriteTask+0x118>  *)
    | 0x8000b43c => 0x00000493 (* li s1,0  *)
    | 0x8000b440 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000b444 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000b448 => 0xf75ff06f (* j 8000b3bc <prvQueueOverwriteTask+0x94>  *)
    (* <vStartQueueOverwriteTask> *)
    | 0x8000b44c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000b450 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x8000b454 => 0x00000613 (* li a2,0  *)
    | 0x8000b458 => 0x00400593 (* li a1,4  *)
    | 0x8000b45c => 0x00100513 (* li a0,1  *)
    | 0x8000b460 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000b464 => 0xd69f70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b468 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000b46c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000b470 => 0xa6a1a623 (* sw a0,-1428(gp) # 8008026c <xISRQueue>  *)
    | 0x8000b474 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000b478 => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000b47c => 0x00000793 (* li a5,0  *)
    | 0x8000b480 => 0x00000693 (* li a3,0  *)
    | 0x8000b484 => 0x07800613 (* li a2,120  *)
    | 0x8000b488 => 0x0e058593 (* add a1,a1,224 # 800140e0 <_etext+0x510>  *)
    | 0x8000b48c => 0x32850513 (* add a0,a0,808 # 8000b328 <prvQueueOverwriteTask>  *)
    | 0x8000b490 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000b494 => 0xb68f506f (* j 800007fc <xTaskCreate>  *)
    (* <xIsQueueOverwriteTaskStillRunning> *)
    | 0x8000b498 => 0x8141a683 (* lw a3,-2028(gp) # 80080014 <xISRTestStatus>  *)
    | 0x8000b49c => 0x00100713 (* li a4,1  *)
    | 0x8000b4a0 => 0x00000513 (* li a0,0  *)
    | 0x8000b4a4 => 0x00e69663 (* bne a3,a4,8000b4b0 <xIsQueueOverwriteTaskStillRunning+0x18>  *)
    | 0x8000b4a8 => 0xa701a503 (* lw a0,-1424(gp) # 80080270 <ulLoopCounter>  *)
    | 0x8000b4ac => 0x00a03533 (* snez a0,a0  *)
    | 0x8000b4b0 => 0xa601a823 (* sw zero,-1424(gp) # 80080270 <ulLoopCounter>  *)
    | 0x8000b4b4 => 0x00008067 (* ret  *)
    (* <vQueueOverwritePeriodicISRDemo> *)
    | 0x8000b4b8 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000b4bc => 0x00a00793 (* li a5,10  *)
    | 0x8000b4c0 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000b4c4 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x8000b4c8 => 0x01400793 (* li a5,20  *)
    | 0x8000b4cc => 0x00f12423 (* sw a5,8(sp)  *)
    | 0x8000b4d0 => 0xa6c1a783 (* lw a5,-1428(gp) # 8008026c <xISRQueue>  *)
    | 0x8000b4d4 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000b4d8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000b4dc => 0x00079a63 (* bnez a5,8000b4f0 <vQueueOverwritePeriodicISRDemo+0x38>  *)
    | 0x8000b4e0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b4e4 => 0x0b800593 (* li a1,184  *)
    | 0x8000b4e8 => 0x0ac50513 (* add a0,a0,172 # 800140ac <_etext+0x4dc>  *)
    | 0x8000b4ec => 0x5a5060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b4f0 => 0xa681a783 (* lw a5,-1432(gp) # 80080268 <ulCallCount.0>  *)
    | 0x8000b4f4 => 0x00100713 (* li a4,1  *)
    | 0x8000b4f8 => 0x06e78663 (* beq a5,a4,8000b564 <vQueueOverwritePeriodicISRDemo+0xac>  *)
    | 0x8000b4fc => 0x00200713 (* li a4,2  *)
    | 0x8000b500 => 0x06e78e63 (* beq a5,a4,8000b57c <vQueueOverwritePeriodicISRDemo+0xc4>  *)
    | 0x8000b504 => 0x02079a63 (* bnez a5,8000b538 <vQueueOverwritePeriodicISRDemo+0x80>  *)
    | 0x8000b508 => 0xa6c1a503 (* lw a0,-1428(gp) # 8008026c <xISRQueue>  *)
    | 0x8000b50c => 0x00200693 (* li a3,2  *)
    | 0x8000b510 => 0x00000613 (* li a2,0  *)
    | 0x8000b514 => 0x00410593 (* add a1,sp,4  *)
    | 0x8000b518 => 0xa34f80ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000b51c => 0xa6c1a503 (* lw a0,-1428(gp) # 8008026c <xISRQueue>  *)
    | 0x8000b520 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b524 => 0xc79f80ef (* jal 8000419c <xQueuePeekFromISR>  *)
    | 0x8000b528 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000b52c => 0x00a00793 (* li a5,10  *)
    | 0x8000b530 => 0x00f70463 (* beq a4,a5,8000b538 <vQueueOverwritePeriodicISRDemo+0x80>  *)
    | 0x8000b534 => 0x8001aa23 (* sw zero,-2028(gp) # 80080014 <xISRTestStatus>  *)
    | 0x8000b538 => 0xa681a783 (* lw a5,-1432(gp) # 80080268 <ulCallCount.0>  *)
    | 0x8000b53c => 0x00200713 (* li a4,2  *)
    | 0x8000b540 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000b544 => 0x00f77463 (* bgeu a4,a5,8000b54c <vQueueOverwritePeriodicISRDemo+0x94>  *)
    | 0x8000b548 => 0x00000793 (* li a5,0  *)
    | 0x8000b54c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000b550 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000b554 => 0xa6f1a423 (* sw a5,-1432(gp) # 80080268 <ulCallCount.0>  *)
    | 0x8000b558 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000b55c => 0x02010113 (* add sp,sp,32  *)
    | 0x8000b560 => 0x00008067 (* ret  *)
    | 0x8000b564 => 0xa6c1a503 (* lw a0,-1428(gp) # 8008026c <xISRQueue>  *)
    | 0x8000b568 => 0x00200693 (* li a3,2  *)
    | 0x8000b56c => 0x00000613 (* li a2,0  *)
    | 0x8000b570 => 0x00810593 (* add a1,sp,8  *)
    | 0x8000b574 => 0x9d8f80ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000b578 => 0xfc1ff06f (* j 8000b538 <vQueueOverwritePeriodicISRDemo+0x80>  *)
    | 0x8000b57c => 0xa6c1a503 (* lw a0,-1428(gp) # 8008026c <xISRQueue>  *)
    | 0x8000b580 => 0x00000613 (* li a2,0  *)
    | 0x8000b584 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b588 => 0xb0df80ef (* jal 80004094 <xQueueReceiveFromISR>  *)
    | 0x8000b58c => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000b590 => 0x01400793 (* li a5,20  *)
    | 0x8000b594 => 0xf9dff06f (* j 8000b530 <vQueueOverwritePeriodicISRDemo+0x78>  *)
    (* <prvCheckReceivedValueWithinExpectedRange> *)
    | 0x8000b598 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000b59c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000b5a0 => 0x02a5f263 (* bgeu a1,a0,8000b5c4 <prvCheckReceivedValueWithinExpectedRange+0x2c>  *)
    | 0x8000b5a4 => 0x40b507b3 (* sub a5,a0,a1  *)
    | 0x8000b5a8 => 0x00300713 (* li a4,3  *)
    | 0x8000b5ac => 0x00100513 (* li a0,1  *)
    | 0x8000b5b0 => 0x23100593 (* li a1,561  *)
    | 0x8000b5b4 => 0x02f76263 (* bltu a4,a5,8000b5d8 <prvCheckReceivedValueWithinExpectedRange+0x40>  *)
    | 0x8000b5b8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000b5bc => 0x01010113 (* add sp,sp,16  *)
    | 0x8000b5c0 => 0x00008067 (* ret  *)
    | 0x8000b5c4 => 0x40a585b3 (* sub a1,a1,a0  *)
    | 0x8000b5c8 => 0x00300793 (* li a5,3  *)
    | 0x8000b5cc => 0x00100513 (* li a0,1  *)
    | 0x8000b5d0 => 0xfeb7f4e3 (* bgeu a5,a1,8000b5b8 <prvCheckReceivedValueWithinExpectedRange+0x20>  *)
    | 0x8000b5d4 => 0x23a00593 (* li a1,570  *)
    | 0x8000b5d8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b5dc => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b5e0 => 0x4b1060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b5e4 => 0x00000513 (* li a0,0  *)
    | 0x8000b5e8 => 0xfd1ff06f (* j 8000b5b8 <prvCheckReceivedValueWithinExpectedRange+0x20>  *)
    (* <prvCheckReceivedValue> *)
    | 0x8000b5ec => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000b5f0 => 0x00010737 (* lui a4,0x10  *)
    | 0x8000b5f4 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x8000b5f8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000b5fc => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000b600 => 0xffe70713 (* add a4,a4,-2 # fffe <__stack_size+0xfea0>  *)
    | 0x8000b604 => 0x06a77e63 (* bgeu a4,a0,8000b680 <prvCheckReceivedValue+0x94>  *)
    | 0x8000b608 => 0xffff0737 (* lui a4,0xffff0  *)
    | 0x8000b60c => 0x00170713 (* add a4,a4,1 # ffff0001 <_stack_top+0x7ff5a313>  *)
    | 0x8000b610 => 0x00e50733 (* add a4,a0,a4  *)
    | 0x8000b614 => 0x00500693 (* li a3,5  *)
    | 0x8000b618 => 0x02e6f063 (* bgeu a3,a4,8000b638 <prvCheckReceivedValue+0x4c>  *)
    | 0x8000b61c => 0xff800713 (* li a4,-8  *)
    | 0x8000b620 => 0x00a76c63 (* bltu a4,a0,8000b638 <prvCheckReceivedValue+0x4c>  *)
    | 0x8000b624 => 0x8181a583 (* lw a1,-2024(gp) # 80080018 <ulExpectedReceivedFromISR.8>  *)
    | 0x8000b628 => 0xf71ff0ef (* jal 8000b598 <prvCheckReceivedValueWithinExpectedRange>  *)
    | 0x8000b62c => 0x00100793 (* li a5,1  *)
    | 0x8000b630 => 0x00f50463 (* beq a0,a5,8000b638 <prvCheckReceivedValue+0x4c>  *)
    | 0x8000b634 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b638 => 0x8201a783 (* lw a5,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b63c => 0x00079a63 (* bnez a5,8000b650 <prvCheckReceivedValue+0x64>  *)
    | 0x8000b640 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b644 => 0x1fd00593 (* li a1,509  *)
    | 0x8000b648 => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b64c => 0x445060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b650 => 0x8181a783 (* lw a5,-2024(gp) # 80080018 <ulExpectedReceivedFromISR.8>  *)
    | 0x8000b654 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000b658 => 0x00078e63 (* beqz a5,8000b674 <prvCheckReceivedValue+0x88>  *)
    | 0x8000b65c => 0x80f1ac23 (* sw a5,-2024(gp) # 80080018 <ulExpectedReceivedFromISR.8>  *)
    | 0x8000b660 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000b664 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000b668 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000b66c => 0x01010113 (* add sp,sp,16  *)
    | 0x8000b670 => 0x00008067 (* ret  *)
    | 0x8000b674 => 0x000107b7 (* lui a5,0x10  *)
    | 0x8000b678 => 0xfff78793 (* add a5,a5,-1 # ffff <__stack_size+0xfea1>  *)
    | 0x8000b67c => 0xfe1ff06f (* j 8000b65c <prvCheckReceivedValue+0x70>  *)
    | 0x8000b680 => 0x00500693 (* li a3,5  *)
    | 0x8000b684 => 0x02a6f263 (* bgeu a3,a0,8000b6a8 <prvCheckReceivedValue+0xbc>  *)
    | 0x8000b688 => 0x40a70733 (* sub a4,a4,a0  *)
    | 0x8000b68c => 0x00600793 (* li a5,6  *)
    | 0x8000b690 => 0x00e7fc63 (* bgeu a5,a4,8000b6a8 <prvCheckReceivedValue+0xbc>  *)
    | 0x8000b694 => 0xa8c1a583 (* lw a1,-1396(gp) # 8008028c <ulExpectedReceivedFromTask.7>  *)
    | 0x8000b698 => 0xf01ff0ef (* jal 8000b598 <prvCheckReceivedValueWithinExpectedRange>  *)
    | 0x8000b69c => 0x00100793 (* li a5,1  *)
    | 0x8000b6a0 => 0x00f50463 (* beq a0,a5,8000b6a8 <prvCheckReceivedValue+0xbc>  *)
    | 0x8000b6a4 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b6a8 => 0x8201a783 (* lw a5,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b6ac => 0x00079a63 (* bnez a5,8000b6c0 <prvCheckReceivedValue+0xd4>  *)
    | 0x8000b6b0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b6b4 => 0x21d00593 (* li a1,541  *)
    | 0x8000b6b8 => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b6bc => 0x3d5060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b6c0 => 0xa8c1a783 (* lw a5,-1396(gp) # 8008028c <ulExpectedReceivedFromTask.7>  *)
    | 0x8000b6c4 => 0x00010737 (* lui a4,0x10  *)
    | 0x8000b6c8 => 0xffe70713 (* add a4,a4,-2 # fffe <__stack_size+0xfea0>  *)
    | 0x8000b6cc => 0x00178793 (* add a5,a5,1  *)
    | 0x8000b6d0 => 0x00f76663 (* bltu a4,a5,8000b6dc <prvCheckReceivedValue+0xf0>  *)
    | 0x8000b6d4 => 0xa8f1a623 (* sw a5,-1396(gp) # 8008028c <ulExpectedReceivedFromTask.7>  *)
    | 0x8000b6d8 => 0xf89ff06f (* j 8000b660 <prvCheckReceivedValue+0x74>  *)
    | 0x8000b6dc => 0xa801a623 (* sw zero,-1396(gp) # 8008028c <ulExpectedReceivedFromTask.7>  *)
    | 0x8000b6e0 => 0xf81ff06f (* j 8000b660 <prvCheckReceivedValue+0x74>  *)
    (* <prvQueueSetReceivingTask> *)
    | 0x8000b6e4 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000b6e8 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000b6ec => 0x00900513 (* li a0,9  *)
    | 0x8000b6f0 => 0x800954b7 (* lui s1,0x80095  *)
    | 0x8000b6f4 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000b6f8 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000b6fc => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000b700 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000b704 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000b708 => 0xd9048913 (* add s2,s1,-624 # 80094d90 <xQueues>  *)
    | 0x8000b70c => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000b710 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x8000b714 => 0xdbdf80ef (* jal 800044d0 <xQueueCreateSet>  *)
    | 0x8000b718 => 0xaaa1a223 (* sw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b71c => 0x00c90993 (* add s3,s2,12  *)
    | 0x8000b720 => 0xd9048493 (* add s1,s1,-624  *)
    | 0x8000b724 => 0x00100a13 (* li s4,1  *)
    | 0x8000b728 => 0x00000613 (* li a2,0  *)
    | 0x8000b72c => 0x00400593 (* li a1,4  *)
    | 0x8000b730 => 0x00300513 (* li a0,3  *)
    | 0x8000b734 => 0xa99f70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b738 => 0x00a92023 (* sw a0,0(s2)  *)
    | 0x8000b73c => 0x00051a63 (* bnez a0,8000b750 <prvQueueSetReceivingTask+0x6c>  *)
    | 0x8000b740 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b744 => 0x42900593 (* li a1,1065  *)
    | 0x8000b748 => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b74c => 0x345060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b750 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b754 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x8000b758 => 0xd85f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000b75c => 0x1b450c63 (* beq a0,s4,8000b914 <prvQueueSetReceivingTask+0x230>  *)
    | 0x8000b760 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b764 => 0x00490913 (* add s2,s2,4  *)
    | 0x8000b768 => 0xfd3910e3 (* bne s2,s3,8000b728 <prvQueueSetReceivingTask+0x44>  *)
    | 0x8000b76c => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x8000b770 => 0x00000593 (* li a1,0  *)
    | 0x8000b774 => 0xda1f80ef (* jal 80004514 <xQueueRemoveFromSet>  *)
    | 0x8000b778 => 0x00050463 (* beqz a0,8000b780 <prvQueueSetReceivingTask+0x9c>  *)
    | 0x8000b77c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b780 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b784 => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x8000b788 => 0xd8df80ef (* jal 80004514 <xQueueRemoveFromSet>  *)
    | 0x8000b78c => 0x00100793 (* li a5,1  *)
    | 0x8000b790 => 0x00f50463 (* beq a0,a5,8000b798 <prvQueueSetReceivingTask+0xb4>  *)
    | 0x8000b794 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b798 => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x8000b79c => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b7a0 => 0x00000693 (* li a3,0  *)
    | 0x8000b7a4 => 0x00000613 (* li a2,0  *)
    | 0x8000b7a8 => 0xc25f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b7ac => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b7b0 => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x8000b7b4 => 0xd29f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000b7b8 => 0x00050463 (* beqz a0,8000b7c0 <prvQueueSetReceivingTask+0xdc>  *)
    | 0x8000b7bc => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b7c0 => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x8000b7c4 => 0x00000613 (* li a2,0  *)
    | 0x8000b7c8 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000b7cc => 0x9fcf80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000b7d0 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b7d4 => 0x0004a503 (* lw a0,0(s1)  *)
    | 0x8000b7d8 => 0xd05f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000b7dc => 0x00100793 (* li a5,1  *)
    | 0x8000b7e0 => 0x00f50463 (* beq a0,a5,8000b7e8 <prvQueueSetReceivingTask+0x104>  *)
    | 0x8000b7e4 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b7e8 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b7ec => 0x0c800593 (* li a1,200  *)
    | 0x8000b7f0 => 0xd65f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000b7f4 => 0x00050463 (* beqz a0,8000b7fc <prvQueueSetReceivingTask+0x118>  *)
    | 0x8000b7f8 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b7fc => 0x00000613 (* li a2,0  *)
    | 0x8000b800 => 0x00400593 (* li a1,4  *)
    | 0x8000b804 => 0x00100513 (* li a0,1  *)
    | 0x8000b808 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x8000b80c => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x8000b810 => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x8000b814 => 0x9b9f70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b818 => 0x00050493 (* mv s1,a0  *)
    | 0x8000b81c => 0x10050863 (* beqz a0,8000b92c <prvQueueSetReceivingTask+0x248>  *)
    | 0x8000b820 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b824 => 0xcb9f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000b828 => 0x00200693 (* li a3,2  *)
    | 0x8000b82c => 0x00000613 (* li a2,0  *)
    | 0x8000b830 => 0x01410593 (* add a1,sp,20  *)
    | 0x8000b834 => 0x00048513 (* mv a0,s1  *)
    | 0x8000b838 => 0xb95f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b83c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b840 => 0xa0df80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b844 => 0x00100793 (* li a5,1  *)
    | 0x8000b848 => 0x20f51e63 (* bne a0,a5,8000ba64 <prvQueueSetReceivingTask+0x380>  *)
    | 0x8000b84c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b850 => 0x00000613 (* li a2,0  *)
    | 0x8000b854 => 0x01c10593 (* add a1,sp,28  *)
    | 0x8000b858 => 0xe50f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000b85c => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000b860 => 0x00f48463 (* beq s1,a5,8000b868 <prvQueueSetReceivingTask+0x184>  *)
    | 0x8000b864 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b868 => 0x01412783 (* lw a5,20(sp)  *)
    | 0x8000b86c => 0x00200693 (* li a3,2  *)
    | 0x8000b870 => 0x00000613 (* li a2,0  *)
    | 0x8000b874 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000b878 => 0x01410593 (* add a1,sp,20  *)
    | 0x8000b87c => 0x00048513 (* mv a0,s1  *)
    | 0x8000b880 => 0x00f12a23 (* sw a5,20(sp)  *)
    | 0x8000b884 => 0xb49f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000b888 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b88c => 0x9c1f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b890 => 0x00100793 (* li a5,1  *)
    | 0x8000b894 => 0x00f50463 (* beq a0,a5,8000b89c <prvQueueSetReceivingTask+0x1b8>  *)
    | 0x8000b898 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b89c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b8a0 => 0x00000593 (* li a1,0  *)
    | 0x8000b8a4 => 0xcb1f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000b8a8 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000b8ac => 0x00a48463 (* beq s1,a0,8000b8b4 <prvQueueSetReceivingTask+0x1d0>  *)
    | 0x8000b8b0 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b8b4 => 0x00000613 (* li a2,0  *)
    | 0x8000b8b8 => 0x01810593 (* add a1,sp,24  *)
    | 0x8000b8bc => 0x00048513 (* mv a0,s1  *)
    | 0x8000b8c0 => 0x908f80ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000b8c4 => 0x01812703 (* lw a4,24(sp)  *)
    | 0x8000b8c8 => 0x01412783 (* lw a5,20(sp)  *)
    | 0x8000b8cc => 0x00f70463 (* beq a4,a5,8000b8d4 <prvQueueSetReceivingTask+0x1f0>  *)
    | 0x8000b8d0 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b8d4 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b8d8 => 0x975f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000b8dc => 0x00050463 (* beqz a0,8000b8e4 <prvQueueSetReceivingTask+0x200>  *)
    | 0x8000b8e0 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b8e4 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b8e8 => 0x00000593 (* li a1,0  *)
    | 0x8000b8ec => 0xc69f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000b8f0 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000b8f4 => 0x00050463 (* beqz a0,8000b8fc <prvQueueSetReceivingTask+0x218>  *)
    | 0x8000b8f8 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b8fc => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b900 => 0x00048513 (* mv a0,s1  *)
    | 0x8000b904 => 0xc11f80ef (* jal 80004514 <xQueueRemoveFromSet>  *)
    | 0x8000b908 => 0x00048513 (* mv a0,s1  *)
    | 0x8000b90c => 0xaf1f80ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000b910 => 0x02c0006f (* j 8000b93c <prvQueueSetReceivingTask+0x258>  *)
    | 0x8000b914 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000b918 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x8000b91c => 0xbc1f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000b920 => 0xe40502e3 (* beqz a0,8000b764 <prvQueueSetReceivingTask+0x80>  *)
    | 0x8000b924 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000b928 => 0xe3dff06f (* j 8000b764 <prvQueueSetReceivingTask+0x80>  *)
    | 0x8000b92c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b930 => 0x28100593 (* li a1,641  *)
    | 0x8000b934 => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b938 => 0x159060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b93c => 0x00100793 (* li a5,1  *)
    | 0x8000b940 => 0x00f12823 (* sw a5,16(sp)  *)
    | 0x8000b944 => 0x00000613 (* li a2,0  *)
    | 0x8000b948 => 0x00200793 (* li a5,2  *)
    | 0x8000b94c => 0x00400593 (* li a1,4  *)
    | 0x8000b950 => 0x00100513 (* li a0,1  *)
    | 0x8000b954 => 0x00f12a23 (* sw a5,20(sp)  *)
    | 0x8000b958 => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x8000b95c => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x8000b960 => 0x86df70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b964 => 0x00050913 (* mv s2,a0  *)
    | 0x8000b968 => 0x00051a63 (* bnez a0,8000b97c <prvQueueSetReceivingTask+0x298>  *)
    | 0x8000b96c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b970 => 0x2d700593 (* li a1,727  *)
    | 0x8000b974 => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b978 => 0x119060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b97c => 0x00000613 (* li a2,0  *)
    | 0x8000b980 => 0x00400593 (* li a1,4  *)
    | 0x8000b984 => 0x00100513 (* li a0,1  *)
    | 0x8000b988 => 0x845f70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b98c => 0x00050993 (* mv s3,a0  *)
    | 0x8000b990 => 0x34051863 (* bnez a0,8000bce0 <prvQueueSetReceivingTask+0x5fc>  *)
    | 0x8000b994 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b998 => 0x2d900593 (* li a1,729  *)
    | 0x8000b99c => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b9a0 => 0x0f1060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b9a4 => 0x00100793 (* li a5,1  *)
    | 0x8000b9a8 => 0x00f12823 (* sw a5,16(sp)  *)
    | 0x8000b9ac => 0x00000613 (* li a2,0  *)
    | 0x8000b9b0 => 0x00200793 (* li a5,2  *)
    | 0x8000b9b4 => 0x00400593 (* li a1,4  *)
    | 0x8000b9b8 => 0x00100513 (* li a0,1  *)
    | 0x8000b9bc => 0x00f12a23 (* sw a5,20(sp)  *)
    | 0x8000b9c0 => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x8000b9c4 => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x8000b9c8 => 0x805f70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b9cc => 0x00050913 (* mv s2,a0  *)
    | 0x8000b9d0 => 0x00051a63 (* bnez a0,8000b9e4 <prvQueueSetReceivingTask+0x300>  *)
    | 0x8000b9d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000b9d8 => 0x37b00593 (* li a1,891  *)
    | 0x8000b9dc => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000b9e0 => 0x0b1060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000b9e4 => 0x00000613 (* li a2,0  *)
    | 0x8000b9e8 => 0x00400593 (* li a1,4  *)
    | 0x8000b9ec => 0x00100513 (* li a0,1  *)
    | 0x8000b9f0 => 0xfdcf70ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000b9f4 => 0x00050993 (* mv s3,a0  *)
    | 0x8000b9f8 => 0x0c051663 (* bnez a0,8000bac4 <prvQueueSetReceivingTask+0x3e0>  *)
    | 0x8000b9fc => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ba00 => 0x37d00593 (* li a1,893  *)
    | 0x8000ba04 => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000ba08 => 0x089060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ba0c => 0x8201a783 (* lw a5,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000ba10 => 0x00079a63 (* bnez a5,8000ba24 <prvQueueSetReceivingTask+0x340>  *)
    | 0x8000ba14 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ba18 => 0x47200593 (* li a1,1138  *)
    | 0x8000ba1c => 0x0e850513 (* add a0,a0,232 # 800140e8 <_etext+0x518>  *)
    | 0x8000ba20 => 0x071060ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ba24 => 0xa941a503 (* lw a0,-1388(gp) # 80080294 <xQueueSetSendingTask>  *)
    | 0x8000ba28 => 0x00100a93 (* li s5,1  *)
    | 0x8000ba2c => 0x80080937 (* lui s2,0x80080  *)
    | 0x8000ba30 => 0xa6cf50ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000ba34 => 0x00100713 (* li a4,1  *)
    | 0x8000ba38 => 0xa8e1ae23 (* sw a4,-1380(gp) # 8008029c <xSetupComplete>  *)
    | 0x8000ba3c => 0x00000513 (* li a0,0  *)
    | 0x8000ba40 => 0x8acf50ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000ba44 => 0x00050993 (* mv s3,a0  *)
    | 0x8000ba48 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000ba4c => 0xfff00593 (* li a1,-1  *)
    | 0x8000ba50 => 0xb05f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000ba54 => 0x00051c63 (* bnez a0,8000ba6c <prvQueueSetReceivingTask+0x388>  *)
    | 0x8000ba58 => 0xfe0982e3 (* beqz s3,8000ba3c <prvQueueSetReceivingTask+0x358>  *)
    | 0x8000ba5c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000ba60 => 0xfddff06f (* j 8000ba3c <prvQueueSetReceivingTask+0x358>  *)
    | 0x8000ba64 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000ba68 => 0xde5ff06f (* j 8000b84c <prvQueueSetReceivingTask+0x168>  *)
    | 0x8000ba6c => 0x00000613 (* li a2,0  *)
    | 0x8000ba70 => 0x01c10593 (* add a1,sp,28  *)
    | 0x8000ba74 => 0xf55f70ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000ba78 => 0x01550463 (* beq a0,s5,8000ba80 <prvQueueSetReceivingTask+0x39c>  *)
    | 0x8000ba7c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000ba80 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000ba84 => 0x00492783 (* lw a5,4(s2) # 80080004 <xCriticalNesting>  *)
    | 0x8000ba88 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8000ba8c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000ba90 => 0x00f92223 (* sw a5,4(s2)  *)
    | 0x8000ba94 => 0xb59ff0ef (* jal 8000b5ec <prvCheckReceivedValue>  *)
    | 0x8000ba98 => 0x00492783 (* lw a5,4(s2)  *)
    | 0x8000ba9c => 0xfff78793 (* add a5,a5,-1  *)
    | 0x8000baa0 => 0x00f92223 (* sw a5,4(s2)  *)
    | 0x8000baa4 => 0x00079463 (* bnez a5,8000baac <prvQueueSetReceivingTask+0x3c8>  *)
    | 0x8000baa8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000baac => 0x8201a783 (* lw a5,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bab0 => 0xf95796e3 (* bne a5,s5,8000ba3c <prvQueueSetReceivingTask+0x358>  *)
    | 0x8000bab4 => 0xaa01a783 (* lw a5,-1376(gp) # 800802a0 <ulCycleCounter>  *)
    | 0x8000bab8 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000babc => 0xaaf1a023 (* sw a5,-1376(gp) # 800802a0 <ulCycleCounter>  *)
    | 0x8000bac0 => 0xf7dff06f (* j 8000ba3c <prvQueueSetReceivingTask+0x358>  *)
    | 0x8000bac4 => 0xf40904e3 (* beqz s2,8000ba0c <prvQueueSetReceivingTask+0x328>  *)
    | 0x8000bac8 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bacc => 0x00090513 (* mv a0,s2  *)
    | 0x8000bad0 => 0xa0df80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000bad4 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bad8 => 0x00098513 (* mv a0,s3  *)
    | 0x8000badc => 0xa01f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000bae0 => 0x00200693 (* li a3,2  *)
    | 0x8000bae4 => 0x00000613 (* li a2,0  *)
    | 0x8000bae8 => 0x01010593 (* add a1,sp,16  *)
    | 0x8000baec => 0x00090513 (* mv a0,s2  *)
    | 0x8000baf0 => 0xc5df70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000baf4 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000baf8 => 0xf54f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bafc => 0x00100793 (* li a5,1  *)
    | 0x8000bb00 => 0x00f50463 (* beq a0,a5,8000bb08 <prvQueueSetReceivingTask+0x424>  *)
    | 0x8000bb04 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bb08 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bb0c => 0x00000613 (* li a2,0  *)
    | 0x8000bb10 => 0x01c10593 (* add a1,sp,28  *)
    | 0x8000bb14 => 0xb94f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000bb18 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000bb1c => 0x00f90463 (* beq s2,a5,8000bb24 <prvQueueSetReceivingTask+0x440>  *)
    | 0x8000bb20 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bb24 => 0x00200693 (* li a3,2  *)
    | 0x8000bb28 => 0x00000613 (* li a2,0  *)
    | 0x8000bb2c => 0x01410593 (* add a1,sp,20  *)
    | 0x8000bb30 => 0x00098513 (* mv a0,s3  *)
    | 0x8000bb34 => 0xc19f70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000bb38 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bb3c => 0xf10f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bb40 => 0x00200793 (* li a5,2  *)
    | 0x8000bb44 => 0x00f50463 (* beq a0,a5,8000bb4c <prvQueueSetReceivingTask+0x468>  *)
    | 0x8000bb48 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bb4c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bb50 => 0x00000613 (* li a2,0  *)
    | 0x8000bb54 => 0x01c10593 (* add a1,sp,28  *)
    | 0x8000bb58 => 0xb50f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000bb5c => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000bb60 => 0x00f90463 (* beq s2,a5,8000bb68 <prvQueueSetReceivingTask+0x484>  *)
    | 0x8000bb64 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bb68 => 0x00200693 (* li a3,2  *)
    | 0x8000bb6c => 0x00000613 (* li a2,0  *)
    | 0x8000bb70 => 0x01410593 (* add a1,sp,20  *)
    | 0x8000bb74 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bb78 => 0xbd5f70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000bb7c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bb80 => 0xeccf80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bb84 => 0x00200793 (* li a5,2  *)
    | 0x8000bb88 => 0x00f50463 (* beq a0,a5,8000bb90 <prvQueueSetReceivingTask+0x4ac>  *)
    | 0x8000bb8c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bb90 => 0x00200693 (* li a3,2  *)
    | 0x8000bb94 => 0x00000613 (* li a2,0  *)
    | 0x8000bb98 => 0x01010593 (* add a1,sp,16  *)
    | 0x8000bb9c => 0x00098513 (* mv a0,s3  *)
    | 0x8000bba0 => 0xbadf70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000bba4 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bba8 => 0xea4f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bbac => 0x00200793 (* li a5,2  *)
    | 0x8000bbb0 => 0x00f50463 (* beq a0,a5,8000bbb8 <prvQueueSetReceivingTask+0x4d4>  *)
    | 0x8000bbb4 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bbb8 => 0x00200693 (* li a3,2  *)
    | 0x8000bbbc => 0x00000613 (* li a2,0  *)
    | 0x8000bbc0 => 0x01410593 (* add a1,sp,20  *)
    | 0x8000bbc4 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bbc8 => 0xb85f70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000bbcc => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bbd0 => 0xe7cf80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bbd4 => 0x00200793 (* li a5,2  *)
    | 0x8000bbd8 => 0x00f50463 (* beq a0,a5,8000bbe0 <prvQueueSetReceivingTask+0x4fc>  *)
    | 0x8000bbdc => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bbe0 => 0x00200693 (* li a3,2  *)
    | 0x8000bbe4 => 0x00000613 (* li a2,0  *)
    | 0x8000bbe8 => 0x01010593 (* add a1,sp,16  *)
    | 0x8000bbec => 0x00098513 (* mv a0,s3  *)
    | 0x8000bbf0 => 0xb5df70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000bbf4 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bbf8 => 0xe54f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bbfc => 0x00200793 (* li a5,2  *)
    | 0x8000bc00 => 0x00f50463 (* beq a0,a5,8000bc08 <prvQueueSetReceivingTask+0x524>  *)
    | 0x8000bc04 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bc08 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bc0c => 0x00000593 (* li a1,0  *)
    | 0x8000bc10 => 0x945f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000bc14 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000bc18 => 0x00a90463 (* beq s2,a0,8000bc20 <prvQueueSetReceivingTask+0x53c>  *)
    | 0x8000bc1c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bc20 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bc24 => 0xe28f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bc28 => 0x00100793 (* li a5,1  *)
    | 0x8000bc2c => 0x00f50463 (* beq a0,a5,8000bc34 <prvQueueSetReceivingTask+0x550>  *)
    | 0x8000bc30 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bc34 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8000bc38 => 0x00000613 (* li a2,0  *)
    | 0x8000bc3c => 0x01810593 (* add a1,sp,24  *)
    | 0x8000bc40 => 0xd89f70ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000bc44 => 0x01812703 (* lw a4,24(sp)  *)
    | 0x8000bc48 => 0x01412783 (* lw a5,20(sp)  *)
    | 0x8000bc4c => 0x00f70463 (* beq a4,a5,8000bc54 <prvQueueSetReceivingTask+0x570>  *)
    | 0x8000bc50 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bc54 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bc58 => 0x00000593 (* li a1,0  *)
    | 0x8000bc5c => 0x8f9f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000bc60 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000bc64 => 0x00a98463 (* beq s3,a0,8000bc6c <prvQueueSetReceivingTask+0x588>  *)
    | 0x8000bc68 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bc6c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bc70 => 0xddcf80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bc74 => 0x00050463 (* beqz a0,8000bc7c <prvQueueSetReceivingTask+0x598>  *)
    | 0x8000bc78 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bc7c => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8000bc80 => 0x00000613 (* li a2,0  *)
    | 0x8000bc84 => 0x01810593 (* add a1,sp,24  *)
    | 0x8000bc88 => 0xd41f70ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000bc8c => 0x01812703 (* lw a4,24(sp)  *)
    | 0x8000bc90 => 0x01012783 (* lw a5,16(sp)  *)
    | 0x8000bc94 => 0x00f70463 (* beq a4,a5,8000bc9c <prvQueueSetReceivingTask+0x5b8>  *)
    | 0x8000bc98 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bc9c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bca0 => 0x00000593 (* li a1,0  *)
    | 0x8000bca4 => 0x8b1f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000bca8 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000bcac => 0x00050463 (* beqz a0,8000bcb4 <prvQueueSetReceivingTask+0x5d0>  *)
    | 0x8000bcb0 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bcb4 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bcb8 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bcbc => 0x859f80ef (* jal 80004514 <xQueueRemoveFromSet>  *)
    | 0x8000bcc0 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bcc4 => 0x00098513 (* mv a0,s3  *)
    | 0x8000bcc8 => 0x84df80ef (* jal 80004514 <xQueueRemoveFromSet>  *)
    | 0x8000bccc => 0x00090513 (* mv a0,s2  *)
    | 0x8000bcd0 => 0xf2cf80ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000bcd4 => 0x00098513 (* mv a0,s3  *)
    | 0x8000bcd8 => 0xf24f80ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000bcdc => 0xd31ff06f (* j 8000ba0c <prvQueueSetReceivingTask+0x328>  *)
    | 0x8000bce0 => 0xcc0902e3 (* beqz s2,8000b9a4 <prvQueueSetReceivingTask+0x2c0>  *)
    | 0x8000bce4 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bce8 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bcec => 0xff0f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000bcf0 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bcf4 => 0x00098513 (* mv a0,s3  *)
    | 0x8000bcf8 => 0xfe4f80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000bcfc => 0x00200693 (* li a3,2  *)
    | 0x8000bd00 => 0x00000613 (* li a2,0  *)
    | 0x8000bd04 => 0x01010593 (* add a1,sp,16  *)
    | 0x8000bd08 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bd0c => 0xec0f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000bd10 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bd14 => 0xd38f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bd18 => 0x00100793 (* li a5,1  *)
    | 0x8000bd1c => 0x00f50463 (* beq a0,a5,8000bd24 <prvQueueSetReceivingTask+0x640>  *)
    | 0x8000bd20 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bd24 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bd28 => 0x00000613 (* li a2,0  *)
    | 0x8000bd2c => 0x01c10593 (* add a1,sp,28  *)
    | 0x8000bd30 => 0x978f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000bd34 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000bd38 => 0x00f90463 (* beq s2,a5,8000bd40 <prvQueueSetReceivingTask+0x65c>  *)
    | 0x8000bd3c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bd40 => 0x00200693 (* li a3,2  *)
    | 0x8000bd44 => 0x00000613 (* li a2,0  *)
    | 0x8000bd48 => 0x01410593 (* add a1,sp,20  *)
    | 0x8000bd4c => 0x00098513 (* mv a0,s3  *)
    | 0x8000bd50 => 0xe7cf70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000bd54 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bd58 => 0xcf4f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bd5c => 0x00200793 (* li a5,2  *)
    | 0x8000bd60 => 0x00f50463 (* beq a0,a5,8000bd68 <prvQueueSetReceivingTask+0x684>  *)
    | 0x8000bd64 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bd68 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bd6c => 0x00000613 (* li a2,0  *)
    | 0x8000bd70 => 0x01c10593 (* add a1,sp,28  *)
    | 0x8000bd74 => 0x934f80ef (* jal 80003ea8 <xQueuePeek>  *)
    | 0x8000bd78 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000bd7c => 0x00f90463 (* beq s2,a5,8000bd84 <prvQueueSetReceivingTask+0x6a0>  *)
    | 0x8000bd80 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bd84 => 0x00200693 (* li a3,2  *)
    | 0x8000bd88 => 0x00000613 (* li a2,0  *)
    | 0x8000bd8c => 0x01410593 (* add a1,sp,20  *)
    | 0x8000bd90 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bd94 => 0xe38f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000bd98 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bd9c => 0xcb0f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bda0 => 0x00200793 (* li a5,2  *)
    | 0x8000bda4 => 0x00f50463 (* beq a0,a5,8000bdac <prvQueueSetReceivingTask+0x6c8>  *)
    | 0x8000bda8 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bdac => 0x00200693 (* li a3,2  *)
    | 0x8000bdb0 => 0x00000613 (* li a2,0  *)
    | 0x8000bdb4 => 0x01010593 (* add a1,sp,16  *)
    | 0x8000bdb8 => 0x00098513 (* mv a0,s3  *)
    | 0x8000bdbc => 0xe10f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000bdc0 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bdc4 => 0xc88f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bdc8 => 0x00200793 (* li a5,2  *)
    | 0x8000bdcc => 0x00f50463 (* beq a0,a5,8000bdd4 <prvQueueSetReceivingTask+0x6f0>  *)
    | 0x8000bdd0 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bdd4 => 0x00200693 (* li a3,2  *)
    | 0x8000bdd8 => 0x00000613 (* li a2,0  *)
    | 0x8000bddc => 0x01410593 (* add a1,sp,20  *)
    | 0x8000bde0 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bde4 => 0xde8f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000bde8 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bdec => 0xc60f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000bdf0 => 0x00200793 (* li a5,2  *)
    | 0x8000bdf4 => 0x00f50463 (* beq a0,a5,8000bdfc <prvQueueSetReceivingTask+0x718>  *)
    | 0x8000bdf8 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bdfc => 0x00200693 (* li a3,2  *)
    | 0x8000be00 => 0x00000613 (* li a2,0  *)
    | 0x8000be04 => 0x01010593 (* add a1,sp,16  *)
    | 0x8000be08 => 0x00098513 (* mv a0,s3  *)
    | 0x8000be0c => 0xdc0f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000be10 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000be14 => 0xc38f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000be18 => 0x00200793 (* li a5,2  *)
    | 0x8000be1c => 0x00f50463 (* beq a0,a5,8000be24 <prvQueueSetReceivingTask+0x740>  *)
    | 0x8000be20 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000be24 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000be28 => 0x00000593 (* li a1,0  *)
    | 0x8000be2c => 0xf28f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000be30 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000be34 => 0x00a90463 (* beq s2,a0,8000be3c <prvQueueSetReceivingTask+0x758>  *)
    | 0x8000be38 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000be3c => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000be40 => 0xc0cf80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000be44 => 0x00100793 (* li a5,1  *)
    | 0x8000be48 => 0x00f50463 (* beq a0,a5,8000be50 <prvQueueSetReceivingTask+0x76c>  *)
    | 0x8000be4c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000be50 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8000be54 => 0x00000613 (* li a2,0  *)
    | 0x8000be58 => 0x01810593 (* add a1,sp,24  *)
    | 0x8000be5c => 0xb6df70ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000be60 => 0x01812703 (* lw a4,24(sp)  *)
    | 0x8000be64 => 0x01412783 (* lw a5,20(sp)  *)
    | 0x8000be68 => 0x00f70463 (* beq a4,a5,8000be70 <prvQueueSetReceivingTask+0x78c>  *)
    | 0x8000be6c => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000be70 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000be74 => 0x00000593 (* li a1,0  *)
    | 0x8000be78 => 0xedcf80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000be7c => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000be80 => 0x00a98463 (* beq s3,a0,8000be88 <prvQueueSetReceivingTask+0x7a4>  *)
    | 0x8000be84 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000be88 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000be8c => 0xbc0f80ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000be90 => 0x00050463 (* beqz a0,8000be98 <prvQueueSetReceivingTask+0x7b4>  *)
    | 0x8000be94 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000be98 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8000be9c => 0x00000613 (* li a2,0  *)
    | 0x8000bea0 => 0x01810593 (* add a1,sp,24  *)
    | 0x8000bea4 => 0xb25f70ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000bea8 => 0x01812703 (* lw a4,24(sp)  *)
    | 0x8000beac => 0x01012783 (* lw a5,16(sp)  *)
    | 0x8000beb0 => 0x00f70463 (* beq a4,a5,8000beb8 <prvQueueSetReceivingTask+0x7d4>  *)
    | 0x8000beb4 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000beb8 => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bebc => 0x00000593 (* li a1,0  *)
    | 0x8000bec0 => 0xe94f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000bec4 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000bec8 => 0x00050463 (* beqz a0,8000bed0 <prvQueueSetReceivingTask+0x7ec>  *)
    | 0x8000becc => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bed0 => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bed4 => 0x00090513 (* mv a0,s2  *)
    | 0x8000bed8 => 0xe3cf80ef (* jal 80004514 <xQueueRemoveFromSet>  *)
    | 0x8000bedc => 0xaa41a583 (* lw a1,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000bee0 => 0x00098513 (* mv a0,s3  *)
    | 0x8000bee4 => 0xe30f80ef (* jal 80004514 <xQueueRemoveFromSet>  *)
    | 0x8000bee8 => 0x00090513 (* mv a0,s2  *)
    | 0x8000beec => 0xd10f80ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000bef0 => 0x00098513 (* mv a0,s3  *)
    | 0x8000bef4 => 0xd08f80ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000bef8 => 0xaadff06f (* j 8000b9a4 <prvQueueSetReceivingTask+0x2c0>  *)
    (* <prvQueueSetSendingTask> *)
    | 0x8000befc => 0xfa010113 (* add sp,sp,-96  *)
    | 0x8000bf00 => 0x04912a23 (* sw s1,84(sp)  *)
    | 0x8000bf04 => 0x05212823 (* sw s2,80(sp)  *)
    | 0x8000bf08 => 0x05312623 (* sw s3,76(sp)  *)
    | 0x8000bf0c => 0x05412423 (* sw s4,72(sp)  *)
    | 0x8000bf10 => 0x05512223 (* sw s5,68(sp)  *)
    | 0x8000bf14 => 0x01c10a93 (* add s5,sp,28  *)
    | 0x8000bf18 => 0x00008937 (* lui s2,0x8  *)
    | 0x8000bf1c => 0x800959b7 (* lui s3,0x80095  *)
    | 0x8000bf20 => 0x80095a37 (* lui s4,0x80095  *)
    | 0x8000bf24 => 0x04812c23 (* sw s0,88(sp)  *)
    | 0x8000bf28 => 0x05612023 (* sw s6,64(sp)  *)
    | 0x8000bf2c => 0x03712e23 (* sw s7,60(sp)  *)
    | 0x8000bf30 => 0x03812c23 (* sw s8,56(sp)  *)
    | 0x8000bf34 => 0x04112e23 (* sw ra,92(sp)  *)
    | 0x8000bf38 => 0x03912a23 (* sw s9,52(sp)  *)
    | 0x8000bf3c => 0x03a12823 (* sw s10,48(sp)  *)
    | 0x8000bf40 => 0x03b12623 (* sw s11,44(sp)  *)
    | 0x8000bf44 => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x8000bf48 => 0xa951ac23 (* sw s5,-1384(gp) # 80080298 <uxNextRand>  *)
    | 0x8000bf4c => 0xfff90913 (* add s2,s2,-1 # 7fff <__stack_size+0x7ea1>  *)
    | 0x8000bf50 => 0xd9098993 (* add s3,s3,-624 # 80094d90 <xQueues>  *)
    | 0x8000bf54 => 0xd84a0a13 (* add s4,s4,-636 # 80094d84 <ulQueueUsedCounter>  *)
    | 0x8000bf58 => 0x00200b93 (* li s7,2  *)
    | 0x8000bf5c => 0x00200c13 (* li s8,2  *)
    | 0x8000bf60 => 0x00010cb7 (* lui s9,0x10  *)
    | 0x8000bf64 => 0xfffc8c93 (* add s9,s9,-1 # ffff <__stack_size+0xfea1>  *)
    | 0x8000bf68 => 0x41c65db7 (* lui s11,0x41c65  *)
    | 0x8000bf6c => 0x00003737 (* lui a4,0x3  *)
    | 0x8000bf70 => 0xe6dd8d93 (* add s11,s11,-403 # 41c64e6d <__stack_size+0x41c64d0f>  *)
    | 0x8000bf74 => 0x03970713 (* add a4,a4,57 # 3039 <__stack_size+0x2edb>  *)
    | 0x8000bf78 => 0xa981a783 (* lw a5,-1384(gp) # 80080298 <uxNextRand>  *)
    | 0x8000bf7c => 0x00300693 (* li a3,3  *)
    | 0x8000bf80 => 0xfff00613 (* li a2,-1  *)
    | 0x8000bf84 => 0x03b787b3 (* mul a5,a5,s11  *)
    | 0x8000bf88 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000bf8c => 0x00e12623 (* sw a4,12(sp)  *)
    | 0x8000bf90 => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x8000bf94 => 0xa8f1ac23 (* sw a5,-1384(gp) # 80080298 <uxNextRand>  *)
    | 0x8000bf98 => 0x0107d793 (* srl a5,a5,0x10  *)
    | 0x8000bf9c => 0x0127f7b3 (* and a5,a5,s2  *)
    | 0x8000bfa0 => 0x02d7f7b3 (* remu a5,a5,a3  *)
    | 0x8000bfa4 => 0x00279793 (* sll a5,a5,0x2  *)
    | 0x8000bfa8 => 0x00f98533 (* add a0,s3,a5  *)
    | 0x8000bfac => 0x00fa07b3 (* add a5,s4,a5  *)
    | 0x8000bfb0 => 0x0007a683 (* lw a3,0(a5)  *)
    | 0x8000bfb4 => 0x00052503 (* lw a0,0(a0)  *)
    | 0x8000bfb8 => 0x00168693 (* add a3,a3,1  *)
    | 0x8000bfbc => 0x00d7a023 (* sw a3,0(a5)  *)
    | 0x8000bfc0 => 0x00000693 (* li a3,0  *)
    | 0x8000bfc4 => 0xc08f70ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000bfc8 => 0x00100793 (* li a5,1  *)
    | 0x8000bfcc => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000bfd0 => 0x00f50463 (* beq a0,a5,8000bfd8 <prvQueueSetSendingTask+0xdc>  *)
    | 0x8000bfd4 => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000bfd8 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000bfdc => 0x00178793 (* add a5,a5,1  *)
    | 0x8000bfe0 => 0x01979463 (* bne a5,s9,8000bfe8 <prvQueueSetSendingTask+0xec>  *)
    | 0x8000bfe4 => 0x00000793 (* li a5,0  *)
    | 0x8000bfe8 => 0x00f12e23 (* sw a5,28(sp)  *)
    | 0x8000bfec => 0xa881a783 (* lw a5,-1400(gp) # 80080288 <ulLoops.6>  *)
    | 0x8000bff0 => 0x01100693 (* li a3,17  *)
    | 0x8000bff4 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000bff8 => 0xa8f1a423 (* sw a5,-1400(gp) # 80080288 <ulLoops.6>  *)
    | 0x8000bffc => 0xf6f6fee3 (* bgeu a3,a5,8000bf78 <prvQueueSetSendingTask+0x7c>  *)
    | 0x8000c000 => 0xa841a783 (* lw a5,-1404(gp) # 80080284 <ePriorities.5>  *)
    | 0x8000c004 => 0xa801a423 (* sw zero,-1400(gp) # 80080288 <ulLoops.6>  *)
    | 0x8000c008 => 0x00100d93 (* li s11,1  *)
    | 0x8000c00c => 0x03b78063 (* beq a5,s11,8000c02c <prvQueueSetSendingTask+0x130>  *)
    | 0x8000c010 => 0x03778e63 (* beq a5,s7,8000c04c <prvQueueSetSendingTask+0x150>  *)
    | 0x8000c014 => 0xf4079ae3 (* bnez a5,8000bf68 <prvQueueSetSendingTask+0x6c>  *)
    | 0x8000c018 => 0xa901a503 (* lw a0,-1392(gp) # 80080290 <xQueueSetReceivingTask>  *)
    | 0x8000c01c => 0x00000593 (* li a1,0  *)
    | 0x8000c020 => 0xaf1f40ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000c024 => 0xa9b1a223 (* sw s11,-1404(gp) # 80080284 <ePriorities.5>  *)
    | 0x8000c028 => 0xf39ff06f (* j 8000bf60 <prvQueueSetSendingTask+0x64>  *)
    | 0x8000c02c => 0xa901a503 (* lw a0,-1392(gp) # 80080290 <xQueueSetReceivingTask>  *)
    | 0x8000c030 => 0x00100593 (* li a1,1  *)
    | 0x8000c034 => 0xaddf40ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000c038 => 0xa941a503 (* lw a0,-1388(gp) # 80080294 <xQueueSetSendingTask>  *)
    | 0x8000c03c => 0x00000593 (* li a1,0  *)
    | 0x8000c040 => 0xad1f40ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000c044 => 0xa981a223 (* sw s8,-1404(gp) # 80080284 <ePriorities.5>  *)
    | 0x8000c048 => 0xf19ff06f (* j 8000bf60 <prvQueueSetSendingTask+0x64>  *)
    | 0x8000c04c => 0xa941a503 (* lw a0,-1388(gp) # 80080294 <xQueueSetSendingTask>  *)
    | 0x8000c050 => 0x00100593 (* li a1,1  *)
    | 0x8000c054 => 0xabdf40ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000c058 => 0x0c800513 (* li a0,200  *)
    | 0x8000c05c => 0xa801a223 (* sw zero,-1404(gp) # 80080284 <ePriorities.5>  *)
    | 0x8000c060 => 0xab8f50ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000c064 => 0xefdff06f (* j 8000bf60 <prvQueueSetSendingTask+0x64>  *)
    (* <vStartQueueSetTasks> *)
    | 0x8000c068 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000c06c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000c070 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c074 => 0x8000c537 (* lui a0,0x8000c  *)
    | 0x8000c078 => 0x00000693 (* li a3,0  *)
    | 0x8000c07c => 0xa9418793 (* add a5,gp,-1388 # 80080294 <xQueueSetSendingTask>  *)
    | 0x8000c080 => 0x00100713 (* li a4,1  *)
    | 0x8000c084 => 0x07800613 (* li a2,120  *)
    | 0x8000c088 => 0x11858593 (* add a1,a1,280 # 80014118 <_etext+0x548>  *)
    | 0x8000c08c => 0xefc50513 (* add a0,a0,-260 # 8000befc <prvQueueSetSendingTask>  *)
    | 0x8000c090 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000c094 => 0xf68f40ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000c098 => 0xa941a683 (* lw a3,-1388(gp) # 80080294 <xQueueSetSendingTask>  *)
    | 0x8000c09c => 0x02068c63 (* beqz a3,8000c0d4 <vStartQueueSetTasks+0x6c>  *)
    | 0x8000c0a0 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c0a4 => 0x8000b537 (* lui a0,0x8000b  *)
    | 0x8000c0a8 => 0xa9018793 (* add a5,gp,-1392 # 80080290 <xQueueSetReceivingTask>  *)
    | 0x8000c0ac => 0x00100713 (* li a4,1  *)
    | 0x8000c0b0 => 0x07800613 (* li a2,120  *)
    | 0x8000c0b4 => 0x12058593 (* add a1,a1,288 # 80014120 <_etext+0x550>  *)
    | 0x8000c0b8 => 0x6e450513 (* add a0,a0,1764 # 8000b6e4 <prvQueueSetReceivingTask>  *)
    | 0x8000c0bc => 0xf40f40ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000c0c0 => 0xa941a503 (* lw a0,-1388(gp) # 80080294 <xQueueSetSendingTask>  *)
    | 0x8000c0c4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000c0c8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000c0cc => 0x01010113 (* add sp,sp,16  *)
    | 0x8000c0d0 => 0xe1cf506f (* j 800016ec <vTaskSuspend>  *)
    | 0x8000c0d4 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000c0d8 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000c0dc => 0x01010113 (* add sp,sp,16  *)
    | 0x8000c0e0 => 0x00008067 (* ret  *)
    (* <xAreQueueSetTasksStillRunning> *)
    | 0x8000c0e4 => 0xaa01a683 (* lw a3,-1376(gp) # 800802a0 <ulCycleCounter>  *)
    | 0x8000c0e8 => 0xa801a503 (* lw a0,-1408(gp) # 80080280 <ulLastCycleCounter.4>  *)
    | 0x8000c0ec => 0xaa01a703 (* lw a4,-1376(gp) # 800802a0 <ulCycleCounter>  *)
    | 0x8000c0f0 => 0x00c00593 (* li a1,12  *)
    | 0x8000c0f4 => 0x40d50533 (* sub a0,a0,a3  *)
    | 0x8000c0f8 => 0xa8e1a023 (* sw a4,-1408(gp) # 80080280 <ulLastCycleCounter.4>  *)
    | 0x8000c0fc => 0x800956b7 (* lui a3,0x80095  *)
    | 0x8000c100 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x8000c104 => 0x00a03533 (* snez a0,a0  *)
    | 0x8000c108 => 0xd7878793 (* add a5,a5,-648 # 80094d78 <ulLastQueueUsedCounter.3>  *)
    | 0x8000c10c => 0x00000713 (* li a4,0  *)
    | 0x8000c110 => 0xd8468693 (* add a3,a3,-636 # 80094d84 <ulQueueUsedCounter>  *)
    | 0x8000c114 => 0x00d70633 (* add a2,a4,a3  *)
    | 0x8000c118 => 0x00062603 (* lw a2,0(a2)  *)
    | 0x8000c11c => 0x0007a803 (* lw a6,0(a5)  *)
    | 0x8000c120 => 0x00c81463 (* bne a6,a2,8000c128 <xAreQueueSetTasksStillRunning+0x44>  *)
    | 0x8000c124 => 0x00000513 (* li a0,0  *)
    | 0x8000c128 => 0x00c7a023 (* sw a2,0(a5)  *)
    | 0x8000c12c => 0x00470713 (* add a4,a4,4  *)
    | 0x8000c130 => 0x00478793 (* add a5,a5,4  *)
    | 0x8000c134 => 0xfeb710e3 (* bne a4,a1,8000c114 <xAreQueueSetTasksStillRunning+0x30>  *)
    | 0x8000c138 => 0x8201a703 (* lw a4,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000c13c => 0x00100793 (* li a5,1  *)
    | 0x8000c140 => 0x00f70463 (* beq a4,a5,8000c148 <xAreQueueSetTasksStillRunning+0x64>  *)
    | 0x8000c144 => 0x00000513 (* li a0,0  *)
    | 0x8000c148 => 0x81c1a603 (* lw a2,-2020(gp) # 8008001c <ulISRTxValue>  *)
    | 0x8000c14c => 0xa7c1a683 (* lw a3,-1412(gp) # 8008027c <ulLastISRTxValue.2>  *)
    | 0x8000c150 => 0x00d60863 (* beq a2,a3,8000c160 <xAreQueueSetTasksStillRunning+0x7c>  *)
    | 0x8000c154 => 0x81c1a703 (* lw a4,-2020(gp) # 8008001c <ulISRTxValue>  *)
    | 0x8000c158 => 0xa6e1ae23 (* sw a4,-1412(gp) # 8008027c <ulLastISRTxValue.2>  *)
    | 0x8000c15c => 0x00008067 (* ret  *)
    | 0x8000c160 => 0x00000513 (* li a0,0  *)
    | 0x8000c164 => 0x00008067 (* ret  *)
    (* <vQueueSetAccessQueueSetFromISR> *)
    | 0x8000c168 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000c16c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000c170 => 0xa9c1a403 (* lw s0,-1380(gp) # 8008029c <xSetupComplete>  *)
    | 0x8000c174 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000c178 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000c17c => 0x00100793 (* li a5,1  *)
    | 0x8000c180 => 0x00f41c63 (* bne s0,a5,8000c198 <vQueueSetAccessQueueSetFromISR+0x30>  *)
    | 0x8000c184 => 0xa781a783 (* lw a5,-1416(gp) # 80080278 <ulCallCount.1>  *)
    | 0x8000c188 => 0x06400693 (* li a3,100  *)
    | 0x8000c18c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c190 => 0x00f6ee63 (* bltu a3,a5,8000c1ac <vQueueSetAccessQueueSetFromISR+0x44>  *)
    | 0x8000c194 => 0xa6f1ac23 (* sw a5,-1416(gp) # 80080278 <ulCallCount.1>  *)
    | 0x8000c198 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000c19c => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000c1a0 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000c1a4 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000c1a8 => 0x00008067 (* ret  *)
    | 0x8000c1ac => 0xaa41a503 (* lw a0,-1372(gp) # 800802a4 <xQueueSet>  *)
    | 0x8000c1b0 => 0xa601ac23 (* sw zero,-1416(gp) # 80080278 <ulCallCount.1>  *)
    | 0x8000c1b4 => 0xbc8f80ef (* jal 8000457c <xQueueSelectFromSetFromISR>  *)
    | 0x8000c1b8 => 0x02050063 (* beqz a0,8000c1d8 <vQueueSetAccessQueueSetFromISR+0x70>  *)
    | 0x8000c1bc => 0x00000613 (* li a2,0  *)
    | 0x8000c1c0 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000c1c4 => 0xed1f70ef (* jal 80004094 <xQueueReceiveFromISR>  *)
    | 0x8000c1c8 => 0x00850463 (* beq a0,s0,8000c1d0 <vQueueSetAccessQueueSetFromISR+0x68>  *)
    | 0x8000c1cc => 0x8201a023 (* sw zero,-2016(gp) # 80080020 <xQueueSetTasksStatus>  *)
    | 0x8000c1d0 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x8000c1d4 => 0xc18ff0ef (* jal 8000b5ec <prvCheckReceivedValue>  *)
    | 0x8000c1d8 => 0x81c1a783 (* lw a5,-2020(gp) # 8008001c <ulISRTxValue>  *)
    | 0x8000c1dc => 0xa741a703 (* lw a4,-1420(gp) # 80080274 <xQueueToWriteTo.0>  *)
    | 0x8000c1e0 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x8000c1e4 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x8000c1e8 => 0x00271713 (* sll a4,a4,0x2  *)
    | 0x8000c1ec => 0xd9078793 (* add a5,a5,-624 # 80094d90 <xQueues>  *)
    | 0x8000c1f0 => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x8000c1f4 => 0x0007a503 (* lw a0,0(a5)  *)
    | 0x8000c1f8 => 0x00000693 (* li a3,0  *)
    | 0x8000c1fc => 0x00000613 (* li a2,0  *)
    | 0x8000c200 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000c204 => 0xd48f70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000c208 => 0x00100793 (* li a5,1  *)
    | 0x8000c20c => 0xf8f516e3 (* bne a0,a5,8000c198 <vQueueSetAccessQueueSetFromISR+0x30>  *)
    | 0x8000c210 => 0x81c1a783 (* lw a5,-2020(gp) # 8008001c <ulISRTxValue>  *)
    | 0x8000c214 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c218 => 0x80f1ae23 (* sw a5,-2020(gp) # 8008001c <ulISRTxValue>  *)
    | 0x8000c21c => 0x81c1a783 (* lw a5,-2020(gp) # 8008001c <ulISRTxValue>  *)
    | 0x8000c220 => 0x00079863 (* bnez a5,8000c230 <vQueueSetAccessQueueSetFromISR+0xc8>  *)
    | 0x8000c224 => 0x000107b7 (* lui a5,0x10  *)
    | 0x8000c228 => 0xfff78793 (* add a5,a5,-1 # ffff <__stack_size+0xfea1>  *)
    | 0x8000c22c => 0x80f1ae23 (* sw a5,-2020(gp) # 8008001c <ulISRTxValue>  *)
    | 0x8000c230 => 0xa741a783 (* lw a5,-1420(gp) # 80080274 <xQueueToWriteTo.0>  *)
    | 0x8000c234 => 0x00200713 (* li a4,2  *)
    | 0x8000c238 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c23c => 0x00f74663 (* blt a4,a5,8000c248 <vQueueSetAccessQueueSetFromISR+0xe0>  *)
    | 0x8000c240 => 0xa6f1aa23 (* sw a5,-1420(gp) # 80080274 <xQueueToWriteTo.0>  *)
    | 0x8000c244 => 0xf55ff06f (* j 8000c198 <vQueueSetAccessQueueSetFromISR+0x30>  *)
    | 0x8000c248 => 0xa601aa23 (* sw zero,-1420(gp) # 80080274 <xQueueToWriteTo.0>  *)
    | 0x8000c24c => 0xf4dff06f (* j 8000c198 <vQueueSetAccessQueueSetFromISR+0x30>  *)
    (* <prvQueueSetReceivingTask> *)
    | 0x8000c250 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000c254 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000c258 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000c25c => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000c260 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000c264 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000c268 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000c26c => 0x00000413 (* li s0,0  *)
    | 0x8000c270 => 0x00100993 (* li s3,1  *)
    | 0x8000c274 => 0xab81a503 (* lw a0,-1352(gp) # 800802b8 <xQueueSet>  *)
    | 0x8000c278 => 0x00000593 (* li a1,0  *)
    | 0x8000c27c => 0xad8f80ef (* jal 80004554 <xQueueSelectFromSet>  *)
    | 0x8000c280 => 0xfe050ae3 (* beqz a0,8000c274 <prvQueueSetReceivingTask+0x24>  *)
    | 0x8000c284 => 0x00000613 (* li a2,0  *)
    | 0x8000c288 => 0x00c10593 (* add a1,sp,12  *)
    | 0x8000c28c => 0xf3cf70ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000c290 => 0x01350463 (* beq a0,s3,8000c298 <prvQueueSetReceivingTask+0x48>  *)
    | 0x8000c294 => 0x8201a223 (* sw zero,-2012(gp) # 80080024 <xQueueSetPollStatus>  *)
    | 0x8000c298 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000c29c => 0x02879063 (* bne a5,s0,8000c2bc <prvQueueSetReceivingTask+0x6c>  *)
    | 0x8000c2a0 => 0x00140413 (* add s0,s0,1  *)
    | 0x8000c2a4 => 0x8241a783 (* lw a5,-2012(gp) # 80080024 <xQueueSetPollStatus>  *)
    | 0x8000c2a8 => 0xfd3796e3 (* bne a5,s3,8000c274 <prvQueueSetReceivingTask+0x24>  *)
    | 0x8000c2ac => 0xab41a783 (* lw a5,-1356(gp) # 800802b4 <ulCycleCounter>  *)
    | 0x8000c2b0 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c2b4 => 0xaaf1aa23 (* sw a5,-1356(gp) # 800802b4 <ulCycleCounter>  *)
    | 0x8000c2b8 => 0xfbdff06f (* j 8000c274 <prvQueueSetReceivingTask+0x24>  *)
    | 0x8000c2bc => 0x8201a223 (* sw zero,-2012(gp) # 80080024 <xQueueSetPollStatus>  *)
    | 0x8000c2c0 => 0xfe5ff06f (* j 8000c2a4 <prvQueueSetReceivingTask+0x54>  *)
    (* <vStartQueueSetPollingTask> *)
    | 0x8000c2c4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000c2c8 => 0x00400593 (* li a1,4  *)
    | 0x8000c2cc => 0x00000613 (* li a2,0  *)
    | 0x8000c2d0 => 0x00a00513 (* li a0,10  *)
    | 0x8000c2d4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000c2d8 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000c2dc => 0xef1f60ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000c2e0 => 0xaaa1ae23 (* sw a0,-1348(gp) # 800802bc <xQueue>  *)
    | 0x8000c2e4 => 0x00a00513 (* li a0,10  *)
    | 0x8000c2e8 => 0x9e8f80ef (* jal 800044d0 <xQueueCreateSet>  *)
    | 0x8000c2ec => 0x00050593 (* mv a1,a0  *)
    | 0x8000c2f0 => 0xaaa1ac23 (* sw a0,-1352(gp) # 800802b8 <xQueueSet>  *)
    | 0x8000c2f4 => 0xabc1a503 (* lw a0,-1348(gp) # 800802bc <xQueue>  *)
    | 0x8000c2f8 => 0x02050e63 (* beqz a0,8000c334 <vStartQueueSetPollingTask+0x70>  *)
    | 0x8000c2fc => 0x02058c63 (* beqz a1,8000c334 <vStartQueueSetPollingTask+0x70>  *)
    | 0x8000c300 => 0x9dcf80ef (* jal 800044dc <xQueueAddToSet>  *)
    | 0x8000c304 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000c308 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000c30c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c310 => 0x8000c537 (* lui a0,0x8000c  *)
    | 0x8000c314 => 0x00000793 (* li a5,0  *)
    | 0x8000c318 => 0x00000713 (* li a4,0  *)
    | 0x8000c31c => 0x00000693 (* li a3,0  *)
    | 0x8000c320 => 0x07800613 (* li a2,120  *)
    | 0x8000c324 => 0x12858593 (* add a1,a1,296 # 80014128 <_etext+0x558>  *)
    | 0x8000c328 => 0x25050513 (* add a0,a0,592 # 8000c250 <prvQueueSetReceivingTask>  *)
    | 0x8000c32c => 0x01010113 (* add sp,sp,16  *)
    | 0x8000c330 => 0xcccf406f (* j 800007fc <xTaskCreate>  *)
    | 0x8000c334 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000c338 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000c33c => 0x01010113 (* add sp,sp,16  *)
    | 0x8000c340 => 0x00008067 (* ret  *)
    (* <vQueueSetPollingInterruptAccess> *)
    | 0x8000c344 => 0xab01a783 (* lw a5,-1360(gp) # 800802b0 <ulCallCount.2>  *)
    | 0x8000c348 => 0x03200693 (* li a3,50  *)
    | 0x8000c34c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c350 => 0x00f6e663 (* bltu a3,a5,8000c35c <vQueueSetPollingInterruptAccess+0x18>  *)
    | 0x8000c354 => 0xaaf1a823 (* sw a5,-1360(gp) # 800802b0 <ulCallCount.2>  *)
    | 0x8000c358 => 0x00008067 (* ret  *)
    | 0x8000c35c => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000c360 => 0xabc1a503 (* lw a0,-1348(gp) # 800802bc <xQueue>  *)
    | 0x8000c364 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000c368 => 0x00000693 (* li a3,0  *)
    | 0x8000c36c => 0x00000613 (* li a2,0  *)
    | 0x8000c370 => 0xaac18593 (* add a1,gp,-1364 # 800802ac <ulValueToSend.1>  *)
    | 0x8000c374 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000c378 => 0xaa01a823 (* sw zero,-1360(gp) # 800802b0 <ulCallCount.2>  *)
    | 0x8000c37c => 0xbd0f70ef (* jal 8000374c <xQueueGenericSendFromISR>  *)
    | 0x8000c380 => 0x00100793 (* li a5,1  *)
    | 0x8000c384 => 0x00f51863 (* bne a0,a5,8000c394 <vQueueSetPollingInterruptAccess+0x50>  *)
    | 0x8000c388 => 0xaac1a783 (* lw a5,-1364(gp) # 800802ac <ulValueToSend.1>  *)
    | 0x8000c38c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c390 => 0xaaf1a623 (* sw a5,-1364(gp) # 800802ac <ulValueToSend.1>  *)
    | 0x8000c394 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000c398 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000c39c => 0x01010113 (* add sp,sp,16  *)
    | 0x8000c3a0 => 0x00008067 (* ret  *)
    (* <xAreQueueSetPollTasksStillRunning> *)
    | 0x8000c3a4 => 0xab41a683 (* lw a3,-1356(gp) # 800802b4 <ulCycleCounter>  *)
    | 0x8000c3a8 => 0xaa81a603 (* lw a2,-1368(gp) # 800802a8 <ulLastCycleCounter.0>  *)
    | 0x8000c3ac => 0x00d61463 (* bne a2,a3,8000c3b4 <xAreQueueSetPollTasksStillRunning+0x10>  *)
    | 0x8000c3b0 => 0x8201a223 (* sw zero,-2012(gp) # 80080024 <xQueueSetPollStatus>  *)
    | 0x8000c3b4 => 0x8241a503 (* lw a0,-2012(gp) # 80080024 <xQueueSetPollStatus>  *)
    | 0x8000c3b8 => 0xaad1a423 (* sw a3,-1368(gp) # 800802a8 <ulLastCycleCounter.0>  *)
    | 0x8000c3bc => 0x00008067 (* ret  *)
    (* <prvRecursiveMutexPollingTask> *)
    | 0x8000c3c0 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000c3c4 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000c3c8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000c3cc => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000c3d0 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000c3d4 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000c3d8 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000c3dc => 0x01812423 (* sw s8,8(sp)  *)
    | 0x8000c3e0 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000c3e4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000c3e8 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x8000c3ec => 0x80014437 (* lui s0,0x80014  *)
    | 0x8000c3f0 => 0x12500c13 (* li s8,293  *)
    | 0x8000c3f4 => 0x00100a13 (* li s4,1  *)
    | 0x8000c3f8 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c3fc => 0x00000593 (* li a1,0  *)
    | 0x8000c400 => 0xa25f70ef (* jal 80003e24 <xQueueTakeMutexRecursive>  *)
    | 0x8000c404 => 0xff451ae3 (* bne a0,s4,8000c3f8 <prvRecursiveMutexPollingTask+0x38>  *)
    | 0x8000c408 => 0xad01a503 (* lw a0,-1328(gp) # 800802d0 <xControllingTaskHandle>  *)
    | 0x8000c40c => 0xe18f40ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000c410 => 0x00300793 (* li a5,3  *)
    | 0x8000c414 => 0x00f50863 (* beq a0,a5,8000c424 <prvRecursiveMutexPollingTask+0x64>  *)
    | 0x8000c418 => 0x11d00593 (* li a1,285  *)
    | 0x8000c41c => 0x13040513 (* add a0,s0,304 # 80014130 <_etext+0x560>  *)
    | 0x8000c420 => 0x671050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000c424 => 0xacc1a503 (* lw a0,-1332(gp) # 800802cc <xBlockingTaskHandle>  *)
    | 0x8000c428 => 0xdfcf40ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000c42c => 0x00300793 (* li a5,3  *)
    | 0x8000c430 => 0x00f50863 (* beq a0,a5,8000c440 <prvRecursiveMutexPollingTask+0x80>  *)
    | 0x8000c434 => 0x11e00593 (* li a1,286  *)
    | 0x8000c438 => 0x13040513 (* add a0,s0,304  *)
    | 0x8000c43c => 0x655050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000c440 => 0xae01a783 (* lw a5,-1312(gp) # 800802e0 <xBlockingIsSuspended>  *)
    | 0x8000c444 => 0x00100713 (* li a4,1  *)
    | 0x8000c448 => 0x00e79663 (* bne a5,a4,8000c454 <prvRecursiveMutexPollingTask+0x94>  *)
    | 0x8000c44c => 0xae41aa03 (* lw s4,-1308(gp) # 800802e4 <xControllingIsSuspended>  *)
    | 0x8000c450 => 0x00fa0663 (* beq s4,a5,8000c45c <prvRecursiveMutexPollingTask+0x9c>  *)
    | 0x8000c454 => 0xaf81a423 (* sw s8,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c458 => 0xf9dff06f (* j 8000c3f4 <prvRecursiveMutexPollingTask+0x34>  *)
    | 0x8000c45c => 0xad41a783 (* lw a5,-1324(gp) # 800802d4 <uxPollingCycles>  *)
    | 0x8000c460 => 0xacc1a503 (* lw a0,-1332(gp) # 800802cc <xBlockingTaskHandle>  *)
    | 0x8000c464 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c468 => 0xacf1aa23 (* sw a5,-1324(gp) # 800802d4 <uxPollingCycles>  *)
    | 0x8000c46c => 0x831f40ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000c470 => 0xad01a503 (* lw a0,-1328(gp) # 800802d0 <xControllingTaskHandle>  *)
    | 0x8000c474 => 0x829f40ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000c478 => 0xae01a783 (* lw a5,-1312(gp) # 800802e0 <xBlockingIsSuspended>  *)
    | 0x8000c47c => 0x01478663 (* beq a5,s4,8000c488 <prvRecursiveMutexPollingTask+0xc8>  *)
    | 0x8000c480 => 0xae41a783 (* lw a5,-1308(gp) # 800802e4 <xControllingIsSuspended>  *)
    | 0x8000c484 => 0x01479663 (* bne a5,s4,8000c490 <prvRecursiveMutexPollingTask+0xd0>  *)
    | 0x8000c488 => 0x14400793 (* li a5,324  *)
    | 0x8000c48c => 0xaef1a423 (* sw a5,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c490 => 0x00000513 (* li a0,0  *)
    | 0x8000c494 => 0xe58f40ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000c498 => 0x00200793 (* li a5,2  *)
    | 0x8000c49c => 0x00f50863 (* beq a0,a5,8000c4ac <prvRecursiveMutexPollingTask+0xec>  *)
    | 0x8000c4a0 => 0x14a00593 (* li a1,330  *)
    | 0x8000c4a4 => 0x13040513 (* add a0,s0,304  *)
    | 0x8000c4a8 => 0x5e9050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000c4ac => 0xad01a503 (* lw a0,-1328(gp) # 800802d0 <xControllingTaskHandle>  *)
    | 0x8000c4b0 => 0xd74f40ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000c4b4 => 0x00200793 (* li a5,2  *)
    | 0x8000c4b8 => 0x00f50863 (* beq a0,a5,8000c4c8 <prvRecursiveMutexPollingTask+0x108>  *)
    | 0x8000c4bc => 0x15000593 (* li a1,336  *)
    | 0x8000c4c0 => 0x13040513 (* add a0,s0,304  *)
    | 0x8000c4c4 => 0x5cd050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000c4c8 => 0xacc1a503 (* lw a0,-1332(gp) # 800802cc <xBlockingTaskHandle>  *)
    | 0x8000c4cc => 0xd58f40ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000c4d0 => 0x00200793 (* li a5,2  *)
    | 0x8000c4d4 => 0x00f50863 (* beq a0,a5,8000c4e4 <prvRecursiveMutexPollingTask+0x124>  *)
    | 0x8000c4d8 => 0x15100593 (* li a1,337  *)
    | 0x8000c4dc => 0x13040513 (* add a0,s0,304  *)
    | 0x8000c4e0 => 0x5b1050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000c4e4 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c4e8 => 0x994f70ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000c4ec => 0x00100793 (* li a5,1  *)
    | 0x8000c4f0 => 0x00f50663 (* beq a0,a5,8000c4fc <prvRecursiveMutexPollingTask+0x13c>  *)
    | 0x8000c4f4 => 0x15800793 (* li a5,344  *)
    | 0x8000c4f8 => 0xaef1a423 (* sw a5,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c4fc => 0x00000513 (* li a0,0  *)
    | 0x8000c500 => 0xdecf40ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000c504 => 0xee0508e3 (* beqz a0,8000c3f4 <prvRecursiveMutexPollingTask+0x34>  *)
    | 0x8000c508 => 0x15e00593 (* li a1,350  *)
    | 0x8000c50c => 0x13040513 (* add a0,s0,304  *)
    | 0x8000c510 => 0x581050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000c514 => 0xee1ff06f (* j 8000c3f4 <prvRecursiveMutexPollingTask+0x34>  *)
    (* <prvRecursiveMutexBlockingTask> *)
    | 0x8000c518 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000c51c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000c520 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000c524 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000c528 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000c52c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000c530 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000c534 => 0x01612023 (* sw s6,0(sp)  *)
    | 0x8000c538 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000c53c => 0x00100493 (* li s1,1  *)
    | 0x8000c540 => 0x0ff00a13 (* li s4,255  *)
    | 0x8000c544 => 0x00100b13 (* li s6,1  *)
    | 0x8000c548 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c54c => 0xffe00593 (* li a1,-2  *)
    | 0x8000c550 => 0x8d5f70ef (* jal 80003e24 <xQueueTakeMutexRecursive>  *)
    | 0x8000c554 => 0x06951263 (* bne a0,s1,8000c5b8 <prvRecursiveMutexBlockingTask+0xa0>  *)
    | 0x8000c558 => 0xae41a783 (* lw a5,-1308(gp) # 800802e4 <xControllingIsSuspended>  *)
    | 0x8000c55c => 0x02978a63 (* beq a5,s1,8000c590 <prvRecursiveMutexBlockingTask+0x78>  *)
    | 0x8000c560 => 0x0eb00793 (* li a5,235  *)
    | 0x8000c564 => 0xaef1a423 (* sw a5,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c568 => 0xad81a703 (* lw a4,-1320(gp) # 800802d8 <uxBlockingCycles>  *)
    | 0x8000c56c => 0xadc1a683 (* lw a3,-1316(gp) # 800802dc <uxControllingCycles>  *)
    | 0x8000c570 => 0x00170713 (* add a4,a4,1  *)
    | 0x8000c574 => 0x00d70663 (* beq a4,a3,8000c580 <prvRecursiveMutexBlockingTask+0x68>  *)
    | 0x8000c578 => 0x10500713 (* li a4,261  *)
    | 0x8000c57c => 0xaee1a423 (* sw a4,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c580 => 0xad81a703 (* lw a4,-1320(gp) # 800802d8 <uxBlockingCycles>  *)
    | 0x8000c584 => 0x00170713 (* add a4,a4,1  *)
    | 0x8000c588 => 0xace1ac23 (* sw a4,-1320(gp) # 800802d8 <uxBlockingCycles>  *)
    | 0x8000c58c => 0xfbdff06f (* j 8000c548 <prvRecursiveMutexBlockingTask+0x30>  *)
    | 0x8000c590 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c594 => 0x8e8f70ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000c598 => 0x00950663 (* beq a0,s1,8000c5a4 <prvRecursiveMutexBlockingTask+0x8c>  *)
    | 0x8000c59c => 0x0f300793 (* li a5,243  *)
    | 0x8000c5a0 => 0xaef1a423 (* sw a5,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c5a4 => 0x00000513 (* li a0,0  *)
    | 0x8000c5a8 => 0xaf61a023 (* sw s6,-1312(gp) # 800802e0 <xBlockingIsSuspended>  *)
    | 0x8000c5ac => 0x940f50ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000c5b0 => 0xae01a023 (* sw zero,-1312(gp) # 800802e0 <xBlockingIsSuspended>  *)
    | 0x8000c5b4 => 0xfb5ff06f (* j 8000c568 <prvRecursiveMutexBlockingTask+0x50>  *)
    | 0x8000c5b8 => 0xaf41a423 (* sw s4,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c5bc => 0xfadff06f (* j 8000c568 <prvRecursiveMutexBlockingTask+0x50>  *)
    (* <prvRecursiveMutexControllingTask> *)
    | 0x8000c5c0 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000c5c4 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000c5c8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000c5cc => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000c5d0 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000c5d4 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000c5d8 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000c5dc => 0x01712623 (* sw s7,12(sp)  *)
    | 0x8000c5e0 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x8000c5e4 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000c5e8 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000c5ec => 0x01912223 (* sw s9,4(sp)  *)
    | 0x8000c5f0 => 0x00100493 (* li s1,1  *)
    | 0x8000c5f4 => 0x09300b93 (* li s7,147  *)
    | 0x8000c5f8 => 0x0a400c13 (* li s8,164  *)
    | 0x8000c5fc => 0x00100b13 (* li s6,1  *)
    | 0x8000c600 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c604 => 0x878f70ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000c608 => 0x00951463 (* bne a0,s1,8000c610 <prvRecursiveMutexControllingTask+0x50>  *)
    | 0x8000c60c => 0xaf71a423 (* sw s7,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c610 => 0x00a00993 (* li s3,10  *)
    | 0x8000c614 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c618 => 0x00f00593 (* li a1,15  *)
    | 0x8000c61c => 0x809f70ef (* jal 80003e24 <xQueueTakeMutexRecursive>  *)
    | 0x8000c620 => 0x00950463 (* beq a0,s1,8000c628 <prvRecursiveMutexControllingTask+0x68>  *)
    | 0x8000c624 => 0xaf81a423 (* sw s8,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c628 => 0x01400513 (* li a0,20  *)
    | 0x8000c62c => 0xfff98993 (* add s3,s3,-1  *)
    | 0x8000c630 => 0xce9f40ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000c634 => 0xfe0990e3 (* bnez s3,8000c614 <prvRecursiveMutexControllingTask+0x54>  *)
    | 0x8000c638 => 0x00a00993 (* li s3,10  *)
    | 0x8000c63c => 0x0bc00c93 (* li s9,188  *)
    | 0x8000c640 => 0x01400513 (* li a0,20  *)
    | 0x8000c644 => 0xcd5f40ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000c648 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c64c => 0x830f70ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000c650 => 0x00950463 (* beq a0,s1,8000c658 <prvRecursiveMutexControllingTask+0x98>  *)
    | 0x8000c654 => 0xaf91a423 (* sw s9,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c658 => 0xfff98993 (* add s3,s3,-1  *)
    | 0x8000c65c => 0xfe0992e3 (* bnez s3,8000c640 <prvRecursiveMutexControllingTask+0x80>  *)
    | 0x8000c660 => 0xaec1a503 (* lw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c664 => 0x818f70ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000c668 => 0x00951663 (* bne a0,s1,8000c674 <prvRecursiveMutexControllingTask+0xb4>  *)
    | 0x8000c66c => 0x0c800793 (* li a5,200  *)
    | 0x8000c670 => 0xaef1a423 (* sw a5,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c674 => 0xadc1a783 (* lw a5,-1316(gp) # 800802dc <uxControllingCycles>  *)
    | 0x8000c678 => 0x00000513 (* li a0,0  *)
    | 0x8000c67c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c680 => 0xacf1ae23 (* sw a5,-1316(gp) # 800802dc <uxControllingCycles>  *)
    | 0x8000c684 => 0xaf61a223 (* sw s6,-1308(gp) # 800802e4 <xControllingIsSuspended>  *)
    | 0x8000c688 => 0x864f50ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000c68c => 0xae01a223 (* sw zero,-1308(gp) # 800802e4 <xControllingIsSuspended>  *)
    | 0x8000c690 => 0xf71ff06f (* j 8000c600 <prvRecursiveMutexControllingTask+0x40>  *)
    (* <vStartRecursiveMutexTasks> *)
    | 0x8000c694 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000c698 => 0x00400513 (* li a0,4  *)
    | 0x8000c69c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000c6a0 => 0x858f70ef (* jal 800036f8 <xQueueCreateMutex>  *)
    | 0x8000c6a4 => 0xaea1a623 (* sw a0,-1300(gp) # 800802ec <xMutex>  *)
    | 0x8000c6a8 => 0x08050263 (* beqz a0,8000c72c <vStartRecursiveMutexTasks+0x98>  *)
    | 0x8000c6ac => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c6b0 => 0x16058593 (* add a1,a1,352 # 80014160 <_etext+0x590>  *)
    | 0x8000c6b4 => 0xc41f70ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x8000c6b8 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c6bc => 0x8000c537 (* lui a0,0x8000c  *)
    | 0x8000c6c0 => 0xad018793 (* add a5,gp,-1328 # 800802d0 <xControllingTaskHandle>  *)
    | 0x8000c6c4 => 0x00200713 (* li a4,2  *)
    | 0x8000c6c8 => 0x00000693 (* li a3,0  *)
    | 0x8000c6cc => 0x07800613 (* li a2,120  *)
    | 0x8000c6d0 => 0x17058593 (* add a1,a1,368 # 80014170 <_etext+0x5a0>  *)
    | 0x8000c6d4 => 0x5c050513 (* add a0,a0,1472 # 8000c5c0 <prvRecursiveMutexControllingTask>  *)
    | 0x8000c6d8 => 0x924f40ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000c6dc => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c6e0 => 0x8000c537 (* lui a0,0x8000c  *)
    | 0x8000c6e4 => 0xacc18793 (* add a5,gp,-1332 # 800802cc <xBlockingTaskHandle>  *)
    | 0x8000c6e8 => 0x00100713 (* li a4,1  *)
    | 0x8000c6ec => 0x00000693 (* li a3,0  *)
    | 0x8000c6f0 => 0x07800613 (* li a2,120  *)
    | 0x8000c6f4 => 0x17858593 (* add a1,a1,376 # 80014178 <_etext+0x5a8>  *)
    | 0x8000c6f8 => 0x51850513 (* add a0,a0,1304 # 8000c518 <prvRecursiveMutexBlockingTask>  *)
    | 0x8000c6fc => 0x900f40ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000c700 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000c704 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c708 => 0x8000c537 (* lui a0,0x8000c  *)
    | 0x8000c70c => 0x00000793 (* li a5,0  *)
    | 0x8000c710 => 0x00000713 (* li a4,0  *)
    | 0x8000c714 => 0x00000693 (* li a3,0  *)
    | 0x8000c718 => 0x07800613 (* li a2,120  *)
    | 0x8000c71c => 0x18058593 (* add a1,a1,384 # 80014180 <_etext+0x5b0>  *)
    | 0x8000c720 => 0x3c050513 (* add a0,a0,960 # 8000c3c0 <prvRecursiveMutexPollingTask>  *)
    | 0x8000c724 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000c728 => 0x8d4f406f (* j 800007fc <xTaskCreate>  *)
    | 0x8000c72c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000c730 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000c734 => 0x00008067 (* ret  *)
    (* <xAreRecursiveMutexTasksStillRunning> *)
    | 0x8000c738 => 0xadc1a603 (* lw a2,-1316(gp) # 800802dc <uxControllingCycles>  *)
    | 0x8000c73c => 0xac81a583 (* lw a1,-1336(gp) # 800802c8 <uxLastControllingCycles.2>  *)
    | 0x8000c740 => 0x04c59063 (* bne a1,a2,8000c780 <xAreRecursiveMutexTasksStillRunning+0x48>  *)
    | 0x8000c744 => 0x17600713 (* li a4,374  *)
    | 0x8000c748 => 0xaee1a423 (* sw a4,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c74c => 0xad81a603 (* lw a2,-1320(gp) # 800802d8 <uxBlockingCycles>  *)
    | 0x8000c750 => 0xac41a583 (* lw a1,-1340(gp) # 800802c4 <uxLastBlockingCycles.1>  *)
    | 0x8000c754 => 0x02c59c63 (* bne a1,a2,8000c78c <xAreRecursiveMutexTasksStillRunning+0x54>  *)
    | 0x8000c758 => 0x18000713 (* li a4,384  *)
    | 0x8000c75c => 0xaee1a423 (* sw a4,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c760 => 0xad41a603 (* lw a2,-1324(gp) # 800802d4 <uxPollingCycles>  *)
    | 0x8000c764 => 0xac01a583 (* lw a1,-1344(gp) # 800802c0 <uxLastPollingCycles.0>  *)
    | 0x8000c768 => 0x02c59863 (* bne a1,a2,8000c798 <xAreRecursiveMutexTasksStillRunning+0x60>  *)
    | 0x8000c76c => 0x18a00713 (* li a4,394  *)
    | 0x8000c770 => 0xaee1a423 (* sw a4,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c774 => 0xae81a503 (* lw a0,-1304(gp) # 800802e8 <xErrorOccurred>  *)
    | 0x8000c778 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000c77c => 0x00008067 (* ret  *)
    | 0x8000c780 => 0xadc1a683 (* lw a3,-1316(gp) # 800802dc <uxControllingCycles>  *)
    | 0x8000c784 => 0xacd1a423 (* sw a3,-1336(gp) # 800802c8 <uxLastControllingCycles.2>  *)
    | 0x8000c788 => 0xfc5ff06f (* j 8000c74c <xAreRecursiveMutexTasksStillRunning+0x14>  *)
    | 0x8000c78c => 0xad81a683 (* lw a3,-1320(gp) # 800802d8 <uxBlockingCycles>  *)
    | 0x8000c790 => 0xacd1a223 (* sw a3,-1340(gp) # 800802c4 <uxLastBlockingCycles.1>  *)
    | 0x8000c794 => 0xfcdff06f (* j 8000c760 <xAreRecursiveMutexTasksStillRunning+0x28>  *)
    | 0x8000c798 => 0xad41a683 (* lw a3,-1324(gp) # 800802d4 <uxPollingCycles>  *)
    | 0x8000c79c => 0xacd1a023 (* sw a3,-1344(gp) # 800802c0 <uxLastPollingCycles.0>  *)
    | 0x8000c7a0 => 0xfd5ff06f (* j 8000c774 <xAreRecursiveMutexTasksStillRunning+0x3c>  *)
    (* <prvSemaphoreTest> *)
    | 0x8000c7a4 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000c7a8 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000c7ac => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000c7b0 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000c7b4 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000c7b8 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000c7bc => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000c7c0 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000c7c4 => 0x03612023 (* sw s6,32(sp)  *)
    | 0x8000c7c8 => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x8000c7cc => 0x00050413 (* mv s0,a0  *)
    | 0x8000c7d0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000c7d4 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x8000c7d8 => 0xaf81d983 (* lhu s3,-1288(gp) # 800802f8 <sNextCheckVariable>  *)
    | 0x8000c7dc => 0x0047a683 (* lw a3,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x8000c7e0 => 0xaf81d783 (* lhu a5,-1288(gp) # 800802f8 <sNextCheckVariable>  *)
    | 0x8000c7e4 => 0x01099993 (* sll s3,s3,0x10  *)
    | 0x8000c7e8 => 0x4109d993 (* sra s3,s3,0x10  *)
    | 0x8000c7ec => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c7f0 => 0x01079793 (* sll a5,a5,0x10  *)
    | 0x8000c7f4 => 0x4107d793 (* sra a5,a5,0x10  *)
    | 0x8000c7f8 => 0xaef19c23 (* sh a5,-1288(gp) # 800802f8 <sNextCheckVariable>  *)
    | 0x8000c7fc => 0x00069463 (* bnez a3,8000c804 <prvSemaphoreTest+0x60>  *)
    | 0x8000c800 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000c804 => 0x00842783 (* lw a5,8(s0)  *)
    | 0x8000c808 => 0x00442a03 (* lw s4,4(s0)  *)
    | 0x8000c80c => 0x0a078c63 (* beqz a5,8000c8c4 <prvSemaphoreTest+0x120>  *)
    | 0x8000c810 => 0x000017b7 (* lui a5,0x1  *)
    | 0x8000c814 => 0xfff78793 (* add a5,a5,-1 # fff <__stack_size+0xea1>  *)
    | 0x8000c818 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x8000c81c => 0xafc18493 (* add s1,gp,-1284 # 800802fc <sCheckVariables>  *)
    | 0x8000c820 => 0x00199793 (* sll a5,s3,0x1  *)
    | 0x8000c824 => 0x00000913 (* li s2,0  *)
    | 0x8000c828 => 0x00100a93 (* li s5,1  *)
    | 0x8000c82c => 0x00a00b13 (* li s6,10  *)
    | 0x8000c830 => 0x00300b93 (* li s7,3  *)
    | 0x8000c834 => 0x00f484b3 (* add s1,s1,a5  *)
    | 0x8000c838 => 0x00842583 (* lw a1,8(s0)  *)
    | 0x8000c83c => 0x00042503 (* lw a0,0(s0)  *)
    | 0x8000c840 => 0xb7cf70ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000c844 => 0x09551863 (* bne a0,s5,8000c8d4 <prvSemaphoreTest+0x130>  *)
    | 0x8000c848 => 0x000a2703 (* lw a4,0(s4)  *)
    | 0x8000c84c => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000c850 => 0x00f70463 (* beq a4,a5,8000c858 <prvSemaphoreTest+0xb4>  *)
    | 0x8000c854 => 0x00100913 (* li s2,1  *)
    | 0x8000c858 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000c85c => 0x00000793 (* li a5,0  *)
    | 0x8000c860 => 0x00fa2023 (* sw a5,0(s4)  *)
    | 0x8000c864 => 0x000a2703 (* lw a4,0(s4)  *)
    | 0x8000c868 => 0x00f70463 (* beq a4,a5,8000c870 <prvSemaphoreTest+0xcc>  *)
    | 0x8000c86c => 0x00100913 (* li s2,1  *)
    | 0x8000c870 => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000c874 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c878 => 0xfef774e3 (* bgeu a4,a5,8000c860 <prvSemaphoreTest+0xbc>  *)
    | 0x8000c87c => 0x00042503 (* lw a0,0(s0)  *)
    | 0x8000c880 => 0x00000693 (* li a3,0  *)
    | 0x8000c884 => 0x00000613 (* li a2,0  *)
    | 0x8000c888 => 0x00000593 (* li a1,0  *)
    | 0x8000c88c => 0xb41f60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000c890 => 0x02050e63 (* beqz a0,8000c8cc <prvSemaphoreTest+0x128>  *)
    | 0x8000c894 => 0x00091e63 (* bnez s2,8000c8b0 <prvSemaphoreTest+0x10c>  *)
    | 0x8000c898 => 0x013bcc63 (* blt s7,s3,8000c8b0 <prvSemaphoreTest+0x10c>  *)
    | 0x8000c89c => 0x0004d783 (* lhu a5,0(s1)  *)
    | 0x8000c8a0 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000c8a4 => 0x01079793 (* sll a5,a5,0x10  *)
    | 0x8000c8a8 => 0x4107d793 (* sra a5,a5,0x10  *)
    | 0x8000c8ac => 0x00f49023 (* sh a5,0(s1)  *)
    | 0x8000c8b0 => 0x00842503 (* lw a0,8(s0)  *)
    | 0x8000c8b4 => 0xf80502e3 (* beqz a0,8000c838 <prvSemaphoreTest+0x94>  *)
    | 0x8000c8b8 => 0x03650533 (* mul a0,a0,s6  *)
    | 0x8000c8bc => 0xa5df40ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000c8c0 => 0xf79ff06f (* j 8000c838 <prvSemaphoreTest+0x94>  *)
    | 0x8000c8c4 => 0x0ff00793 (* li a5,255  *)
    | 0x8000c8c8 => 0xf51ff06f (* j 8000c818 <prvSemaphoreTest+0x74>  *)
    | 0x8000c8cc => 0x00100913 (* li s2,1  *)
    | 0x8000c8d0 => 0xfe1ff06f (* j 8000c8b0 <prvSemaphoreTest+0x10c>  *)
    | 0x8000c8d4 => 0x00842783 (* lw a5,8(s0)  *)
    | 0x8000c8d8 => 0xf60790e3 (* bnez a5,8000c838 <prvSemaphoreTest+0x94>  *)
    | 0x8000c8dc => 0x00000073 (* ecall  *)
    | 0x8000c8e0 => 0xf59ff06f (* j 8000c838 <prvSemaphoreTest+0x94>  *)
    (* <vStartSemaphoreTasks> *)
    | 0x8000c8e4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000c8e8 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x8000c8ec => 0x00050493 (* mv s1,a0  *)
    | 0x8000c8f0 => 0x00c00513 (* li a0,12  *)
    | 0x8000c8f4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000c8f8 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000c8fc => 0x01212023 (* sw s2,0(sp)  *)
    | 0x8000c900 => 0xa19f90ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000c904 => 0x08050e63 (* beqz a0,8000c9a0 <vStartSemaphoreTasks+0xbc>  *)
    | 0x8000c908 => 0x00050413 (* mv s0,a0  *)
    | 0x8000c90c => 0x00300613 (* li a2,3  *)
    | 0x8000c910 => 0x00000593 (* li a1,0  *)
    | 0x8000c914 => 0x00100513 (* li a0,1  *)
    | 0x8000c918 => 0x8b5f60ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000c91c => 0x00a42023 (* sw a0,0(s0)  *)
    | 0x8000c920 => 0x08050063 (* beqz a0,8000c9a0 <vStartSemaphoreTasks+0xbc>  *)
    | 0x8000c924 => 0x00000693 (* li a3,0  *)
    | 0x8000c928 => 0x00000613 (* li a2,0  *)
    | 0x8000c92c => 0x00000593 (* li a1,0  *)
    | 0x8000c930 => 0xa9df60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000c934 => 0x00400513 (* li a0,4  *)
    | 0x8000c938 => 0x9e1f90ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000c93c => 0x00a42223 (* sw a0,4(s0)  *)
    | 0x8000c940 => 0x0ff00793 (* li a5,255  *)
    | 0x8000c944 => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x8000c948 => 0x8000c937 (* lui s2,0x8000c  *)
    | 0x8000c94c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c950 => 0x00000793 (* li a5,0  *)
    | 0x8000c954 => 0x00000713 (* li a4,0  *)
    | 0x8000c958 => 0x00040693 (* mv a3,s0  *)
    | 0x8000c95c => 0x07800613 (* li a2,120  *)
    | 0x8000c960 => 0x18858593 (* add a1,a1,392 # 80014188 <_etext+0x5b8>  *)
    | 0x8000c964 => 0x00042423 (* sw zero,8(s0)  *)
    | 0x8000c968 => 0x7a490513 (* add a0,s2,1956 # 8000c7a4 <prvSemaphoreTest>  *)
    | 0x8000c96c => 0xe91f30ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000c970 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c974 => 0x19058593 (* add a1,a1,400 # 80014190 <_etext+0x5c0>  *)
    | 0x8000c978 => 0x00000793 (* li a5,0  *)
    | 0x8000c97c => 0x00000713 (* li a4,0  *)
    | 0x8000c980 => 0x00040693 (* mv a3,s0  *)
    | 0x8000c984 => 0x07800613 (* li a2,120  *)
    | 0x8000c988 => 0x7a490513 (* add a0,s2,1956  *)
    | 0x8000c98c => 0xe71f30ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000c990 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x8000c994 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c998 => 0xd5858593 (* add a1,a1,-680 # 80013d58 <_etext+0x188>  *)
    | 0x8000c99c => 0x959f70ef (* jal 800042f4 <vQueueAddToRegistry>  *)
    | 0x8000c9a0 => 0x00c00513 (* li a0,12  *)
    | 0x8000c9a4 => 0x975f90ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000c9a8 => 0x00050413 (* mv s0,a0  *)
    | 0x8000c9ac => 0x0a050a63 (* beqz a0,8000ca60 <vStartSemaphoreTasks+0x17c>  *)
    | 0x8000c9b0 => 0x00300613 (* li a2,3  *)
    | 0x8000c9b4 => 0x00000593 (* li a1,0  *)
    | 0x8000c9b8 => 0x00100513 (* li a0,1  *)
    | 0x8000c9bc => 0x811f60ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000c9c0 => 0x00a42023 (* sw a0,0(s0)  *)
    | 0x8000c9c4 => 0x08050e63 (* beqz a0,8000ca60 <vStartSemaphoreTasks+0x17c>  *)
    | 0x8000c9c8 => 0x00000693 (* li a3,0  *)
    | 0x8000c9cc => 0x00000613 (* li a2,0  *)
    | 0x8000c9d0 => 0x00000593 (* li a1,0  *)
    | 0x8000c9d4 => 0x9f9f60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000c9d8 => 0x00400513 (* li a0,4  *)
    | 0x8000c9dc => 0x93df90ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000c9e0 => 0x000017b7 (* lui a5,0x1  *)
    | 0x8000c9e4 => 0x00a42223 (* sw a0,4(s0)  *)
    | 0x8000c9e8 => 0xfff78793 (* add a5,a5,-1 # fff <__stack_size+0xea1>  *)
    | 0x8000c9ec => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x8000c9f0 => 0x8000c937 (* lui s2,0x8000c  *)
    | 0x8000c9f4 => 0x06400793 (* li a5,100  *)
    | 0x8000c9f8 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000c9fc => 0x00f42423 (* sw a5,8(s0)  *)
    | 0x8000ca00 => 0x00048713 (* mv a4,s1  *)
    | 0x8000ca04 => 0x00040693 (* mv a3,s0  *)
    | 0x8000ca08 => 0x00000793 (* li a5,0  *)
    | 0x8000ca0c => 0x07800613 (* li a2,120  *)
    | 0x8000ca10 => 0x19858593 (* add a1,a1,408 # 80014198 <_etext+0x5c8>  *)
    | 0x8000ca14 => 0x7a490513 (* add a0,s2,1956 # 8000c7a4 <prvSemaphoreTest>  *)
    | 0x8000ca18 => 0xde5f30ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ca1c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ca20 => 0x00048713 (* mv a4,s1  *)
    | 0x8000ca24 => 0x00040693 (* mv a3,s0  *)
    | 0x8000ca28 => 0x1a058593 (* add a1,a1,416 # 800141a0 <_etext+0x5d0>  *)
    | 0x8000ca2c => 0x7a490513 (* add a0,s2,1956  *)
    | 0x8000ca30 => 0x00000793 (* li a5,0  *)
    | 0x8000ca34 => 0x07800613 (* li a2,120  *)
    | 0x8000ca38 => 0xdc5f30ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ca3c => 0x00042503 (* lw a0,0(s0)  *)
    | 0x8000ca40 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000ca44 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000ca48 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000ca4c => 0x00012903 (* lw s2,0(sp)  *)
    | 0x8000ca50 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ca54 => 0xd6858593 (* add a1,a1,-664 # 80013d68 <_etext+0x198>  *)
    | 0x8000ca58 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000ca5c => 0x899f706f (* j 800042f4 <vQueueAddToRegistry>  *)
    | 0x8000ca60 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000ca64 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000ca68 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000ca6c => 0x00012903 (* lw s2,0(sp)  *)
    | 0x8000ca70 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000ca74 => 0x00008067 (* ret  *)
    (* <xAreSemaphoreTasksStillRunning> *)
    | 0x8000ca78 => 0xaf018793 (* add a5,gp,-1296 # 800802f0 <sLastCheckVariables.0>  *)
    | 0x8000ca7c => 0x00100513 (* li a0,1  *)
    | 0x8000ca80 => 0x00000713 (* li a4,0  *)
    | 0x8000ca84 => 0xafc18613 (* add a2,gp,-1284 # 800802fc <sCheckVariables>  *)
    | 0x8000ca88 => 0x00400593 (* li a1,4  *)
    | 0x8000ca8c => 0x00171693 (* sll a3,a4,0x1  *)
    | 0x8000ca90 => 0x00d60833 (* add a6,a2,a3  *)
    | 0x8000ca94 => 0x00085883 (* lhu a7,0(a6)  *)
    | 0x8000ca98 => 0x0007d803 (* lhu a6,0(a5)  *)
    | 0x8000ca9c => 0x01089463 (* bne a7,a6,8000caa4 <xAreSemaphoreTasksStillRunning+0x2c>  *)
    | 0x8000caa0 => 0x00000513 (* li a0,0  *)
    | 0x8000caa4 => 0x00d606b3 (* add a3,a2,a3  *)
    | 0x8000caa8 => 0x0006d683 (* lhu a3,0(a3)  *)
    | 0x8000caac => 0x00170713 (* add a4,a4,1  *)
    | 0x8000cab0 => 0x00278793 (* add a5,a5,2  *)
    | 0x8000cab4 => 0xfed79f23 (* sh a3,-2(a5)  *)
    | 0x8000cab8 => 0xfcb71ae3 (* bne a4,a1,8000ca8c <xAreSemaphoreTasksStillRunning+0x14>  *)
    | 0x8000cabc => 0x00008067 (* ret  *)
    (* <prvGetNextDelayTime> *)
    | 0x8000cac0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000cac4 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000cac8 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000cacc => 0x000084b7 (* lui s1,0x8  *)
    | 0x8000cad0 => 0x015a5937 (* lui s2,0x15a5  *)
    | 0x8000cad4 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000cad8 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000cadc => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000cae0 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000cae4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000cae8 => 0xe3590913 (* add s2,s2,-459 # 15a4e35 <__stack_size+0x15a4cd7>  *)
    | 0x8000caec => 0xfff48493 (* add s1,s1,-1 # 7fff <__stack_size+0x7ea1>  *)
    | 0x8000caf0 => 0x09600a93 (* li s5,150  *)
    | 0x8000caf4 => 0x04a00a13 (* li s4,74  *)
    | 0x8000caf8 => 0xb101a403 (* lw s0,-1264(gp) # 80080310 <ulNextRand>  *)
    | 0x8000cafc => 0x00200513 (* li a0,2  *)
    | 0x8000cb00 => 0x03240433 (* mul s0,s0,s2  *)
    | 0x8000cb04 => 0x00140413 (* add s0,s0,1  *)
    | 0x8000cb08 => 0xb081a823 (* sw s0,-1264(gp) # 80080310 <ulNextRand>  *)
    | 0x8000cb0c => 0x01045413 (* srl s0,s0,0x10  *)
    | 0x8000cb10 => 0x00947433 (* and s0,s0,s1  *)
    | 0x8000cb14 => 0x03547433 (* remu s0,s0,s5  *)
    | 0x8000cb18 => 0x801f40ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000cb1c => 0xfc8a7ee3 (* bgeu s4,s0,8000caf8 <prvGetNextDelayTime+0x38>  *)
    | 0x8000cb20 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000cb24 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cb28 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000cb2c => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000cb30 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x8000cb34 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000cb38 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000cb3c => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8000cb40 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000cb44 => 0x00008067 (* ret  *)
    (* <prvStaticallyAllocatedTask> *)
    | 0x8000cb48 => 0x00000513 (* li a0,0  *)
    | 0x8000cb4c => 0xba1f406f (* j 800016ec <vTaskSuspend>  *)
    (* <prvSanityCheckCreatedQueue> *)
    | 0x8000cb50 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000cb54 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000cb58 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000cb5c => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000cb60 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000cb64 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000cb68 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000cb6c => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000cb70 => 0x03612023 (* sw s6,32(sp)  *)
    | 0x8000cb74 => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x8000cb78 => 0x00050413 (* mv s0,a0  *)
    | 0x8000cb7c => 0x00200993 (* li s3,2  *)
    | 0x8000cb80 => 0x00400a13 (* li s4,4  *)
    | 0x8000cb84 => 0x00100913 (* li s2,1  *)
    | 0x8000cb88 => 0x3e500a93 (* li s5,997  *)
    | 0x8000cb8c => 0x00000613 (* li a2,0  *)
    | 0x8000cb90 => 0x00010593 (* mv a1,sp  *)
    | 0x8000cb94 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cb98 => 0xe31f60ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000cb9c => 0x00050663 (* beqz a0,8000cba8 <prvSanityCheckCreatedQueue+0x58>  *)
    | 0x8000cba0 => 0x3da00793 (* li a5,986  *)
    | 0x8000cba4 => 0xb0f1a423 (* sw a5,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cba8 => 0x00000713 (* li a4,0  *)
    | 0x8000cbac => 0x00000793 (* li a5,0  *)
    | 0x8000cbb0 => 0x00e12023 (* sw a4,0(sp)  *)
    | 0x8000cbb4 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x8000cbb8 => 0x00000693 (* li a3,0  *)
    | 0x8000cbbc => 0x00000613 (* li a2,0  *)
    | 0x8000cbc0 => 0x00010593 (* mv a1,sp  *)
    | 0x8000cbc4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cbc8 => 0x00079463 (* bnez a5,8000cbd0 <prvSanityCheckCreatedQueue+0x80>  *)
    | 0x8000cbcc => 0x08ea7463 (* bgeu s4,a4,8000cc54 <prvSanityCheckCreatedQueue+0x104>  *)
    | 0x8000cbd0 => 0xffcf60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000cbd4 => 0x00050663 (* beqz a0,8000cbe0 <prvSanityCheckCreatedQueue+0x90>  *)
    | 0x8000cbd8 => 0x3ee00793 (* li a5,1006  *)
    | 0x8000cbdc => 0xb0f1a423 (* sw a5,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cbe0 => 0x00000713 (* li a4,0  *)
    | 0x8000cbe4 => 0x00000793 (* li a5,0  *)
    | 0x8000cbe8 => 0x3f900b13 (* li s6,1017  *)
    | 0x8000cbec => 0x3fe00b93 (* li s7,1022  *)
    | 0x8000cbf0 => 0x00e12023 (* sw a4,0(sp)  *)
    | 0x8000cbf4 => 0x00f12223 (* sw a5,4(sp)  *)
    | 0x8000cbf8 => 0x00000613 (* li a2,0  *)
    | 0x8000cbfc => 0x00079463 (* bnez a5,8000cc04 <prvSanityCheckCreatedQueue+0xb4>  *)
    | 0x8000cc00 => 0x06ea7c63 (* bgeu s4,a4,8000cc78 <prvSanityCheckCreatedQueue+0x128>  *)
    | 0x8000cc04 => 0x00010593 (* mv a1,sp  *)
    | 0x8000cc08 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cc0c => 0xdbdf60ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000cc10 => 0x00050663 (* beqz a0,8000cc1c <prvSanityCheckCreatedQueue+0xcc>  *)
    | 0x8000cc14 => 0x40700793 (* li a5,1031  *)
    | 0x8000cc18 => 0xb0f1a423 (* sw a5,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cc1c => 0x03299863 (* bne s3,s2,8000cc4c <prvSanityCheckCreatedQueue+0xfc>  *)
    | 0x8000cc20 => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x8000cc24 => 0x03812403 (* lw s0,56(sp)  *)
    | 0x8000cc28 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x8000cc2c => 0x03012903 (* lw s2,48(sp)  *)
    | 0x8000cc30 => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x8000cc34 => 0x02812a03 (* lw s4,40(sp)  *)
    | 0x8000cc38 => 0x02412a83 (* lw s5,36(sp)  *)
    | 0x8000cc3c => 0x02012b03 (* lw s6,32(sp)  *)
    | 0x8000cc40 => 0x01c12b83 (* lw s7,28(sp)  *)
    | 0x8000cc44 => 0x04010113 (* add sp,sp,64  *)
    | 0x8000cc48 => 0x00008067 (* ret  *)
    | 0x8000cc4c => 0x00100993 (* li s3,1  *)
    | 0x8000cc50 => 0xf3dff06f (* j 8000cb8c <prvSanityCheckCreatedQueue+0x3c>  *)
    | 0x8000cc54 => 0xf78f60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000cc58 => 0x01250463 (* beq a0,s2,8000cc60 <prvSanityCheckCreatedQueue+0x110>  *)
    | 0x8000cc5c => 0xb151a423 (* sw s5,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cc60 => 0x00012783 (* lw a5,0(sp)  *)
    | 0x8000cc64 => 0x00412683 (* lw a3,4(sp)  *)
    | 0x8000cc68 => 0x00178713 (* add a4,a5,1  *)
    | 0x8000cc6c => 0x00f737b3 (* sltu a5,a4,a5  *)
    | 0x8000cc70 => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x8000cc74 => 0xf3dff06f (* j 8000cbb0 <prvSanityCheckCreatedQueue+0x60>  *)
    | 0x8000cc78 => 0x00810593 (* add a1,sp,8  *)
    | 0x8000cc7c => 0x00040513 (* mv a0,s0  *)
    | 0x8000cc80 => 0xd49f60ef (* jal 800039c8 <xQueueReceive>  *)
    | 0x8000cc84 => 0x01250463 (* beq a0,s2,8000cc8c <prvSanityCheckCreatedQueue+0x13c>  *)
    | 0x8000cc88 => 0xb161a423 (* sw s6,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cc8c => 0x00012783 (* lw a5,0(sp)  *)
    | 0x8000cc90 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000cc94 => 0x00412683 (* lw a3,4(sp)  *)
    | 0x8000cc98 => 0x00f71663 (* bne a4,a5,8000cca4 <prvSanityCheckCreatedQueue+0x154>  *)
    | 0x8000cc9c => 0x00c12703 (* lw a4,12(sp)  *)
    | 0x8000cca0 => 0x00d70463 (* beq a4,a3,8000cca8 <prvSanityCheckCreatedQueue+0x158>  *)
    | 0x8000cca4 => 0xb171a423 (* sw s7,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cca8 => 0x00178713 (* add a4,a5,1  *)
    | 0x8000ccac => 0x00f737b3 (* sltu a5,a4,a5  *)
    | 0x8000ccb0 => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x8000ccb4 => 0xf3dff06f (* j 8000cbf0 <prvSanityCheckCreatedQueue+0xa0>  *)
    (* <prvSanityCheckCreatedSemaphore> *)
    | 0x8000ccb8 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000ccbc => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000ccc0 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000ccc4 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000ccc8 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000cccc => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000ccd0 => 0x00050413 (* mv s0,a0  *)
    | 0x8000ccd4 => 0x00058993 (* mv s3,a1  *)
    | 0x8000ccd8 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000ccdc => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000cce0 => 0x994f40ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000cce4 => 0x00050913 (* mv s2,a0  *)
    | 0x8000cce8 => 0x00a00593 (* li a1,10  *)
    | 0x8000ccec => 0x00040513 (* mv a0,s0  *)
    | 0x8000ccf0 => 0xecdf60ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000ccf4 => 0x00050493 (* mv s1,a0  *)
    | 0x8000ccf8 => 0x97cf40ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000ccfc => 0x41250533 (* sub a0,a0,s2  *)
    | 0x8000cd00 => 0x00900793 (* li a5,9  *)
    | 0x8000cd04 => 0x00a7e663 (* bltu a5,a0,8000cd10 <prvSanityCheckCreatedSemaphore+0x58>  *)
    | 0x8000cd08 => 0x38e00713 (* li a4,910  *)
    | 0x8000cd0c => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cd10 => 0x00048663 (* beqz s1,8000cd1c <prvSanityCheckCreatedSemaphore+0x64>  *)
    | 0x8000cd14 => 0x39300713 (* li a4,915  *)
    | 0x8000cd18 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cd1c => 0x00000913 (* li s2,0  *)
    | 0x8000cd20 => 0x39e00a93 (* li s5,926  *)
    | 0x8000cd24 => 0x00000693 (* li a3,0  *)
    | 0x8000cd28 => 0x00000613 (* li a2,0  *)
    | 0x8000cd2c => 0x00000593 (* li a1,0  *)
    | 0x8000cd30 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cd34 => 0xe98f60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000cd38 => 0x00051463 (* bnez a0,8000cd40 <prvSanityCheckCreatedSemaphore+0x88>  *)
    | 0x8000cd3c => 0xb151a423 (* sw s5,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cd40 => 0x00190493 (* add s1,s2,1  *)
    | 0x8000cd44 => 0x0c999e63 (* bne s3,s1,8000ce20 <prvSanityCheckCreatedSemaphore+0x168>  *)
    | 0x8000cd48 => 0x00000693 (* li a3,0  *)
    | 0x8000cd4c => 0x00000613 (* li a2,0  *)
    | 0x8000cd50 => 0x00000593 (* li a1,0  *)
    | 0x8000cd54 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cd58 => 0xe74f60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000cd5c => 0x00050663 (* beqz a0,8000cd68 <prvSanityCheckCreatedSemaphore+0xb0>  *)
    | 0x8000cd60 => 0x3a700713 (* li a4,935  *)
    | 0x8000cd64 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cd68 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cd6c => 0xce0f70ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000cd70 => 0x00950a63 (* beq a0,s1,8000cd84 <prvSanityCheckCreatedSemaphore+0xcc>  *)
    | 0x8000cd74 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000cd78 => 0x3aa00593 (* li a1,938  *)
    | 0x8000cd7c => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000cd80 => 0x510050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000cd84 => 0x00000493 (* li s1,0  *)
    | 0x8000cd88 => 0x3b400a13 (* li s4,948  *)
    | 0x8000cd8c => 0x00000593 (* li a1,0  *)
    | 0x8000cd90 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cd94 => 0xe29f60ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000cd98 => 0x00051463 (* bnez a0,8000cda0 <prvSanityCheckCreatedSemaphore+0xe8>  *)
    | 0x8000cd9c => 0xb141a423 (* sw s4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cda0 => 0x00148793 (* add a5,s1,1  *)
    | 0x8000cda4 => 0x08991263 (* bne s2,s1,8000ce28 <prvSanityCheckCreatedSemaphore+0x170>  *)
    | 0x8000cda8 => 0x8ccf40ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000cdac => 0x00050913 (* mv s2,a0  *)
    | 0x8000cdb0 => 0x00a00593 (* li a1,10  *)
    | 0x8000cdb4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cdb8 => 0xe05f60ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000cdbc => 0x00050493 (* mv s1,a0  *)
    | 0x8000cdc0 => 0x8b4f40ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000cdc4 => 0x41250533 (* sub a0,a0,s2  *)
    | 0x8000cdc8 => 0x00900793 (* li a5,9  *)
    | 0x8000cdcc => 0x00a7e663 (* bltu a5,a0,8000cdd8 <prvSanityCheckCreatedSemaphore+0x120>  *)
    | 0x8000cdd0 => 0x3c000713 (* li a4,960  *)
    | 0x8000cdd4 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cdd8 => 0x00048663 (* beqz s1,8000cde4 <prvSanityCheckCreatedSemaphore+0x12c>  *)
    | 0x8000cddc => 0x3c500713 (* li a4,965  *)
    | 0x8000cde0 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cde4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cde8 => 0xc64f70ef (* jal 8000424c <uxQueueMessagesWaiting>  *)
    | 0x8000cdec => 0x04050263 (* beqz a0,8000ce30 <prvSanityCheckCreatedSemaphore+0x178>  *)
    | 0x8000cdf0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000cdf4 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000cdf8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000cdfc => 0x01012903 (* lw s2,16(sp)  *)
    | 0x8000ce00 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000ce04 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000ce08 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8000ce0c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ce10 => 0x3c800593 (* li a1,968  *)
    | 0x8000ce14 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000ce18 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000ce1c => 0x4740506f (* j 80012290 <vAssertCalled>  *)
    | 0x8000ce20 => 0x00048913 (* mv s2,s1  *)
    | 0x8000ce24 => 0xf01ff06f (* j 8000cd24 <prvSanityCheckCreatedSemaphore+0x6c>  *)
    | 0x8000ce28 => 0x00078493 (* mv s1,a5  *)
    | 0x8000ce2c => 0xf61ff06f (* j 8000cd8c <prvSanityCheckCreatedSemaphore+0xd4>  *)
    | 0x8000ce30 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000ce34 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000ce38 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000ce3c => 0x01012903 (* lw s2,16(sp)  *)
    | 0x8000ce40 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000ce44 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000ce48 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8000ce4c => 0x02010113 (* add sp,sp,32  *)
    | 0x8000ce50 => 0x00008067 (* ret  *)
    (* <prvSanityCheckCreatedRecursiveMutex> *)
    | 0x8000ce54 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000ce58 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000ce5c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000ce60 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000ce64 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000ce68 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000ce6c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000ce70 => 0x00050413 (* mv s0,a0  *)
    | 0x8000ce74 => 0x809f60ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000ce78 => 0x00050663 (* beqz a0,8000ce84 <prvSanityCheckCreatedRecursiveMutex+0x30>  *)
    | 0x8000ce7c => 0x41900713 (* li a4,1049  *)
    | 0x8000ce80 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000ce84 => 0x00500493 (* li s1,5  *)
    | 0x8000ce88 => 0x00100913 (* li s2,1  *)
    | 0x8000ce8c => 0x42300a13 (* li s4,1059  *)
    | 0x8000ce90 => 0x00000593 (* li a1,0  *)
    | 0x8000ce94 => 0x00040513 (* mv a0,s0  *)
    | 0x8000ce98 => 0xf8df60ef (* jal 80003e24 <xQueueTakeMutexRecursive>  *)
    | 0x8000ce9c => 0x01250463 (* beq a0,s2,8000cea4 <prvSanityCheckCreatedRecursiveMutex+0x50>  *)
    | 0x8000cea0 => 0xb141a423 (* sw s4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cea4 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x8000cea8 => 0xfe0494e3 (* bnez s1,8000ce90 <prvSanityCheckCreatedRecursiveMutex+0x3c>  *)
    | 0x8000ceac => 0x00500493 (* li s1,5  *)
    | 0x8000ceb0 => 0x00100913 (* li s2,1  *)
    | 0x8000ceb4 => 0x42f00a13 (* li s4,1071  *)
    | 0x8000ceb8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cebc => 0xfc0f60ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000cec0 => 0x01250463 (* beq a0,s2,8000cec8 <prvSanityCheckCreatedRecursiveMutex+0x74>  *)
    | 0x8000cec4 => 0xb141a423 (* sw s4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cec8 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x8000cecc => 0xfe0496e3 (* bnez s1,8000ceb8 <prvSanityCheckCreatedRecursiveMutex+0x64>  *)
    | 0x8000ced0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000ced4 => 0xfa8f60ef (* jal 8000367c <xQueueGiveMutexRecursive>  *)
    | 0x8000ced8 => 0x00050663 (* beqz a0,8000cee4 <prvSanityCheckCreatedRecursiveMutex+0x90>  *)
    | 0x8000cedc => 0x43800713 (* li a4,1080  *)
    | 0x8000cee0 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cee4 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000cee8 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000ceec => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000cef0 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x8000cef4 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x8000cef8 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x8000cefc => 0x02010113 (* add sp,sp,32  *)
    | 0x8000cf00 => 0x00008067 (* ret  *)
    (* <prvSanityCheckCreatedEventGroup> *)
    | 0x8000cf04 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000cf08 => 0x00000593 (* li a1,0  *)
    | 0x8000cf0c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000cf10 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000cf14 => 0x00050413 (* mv s0,a0  *)
    | 0x8000cf18 => 0xac4f80ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x8000cf1c => 0x00050663 (* beqz a0,8000cf28 <prvSanityCheckCreatedEventGroup+0x24>  *)
    | 0x8000cf20 => 0x35b00713 (* li a4,859  *)
    | 0x8000cf24 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cf28 => 0x0aa00593 (* li a1,170  *)
    | 0x8000cf2c => 0x00040513 (* mv a0,s0  *)
    | 0x8000cf30 => 0xb50f80ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x8000cf34 => 0x00000593 (* li a1,0  *)
    | 0x8000cf38 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cf3c => 0xaa0f80ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x8000cf40 => 0x0aa00793 (* li a5,170  *)
    | 0x8000cf44 => 0x00f50663 (* beq a0,a5,8000cf50 <prvSanityCheckCreatedEventGroup+0x4c>  *)
    | 0x8000cf48 => 0x36500713 (* li a4,869  *)
    | 0x8000cf4c => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cf50 => 0x05500593 (* li a1,85  *)
    | 0x8000cf54 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cf58 => 0xb28f80ef (* jal 80005280 <xEventGroupSetBits>  *)
    | 0x8000cf5c => 0x00000593 (* li a1,0  *)
    | 0x8000cf60 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cf64 => 0xa78f80ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x8000cf68 => 0x0ff00793 (* li a5,255  *)
    | 0x8000cf6c => 0x00f50663 (* beq a0,a5,8000cf78 <prvSanityCheckCreatedEventGroup+0x74>  *)
    | 0x8000cf70 => 0x36e00713 (* li a4,878  *)
    | 0x8000cf74 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cf78 => 0x0aa00593 (* li a1,170  *)
    | 0x8000cf7c => 0x00040513 (* mv a0,s0  *)
    | 0x8000cf80 => 0xa5cf80ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x8000cf84 => 0x00000593 (* li a1,0  *)
    | 0x8000cf88 => 0x00040513 (* mv a0,s0  *)
    | 0x8000cf8c => 0xa50f80ef (* jal 800051dc <xEventGroupClearBits>  *)
    | 0x8000cf90 => 0x05500793 (* li a5,85  *)
    | 0x8000cf94 => 0x00f50663 (* beq a0,a5,8000cfa0 <prvSanityCheckCreatedEventGroup+0x9c>  *)
    | 0x8000cf98 => 0x37900713 (* li a4,889  *)
    | 0x8000cf9c => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000cfa0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000cfa4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000cfa8 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000cfac => 0x00008067 (* ret  *)
    (* <prvStaticallyAllocatedCreator> *)
    | 0x8000cfb0 => 0xf6010113 (* add sp,sp,-160  *)
    | 0x8000cfb4 => 0x09212823 (* sw s2,144(sp)  *)
    | 0x8000cfb8 => 0x09412423 (* sw s4,136(sp)  *)
    | 0x8000cfbc => 0x09512223 (* sw s5,132(sp)  *)
    | 0x8000cfc0 => 0x09612023 (* sw s6,128(sp)  *)
    | 0x8000cfc4 => 0x07712e23 (* sw s7,124(sp)  *)
    | 0x8000cfc8 => 0x08112e23 (* sw ra,156(sp)  *)
    | 0x8000cfcc => 0x08812c23 (* sw s0,152(sp)  *)
    | 0x8000cfd0 => 0x08912a23 (* sw s1,148(sp)  *)
    | 0x8000cfd4 => 0x09312623 (* sw s3,140(sp)  *)
    | 0x8000cfd8 => 0x07812c23 (* sw s8,120(sp)  *)
    | 0x8000cfdc => 0x80014a37 (* lui s4,0x80014  *)
    | 0x8000cfe0 => 0x8000dab7 (* lui s5,0x8000d  *)
    | 0x8000cfe4 => 0x00300b93 (* li s7,3  *)
    | 0x8000cfe8 => 0x00100913 (* li s2,1  *)
    | 0x8000cfec => 0x8000db37 (* lui s6,0x8000d  *)
    | 0x8000cff0 => 0x00000513 (* li a0,0  *)
    | 0x8000cff4 => 0xaf9f30ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000cff8 => 0x00c10413 (* add s0,sp,12  *)
    | 0x8000cffc => 0x800957b7 (* lui a5,0x80095  *)
    | 0x8000d000 => 0x00150713 (* add a4,a0,1  *)
    | 0x8000d004 => 0x00040813 (* mv a6,s0  *)
    | 0x8000d008 => 0xe1878793 (* add a5,a5,-488 # 80094e18 <uxStackBuffer.3>  *)
    | 0x8000d00c => 0x00000693 (* li a3,0  *)
    | 0x8000d010 => 0x07800613 (* li a2,120  *)
    | 0x8000d014 => 0x1e0a0593 (* add a1,s4,480 # 800141e0 <_etext+0x610>  *)
    | 0x8000d018 => 0xb48a8513 (* add a0,s5,-1208 # 8000cb48 <prvStaticallyAllocatedTask>  *)
    | 0x8000d01c => 0xed8f30ef (* jal 800006f4 <xTaskCreateStatic>  *)
    | 0x8000d020 => 0x00a12423 (* sw a0,8(sp)  *)
    | 0x8000d024 => 0x52051063 (* bnez a0,8000d544 <prvStaticallyAllocatedCreator+0x594>  *)
    | 0x8000d028 => 0x2f800713 (* li a4,760  *)
    | 0x8000d02c => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d030 => 0x00000513 (* li a0,0  *)
    | 0x8000d034 => 0xab9f30ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000d038 => 0x00150713 (* add a4,a0,1  *)
    | 0x8000d03c => 0x00810793 (* add a5,sp,8  *)
    | 0x8000d040 => 0x00000693 (* li a3,0  *)
    | 0x8000d044 => 0x07800613 (* li a2,120  *)
    | 0x8000d048 => 0x1e0a0593 (* add a1,s4,480  *)
    | 0x8000d04c => 0xb48a8513 (* add a0,s5,-1208  *)
    | 0x8000d050 => 0xfacf30ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000d054 => 0x00050493 (* mv s1,a0  *)
    | 0x8000d058 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x8000d05c => 0x9c9f30ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000d060 => 0x01750663 (* beq a0,s7,8000d06c <prvStaticallyAllocatedCreator+0xbc>  *)
    | 0x8000d064 => 0x31600713 (* li a4,790  *)
    | 0x8000d068 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d06c => 0x01248e63 (* beq s1,s2,8000d088 <prvStaticallyAllocatedCreator+0xd8>  *)
    | 0x8000d070 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d074 => 0x31900593 (* li a1,793  *)
    | 0x8000d078 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d07c => 0x214050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d080 => 0x31d00713 (* li a4,797  *)
    | 0x8000d084 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d088 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x8000d08c => 0x800959b7 (* lui s3,0x80095  *)
    | 0x8000d090 => 0x845f30ef (* jal 800008d4 <vTaskDelete>  *)
    | 0x8000d094 => 0x80095637 (* lui a2,0x80095  *)
    | 0x8000d098 => 0xd9c98693 (* add a3,s3,-612 # 80094d9c <xStaticQueue.1>  *)
    | 0x8000d09c => 0x00000713 (* li a4,0  *)
    | 0x8000d0a0 => 0xdf060613 (* add a2,a2,-528 # 80094df0 <ucQueueStorageArea.2>  *)
    | 0x8000d0a4 => 0x00800593 (* li a1,8  *)
    | 0x8000d0a8 => 0x00500513 (* li a0,5  *)
    | 0x8000d0ac => 0x838f60ef (* jal 800030e4 <xQueueGenericCreateStatic>  *)
    | 0x8000d0b0 => 0xd9c98993 (* add s3,s3,-612  *)
    | 0x8000d0b4 => 0x00050493 (* mv s1,a0  *)
    | 0x8000d0b8 => 0x01350a63 (* beq a0,s3,8000d0cc <prvStaticallyAllocatedCreator+0x11c>  *)
    | 0x8000d0bc => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d0c0 => 0x17d00593 (* li a1,381  *)
    | 0x8000d0c4 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d0c8 => 0x1c8050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d0cc => 0x00048513 (* mv a0,s1  *)
    | 0x8000d0d0 => 0xa81ff0ef (* jal 8000cb50 <prvSanityCheckCreatedQueue>  *)
    | 0x8000d0d4 => 0x00048513 (* mv a0,s1  *)
    | 0x8000d0d8 => 0xb24f70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d0dc => 0x00000613 (* li a2,0  *)
    | 0x8000d0e0 => 0x00800593 (* li a1,8  *)
    | 0x8000d0e4 => 0x00500513 (* li a0,5  *)
    | 0x8000d0e8 => 0x8e4f60ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000d0ec => 0x00050493 (* mv s1,a0  *)
    | 0x8000d0f0 => 0x00051a63 (* bnez a0,8000d104 <prvStaticallyAllocatedCreator+0x154>  *)
    | 0x8000d0f4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d0f8 => 0x18f00593 (* li a1,399  *)
    | 0x8000d0fc => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d100 => 0x190050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d104 => 0x00048513 (* mv a0,s1  *)
    | 0x8000d108 => 0xa49ff0ef (* jal 8000cb50 <prvSanityCheckCreatedQueue>  *)
    | 0x8000d10c => 0x00048513 (* mv a0,s1  *)
    | 0x8000d110 => 0xaecf70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d114 => 0x9adff0ef (* jal 8000cac0 <prvGetNextDelayTime>  *)
    | 0x8000d118 => 0xa00f40ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000d11c => 0xb0c1a783 (* lw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d120 => 0x00300713 (* li a4,3  *)
    | 0x8000d124 => 0x00040693 (* mv a3,s0  *)
    | 0x8000d128 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000d12c => 0x00000613 (* li a2,0  *)
    | 0x8000d130 => 0x00000593 (* li a1,0  *)
    | 0x8000d134 => 0x00100513 (* li a0,1  *)
    | 0x8000d138 => 0xb0f1a623 (* sw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d13c => 0xfa9f50ef (* jal 800030e4 <xQueueGenericCreateStatic>  *)
    | 0x8000d140 => 0x00050993 (* mv s3,a0  *)
    | 0x8000d144 => 0x00850a63 (* beq a0,s0,8000d158 <prvStaticallyAllocatedCreator+0x1a8>  *)
    | 0x8000d148 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d14c => 0x1fb00593 (* li a1,507  *)
    | 0x8000d150 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d154 => 0x13c050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d158 => 0x00100593 (* li a1,1  *)
    | 0x8000d15c => 0x00098513 (* mv a0,s3  *)
    | 0x8000d160 => 0xb59ff0ef (* jal 8000ccb8 <prvSanityCheckCreatedSemaphore>  *)
    | 0x8000d164 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d168 => 0xa94f70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d16c => 0x00300613 (* li a2,3  *)
    | 0x8000d170 => 0x00000593 (* li a1,0  *)
    | 0x8000d174 => 0x00100513 (* li a0,1  *)
    | 0x8000d178 => 0x854f60ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000d17c => 0x00050993 (* mv s3,a0  *)
    | 0x8000d180 => 0x00051a63 (* bnez a0,8000d194 <prvStaticallyAllocatedCreator+0x1e4>  *)
    | 0x8000d184 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d188 => 0x20900593 (* li a1,521  *)
    | 0x8000d18c => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d190 => 0x100050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d194 => 0x00100593 (* li a1,1  *)
    | 0x8000d198 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d19c => 0xb1dff0ef (* jal 8000ccb8 <prvSanityCheckCreatedSemaphore>  *)
    | 0x8000d1a0 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d1a4 => 0xa58f70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d1a8 => 0x00300613 (* li a2,3  *)
    | 0x8000d1ac => 0x00000593 (* li a1,0  *)
    | 0x8000d1b0 => 0x00100513 (* li a0,1  *)
    | 0x8000d1b4 => 0x818f60ef (* jal 800031cc <xQueueGenericCreate>  *)
    | 0x8000d1b8 => 0x00050993 (* mv s3,a0  *)
    | 0x8000d1bc => 0x00050a63 (* beqz a0,8000d1d0 <prvStaticallyAllocatedCreator+0x220>  *)
    | 0x8000d1c0 => 0x00000693 (* li a3,0  *)
    | 0x8000d1c4 => 0x00000613 (* li a2,0  *)
    | 0x8000d1c8 => 0x00000593 (* li a1,0  *)
    | 0x8000d1cc => 0xa00f60ef (* jal 800033cc <xQueueGenericSend>  *)
    | 0x8000d1d0 => 0x00000593 (* li a1,0  *)
    | 0x8000d1d4 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d1d8 => 0x9e5f60ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000d1dc => 0x00051663 (* bnez a0,8000d1e8 <prvStaticallyAllocatedCreator+0x238>  *)
    | 0x8000d1e0 => 0x21a00713 (* li a4,538  *)
    | 0x8000d1e4 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d1e8 => 0x00100593 (* li a1,1  *)
    | 0x8000d1ec => 0x00098513 (* mv a0,s3  *)
    | 0x8000d1f0 => 0xac9ff0ef (* jal 8000ccb8 <prvSanityCheckCreatedSemaphore>  *)
    | 0x8000d1f4 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d1f8 => 0xa04f70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d1fc => 0x00040613 (* mv a2,s0  *)
    | 0x8000d200 => 0x00000593 (* li a1,0  *)
    | 0x8000d204 => 0x00a00513 (* li a0,10  *)
    | 0x8000d208 => 0x914f60ef (* jal 8000331c <xQueueCreateCountingSemaphoreStatic>  *)
    | 0x8000d20c => 0x00050993 (* mv s3,a0  *)
    | 0x8000d210 => 0x00850a63 (* beq a0,s0,8000d224 <prvStaticallyAllocatedCreator+0x274>  *)
    | 0x8000d214 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d218 => 0x11800593 (* li a1,280  *)
    | 0x8000d21c => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d220 => 0x070050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d224 => 0x00a00593 (* li a1,10  *)
    | 0x8000d228 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d22c => 0xa8dff0ef (* jal 8000ccb8 <prvSanityCheckCreatedSemaphore>  *)
    | 0x8000d230 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d234 => 0x9c8f70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d238 => 0x00000593 (* li a1,0  *)
    | 0x8000d23c => 0x00a00513 (* li a0,10  *)
    | 0x8000d240 => 0x938f60ef (* jal 80003378 <xQueueCreateCountingSemaphore>  *)
    | 0x8000d244 => 0x00050993 (* mv s3,a0  *)
    | 0x8000d248 => 0x00051a63 (* bnez a0,8000d25c <prvStaticallyAllocatedCreator+0x2ac>  *)
    | 0x8000d24c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d250 => 0x12600593 (* li a1,294  *)
    | 0x8000d254 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d258 => 0x038050ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d25c => 0x00a00593 (* li a1,10  *)
    | 0x8000d260 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d264 => 0xa55ff0ef (* jal 8000ccb8 <prvSanityCheckCreatedSemaphore>  *)
    | 0x8000d268 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d26c => 0x990f70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d270 => 0x851ff0ef (* jal 8000cac0 <prvGetNextDelayTime>  *)
    | 0x8000d274 => 0x8a4f40ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000d278 => 0xb0c1a783 (* lw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d27c => 0x00040593 (* mv a1,s0  *)
    | 0x8000d280 => 0x00100513 (* li a0,1  *)
    | 0x8000d284 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000d288 => 0xb0f1a623 (* sw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d28c => 0xb94f60ef (* jal 80003620 <xQueueCreateMutexStatic>  *)
    | 0x8000d290 => 0x00050993 (* mv s3,a0  *)
    | 0x8000d294 => 0x00850a63 (* beq a0,s0,8000d2a8 <prvStaticallyAllocatedCreator+0x2f8>  *)
    | 0x8000d298 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d29c => 0x1b300593 (* li a1,435  *)
    | 0x8000d2a0 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d2a4 => 0x7ed040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d2a8 => 0x00000593 (* li a1,0  *)
    | 0x8000d2ac => 0x00098513 (* mv a0,s3  *)
    | 0x8000d2b0 => 0x90df60ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000d2b4 => 0x01250663 (* beq a0,s2,8000d2c0 <prvStaticallyAllocatedCreator+0x310>  *)
    | 0x8000d2b8 => 0x1bb00713 (* li a4,443  *)
    | 0x8000d2bc => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d2c0 => 0x00100593 (* li a1,1  *)
    | 0x8000d2c4 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d2c8 => 0x9f1ff0ef (* jal 8000ccb8 <prvSanityCheckCreatedSemaphore>  *)
    | 0x8000d2cc => 0x00098513 (* mv a0,s3  *)
    | 0x8000d2d0 => 0x92cf70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d2d4 => 0x00100513 (* li a0,1  *)
    | 0x8000d2d8 => 0xc20f60ef (* jal 800036f8 <xQueueCreateMutex>  *)
    | 0x8000d2dc => 0x00050993 (* mv s3,a0  *)
    | 0x8000d2e0 => 0x00051a63 (* bnez a0,8000d2f4 <prvStaticallyAllocatedCreator+0x344>  *)
    | 0x8000d2e4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d2e8 => 0x1cd00593 (* li a1,461  *)
    | 0x8000d2ec => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d2f0 => 0x7a1040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d2f4 => 0x00000593 (* li a1,0  *)
    | 0x8000d2f8 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d2fc => 0x8c1f60ef (* jal 80003bbc <xQueueSemaphoreTake>  *)
    | 0x8000d300 => 0x01250663 (* beq a0,s2,8000d30c <prvStaticallyAllocatedCreator+0x35c>  *)
    | 0x8000d304 => 0x1d500713 (* li a4,469  *)
    | 0x8000d308 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d30c => 0x00100593 (* li a1,1  *)
    | 0x8000d310 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d314 => 0x9a5ff0ef (* jal 8000ccb8 <prvSanityCheckCreatedSemaphore>  *)
    | 0x8000d318 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d31c => 0x8e0f70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d320 => 0x00040593 (* mv a1,s0  *)
    | 0x8000d324 => 0x00400513 (* li a0,4  *)
    | 0x8000d328 => 0xaf8f60ef (* jal 80003620 <xQueueCreateMutexStatic>  *)
    | 0x8000d32c => 0x00050993 (* mv s3,a0  *)
    | 0x8000d330 => 0x00850a63 (* beq a0,s0,8000d344 <prvStaticallyAllocatedCreator+0x394>  *)
    | 0x8000d334 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d338 => 0x14500593 (* li a1,325  *)
    | 0x8000d33c => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d340 => 0x751040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d344 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d348 => 0xb0dff0ef (* jal 8000ce54 <prvSanityCheckCreatedRecursiveMutex>  *)
    | 0x8000d34c => 0x00098513 (* mv a0,s3  *)
    | 0x8000d350 => 0x8acf70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d354 => 0x00400513 (* li a0,4  *)
    | 0x8000d358 => 0xba0f60ef (* jal 800036f8 <xQueueCreateMutex>  *)
    | 0x8000d35c => 0x00050993 (* mv s3,a0  *)
    | 0x8000d360 => 0x00051a63 (* bnez a0,8000d374 <prvStaticallyAllocatedCreator+0x3c4>  *)
    | 0x8000d364 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d368 => 0x15400593 (* li a1,340  *)
    | 0x8000d36c => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d370 => 0x721040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d374 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d378 => 0xaddff0ef (* jal 8000ce54 <prvSanityCheckCreatedRecursiveMutex>  *)
    | 0x8000d37c => 0x00098513 (* mv a0,s3  *)
    | 0x8000d380 => 0x87cf70ef (* jal 800043fc <vQueueDelete>  *)
    | 0x8000d384 => 0xf3cff0ef (* jal 8000cac0 <prvGetNextDelayTime>  *)
    | 0x8000d388 => 0xf91f30ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000d38c => 0xb0c1a783 (* lw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d390 => 0x00040513 (* mv a0,s0  *)
    | 0x8000d394 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000d398 => 0xb0f1a623 (* sw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d39c => 0xc25f70ef (* jal 80004fc0 <xEventGroupCreateStatic>  *)
    | 0x8000d3a0 => 0x00050993 (* mv s3,a0  *)
    | 0x8000d3a4 => 0x00850a63 (* beq a0,s0,8000d3b8 <prvStaticallyAllocatedCreator+0x408>  *)
    | 0x8000d3a8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d3ac => 0x2bf00593 (* li a1,703  *)
    | 0x8000d3b0 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d3b4 => 0x6dd040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d3b8 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d3bc => 0xb49ff0ef (* jal 8000cf04 <prvSanityCheckCreatedEventGroup>  *)
    | 0x8000d3c0 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d3c4 => 0x8f8f80ef (* jal 800054bc <vEventGroupDelete>  *)
    | 0x8000d3c8 => 0xc69f70ef (* jal 80005030 <xEventGroupCreate>  *)
    | 0x8000d3cc => 0x00050993 (* mv s3,a0  *)
    | 0x8000d3d0 => 0x00051a63 (* bnez a0,8000d3e4 <prvStaticallyAllocatedCreator+0x434>  *)
    | 0x8000d3d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d3d8 => 0x2ce00593 (* li a1,718  *)
    | 0x8000d3dc => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d3e0 => 0x6b1040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d3e4 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d3e8 => 0xb1dff0ef (* jal 8000cf04 <prvSanityCheckCreatedEventGroup>  *)
    | 0x8000d3ec => 0x00098513 (* mv a0,s3  *)
    | 0x8000d3f0 => 0x8ccf80ef (* jal 800054bc <vEventGroupDelete>  *)
    | 0x8000d3f4 => 0x80014c37 (* lui s8,0x80014  *)
    | 0x8000d3f8 => 0x00040793 (* mv a5,s0  *)
    | 0x8000d3fc => 0x560b0713 (* add a4,s6,1376 # 8000d560 <prvTimerCallback>  *)
    | 0x8000d400 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000d404 => 0x00100613 (* li a2,1  *)
    | 0x8000d408 => 0x01400593 (* li a1,20  *)
    | 0x8000d40c => 0x1e8c0513 (* add a0,s8,488 # 800141e8 <_etext+0x618>  *)
    | 0x8000d410 => 0xf44f70ef (* jal 80004b54 <xTimerCreateStatic>  *)
    | 0x8000d414 => 0x00050993 (* mv s3,a0  *)
    | 0x8000d418 => 0x00850a63 (* beq a0,s0,8000d42c <prvStaticallyAllocatedCreator+0x47c>  *)
    | 0x8000d41c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d420 => 0x25f00593 (* li a1,607  *)
    | 0x8000d424 => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d428 => 0x669040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d42c => 0x00012423 (* sw zero,8(sp)  *)
    | 0x8000d430 => 0xa45f30ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000d434 => 0x00050613 (* mv a2,a0  *)
    | 0x8000d438 => 0x00000713 (* li a4,0  *)
    | 0x8000d43c => 0x00000693 (* li a3,0  *)
    | 0x8000d440 => 0x00100593 (* li a1,1  *)
    | 0x8000d444 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d448 => 0xff0f70ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000d44c => 0x01250663 (* beq a0,s2,8000d458 <prvStaticallyAllocatedCreator+0x4a8>  *)
    | 0x8000d450 => 0x26a00713 (* li a4,618  *)
    | 0x8000d454 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d458 => 0x06400513 (* li a0,100  *)
    | 0x8000d45c => 0xebdf30ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000d460 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000d464 => 0x00500793 (* li a5,5  *)
    | 0x8000d468 => 0x00f70663 (* beq a4,a5,8000d474 <prvStaticallyAllocatedCreator+0x4c4>  *)
    | 0x8000d46c => 0x27300713 (* li a4,627  *)
    | 0x8000d470 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d474 => 0x00000713 (* li a4,0  *)
    | 0x8000d478 => 0x00000693 (* li a3,0  *)
    | 0x8000d47c => 0x00000613 (* li a2,0  *)
    | 0x8000d480 => 0x00500593 (* li a1,5  *)
    | 0x8000d484 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d488 => 0xfb0f70ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000d48c => 0x01250663 (* beq a0,s2,8000d498 <prvStaticallyAllocatedCreator+0x4e8>  *)
    | 0x8000d490 => 0x27d00713 (* li a4,637  *)
    | 0x8000d494 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d498 => 0xb0c1a783 (* lw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d49c => 0x560b0713 (* add a4,s6,1376  *)
    | 0x8000d4a0 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000d4a4 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000d4a8 => 0x00100613 (* li a2,1  *)
    | 0x8000d4ac => 0x01400593 (* li a1,20  *)
    | 0x8000d4b0 => 0x1e8c0513 (* add a0,s8,488  *)
    | 0x8000d4b4 => 0xb0f1a623 (* sw a5,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d4b8 => 0xdecf70ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x8000d4bc => 0x00050413 (* mv s0,a0  *)
    | 0x8000d4c0 => 0x00051a63 (* bnez a0,8000d4d4 <prvStaticallyAllocatedCreator+0x524>  *)
    | 0x8000d4c4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d4c8 => 0x28e00593 (* li a1,654  *)
    | 0x8000d4cc => 0x1a850513 (* add a0,a0,424 # 800141a8 <_etext+0x5d8>  *)
    | 0x8000d4d0 => 0x5c1040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d4d4 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x8000d4d8 => 0x99df30ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000d4dc => 0x00050613 (* mv a2,a0  *)
    | 0x8000d4e0 => 0x00000713 (* li a4,0  *)
    | 0x8000d4e4 => 0x00000693 (* li a3,0  *)
    | 0x8000d4e8 => 0x00100593 (* li a1,1  *)
    | 0x8000d4ec => 0x00040513 (* mv a0,s0  *)
    | 0x8000d4f0 => 0xf48f70ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000d4f4 => 0x01250663 (* beq a0,s2,8000d500 <prvStaticallyAllocatedCreator+0x550>  *)
    | 0x8000d4f8 => 0x29500713 (* li a4,661  *)
    | 0x8000d4fc => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d500 => 0x06400513 (* li a0,100  *)
    | 0x8000d504 => 0xe15f30ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000d508 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000d50c => 0x00500793 (* li a5,5  *)
    | 0x8000d510 => 0x00f70663 (* beq a4,a5,8000d51c <prvStaticallyAllocatedCreator+0x56c>  *)
    | 0x8000d514 => 0x29c00713 (* li a4,668  *)
    | 0x8000d518 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d51c => 0x00000713 (* li a4,0  *)
    | 0x8000d520 => 0x00000693 (* li a3,0  *)
    | 0x8000d524 => 0x00000613 (* li a2,0  *)
    | 0x8000d528 => 0x00500593 (* li a1,5  *)
    | 0x8000d52c => 0x00040513 (* mv a0,s0  *)
    | 0x8000d530 => 0xf08f70ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000d534 => 0xab250ee3 (* beq a0,s2,8000cff0 <prvStaticallyAllocatedCreator+0x40>  *)
    | 0x8000d538 => 0x2a300713 (* li a4,675  *)
    | 0x8000d53c => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d540 => 0xab1ff06f (* j 8000cff0 <prvStaticallyAllocatedCreator+0x40>  *)
    | 0x8000d544 => 0xce0f30ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000d548 => 0x01750663 (* beq a0,s7,8000d554 <prvStaticallyAllocatedCreator+0x5a4>  *)
    | 0x8000d54c => 0x2fe00713 (* li a4,766  *)
    | 0x8000d550 => 0xaddff06f (* j 8000d02c <prvStaticallyAllocatedCreator+0x7c>  *)
    | 0x8000d554 => 0x00812503 (* lw a0,8(sp)  *)
    | 0x8000d558 => 0xb7cf30ef (* jal 800008d4 <vTaskDelete>  *)
    | 0x8000d55c => 0xad5ff06f (* j 8000d030 <prvStaticallyAllocatedCreator+0x80>  *)
    (* <prvTimerCallback> *)
    | 0x8000d560 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000d564 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000d568 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000d56c => 0x00050413 (* mv s0,a0  *)
    | 0x8000d570 => 0x96df70ef (* jal 80004edc <pvTimerGetTimerID>  *)
    | 0x8000d574 => 0x00052783 (* lw a5,0(a0)  *)
    | 0x8000d578 => 0x00500713 (* li a4,5  *)
    | 0x8000d57c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000d580 => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x8000d584 => 0x02e79663 (* bne a5,a4,8000d5b0 <prvTimerCallback+0x50>  *)
    | 0x8000d588 => 0x00000713 (* li a4,0  *)
    | 0x8000d58c => 0x00000693 (* li a3,0  *)
    | 0x8000d590 => 0x00000613 (* li a2,0  *)
    | 0x8000d594 => 0x00300593 (* li a1,3  *)
    | 0x8000d598 => 0x00040513 (* mv a0,s0  *)
    | 0x8000d59c => 0xe9cf70ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000d5a0 => 0x00100793 (* li a5,1  *)
    | 0x8000d5a4 => 0x00f50663 (* beq a0,a5,8000d5b0 <prvTimerCallback+0x50>  *)
    | 0x8000d5a8 => 0x23b00713 (* li a4,571  *)
    | 0x8000d5ac => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d5b0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000d5b4 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000d5b8 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000d5bc => 0x00008067 (* ret  *)
    (* <vStartStaticallyAllocatedTasks> *)
    | 0x8000d5c0 => 0x80095837 (* lui a6,0x80095  *)
    | 0x8000d5c4 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x8000d5c8 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000d5cc => 0x8000d537 (* lui a0,0x8000d  *)
    | 0x8000d5d0 => 0x3b880813 (* add a6,a6,952 # 800953b8 <xCreatorTaskTCBBuffer>  *)
    | 0x8000d5d4 => 0xff878793 (* add a5,a5,-8 # 80094ff8 <uxCreatorTaskStackBuffer>  *)
    | 0x8000d5d8 => 0x00200713 (* li a4,2  *)
    | 0x8000d5dc => 0x00000693 (* li a3,0  *)
    | 0x8000d5e0 => 0x0f000613 (* li a2,240  *)
    | 0x8000d5e4 => 0x1ec58593 (* add a1,a1,492 # 800141ec <_etext+0x61c>  *)
    | 0x8000d5e8 => 0xfb050513 (* add a0,a0,-80 # 8000cfb0 <prvStaticallyAllocatedCreator>  *)
    | 0x8000d5ec => 0x908f306f (* j 800006f4 <xTaskCreateStatic>  *)
    (* <xAreStaticAllocationTasksStillRunning> *)
    | 0x8000d5f0 => 0xb0c1a583 (* lw a1,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d5f4 => 0xb041a603 (* lw a2,-1276(gp) # 80080304 <uxLastCycleCounter.0>  *)
    | 0x8000d5f8 => 0x00c59c63 (* bne a1,a2,8000d610 <xAreStaticAllocationTasksStillRunning+0x20>  *)
    | 0x8000d5fc => 0x44400713 (* li a4,1092  *)
    | 0x8000d600 => 0xb0e1a423 (* sw a4,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d604 => 0xb081a503 (* lw a0,-1272(gp) # 80080308 <xErrorOccurred>  *)
    | 0x8000d608 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000d60c => 0x00008067 (* ret  *)
    | 0x8000d610 => 0xb0c1a683 (* lw a3,-1268(gp) # 8008030c <uxCycleCounter>  *)
    | 0x8000d614 => 0xb0d1a223 (* sw a3,-1276(gp) # 80080304 <uxLastCycleCounter.0>  *)
    | 0x8000d618 => 0xfedff06f (* j 8000d604 <xAreStaticAllocationTasksStillRunning+0x14>  *)
    (* <prvNonBlockingReceiverTask> *)
    | 0x8000d61c => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000d620 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000d624 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000d628 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000d62c => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000d630 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000d634 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000d638 => 0x03612023 (* sw s6,32(sp)  *)
    | 0x8000d63c => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x8000d640 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000d644 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000d648 => 0x01812c23 (* sw s8,24(sp)  *)
    | 0x8000d64c => 0x00050a13 (* mv s4,a0  *)
    | 0x8000d650 => 0x00000913 (* li s2,0  *)
    | 0x8000d654 => 0x00000413 (* li s0,0  *)
    | 0x8000d658 => 0x03600a93 (* li s5,54  *)
    | 0x8000d65c => 0x1f898993 (* add s3,s3,504 # 800141f8 <_etext+0x628>  *)
    | 0x8000d660 => 0x03500b93 (* li s7,53  *)
    | 0x8000d664 => 0x00000693 (* li a3,0  *)
    | 0x8000d668 => 0x00c00613 (* li a2,12  *)
    | 0x8000d66c => 0x00410593 (* add a1,sp,4  *)
    | 0x8000d670 => 0x000a0513 (* mv a0,s4  *)
    | 0x8000d674 => 0x915f80ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000d678 => 0x00050493 (* mv s1,a0  *)
    | 0x8000d67c => 0xfe0504e3 (* beqz a0,8000d664 <prvNonBlockingReceiverTask+0x48>  *)
    | 0x8000d680 => 0x00a407b3 (* add a5,s0,a0  *)
    | 0x8000d684 => 0x00000c13 (* li s8,0  *)
    | 0x8000d688 => 0x02faf663 (* bgeu s5,a5,8000d6b4 <prvNonBlockingReceiverTask+0x98>  *)
    | 0x8000d68c => 0x408a8c33 (* sub s8,s5,s0  *)
    | 0x8000d690 => 0x000c0613 (* mv a2,s8  *)
    | 0x8000d694 => 0x00410593 (* add a1,sp,4  *)
    | 0x8000d698 => 0x00898533 (* add a0,s3,s0  *)
    | 0x8000d69c => 0x030060ef (* jal 800136cc <memcmp>  *)
    | 0x8000d6a0 => 0x00050463 (* beqz a0,8000d6a8 <prvNonBlockingReceiverTask+0x8c>  *)
    | 0x8000d6a4 => 0x00100913 (* li s2,1  *)
    | 0x8000d6a8 => 0xfca40413 (* add s0,s0,-54  *)
    | 0x8000d6ac => 0x008484b3 (* add s1,s1,s0  *)
    | 0x8000d6b0 => 0x00000413 (* li s0,0  *)
    | 0x8000d6b4 => 0x00410793 (* add a5,sp,4  *)
    | 0x8000d6b8 => 0x00048613 (* mv a2,s1  *)
    | 0x8000d6bc => 0x018785b3 (* add a1,a5,s8  *)
    | 0x8000d6c0 => 0x00898533 (* add a0,s3,s0  *)
    | 0x8000d6c4 => 0x008060ef (* jal 800136cc <memcmp>  *)
    | 0x8000d6c8 => 0x00a96933 (* or s2,s2,a0  *)
    | 0x8000d6cc => 0x02091063 (* bnez s2,8000d6ec <prvNonBlockingReceiverTask+0xd0>  *)
    | 0x8000d6d0 => 0xb381a783 (* lw a5,-1224(gp) # 80080338 <ulNonBlockingRxCounter>  *)
    | 0x8000d6d4 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000d6d8 => 0xb2f1ac23 (* sw a5,-1224(gp) # 80080338 <ulNonBlockingRxCounter>  *)
    | 0x8000d6dc => 0x00940433 (* add s0,s0,s1  *)
    | 0x8000d6e0 => 0xf88bf2e3 (* bgeu s7,s0,8000d664 <prvNonBlockingReceiverTask+0x48>  *)
    | 0x8000d6e4 => 0x00000413 (* li s0,0  *)
    | 0x8000d6e8 => 0xf7dff06f (* j 8000d664 <prvNonBlockingReceiverTask+0x48>  *)
    | 0x8000d6ec => 0x00100913 (* li s2,1  *)
    | 0x8000d6f0 => 0xfedff06f (* j 8000d6dc <prvNonBlockingReceiverTask+0xc0>  *)
    (* <prvInterruptTriggerLevelTest> *)
    | 0x8000d6f4 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000d6f8 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000d6fc => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000d700 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000d704 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000d708 => 0x03612023 (* sw s6,32(sp)  *)
    | 0x8000d70c => 0x01a12823 (* sw s10,16(sp)  *)
    | 0x8000d710 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000d714 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000d718 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000d71c => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x8000d720 => 0x01812c23 (* sw s8,24(sp)  *)
    | 0x8000d724 => 0x01912a23 (* sw s9,20(sp)  *)
    | 0x8000d728 => 0x00000d13 (* li s10,0  *)
    | 0x8000d72c => 0x80080937 (* lui s2,0x80080  *)
    | 0x8000d730 => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x8000d734 => 0x80014b37 (* lui s6,0x80014  *)
    | 0x8000d738 => 0x00200413 (* li s0,2  *)
    | 0x8000d73c => 0x00600b93 (* li s7,6  *)
    | 0x8000d740 => 0x00200c13 (* li s8,2  *)
    | 0x8000d744 => 0x00100c93 (* li s9,1  *)
    | 0x8000d748 => 0x06400513 (* li a0,100  *)
    | 0x8000d74c => 0xbcdf30ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000d750 => 0x00000713 (* li a4,0  *)
    | 0x8000d754 => 0x00000693 (* li a3,0  *)
    | 0x8000d758 => 0x00000613 (* li a2,0  *)
    | 0x8000d75c => 0x00040593 (* mv a1,s0  *)
    | 0x8000d760 => 0x00900513 (* li a0,9  *)
    | 0x8000d764 => 0x00012223 (* sw zero,4(sp)  *)
    | 0x8000d768 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x8000d76c => 0x00010623 (* sb zero,12(sp)  *)
    | 0x8000d770 => 0x98cf80ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000d774 => 0x00050493 (* mv s1,a0  *)
    | 0x8000d778 => 0x00051863 (* bnez a0,8000d788 <prvInterruptTriggerLevelTest+0x94>  *)
    | 0x8000d77c => 0x42c00593 (* li a1,1068  *)
    | 0x8000d780 => 0x230b0513 (* add a0,s6,560 # 80014230 <_etext+0x660>  *)
    | 0x8000d784 => 0x30d040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d788 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000d78c => 0x00492783 (* lw a5,4(s2) # 80080004 <xCriticalNesting>  *)
    | 0x8000d790 => 0xb291a823 (* sw s1,-1232(gp) # 80080330 <xInterruptStreamBuffer>  *)
    | 0x8000d794 => 0x00079463 (* bnez a5,8000d79c <prvInterruptTriggerLevelTest+0xa8>  *)
    | 0x8000d798 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000d79c => 0x00500693 (* li a3,5  *)
    | 0x8000d7a0 => 0x00900613 (* li a2,9  *)
    | 0x8000d7a4 => 0x00410593 (* add a1,sp,4  *)
    | 0x8000d7a8 => 0x00048513 (* mv a0,s1  *)
    | 0x8000d7ac => 0xfdcf80ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000d7b0 => 0x00050613 (* mv a2,a0  *)
    | 0x8000d7b4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000d7b8 => 0x00492783 (* lw a5,4(s2)  *)
    | 0x8000d7bc => 0xb201a823 (* sw zero,-1232(gp) # 80080330 <xInterruptStreamBuffer>  *)
    | 0x8000d7c0 => 0x00079463 (* bnez a5,8000d7c8 <prvInterruptTriggerLevelTest+0xd4>  *)
    | 0x8000d7c4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000d7c8 => 0x00500793 (* li a5,5  *)
    | 0x8000d7cc => 0x05741e63 (* bne s0,s7,8000d828 <prvInterruptTriggerLevelTest+0x134>  *)
    | 0x8000d7d0 => 0x00c7fa63 (* bgeu a5,a2,8000d7e4 <prvInterruptTriggerLevelTest+0xf0>  *)
    | 0x8000d7d4 => 0xffb60793 (* add a5,a2,-5  *)
    | 0x8000d7d8 => 0x00200713 (* li a4,2  *)
    | 0x8000d7dc => 0x04f76c63 (* bltu a4,a5,8000d834 <prvInterruptTriggerLevelTest+0x140>  *)
    | 0x8000d7e0 => 0x0100006f (* j 8000d7f0 <prvInterruptTriggerLevelTest+0xfc>  *)
    | 0x8000d7e4 => 0xffb67793 (* and a5,a2,-5  *)
    | 0x8000d7e8 => 0x00100713 (* li a4,1  *)
    | 0x8000d7ec => 0x04e79463 (* bne a5,a4,8000d834 <prvInterruptTriggerLevelTest+0x140>  *)
    | 0x8000d7f0 => 0x268a8593 (* add a1,s5,616 # 80014268 <_etext+0x698>  *)
    | 0x8000d7f4 => 0x00410513 (* add a0,sp,4  *)
    | 0x8000d7f8 => 0x6d5050ef (* jal 800136cc <memcmp>  *)
    | 0x8000d7fc => 0x00ad6d33 (* or s10,s10,a0  *)
    | 0x8000d800 => 0x020d1a63 (* bnez s10,8000d834 <prvInterruptTriggerLevelTest+0x140>  *)
    | 0x8000d804 => 0xb341a783 (* lw a5,-1228(gp) # 80080334 <ulInterruptTriggerCounter>  *)
    | 0x8000d808 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000d80c => 0xb2f1aa23 (* sw a5,-1228(gp) # 80080334 <ulInterruptTriggerCounter>  *)
    | 0x8000d810 => 0x00048513 (* mv a0,s1  *)
    | 0x8000d814 => 0xafcf80ef (* jal 80005b10 <vStreamBufferDelete>  *)
    | 0x8000d818 => 0x00140413 (* add s0,s0,1  *)
    | 0x8000d81c => 0x00700793 (* li a5,7  *)
    | 0x8000d820 => 0xf2f414e3 (* bne s0,a5,8000d748 <prvInterruptTriggerLevelTest+0x54>  *)
    | 0x8000d824 => 0xf15ff06f (* j 8000d738 <prvInterruptTriggerLevelTest+0x44>  *)
    | 0x8000d828 => 0x02f40063 (* beq s0,a5,8000d848 <prvInterruptTriggerLevelTest+0x154>  *)
    | 0x8000d82c => 0x00867863 (* bgeu a2,s0,8000d83c <prvInterruptTriggerLevelTest+0x148>  *)
    | 0x8000d830 => 0xfd9600e3 (* beq a2,s9,8000d7f0 <prvInterruptTriggerLevelTest+0xfc>  *)
    | 0x8000d834 => 0x00100d13 (* li s10,1  *)
    | 0x8000d838 => 0xfd9ff06f (* j 8000d810 <prvInterruptTriggerLevelTest+0x11c>  *)
    | 0x8000d83c => 0x408607b3 (* sub a5,a2,s0  *)
    | 0x8000d840 => 0xfefc6ae3 (* bltu s8,a5,8000d834 <prvInterruptTriggerLevelTest+0x140>  *)
    | 0x8000d844 => 0xfadff06f (* j 8000d7f0 <prvInterruptTriggerLevelTest+0xfc>  *)
    | 0x8000d848 => 0x00400793 (* li a5,4  *)
    | 0x8000d84c => 0xf8c7e4e3 (* bltu a5,a2,8000d7d4 <prvInterruptTriggerLevelTest+0xe0>  *)
    | 0x8000d850 => 0x00100793 (* li a5,1  *)
    | 0x8000d854 => 0xfef610e3 (* bne a2,a5,8000d834 <prvInterruptTriggerLevelTest+0x140>  *)
    | 0x8000d858 => 0xf99ff06f (* j 8000d7f0 <prvInterruptTriggerLevelTest+0xfc>  *)
    (* <prvCheckExpectedState> *)
    | 0x8000d85c => 0x02051663 (* bnez a0,8000d888 <prvCheckExpectedState+0x2c>  *)
    | 0x8000d860 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d864 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000d868 => 0x0dc00593 (* li a1,220  *)
    | 0x8000d86c => 0x23050513 (* add a0,a0,560 # 80014230 <_etext+0x660>  *)
    | 0x8000d870 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000d874 => 0x21d040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d878 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000d87c => 0x8201a423 (* sw zero,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000d880 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000d884 => 0x00008067 (* ret  *)
    | 0x8000d888 => 0x00008067 (* ret  *)
    (* <prvReceiverTask> *)
    | 0x8000d88c => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000d890 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000d894 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000d898 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000d89c => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000d8a0 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000d8a4 => 0x03612023 (* sw s6,32(sp)  *)
    | 0x8000d8a8 => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x8000d8ac => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000d8b0 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000d8b4 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000d8b8 => 0x00050913 (* mv s2,a0  *)
    | 0x8000d8bc => 0x00000413 (* li s0,0  *)
    | 0x8000d8c0 => 0x03700a93 (* li s5,55  *)
    | 0x8000d8c4 => 0x00c00b13 (* li s6,12  *)
    | 0x8000d8c8 => 0xfb098993 (* add s3,s3,-80 # 80013fb0 <_etext+0x3e0>  *)
    | 0x8000d8cc => 0x03600b93 (* li s7,54  *)
    | 0x8000d8d0 => 0x408a8a33 (* sub s4,s5,s0  *)
    | 0x8000d8d4 => 0x014b7463 (* bgeu s6,s4,8000d8dc <prvReceiverTask+0x50>  *)
    | 0x8000d8d8 => 0x00c00a13 (* li s4,12  *)
    | 0x8000d8dc => 0x00500693 (* li a3,5  *)
    | 0x8000d8e0 => 0x000a0613 (* mv a2,s4  *)
    | 0x8000d8e4 => 0x00410593 (* add a1,sp,4  *)
    | 0x8000d8e8 => 0x00090513 (* mv a0,s2  *)
    | 0x8000d8ec => 0xe9cf80ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000d8f0 => 0x00050493 (* mv s1,a0  *)
    | 0x8000d8f4 => 0xfe0504e3 (* beqz a0,8000d8dc <prvReceiverTask+0x50>  *)
    | 0x8000d8f8 => 0x00050613 (* mv a2,a0  *)
    | 0x8000d8fc => 0x008985b3 (* add a1,s3,s0  *)
    | 0x8000d900 => 0x00410513 (* add a0,sp,4  *)
    | 0x8000d904 => 0x5c9050ef (* jal 800136cc <memcmp>  *)
    | 0x8000d908 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000d90c => 0x00940433 (* add s0,s0,s1  *)
    | 0x8000d910 => 0xf4dff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000d914 => 0xfa8bfee3 (* bgeu s7,s0,8000d8d0 <prvReceiverTask+0x44>  *)
    | 0x8000d918 => 0x00000413 (* li s0,0  *)
    | 0x8000d91c => 0xfb5ff06f (* j 8000d8d0 <prvReceiverTask+0x44>  *)
    (* <prvNonBlockingSenderTask> *)
    | 0x8000d920 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000d924 => 0x01412423 (* sw s4,8(sp)  *)
    | 0x8000d928 => 0x80014a37 (* lui s4,0x80014  *)
    | 0x8000d92c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000d930 => 0x01312623 (* sw s3,12(sp)  *)
    | 0x8000d934 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x8000d938 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000d93c => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000d940 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000d944 => 0x00050993 (* mv s3,a0  *)
    | 0x8000d948 => 0x00000413 (* li s0,0  *)
    | 0x8000d94c => 0x03600a93 (* li s5,54  *)
    | 0x8000d950 => 0x1f8a0a13 (* add s4,s4,504 # 800141f8 <_etext+0x628>  *)
    | 0x8000d954 => 0x408a8933 (* sub s2,s5,s0  *)
    | 0x8000d958 => 0x00090613 (* mv a2,s2  *)
    | 0x8000d95c => 0x008a05b3 (* add a1,s4,s0  *)
    | 0x8000d960 => 0x00000693 (* li a3,0  *)
    | 0x8000d964 => 0x00098513 (* mv a0,s3  *)
    | 0x8000d968 => 0xb44f80ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000d96c => 0x00a93933 (* sltu s2,s2,a0  *)
    | 0x8000d970 => 0x00050493 (* mv s1,a0  *)
    | 0x8000d974 => 0x00194513 (* xor a0,s2,1  *)
    | 0x8000d978 => 0x00940433 (* add s0,s0,s1  *)
    | 0x8000d97c => 0xee1ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000d980 => 0x03743513 (* sltiu a0,s0,55  *)
    | 0x8000d984 => 0xed9ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000d988 => 0xfd5416e3 (* bne s0,s5,8000d954 <prvNonBlockingSenderTask+0x34>  *)
    | 0x8000d98c => 0x00000413 (* li s0,0  *)
    | 0x8000d990 => 0xfc5ff06f (* j 8000d954 <prvNonBlockingSenderTask+0x34>  *)
    (* <prvSingleTaskTests> *)
    | 0x8000d994 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000d998 => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000d99c => 0x00050413 (* mv s0,a0  *)
    | 0x8000d9a0 => 0x03c00513 (* li a0,60  *)
    | 0x8000d9a4 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000d9a8 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000d9ac => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000d9b0 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000d9b4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000d9b8 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000d9bc => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000d9c0 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x8000d9c4 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x8000d9c8 => 0x951f80ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000d9cc => 0x00050493 (* mv s1,a0  *)
    | 0x8000d9d0 => 0x00051a63 (* bnez a0,8000d9e4 <prvSingleTaskTests+0x50>  *)
    | 0x8000d9d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000d9d8 => 0x0f700593 (* li a1,247  *)
    | 0x8000d9dc => 0x23050513 (* add a0,a0,560 # 80014230 <_etext+0x660>  *)
    | 0x8000d9e0 => 0x0b1040ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000d9e4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000d9e8 => 0xa2cf80ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000d9ec => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000d9f0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000d9f4 => 0xe69ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000d9f8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000d9fc => 0xa78f80ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000da00 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da04 => 0xe59ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da08 => 0x00040513 (* mv a0,s0  *)
    | 0x8000da0c => 0x871f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000da10 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000da14 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da18 => 0xe45ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da1c => 0x00040513 (* mv a0,s0  *)
    | 0x8000da20 => 0x8a1f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000da24 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da28 => 0xe35ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da2c => 0x00000693 (* li a3,0  *)
    | 0x8000da30 => 0x00100613 (* li a2,1  *)
    | 0x8000da34 => 0x00048593 (* mv a1,s1  *)
    | 0x8000da38 => 0x00040513 (* mv a0,s0  *)
    | 0x8000da3c => 0xa70f80ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000da40 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000da44 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da48 => 0xe15ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da4c => 0x00040513 (* mv a0,s0  *)
    | 0x8000da50 => 0x9c4f80ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000da54 => 0xfe350513 (* add a0,a0,-29  *)
    | 0x8000da58 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da5c => 0xe01ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da60 => 0x00040513 (* mv a0,s0  *)
    | 0x8000da64 => 0xa10f80ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000da68 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000da6c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da70 => 0xdedff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da74 => 0x00040513 (* mv a0,s0  *)
    | 0x8000da78 => 0x805f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000da7c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da80 => 0xdddff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da84 => 0x00040513 (* mv a0,s0  *)
    | 0x8000da88 => 0x839f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000da8c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000da90 => 0xdcdff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000da94 => 0x00000693 (* li a3,0  *)
    | 0x8000da98 => 0x01d00613 (* li a2,29  *)
    | 0x8000da9c => 0x00048593 (* mv a1,s1  *)
    | 0x8000daa0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000daa4 => 0xa08f80ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000daa8 => 0xfe350513 (* add a0,a0,-29  *)
    | 0x8000daac => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dab0 => 0xdadff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dab4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dab8 => 0x95cf80ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000dabc => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dac0 => 0xd9dff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dac4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dac8 => 0x9acf80ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000dacc => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000dad0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dad4 => 0xd89ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dad8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dadc => 0xfa0f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000dae0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dae4 => 0xd79ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dae8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000daec => 0xfd4f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000daf0 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000daf4 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000daf8 => 0xd65ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dafc => 0x00000693 (* li a3,0  *)
    | 0x8000db00 => 0x00100613 (* li a2,1  *)
    | 0x8000db04 => 0x00048593 (* mv a1,s1  *)
    | 0x8000db08 => 0x00040513 (* mv a0,s0  *)
    | 0x8000db0c => 0x9a0f80ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000db10 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000db14 => 0xd49ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000db18 => 0x00000693 (* li a3,0  *)
    | 0x8000db1c => 0x00100613 (* li a2,1  *)
    | 0x8000db20 => 0x00048593 (* mv a1,s1  *)
    | 0x8000db24 => 0x00040513 (* mv a0,s0  *)
    | 0x8000db28 => 0xc60f80ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000db2c => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000db30 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000db34 => 0xd29ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000db38 => 0x00040513 (* mv a0,s0  *)
    | 0x8000db3c => 0x8d8f80ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000db40 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000db44 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000db48 => 0xd15ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000db4c => 0x00040513 (* mv a0,s0  *)
    | 0x8000db50 => 0x924f80ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000db54 => 0xfe350513 (* add a0,a0,-29  *)
    | 0x8000db58 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000db5c => 0xd01ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000db60 => 0x00040513 (* mv a0,s0  *)
    | 0x8000db64 => 0xf18f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000db68 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000db6c => 0xcf1ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000db70 => 0x00040513 (* mv a0,s0  *)
    | 0x8000db74 => 0xf4cf80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000db78 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000db7c => 0xce1ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000db80 => 0x00000693 (* li a3,0  *)
    | 0x8000db84 => 0x00100613 (* li a2,1  *)
    | 0x8000db88 => 0x00048593 (* mv a1,s1  *)
    | 0x8000db8c => 0x00040513 (* mv a0,s0  *)
    | 0x8000db90 => 0x91cf80ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000db94 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000db98 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000db9c => 0xcc1ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dba0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dba4 => 0x870f80ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000dba8 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dbac => 0xcb1ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dbb0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dbb4 => 0x8c0f80ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000dbb8 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000dbbc => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dbc0 => 0xc9dff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dbc4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dbc8 => 0xeb4f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000dbcc => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dbd0 => 0xc8dff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dbd4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dbd8 => 0xee8f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000dbdc => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000dbe0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dbe4 => 0xc79ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dbe8 => 0x00000693 (* li a3,0  *)
    | 0x8000dbec => 0x01d00613 (* li a2,29  *)
    | 0x8000dbf0 => 0x00048593 (* mv a1,s1  *)
    | 0x8000dbf4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dbf8 => 0xb90f80ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000dbfc => 0xfe350513 (* add a0,a0,-29  *)
    | 0x8000dc00 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc04 => 0xc59ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc08 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc0c => 0x808f80ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000dc10 => 0xfe350513 (* add a0,a0,-29  *)
    | 0x8000dc14 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc18 => 0xc45ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc1c => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc20 => 0x854f80ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000dc24 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000dc28 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc2c => 0xc31ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc30 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc34 => 0xe48f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000dc38 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc3c => 0xc21ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc40 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc44 => 0xe7cf80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000dc48 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc4c => 0xc11ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc50 => 0x00000693 (* li a3,0  *)
    | 0x8000dc54 => 0x00100613 (* li a2,1  *)
    | 0x8000dc58 => 0x00048593 (* mv a1,s1  *)
    | 0x8000dc5c => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc60 => 0xb28f80ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000dc64 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000dc68 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc6c => 0xbf1ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc70 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc74 => 0xfa1f70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000dc78 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000dc7c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc80 => 0xbddff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc84 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc88 => 0xfedf70ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000dc8c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dc90 => 0xbcdff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dc94 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dc98 => 0xde4f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000dc9c => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000dca0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dca4 => 0xbb9ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dca8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dcac => 0xe14f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000dcb0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dcb4 => 0xba9ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dcb8 => 0xfff00693 (* li a3,-1  *)
    | 0x8000dcbc => 0x01f00613 (* li a2,31  *)
    | 0x8000dcc0 => 0x00048593 (* mv a1,s1  *)
    | 0x8000dcc4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dcc8 => 0xfe5f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000dccc => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000dcd0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dcd4 => 0xb89ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dcd8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dcdc => 0xf39f70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000dce0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dce4 => 0xb79ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dce8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dcec => 0xd90f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000dcf0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dcf4 => 0xb69ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dcf8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dcfc => 0xdc4f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000dd00 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000dd04 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dd08 => 0xb55ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dd0c => 0xfff00693 (* li a3,-1  *)
    | 0x8000dd10 => 0x01f00613 (* li a2,31  *)
    | 0x8000dd14 => 0x00048593 (* mv a1,s1  *)
    | 0x8000dd18 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dd1c => 0xa6cf80ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000dd20 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000dd24 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dd28 => 0xb35ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dd2c => 0x00040513 (* mv a0,s0  *)
    | 0x8000dd30 => 0xee5f70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000dd34 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000dd38 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dd3c => 0xb21ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dd40 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dd44 => 0xf31f70ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000dd48 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dd4c => 0xb11ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dd50 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dd54 => 0xd28f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000dd58 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000dd5c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dd60 => 0xafdff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dd64 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dd68 => 0xd58f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000dd6c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dd70 => 0xaedff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dd74 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dd78 => 0xe9df70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000dd7c => 0x01148b13 (* add s6,s1,17  *)
    | 0x8000dd80 => 0x00050913 (* mv s2,a0  *)
    | 0x8000dd84 => 0x00050a93 (* mv s5,a0  *)
    | 0x8000dd88 => 0x03000a13 (* li s4,48  *)
    | 0x8000dd8c => 0x800809b7 (* lui s3,0x80080  *)
    | 0x8000dd90 => 0x03500b93 (* li s7,53  *)
    | 0x8000dd94 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dd98 => 0xd28f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000dd9c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dda0 => 0xabdff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dda4 => 0x00600613 (* li a2,6  *)
    | 0x8000dda8 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000ddac => 0x00048513 (* mv a0,s1  *)
    | 0x8000ddb0 => 0x199050ef (* jal 80013748 <memset>  *)
    | 0x8000ddb4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000ddb8 => 0x0049a783 (* lw a5,4(s3) # 80080004 <xCriticalNesting>  *)
    | 0x8000ddbc => 0x00000693 (* li a3,0  *)
    | 0x8000ddc0 => 0x00600613 (* li a2,6  *)
    | 0x8000ddc4 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000ddc8 => 0x00048593 (* mv a1,s1  *)
    | 0x8000ddcc => 0x00040513 (* mv a0,s0  *)
    | 0x8000ddd0 => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x8000ddd4 => 0x8ccf80ef (* jal 80005ea0 <xStreamBufferSendFromISR>  *)
    | 0x8000ddd8 => 0x0049a783 (* lw a5,4(s3)  *)
    | 0x8000dddc => 0xfff78793 (* add a5,a5,-1  *)
    | 0x8000dde0 => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x8000dde4 => 0x00079463 (* bnez a5,8000ddec <prvSingleTaskTests+0x458>  *)
    | 0x8000dde8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000ddec => 0xffa50513 (* add a0,a0,-6  *)
    | 0x8000ddf0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000ddf4 => 0xa69ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000ddf8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000ddfc => 0xe19f70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000de00 => 0xffaa8a93 (* add s5,s5,-6  *)
    | 0x8000de04 => 0x40aa8533 (* sub a0,s5,a0  *)
    | 0x8000de08 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000de0c => 0xa51ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000de10 => 0x00040513 (* mv a0,s0  *)
    | 0x8000de14 => 0xe61f70ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000de18 => 0x415907b3 (* sub a5,s2,s5  *)
    | 0x8000de1c => 0x40a78533 (* sub a0,a5,a0  *)
    | 0x8000de20 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000de24 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000de28 => 0xa35ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000de2c => 0xf77a14e3 (* bne s4,s7,8000dd94 <prvSingleTaskTests+0x400>  *)
    | 0x8000de30 => 0x00040513 (* mv a0,s0  *)
    | 0x8000de34 => 0xc8cf80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000de38 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000de3c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000de40 => 0xa1dff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000de44 => 0x00000693 (* li a3,0  *)
    | 0x8000de48 => 0x00100613 (* li a2,1  *)
    | 0x8000de4c => 0x00048593 (* mv a1,s1  *)
    | 0x8000de50 => 0x00040513 (* mv a0,s0  *)
    | 0x8000de54 => 0xe59f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000de58 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000de5c => 0xa01ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000de60 => 0x00000513 (* li a0,0  *)
    | 0x8000de64 => 0xc89f20ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000de68 => 0x00800593 (* li a1,8  *)
    | 0x8000de6c => 0x00050a93 (* mv s5,a0  *)
    | 0x8000de70 => 0x00000513 (* li a0,0  *)
    | 0x8000de74 => 0xc9df20ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000de78 => 0xffdf20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000de7c => 0x00f00693 (* li a3,15  *)
    | 0x8000de80 => 0x00100613 (* li a2,1  *)
    | 0x8000de84 => 0x00050c13 (* mv s8,a0  *)
    | 0x8000de88 => 0x00048593 (* mv a1,s1  *)
    | 0x8000de8c => 0x00040513 (* mv a0,s0  *)
    | 0x8000de90 => 0xe1df70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000de94 => 0x00050b93 (* mv s7,a0  *)
    | 0x8000de98 => 0xfddf20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000de9c => 0x000a8593 (* mv a1,s5  *)
    | 0x8000dea0 => 0x00050a13 (* mv s4,a0  *)
    | 0x8000dea4 => 0x00000513 (* li a0,0  *)
    | 0x8000dea8 => 0xc69f20ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000deac => 0x418a0a33 (* sub s4,s4,s8  *)
    | 0x8000deb0 => 0x00fa3513 (* sltiu a0,s4,15  *)
    | 0x8000deb4 => 0x00154513 (* xor a0,a0,1  *)
    | 0x8000deb8 => 0x9a5ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000debc => 0x012a3513 (* sltiu a0,s4,18  *)
    | 0x8000dec0 => 0x99dff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dec4 => 0x001bb513 (* seqz a0,s7  *)
    | 0x8000dec8 => 0xfe290913 (* add s2,s2,-30  *)
    | 0x8000decc => 0x991ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000ded0 => 0x03000a13 (* li s4,48  *)
    | 0x8000ded4 => 0x01e00c13 (* li s8,30  *)
    | 0x8000ded8 => 0x03500b93 (* li s7,53  *)
    | 0x8000dedc => 0x00600613 (* li a2,6  *)
    | 0x8000dee0 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000dee4 => 0x00048513 (* mv a0,s1  *)
    | 0x8000dee8 => 0x061050ef (* jal 80013748 <memset>  *)
    | 0x8000deec => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000def0 => 0x0049a783 (* lw a5,4(s3)  *)
    | 0x8000def4 => 0x00000693 (* li a3,0  *)
    | 0x8000def8 => 0x00600613 (* li a2,6  *)
    | 0x8000defc => 0x00178793 (* add a5,a5,1  *)
    | 0x8000df00 => 0x000b0593 (* mv a1,s6  *)
    | 0x8000df04 => 0x00040513 (* mv a0,s0  *)
    | 0x8000df08 => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x8000df0c => 0xa94f80ef (* jal 800061a0 <xStreamBufferReceiveFromISR>  *)
    | 0x8000df10 => 0x0049a783 (* lw a5,4(s3)  *)
    | 0x8000df14 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x8000df18 => 0x00f9a223 (* sw a5,4(s3)  *)
    | 0x8000df1c => 0x00079463 (* bnez a5,8000df24 <prvSingleTaskTests+0x590>  *)
    | 0x8000df20 => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000df24 => 0xffa50513 (* add a0,a0,-6  *)
    | 0x8000df28 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000df2c => 0x931ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000df30 => 0x00600613 (* li a2,6  *)
    | 0x8000df34 => 0x000b0593 (* mv a1,s6  *)
    | 0x8000df38 => 0x00048513 (* mv a0,s1  *)
    | 0x8000df3c => 0x790050ef (* jal 800136cc <memcmp>  *)
    | 0x8000df40 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000df44 => 0x919ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000df48 => 0x00040513 (* mv a0,s0  *)
    | 0x8000df4c => 0xcc9f70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000df50 => 0x00690913 (* add s2,s2,6  *)
    | 0x8000df54 => 0x40a90533 (* sub a0,s2,a0  *)
    | 0x8000df58 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000df5c => 0x901ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000df60 => 0x00040513 (* mv a0,s0  *)
    | 0x8000df64 => 0xd11f70ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000df68 => 0x412c07b3 (* sub a5,s8,s2  *)
    | 0x8000df6c => 0x40a78533 (* sub a0,a5,a0  *)
    | 0x8000df70 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000df74 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000df78 => 0x8e5ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000df7c => 0xf77a10e3 (* bne s4,s7,8000dedc <prvSingleTaskTests+0x548>  *)
    | 0x8000df80 => 0x00040513 (* mv a0,s0  *)
    | 0x8000df84 => 0xaf8f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000df88 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000df8c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000df90 => 0x8cdff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000df94 => 0x00040513 (* mv a0,s0  *)
    | 0x8000df98 => 0xc7df70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000df9c => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000dfa0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000dfa4 => 0x8b9ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dfa8 => 0x00800593 (* li a1,8  *)
    | 0x8000dfac => 0x00000513 (* li a0,0  *)
    | 0x8000dfb0 => 0xb61f20ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000dfb4 => 0xec1f20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000dfb8 => 0x00f00693 (* li a3,15  *)
    | 0x8000dfbc => 0x00600613 (* li a2,6  *)
    | 0x8000dfc0 => 0x000b0593 (* mv a1,s6  *)
    | 0x8000dfc4 => 0x00050a13 (* mv s4,a0  *)
    | 0x8000dfc8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000dfcc => 0xfbdf70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000dfd0 => 0x00050993 (* mv s3,a0  *)
    | 0x8000dfd4 => 0xea1f20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000dfd8 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000dfdc => 0x00050913 (* mv s2,a0  *)
    | 0x8000dfe0 => 0x00000513 (* li a0,0  *)
    | 0x8000dfe4 => 0xb2df20ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000dfe8 => 0x41490933 (* sub s2,s2,s4  *)
    | 0x8000dfec => 0x00f93513 (* sltiu a0,s2,15  *)
    | 0x8000dff0 => 0x00154513 (* xor a0,a0,1  *)
    | 0x8000dff4 => 0x869ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000dff8 => 0x01293513 (* sltiu a0,s2,18  *)
    | 0x8000dffc => 0x861ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e000 => 0x0019b513 (* seqz a0,s3  *)
    | 0x8000e004 => 0x859ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e008 => 0x03000913 (* li s2,48  *)
    | 0x8000e00c => 0x09400993 (* li s3,148  *)
    | 0x8000e010 => 0x00090593 (* mv a1,s2  *)
    | 0x8000e014 => 0x01100613 (* li a2,17  *)
    | 0x8000e018 => 0x00048513 (* mv a0,s1  *)
    | 0x8000e01c => 0x72c050ef (* jal 80013748 <memset>  *)
    | 0x8000e020 => 0x00000693 (* li a3,0  *)
    | 0x8000e024 => 0x01100613 (* li a2,17  *)
    | 0x8000e028 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e02c => 0x00040513 (* mv a0,s0  *)
    | 0x8000e030 => 0xc7df70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e034 => 0xfef50513 (* add a0,a0,-17  *)
    | 0x8000e038 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e03c => 0x821ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e040 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e044 => 0xbd1f70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000e048 => 0xff350513 (* add a0,a0,-13  *)
    | 0x8000e04c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e050 => 0x80dff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e054 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e058 => 0xc1df70ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000e05c => 0xfef50513 (* add a0,a0,-17  *)
    | 0x8000e060 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e064 => 0xff8ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e068 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e06c => 0xa54f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000e070 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e074 => 0xfe8ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e078 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e07c => 0xa00f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000e080 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e084 => 0xfd8ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e088 => 0x00000693 (* li a3,0  *)
    | 0x8000e08c => 0x01100613 (* li a2,17  *)
    | 0x8000e090 => 0x000b0593 (* mv a1,s6  *)
    | 0x8000e094 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e098 => 0xef1f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e09c => 0xfef50513 (* add a0,a0,-17  *)
    | 0x8000e0a0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e0a4 => 0xfb8ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e0a8 => 0x01100613 (* li a2,17  *)
    | 0x8000e0ac => 0x000b0593 (* mv a1,s6  *)
    | 0x8000e0b0 => 0x00048513 (* mv a0,s1  *)
    | 0x8000e0b4 => 0x618050ef (* jal 800136cc <memcmp>  *)
    | 0x8000e0b8 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e0bc => 0xfa0ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e0c0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e0c4 => 0xb51f70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000e0c8 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000e0cc => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e0d0 => 0xf8cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e0d4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e0d8 => 0xb9df70ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000e0dc => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e0e0 => 0xf7cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e0e4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e0e8 => 0x9d8f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000e0ec => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e0f0 => 0xf6cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e0f4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e0f8 => 0x984f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000e0fc => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000e100 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e104 => 0x00190913 (* add s2,s2,1  *)
    | 0x8000e108 => 0xf54ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e10c => 0xf13912e3 (* bne s2,s3,8000e010 <prvSingleTaskTests+0x67c>  *)
    | 0x8000e110 => 0x80014937 (* lui s2,0x80014  *)
    | 0x8000e114 => 0x00000693 (* li a3,0  *)
    | 0x8000e118 => 0x01e00613 (* li a2,30  *)
    | 0x8000e11c => 0xfb090593 (* add a1,s2,-80 # 80013fb0 <_etext+0x3e0>  *)
    | 0x8000e120 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e124 => 0xb89f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e128 => 0x00000693 (* li a3,0  *)
    | 0x8000e12c => 0x01e00613 (* li a2,30  *)
    | 0x8000e130 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e134 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e138 => 0xe51f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e13c => 0x01e00613 (* li a2,30  *)
    | 0x8000e140 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e144 => 0xfb090513 (* add a0,s2,-80  *)
    | 0x8000e148 => 0x584050ef (* jal 800136cc <memcmp>  *)
    | 0x8000e14c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e150 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000e154 => 0xf08ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e158 => 0x00000a13 (* li s4,0  *)
    | 0x8000e15c => 0x1f898b93 (* add s7,s3,504 # 800141f8 <_etext+0x628>  *)
    | 0x8000e160 => 0x01e00b13 (* li s6,30  *)
    | 0x8000e164 => 0x014b85b3 (* add a1,s7,s4  *)
    | 0x8000e168 => 0x07d00693 (* li a3,125  *)
    | 0x8000e16c => 0x00100613 (* li a2,1  *)
    | 0x8000e170 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e174 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000e178 => 0xb35f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e17c => 0xff6a14e3 (* bne s4,s6,8000e164 <prvSingleTaskTests+0x7d0>  *)
    | 0x8000e180 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e184 => 0x93cf80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000e188 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000e18c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e190 => 0xeccff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e194 => 0x07d00693 (* li a3,125  *)
    | 0x8000e198 => 0x03c00613 (* li a2,60  *)
    | 0x8000e19c => 0x00048593 (* mv a1,s1  *)
    | 0x8000e1a0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e1a4 => 0xde5f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e1a8 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000e1ac => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e1b0 => 0xeacff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e1b4 => 0x01e00613 (* li a2,30  *)
    | 0x8000e1b8 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e1bc => 0x1f898513 (* add a0,s3,504  *)
    | 0x8000e1c0 => 0x50c050ef (* jal 800136cc <memcmp>  *)
    | 0x8000e1c4 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e1c8 => 0xe94ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e1cc => 0x07d00693 (* li a3,125  *)
    | 0x8000e1d0 => 0x01e00613 (* li a2,30  *)
    | 0x8000e1d4 => 0xfb090593 (* add a1,s2,-80  *)
    | 0x8000e1d8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e1dc => 0xad1f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e1e0 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000e1e4 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e1e8 => 0xe74ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e1ec => 0x00040513 (* mv a0,s0  *)
    | 0x8000e1f0 => 0x8d0f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000e1f4 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000e1f8 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e1fc => 0xe60ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e200 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e204 => 0x878f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000e208 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e20c => 0xe50ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e210 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e214 => 0xa61f70ef (* jal 80005c74 <xStreamBufferBytesAvailable>  *)
    | 0x8000e218 => 0xfe250513 (* add a0,a0,-30  *)
    | 0x8000e21c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e220 => 0xe3cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e224 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e228 => 0x9edf70ef (* jal 80005c14 <xStreamBufferSpacesAvailable>  *)
    | 0x8000e22c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e230 => 0xe2cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e234 => 0x00000a13 (* li s4,0  *)
    | 0x8000e238 => 0xfb090b93 (* add s7,s2,-80  *)
    | 0x8000e23c => 0x01e00b13 (* li s6,30  *)
    | 0x8000e240 => 0x07d00693 (* li a3,125  *)
    | 0x8000e244 => 0x00100613 (* li a2,1  *)
    | 0x8000e248 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e24c => 0x00040513 (* mv a0,s0  *)
    | 0x8000e250 => 0xd39f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e254 => 0x017a07b3 (* add a5,s4,s7  *)
    | 0x8000e258 => 0x0007c503 (* lbu a0,0(a5)  *)
    | 0x8000e25c => 0x0004c783 (* lbu a5,0(s1)  *)
    | 0x8000e260 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000e264 => 0x40f50533 (* sub a0,a0,a5  *)
    | 0x8000e268 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e26c => 0xdf0ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e270 => 0xfd6a18e3 (* bne s4,s6,8000e240 <prvSingleTaskTests+0x8ac>  *)
    | 0x8000e274 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e278 => 0x804f80ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000e27c => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000e280 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e284 => 0xdd8ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e288 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e28c => 0x834f80ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000e290 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e294 => 0xdc8ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e298 => 0x00800593 (* li a1,8  *)
    | 0x8000e29c => 0x00000513 (* li a0,0  *)
    | 0x8000e2a0 => 0x871f20ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000e2a4 => 0x00200693 (* li a3,2  *)
    | 0x8000e2a8 => 0x03c00613 (* li a2,60  *)
    | 0x8000e2ac => 0x1f898593 (* add a1,s3,504  *)
    | 0x8000e2b0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e2b4 => 0x9f9f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e2b8 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000e2bc => 0x00050a13 (* mv s4,a0  *)
    | 0x8000e2c0 => 0x00000513 (* li a0,0  *)
    | 0x8000e2c4 => 0x84df20ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000e2c8 => 0xfe2a0513 (* add a0,s4,-30  *)
    | 0x8000e2cc => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e2d0 => 0xd8cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e2d4 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e2d8 => 0xfe9f70ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000e2dc => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000e2e0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e2e4 => 0xd78ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e2e8 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e2ec => 0xf91f70ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000e2f0 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e2f4 => 0xd68ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e2f8 => 0x1f898593 (* add a1,s3,504  *)
    | 0x8000e2fc => 0x00200693 (* li a3,2  *)
    | 0x8000e300 => 0x03c00613 (* li a2,60  *)
    | 0x8000e304 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e308 => 0x9a5f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e30c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e310 => 0xd4cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e314 => 0x00200693 (* li a3,2  *)
    | 0x8000e318 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e31c => 0x03c00613 (* li a2,60  *)
    | 0x8000e320 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e324 => 0xc65f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e328 => 0x1f898593 (* add a1,s3,504  *)
    | 0x8000e32c => 0x01e00613 (* li a2,30  *)
    | 0x8000e330 => 0x00048513 (* mv a0,s1  *)
    | 0x8000e334 => 0x398050ef (* jal 800136cc <memcmp>  *)
    | 0x8000e338 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e33c => 0xd20ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e340 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e344 => 0xf7df70ef (* jal 800062c0 <xStreamBufferIsFull>  *)
    | 0x8000e348 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e34c => 0xd10ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e350 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e354 => 0xf29f70ef (* jal 8000627c <xStreamBufferIsEmpty>  *)
    | 0x8000e358 => 0xfff50513 (* add a0,a0,-1  *)
    | 0x8000e35c => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e360 => 0xcfcff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e364 => 0xfb090593 (* add a1,s2,-80  *)
    | 0x8000e368 => 0x00000693 (* li a3,0  *)
    | 0x8000e36c => 0x00f00613 (* li a2,15  *)
    | 0x8000e370 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e374 => 0x939f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e378 => 0x00048513 (* mv a0,s1  *)
    | 0x8000e37c => 0xa10f80ef (* jal 8000658c <vPortFree>  *)
    | 0x8000e380 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e384 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x8000e388 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x8000e38c => 0x02412483 (* lw s1,36(sp)  *)
    | 0x8000e390 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x8000e394 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x8000e398 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x8000e39c => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x8000e3a0 => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x8000e3a4 => 0x00c12b83 (* lw s7,12(sp)  *)
    | 0x8000e3a8 => 0x00812c03 (* lw s8,8(sp)  *)
    | 0x8000e3ac => 0x03010113 (* add sp,sp,48  *)
    | 0x8000e3b0 => 0xfc0f706f (* j 80005b70 <xStreamBufferReset>  *)
    (* <prvSenderTask> *)
    | 0x8000e3b4 => 0xfa010113 (* add sp,sp,-96  *)
    | 0x8000e3b8 => 0x00000513 (* li a0,0  *)
    | 0x8000e3bc => 0x04112e23 (* sw ra,92(sp)  *)
    | 0x8000e3c0 => 0x04812c23 (* sw s0,88(sp)  *)
    | 0x8000e3c4 => 0x04912a23 (* sw s1,84(sp)  *)
    | 0x8000e3c8 => 0x05212823 (* sw s2,80(sp)  *)
    | 0x8000e3cc => 0x05312623 (* sw s3,76(sp)  *)
    | 0x8000e3d0 => 0x05412423 (* sw s4,72(sp)  *)
    | 0x8000e3d4 => 0x05512223 (* sw s5,68(sp)  *)
    | 0x8000e3d8 => 0x05612023 (* sw s6,64(sp)  *)
    | 0x8000e3dc => 0x03712e23 (* sw s7,60(sp)  *)
    | 0x8000e3e0 => 0x03812c23 (* sw s8,56(sp)  *)
    | 0x8000e3e4 => 0xf08f20ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000e3e8 => 0x00050413 (* mv s0,a0  *)
    | 0x8000e3ec => 0x00253513 (* sltiu a0,a0,2  *)
    | 0x8000e3f0 => 0xc6cff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e3f4 => 0x02800693 (* li a3,40  *)
    | 0x8000e3f8 => 0x02d406b3 (* mul a3,s0,a3  *)
    | 0x8000e3fc => 0x01f00613 (* li a2,31  *)
    | 0x8000e400 => 0x80095737 (* lui a4,0x80095  *)
    | 0x8000e404 => 0x46870713 (* add a4,a4,1128 # 80095468 <xStaticStreamBuffers>  *)
    | 0x8000e408 => 0x00000813 (* li a6,0  *)
    | 0x8000e40c => 0x00000793 (* li a5,0  *)
    | 0x8000e410 => 0x00100593 (* li a1,1  *)
    | 0x8000e414 => 0x01f00513 (* li a0,31  *)
    | 0x8000e418 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000e41c => 0x8000e4b7 (* lui s1,0x8000e  *)
    | 0x8000e420 => 0x02c40633 (* mul a2,s0,a2  *)
    | 0x8000e424 => 0x00d70733 (* add a4,a4,a3  *)
    | 0x8000e428 => 0x800956b7 (* lui a3,0x80095  *)
    | 0x8000e42c => 0x42868693 (* add a3,a3,1064 # 80095428 <ucBufferStorage>  *)
    | 0x8000e430 => 0x00c686b3 (* add a3,a3,a2  *)
    | 0x8000e434 => 0x00000613 (* li a2,0  *)
    | 0x8000e438 => 0xd98f70ef (* jal 800059d0 <xStreamBufferGenericCreateStatic>  *)
    | 0x8000e43c => 0x00050913 (* mv s2,a0  *)
    | 0x8000e440 => 0x00000513 (* li a0,0  *)
    | 0x8000e444 => 0xea8f20ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000e448 => 0x0c051e63 (* bnez a0,8000e524 <prvSenderTask+0x170>  *)
    | 0x8000e44c => 0x00090513 (* mv a0,s2  *)
    | 0x8000e450 => 0xd44ff0ef (* jal 8000d994 <prvSingleTaskTests>  *)
    | 0x8000e454 => 0x00000793 (* li a5,0  *)
    | 0x8000e458 => 0x00100713 (* li a4,1  *)
    | 0x8000e45c => 0x88c48513 (* add a0,s1,-1908 # 8000d88c <prvReceiverTask>  *)
    | 0x8000e460 => 0x00090693 (* mv a3,s2  *)
    | 0x8000e464 => 0x0b400613 (* li a2,180  *)
    | 0x8000e468 => 0x27498593 (* add a1,s3,628 # 80014274 <_etext+0x6a4>  *)
    | 0x8000e46c => 0xb90f20ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000e470 => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x8000e474 => 0x00241413 (* sll s0,s0,0x2  *)
    | 0x8000e478 => 0xb4418793 (* add a5,gp,-1212 # 80080344 <ulSenderLoopCounters>  *)
    | 0x8000e47c => 0x00000493 (* li s1,0  *)
    | 0x8000e480 => 0x03700b13 (* li s6,55  *)
    | 0x8000e484 => 0xfb0a8a93 (* add s5,s5,-80 # 80013fb0 <_etext+0x3e0>  *)
    | 0x8000e488 => 0x00878433 (* add s0,a5,s0  *)
    | 0x8000e48c => 0x00100c13 (* li s8,1  *)
    | 0x8000e490 => 0x80095bb7 (* lui s7,0x80095  *)
    | 0x8000e494 => 0x409b0a33 (* sub s4,s6,s1  *)
    | 0x8000e498 => 0x009a85b3 (* add a1,s5,s1  *)
    | 0x8000e49c => 0x07d00693 (* li a3,125  *)
    | 0x8000e4a0 => 0x000a0613 (* mv a2,s4  *)
    | 0x8000e4a4 => 0x00090513 (* mv a0,s2  *)
    | 0x8000e4a8 => 0x805f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e4ac => 0x00050993 (* mv s3,a0  *)
    | 0x8000e4b0 => 0x00aa3533 (* sltu a0,s4,a0  *)
    | 0x8000e4b4 => 0x00154513 (* xor a0,a0,1  *)
    | 0x8000e4b8 => 0x013484b3 (* add s1,s1,s3  *)
    | 0x8000e4bc => 0xba0ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e4c0 => 0x0384b513 (* sltiu a0,s1,56  *)
    | 0x8000e4c4 => 0xb98ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e4c8 => 0x01649463 (* bne s1,s6,8000e4d0 <prvSenderTask+0x11c>  *)
    | 0x8000e4cc => 0x00000493 (* li s1,0  *)
    | 0x8000e4d0 => 0x00042783 (* lw a5,0(s0)  *)
    | 0x8000e4d4 => 0x00000513 (* li a0,0  *)
    | 0x8000e4d8 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000e4dc => 0x00f42023 (* sw a5,0(s0)  *)
    | 0x8000e4e0 => 0xe0cf20ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000e4e4 => 0x01851663 (* bne a0,s8,8000e4f0 <prvSenderTask+0x13c>  *)
    | 0x8000e4e8 => 0x03200513 (* li a0,50  *)
    | 0x8000e4ec => 0xe2df20ef (* jal 80001318 <vTaskDelay>  *)
    | 0x8000e4f0 => 0x00000813 (* li a6,0  *)
    | 0x8000e4f4 => 0x00000793 (* li a5,0  *)
    | 0x8000e4f8 => 0x00810713 (* add a4,sp,8  *)
    | 0x8000e4fc => 0x41cb8693 (* add a3,s7,1052 # 8009541c <ucTempBuffer.5>  *)
    | 0x8000e500 => 0x00000613 (* li a2,0  *)
    | 0x8000e504 => 0x00100593 (* li a1,1  *)
    | 0x8000e508 => 0x00a00513 (* li a0,10  *)
    | 0x8000e50c => 0xcc4f70ef (* jal 800059d0 <xStreamBufferGenericCreateStatic>  *)
    | 0x8000e510 => 0x00050993 (* mv s3,a0  *)
    | 0x8000e514 => 0xe5cf70ef (* jal 80005b70 <xStreamBufferReset>  *)
    | 0x8000e518 => 0x00098513 (* mv a0,s3  *)
    | 0x8000e51c => 0xdf4f70ef (* jal 80005b10 <vStreamBufferDelete>  *)
    | 0x8000e520 => 0xf75ff06f (* j 8000e494 <prvSenderTask+0xe0>  *)
    | 0x8000e524 => 0x00000793 (* li a5,0  *)
    | 0x8000e528 => 0x00000713 (* li a4,0  *)
    | 0x8000e52c => 0xf31ff06f (* j 8000e45c <prvSenderTask+0xa8>  *)
    (* <prvEchoServer> *)
    | 0x8000e530 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000e534 => 0x00000713 (* li a4,0  *)
    | 0x8000e538 => 0x00000693 (* li a3,0  *)
    | 0x8000e53c => 0x00000613 (* li a2,0  *)
    | 0x8000e540 => 0x00100593 (* li a1,1  *)
    | 0x8000e544 => 0x01e00513 (* li a0,30  *)
    | 0x8000e548 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000e54c => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000e550 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000e554 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000e558 => 0xba4f70ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000e55c => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x8000e560 => 0x00000713 (* li a4,0  *)
    | 0x8000e564 => 0x00000693 (* li a3,0  *)
    | 0x8000e568 => 0x00000613 (* li a2,0  *)
    | 0x8000e56c => 0x00100593 (* li a1,1  *)
    | 0x8000e570 => 0x01e00513 (* li a0,30  *)
    | 0x8000e574 => 0xb88f70ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000e578 => 0x01812783 (* lw a5,24(sp)  *)
    | 0x8000e57c => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8000e580 => 0x00079a63 (* bnez a5,8000e594 <prvEchoServer+0x64>  *)
    | 0x8000e584 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000e588 => 0x3c300593 (* li a1,963  *)
    | 0x8000e58c => 0x23050513 (* add a0,a0,560 # 80014230 <_etext+0x660>  *)
    | 0x8000e590 => 0x501030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e594 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000e598 => 0x00079a63 (* bnez a5,8000e5ac <prvEchoServer+0x7c>  *)
    | 0x8000e59c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000e5a0 => 0x3c400593 (* li a1,964  *)
    | 0x8000e5a4 => 0x23050513 (* add a0,a0,560 # 80014230 <_etext+0x660>  *)
    | 0x8000e5a8 => 0x4e9030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e5ac => 0x01e00513 (* li a0,30  *)
    | 0x8000e5b0 => 0xd69f70ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000e5b4 => 0x00050413 (* mv s0,a0  *)
    | 0x8000e5b8 => 0x00051a63 (* bnez a0,8000e5cc <prvEchoServer+0x9c>  *)
    | 0x8000e5bc => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000e5c0 => 0x3c800593 (* li a1,968  *)
    | 0x8000e5c4 => 0x23050513 (* add a0,a0,560 # 80014230 <_etext+0x660>  *)
    | 0x8000e5c8 => 0x4c9030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e5cc => 0x8a9f20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000e5d0 => 0x00050913 (* mv s2,a0  *)
    | 0x8000e5d4 => 0x01812503 (* lw a0,24(sp)  *)
    | 0x8000e5d8 => 0x15e00693 (* li a3,350  *)
    | 0x8000e5dc => 0x01e00613 (* li a2,30  *)
    | 0x8000e5e0 => 0x00040593 (* mv a1,s0  *)
    | 0x8000e5e4 => 0x9a5f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e5e8 => 0x00050493 (* mv s1,a0  *)
    | 0x8000e5ec => 0x889f20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000e5f0 => 0x412507b3 (* sub a5,a0,s2  *)
    | 0x8000e5f4 => 0x15e7b793 (* sltiu a5,a5,350  *)
    | 0x8000e5f8 => 0x0017c513 (* xor a0,a5,1  *)
    | 0x8000e5fc => 0xa60ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e600 => 0x0014b513 (* seqz a0,s1  *)
    | 0x8000e604 => 0xa58ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e608 => 0x00000513 (* li a0,0  *)
    | 0x8000e60c => 0xce0f20ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000e610 => 0x80014937 (* lui s2,0x80014  *)
    | 0x8000e614 => 0x8000e4b7 (* lui s1,0x8000e  *)
    | 0x8000e618 => 0x06051663 (* bnez a0,8000e684 <prvEchoServer+0x154>  *)
    | 0x8000e61c => 0x00000793 (* li a5,0  *)
    | 0x8000e620 => 0x00100713 (* li a4,1  *)
    | 0x8000e624 => 0x01810693 (* add a3,sp,24  *)
    | 0x8000e628 => 0x0b400613 (* li a2,180  *)
    | 0x8000e62c => 0xff490593 (* add a1,s2,-12 # 80013ff4 <_etext+0x424>  *)
    | 0x8000e630 => 0x69848513 (* add a0,s1,1688 # 8000e698 <prvEchoClient>  *)
    | 0x8000e634 => 0x9c8f20ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000e638 => 0x01e00613 (* li a2,30  *)
    | 0x8000e63c => 0x00000593 (* li a1,0  *)
    | 0x8000e640 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e644 => 0x104050ef (* jal 80013748 <memset>  *)
    | 0x8000e648 => 0x01812503 (* lw a0,24(sp)  *)
    | 0x8000e64c => 0x00040593 (* mv a1,s0  *)
    | 0x8000e650 => 0xfff00693 (* li a3,-1  *)
    | 0x8000e654 => 0x01e00613 (* li a2,30  *)
    | 0x8000e658 => 0x931f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e65c => 0x00050613 (* mv a2,a0  *)
    | 0x8000e660 => 0x00a03533 (* snez a0,a0  *)
    | 0x8000e664 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x8000e668 => 0x9f4ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e66c => 0x00c12603 (* lw a2,12(sp)  *)
    | 0x8000e670 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8000e674 => 0xfff00693 (* li a3,-1  *)
    | 0x8000e678 => 0x00040593 (* mv a1,s0  *)
    | 0x8000e67c => 0xe30f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e680 => 0xfb9ff06f (* j 8000e638 <prvEchoServer+0x108>  *)
    | 0x8000e684 => 0x01812503 (* lw a0,24(sp)  *)
    | 0x8000e688 => 0xb0cff0ef (* jal 8000d994 <prvSingleTaskTests>  *)
    | 0x8000e68c => 0x00000793 (* li a5,0  *)
    | 0x8000e690 => 0x00000713 (* li a4,0  *)
    | 0x8000e694 => 0xf91ff06f (* j 8000e624 <prvEchoServer+0xf4>  *)
    (* <prvEchoClient> *)
    | 0x8000e698 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x8000e69c => 0x01712623 (* sw s7,12(sp)  *)
    | 0x8000e6a0 => 0x00050b93 (* mv s7,a0  *)
    | 0x8000e6a4 => 0x00000513 (* li a0,0  *)
    | 0x8000e6a8 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x8000e6ac => 0x02812423 (* sw s0,40(sp)  *)
    | 0x8000e6b0 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x8000e6b4 => 0x03212023 (* sw s2,32(sp)  *)
    | 0x8000e6b8 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x8000e6bc => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x8000e6c0 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x8000e6c4 => 0x01612823 (* sw s6,16(sp)  *)
    | 0x8000e6c8 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x8000e6cc => 0x01912223 (* sw s9,4(sp)  *)
    | 0x8000e6d0 => 0x01a12023 (* sw s10,0(sp)  *)
    | 0x8000e6d4 => 0xc18f20ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x8000e6d8 => 0x00050913 (* mv s2,a0  *)
    | 0x8000e6dc => 0x01e00513 (* li a0,30  *)
    | 0x8000e6e0 => 0xc39f70ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000e6e4 => 0x00050493 (* mv s1,a0  *)
    | 0x8000e6e8 => 0x01e00513 (* li a0,30  *)
    | 0x8000e6ec => 0xc2df70ef (* jal 80006318 <pvPortMalloc>  *)
    | 0x8000e6f0 => 0x00050413 (* mv s0,a0  *)
    | 0x8000e6f4 => 0x00049a63 (* bnez s1,8000e708 <prvEchoClient+0x70>  *)
    | 0x8000e6f8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000e6fc => 0x34c00593 (* li a1,844  *)
    | 0x8000e700 => 0x23050513 (* add a0,a0,560 # 80014230 <_etext+0x660>  *)
    | 0x8000e704 => 0x38d030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e708 => 0x00041a63 (* bnez s0,8000e71c <prvEchoClient+0x84>  *)
    | 0x8000e70c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000e710 => 0x34d00593 (* li a1,845  *)
    | 0x8000e714 => 0x23050513 (* add a0,a0,560 # 80014230 <_etext+0x660>  *)
    | 0x8000e718 => 0x379030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e71c => 0x00291913 (* sll s2,s2,0x2  *)
    | 0x8000e720 => 0xb3c18b13 (* add s6,gp,-1220 # 8008033c <ulEchoLoopCounters>  *)
    | 0x8000e724 => 0x02000a93 (* li s5,32  *)
    | 0x8000e728 => 0x00000a13 (* li s4,0  *)
    | 0x8000e72c => 0x01b00c93 (* li s9,27  *)
    | 0x8000e730 => 0x00100c13 (* li s8,1  *)
    | 0x8000e734 => 0x07f00d13 (* li s10,127  *)
    | 0x8000e738 => 0x012b0b33 (* add s6,s6,s2  *)
    | 0x8000e73c => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000e740 => 0x001a0913 (* add s2,s4,1  *)
    | 0x8000e744 => 0x01991463 (* bne s2,s9,8000e74c <prvEchoClient+0xb4>  *)
    | 0x8000e748 => 0x00100913 (* li s2,1  *)
    | 0x8000e74c => 0x01e00613 (* li a2,30  *)
    | 0x8000e750 => 0x00000593 (* li a1,0  *)
    | 0x8000e754 => 0x00048513 (* mv a0,s1  *)
    | 0x8000e758 => 0x7f1040ef (* jal 80013748 <memset>  *)
    | 0x8000e75c => 0x00000a13 (* li s4,0  *)
    | 0x8000e760 => 0x014487b3 (* add a5,s1,s4  *)
    | 0x8000e764 => 0x01578023 (* sb s5,0(a5)  *)
    | 0x8000e768 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8000e76c => 0x0ffafa93 (* zext.b s5,s5  *)
    | 0x8000e770 => 0x01aa9463 (* bne s5,s10,8000e778 <prvEchoClient+0xe0>  *)
    | 0x8000e774 => 0x02000a93 (* li s5,32  *)
    | 0x8000e778 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000e77c => 0xff4912e3 (* bne s2,s4,8000e760 <prvEchoClient+0xc8>  *)
    | 0x8000e780 => 0x000ba503 (* lw a0,0(s7)  *)
    | 0x8000e784 => 0x03200693 (* li a3,50  *)
    | 0x8000e788 => 0x000a0613 (* mv a2,s4  *)
    | 0x8000e78c => 0x00048593 (* mv a1,s1  *)
    | 0x8000e790 => 0xd1cf70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e794 => 0xfe0506e3 (* beqz a0,8000e780 <prvEchoClient+0xe8>  *)
    | 0x8000e798 => 0x01e00613 (* li a2,30  *)
    | 0x8000e79c => 0x00000593 (* li a1,0  *)
    | 0x8000e7a0 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e7a4 => 0x7a5040ef (* jal 80013748 <memset>  *)
    | 0x8000e7a8 => 0x004ba503 (* lw a0,4(s7)  *)
    | 0x8000e7ac => 0xfff00693 (* li a3,-1  *)
    | 0x8000e7b0 => 0x000a0613 (* mv a2,s4  *)
    | 0x8000e7b4 => 0x00040593 (* mv a1,s0  *)
    | 0x8000e7b8 => 0xfd0f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e7bc => 0x00040593 (* mv a1,s0  *)
    | 0x8000e7c0 => 0x00048513 (* mv a0,s1  *)
    | 0x8000e7c4 => 0x290050ef (* jal 80013a54 <strcmp>  *)
    | 0x8000e7c8 => 0x00153513 (* seqz a0,a0  *)
    | 0x8000e7cc => 0x890ff0ef (* jal 8000d85c <prvCheckExpectedState>  *)
    | 0x8000e7d0 => 0x000b2783 (* lw a5,0(s6)  *)
    | 0x8000e7d4 => 0x00000713 (* li a4,0  *)
    | 0x8000e7d8 => 0x00000693 (* li a3,0  *)
    | 0x8000e7dc => 0x00178793 (* add a5,a5,1  *)
    | 0x8000e7e0 => 0x00000613 (* li a2,0  *)
    | 0x8000e7e4 => 0x00100593 (* li a1,1  *)
    | 0x8000e7e8 => 0x01e00513 (* li a0,30  *)
    | 0x8000e7ec => 0x00fb2023 (* sw a5,0(s6)  *)
    | 0x8000e7f0 => 0x90cf70ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000e7f4 => 0xb1cf70ef (* jal 80005b10 <vStreamBufferDelete>  *)
    | 0x8000e7f8 => 0x00000713 (* li a4,0  *)
    | 0x8000e7fc => 0x00000693 (* li a3,0  *)
    | 0x8000e800 => 0x00000613 (* li a2,0  *)
    | 0x8000e804 => 0x00100593 (* li a1,1  *)
    | 0x8000e808 => 0x00100513 (* li a0,1  *)
    | 0x8000e80c => 0x8f0f70ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000e810 => 0x00050913 (* mv s2,a0  *)
    | 0x8000e814 => 0x00051863 (* bnez a0,8000e824 <prvEchoClient+0x18c>  *)
    | 0x8000e818 => 0x38700593 (* li a1,903  *)
    | 0x8000e81c => 0x23098513 (* add a0,s3,560 # 80014230 <_etext+0x660>  *)
    | 0x8000e820 => 0x271030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e824 => 0x00000693 (* li a3,0  *)
    | 0x8000e828 => 0x00100613 (* li a2,1  *)
    | 0x8000e82c => 0x00048593 (* mv a1,s1  *)
    | 0x8000e830 => 0x00090513 (* mv a0,s2  *)
    | 0x8000e834 => 0xc78f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e838 => 0x01850863 (* beq a0,s8,8000e848 <prvEchoClient+0x1b0>  *)
    | 0x8000e83c => 0x38c00593 (* li a1,908  *)
    | 0x8000e840 => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e844 => 0x24d030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e848 => 0x00000693 (* li a3,0  *)
    | 0x8000e84c => 0x00100613 (* li a2,1  *)
    | 0x8000e850 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e854 => 0x00090513 (* mv a0,s2  *)
    | 0x8000e858 => 0xc54f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e85c => 0x00050863 (* beqz a0,8000e86c <prvEchoClient+0x1d4>  *)
    | 0x8000e860 => 0x39000593 (* li a1,912  *)
    | 0x8000e864 => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e868 => 0x229030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e86c => 0x01e00613 (* li a2,30  *)
    | 0x8000e870 => 0x00000593 (* li a1,0  *)
    | 0x8000e874 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e878 => 0x6d1040ef (* jal 80013748 <memset>  *)
    | 0x8000e87c => 0x00000693 (* li a3,0  *)
    | 0x8000e880 => 0x00100613 (* li a2,1  *)
    | 0x8000e884 => 0x00040593 (* mv a1,s0  *)
    | 0x8000e888 => 0x00090513 (* mv a0,s2  *)
    | 0x8000e88c => 0xefcf70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e890 => 0x01850863 (* beq a0,s8,8000e8a0 <prvEchoClient+0x208>  *)
    | 0x8000e894 => 0x39600593 (* li a1,918  *)
    | 0x8000e898 => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e89c => 0x1f5030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e8a0 => 0x0004c703 (* lbu a4,0(s1)  *)
    | 0x8000e8a4 => 0x00044783 (* lbu a5,0(s0)  *)
    | 0x8000e8a8 => 0x00f70863 (* beq a4,a5,8000e8b8 <prvEchoClient+0x220>  *)
    | 0x8000e8ac => 0x39800593 (* li a1,920  *)
    | 0x8000e8b0 => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e8b4 => 0x1dd030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e8b8 => 0x00000693 (* li a3,0  *)
    | 0x8000e8bc => 0x00100613 (* li a2,1  *)
    | 0x8000e8c0 => 0x00040593 (* mv a1,s0  *)
    | 0x8000e8c4 => 0x00090513 (* mv a0,s2  *)
    | 0x8000e8c8 => 0xec0f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e8cc => 0x00050863 (* beqz a0,8000e8dc <prvEchoClient+0x244>  *)
    | 0x8000e8d0 => 0x39c00593 (* li a1,924  *)
    | 0x8000e8d4 => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e8d8 => 0x1b9030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e8dc => 0x00000693 (* li a3,0  *)
    | 0x8000e8e0 => 0x00200613 (* li a2,2  *)
    | 0x8000e8e4 => 0x00048593 (* mv a1,s1  *)
    | 0x8000e8e8 => 0x00090513 (* mv a0,s2  *)
    | 0x8000e8ec => 0xbc0f70ef (* jal 80005cac <xStreamBufferSend>  *)
    | 0x8000e8f0 => 0x01850863 (* beq a0,s8,8000e900 <prvEchoClient+0x268>  *)
    | 0x8000e8f4 => 0x3a200593 (* li a1,930  *)
    | 0x8000e8f8 => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e8fc => 0x195030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e900 => 0x01e00613 (* li a2,30  *)
    | 0x8000e904 => 0x00000593 (* li a1,0  *)
    | 0x8000e908 => 0x00040513 (* mv a0,s0  *)
    | 0x8000e90c => 0x63d040ef (* jal 80013748 <memset>  *)
    | 0x8000e910 => 0x00000693 (* li a3,0  *)
    | 0x8000e914 => 0x00200613 (* li a2,2  *)
    | 0x8000e918 => 0x00040593 (* mv a1,s0  *)
    | 0x8000e91c => 0x00090513 (* mv a0,s2  *)
    | 0x8000e920 => 0xe68f70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000e924 => 0x01850863 (* beq a0,s8,8000e934 <prvEchoClient+0x29c>  *)
    | 0x8000e928 => 0x3a900593 (* li a1,937  *)
    | 0x8000e92c => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e930 => 0x161030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e934 => 0x0004c703 (* lbu a4,0(s1)  *)
    | 0x8000e938 => 0x00044783 (* lbu a5,0(s0)  *)
    | 0x8000e93c => 0x00f70863 (* beq a4,a5,8000e94c <prvEchoClient+0x2b4>  *)
    | 0x8000e940 => 0x3ab00593 (* li a1,939  *)
    | 0x8000e944 => 0x23098513 (* add a0,s3,560  *)
    | 0x8000e948 => 0x149030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000e94c => 0x00090513 (* mv a0,s2  *)
    | 0x8000e950 => 0x9c0f70ef (* jal 80005b10 <vStreamBufferDelete>  *)
    | 0x8000e954 => 0xdedff06f (* j 8000e740 <prvEchoClient+0xa8>  *)
    (* <vStartStreamBufferTasks> *)
    | 0x8000e958 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000e95c => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000e960 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000e964 => 0x8000e437 (* lui s0,0x8000e  *)
    | 0x8000e968 => 0x00000793 (* li a5,0  *)
    | 0x8000e96c => 0x00100713 (* li a4,1  *)
    | 0x8000e970 => 0x00000693 (* li a3,0  *)
    | 0x8000e974 => 0x0b400613 (* li a2,180  *)
    | 0x8000e978 => 0x28058593 (* add a1,a1,640 # 80014280 <_etext+0x6b0>  *)
    | 0x8000e97c => 0x53040513 (* add a0,s0,1328 # 8000e530 <prvEchoServer>  *)
    | 0x8000e980 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000e984 => 0xe79f10ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000e988 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000e98c => 0x00000793 (* li a5,0  *)
    | 0x8000e990 => 0x00000713 (* li a4,0  *)
    | 0x8000e994 => 0x00000693 (* li a3,0  *)
    | 0x8000e998 => 0x0b400613 (* li a2,180  *)
    | 0x8000e99c => 0x29058593 (* add a1,a1,656 # 80014290 <_etext+0x6c0>  *)
    | 0x8000e9a0 => 0x53040513 (* add a0,s0,1328  *)
    | 0x8000e9a4 => 0xe59f10ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000e9a8 => 0x00000713 (* li a4,0  *)
    | 0x8000e9ac => 0x00000693 (* li a3,0  *)
    | 0x8000e9b0 => 0x00000613 (* li a2,0  *)
    | 0x8000e9b4 => 0x00100593 (* li a1,1  *)
    | 0x8000e9b8 => 0x01e00513 (* li a0,30  *)
    | 0x8000e9bc => 0xf41f60ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000e9c0 => 0x00050693 (* mv a3,a0  *)
    | 0x8000e9c4 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x8000e9c8 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000e9cc => 0x8000d537 (* lui a0,0x8000d  *)
    | 0x8000e9d0 => 0x00000793 (* li a5,0  *)
    | 0x8000e9d4 => 0x00000713 (* li a4,0  *)
    | 0x8000e9d8 => 0x07800613 (* li a2,120  *)
    | 0x8000e9dc => 0x2a058593 (* add a1,a1,672 # 800142a0 <_etext+0x6d0>  *)
    | 0x8000e9e0 => 0x61c50513 (* add a0,a0,1564 # 8000d61c <prvNonBlockingReceiverTask>  *)
    | 0x8000e9e4 => 0xe19f10ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000e9e8 => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x8000e9ec => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000e9f0 => 0x8000e537 (* lui a0,0x8000e  *)
    | 0x8000e9f4 => 0x00000793 (* li a5,0  *)
    | 0x8000e9f8 => 0x00000713 (* li a4,0  *)
    | 0x8000e9fc => 0x07800613 (* li a2,120  *)
    | 0x8000ea00 => 0x2ac58593 (* add a1,a1,684 # 800142ac <_etext+0x6dc>  *)
    | 0x8000ea04 => 0x92050513 (* add a0,a0,-1760 # 8000d920 <prvNonBlockingSenderTask>  *)
    | 0x8000ea08 => 0xdf5f10ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ea0c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ea10 => 0x8000d537 (* lui a0,0x8000d  *)
    | 0x8000ea14 => 0x00000793 (* li a5,0  *)
    | 0x8000ea18 => 0x00800713 (* li a4,8  *)
    | 0x8000ea1c => 0x00000693 (* li a3,0  *)
    | 0x8000ea20 => 0x07800613 (* li a2,120  *)
    | 0x8000ea24 => 0x2b858593 (* add a1,a1,696 # 800142b8 <_etext+0x6e8>  *)
    | 0x8000ea28 => 0x6f450513 (* add a0,a0,1780 # 8000d6f4 <prvInterruptTriggerLevelTest>  *)
    | 0x8000ea2c => 0xdd1f10ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ea30 => 0x8000e437 (* lui s0,0x8000e  *)
    | 0x8000ea34 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ea38 => 0x00000793 (* li a5,0  *)
    | 0x8000ea3c => 0x00100713 (* li a4,1  *)
    | 0x8000ea40 => 0x00000693 (* li a3,0  *)
    | 0x8000ea44 => 0x0b400613 (* li a2,180  *)
    | 0x8000ea48 => 0x2c058593 (* add a1,a1,704 # 800142c0 <_etext+0x6f0>  *)
    | 0x8000ea4c => 0x3b440513 (* add a0,s0,948 # 8000e3b4 <prvSenderTask>  *)
    | 0x8000ea50 => 0xdadf10ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000ea54 => 0x3b440513 (* add a0,s0,948  *)
    | 0x8000ea58 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000ea5c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000ea60 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ea64 => 0x00000793 (* li a5,0  *)
    | 0x8000ea68 => 0x00000713 (* li a4,0  *)
    | 0x8000ea6c => 0x00000693 (* li a3,0  *)
    | 0x8000ea70 => 0x0b400613 (* li a2,180  *)
    | 0x8000ea74 => 0x2cc58593 (* add a1,a1,716 # 800142cc <_etext+0x6fc>  *)
    | 0x8000ea78 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000ea7c => 0xd81f106f (* j 800007fc <xTaskCreate>  *)
    (* <vPeriodicStreamBufferProcessing> *)
    | 0x8000ea80 => 0xb301a703 (* lw a4,-1232(gp) # 80080330 <xInterruptStreamBuffer>  *)
    | 0x8000ea84 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000ea88 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000ea8c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000ea90 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x8000ea94 => 0x04070463 (* beqz a4,8000eadc <vPeriodicStreamBufferProcessing+0x5c>  *)
    | 0x8000ea98 => 0xb2c1a583 (* lw a1,-1236(gp) # 8008032c <xNextChar.4>  *)
    | 0x8000ea9c => 0xb301a503 (* lw a0,-1232(gp) # 80080330 <xInterruptStreamBuffer>  *)
    | 0x8000eaa0 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x8000eaa4 => 0x26878793 (* add a5,a5,616 # 80014268 <_etext+0x698>  *)
    | 0x8000eaa8 => 0x00b785b3 (* add a1,a5,a1  *)
    | 0x8000eaac => 0x00c10693 (* add a3,sp,12  *)
    | 0x8000eab0 => 0x00100613 (* li a2,1  *)
    | 0x8000eab4 => 0xbecf70ef (* jal 80005ea0 <xStreamBufferSendFromISR>  *)
    | 0x8000eab8 => 0xb2c1a783 (* lw a5,-1236(gp) # 8008032c <xNextChar.4>  *)
    | 0x8000eabc => 0x00900713 (* li a4,9  *)
    | 0x8000eac0 => 0x00f76663 (* bltu a4,a5,8000eacc <vPeriodicStreamBufferProcessing+0x4c>  *)
    | 0x8000eac4 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000eac8 => 0xb2f1a623 (* sw a5,-1236(gp) # 8008032c <xNextChar.4>  *)
    | 0x8000eacc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000ead0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000ead4 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000ead8 => 0x00008067 (* ret  *)
    | 0x8000eadc => 0xb201a623 (* sw zero,-1236(gp) # 8008032c <xNextChar.4>  *)
    | 0x8000eae0 => 0xfedff06f (* j 8000eacc <vPeriodicStreamBufferProcessing+0x4c>  *)
    (* <xAreStreamBufferTasksStillRunning> *)
    | 0x8000eae4 => 0xb3c18793 (* add a5,gp,-1220 # 8008033c <ulEchoLoopCounters>  *)
    | 0x8000eae8 => 0x0007a603 (* lw a2,0(a5)  *)
    | 0x8000eaec => 0xb241a583 (* lw a1,-1244(gp) # 80080324 <ulLastEchoLoopCounters.3>  *)
    | 0x8000eaf0 => 0xb3c18693 (* add a3,gp,-1220 # 8008033c <ulEchoLoopCounters>  *)
    | 0x8000eaf4 => 0xb2418713 (* add a4,gp,-1244 # 80080324 <ulLastEchoLoopCounters.3>  *)
    | 0x8000eaf8 => 0x06c58863 (* beq a1,a2,8000eb68 <xAreStreamBufferTasksStillRunning+0x84>  *)
    | 0x8000eafc => 0x0006a603 (* lw a2,0(a3)  *)
    | 0x8000eb00 => 0x00c72023 (* sw a2,0(a4)  *)
    | 0x8000eb04 => 0x0046a603 (* lw a2,4(a3)  *)
    | 0x8000eb08 => 0x00472583 (* lw a1,4(a4)  *)
    | 0x8000eb0c => 0x06c58263 (* beq a1,a2,8000eb70 <xAreStreamBufferTasksStillRunning+0x8c>  *)
    | 0x8000eb10 => 0x0046a683 (* lw a3,4(a3)  *)
    | 0x8000eb14 => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x8000eb18 => 0xb381a583 (* lw a1,-1224(gp) # 80080338 <ulNonBlockingRxCounter>  *)
    | 0x8000eb1c => 0xb201a603 (* lw a2,-1248(gp) # 80080320 <ulLastNonBlockingRxCounter.2>  *)
    | 0x8000eb20 => 0x04c59c63 (* bne a1,a2,8000eb78 <xAreStreamBufferTasksStillRunning+0x94>  *)
    | 0x8000eb24 => 0x8201a423 (* sw zero,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000eb28 => 0xb341a603 (* lw a2,-1228(gp) # 80080334 <ulInterruptTriggerCounter>  *)
    | 0x8000eb2c => 0xb1c1a583 (* lw a1,-1252(gp) # 8008031c <ulLastInterruptTriggerCounter.1>  *)
    | 0x8000eb30 => 0x06c59263 (* bne a1,a2,8000eb94 <xAreStreamBufferTasksStillRunning+0xb0>  *)
    | 0x8000eb34 => 0x8201a423 (* sw zero,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000eb38 => 0xb441a603 (* lw a2,-1212(gp) # 80080344 <ulSenderLoopCounters>  *)
    | 0x8000eb3c => 0xb141a583 (* lw a1,-1260(gp) # 80080314 <ulLastSenderLoopCounters.0>  *)
    | 0x8000eb40 => 0xb4418693 (* add a3,gp,-1212 # 80080344 <ulSenderLoopCounters>  *)
    | 0x8000eb44 => 0xb1418713 (* add a4,gp,-1260 # 80080314 <ulLastSenderLoopCounters.0>  *)
    | 0x8000eb48 => 0x02c58e63 (* beq a1,a2,8000eb84 <xAreStreamBufferTasksStillRunning+0xa0>  *)
    | 0x8000eb4c => 0x00c72023 (* sw a2,0(a4)  *)
    | 0x8000eb50 => 0x0046a683 (* lw a3,4(a3)  *)
    | 0x8000eb54 => 0x00472603 (* lw a2,4(a4)  *)
    | 0x8000eb58 => 0x02d60a63 (* beq a2,a3,8000eb8c <xAreStreamBufferTasksStillRunning+0xa8>  *)
    | 0x8000eb5c => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x8000eb60 => 0x8281a503 (* lw a0,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000eb64 => 0x00008067 (* ret  *)
    | 0x8000eb68 => 0x8201a423 (* sw zero,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000eb6c => 0xf99ff06f (* j 8000eb04 <xAreStreamBufferTasksStillRunning+0x20>  *)
    | 0x8000eb70 => 0x8201a423 (* sw zero,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000eb74 => 0xfa5ff06f (* j 8000eb18 <xAreStreamBufferTasksStillRunning+0x34>  *)
    | 0x8000eb78 => 0xb381a683 (* lw a3,-1224(gp) # 80080338 <ulNonBlockingRxCounter>  *)
    | 0x8000eb7c => 0xb2d1a023 (* sw a3,-1248(gp) # 80080320 <ulLastNonBlockingRxCounter.2>  *)
    | 0x8000eb80 => 0xfa9ff06f (* j 8000eb28 <xAreStreamBufferTasksStillRunning+0x44>  *)
    | 0x8000eb84 => 0x8201a423 (* sw zero,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000eb88 => 0xfc9ff06f (* j 8000eb50 <xAreStreamBufferTasksStillRunning+0x6c>  *)
    | 0x8000eb8c => 0x8201a423 (* sw zero,-2008(gp) # 80080028 <xErrorStatus>  *)
    | 0x8000eb90 => 0xfd1ff06f (* j 8000eb60 <xAreStreamBufferTasksStillRunning+0x7c>  *)
    | 0x8000eb94 => 0xb341a683 (* lw a3,-1228(gp) # 80080334 <ulInterruptTriggerCounter>  *)
    | 0x8000eb98 => 0xb0d1ae23 (* sw a3,-1252(gp) # 8008031c <ulLastInterruptTriggerCounter.1>  *)
    | 0x8000eb9c => 0xf9dff06f (* j 8000eb38 <xAreStreamBufferTasksStillRunning+0x54>  *)
    (* <prvReceivingTask> *)
    | 0x8000eba0 => 0xfb010113 (* add sp,sp,-80  *)
    | 0x8000eba4 => 0x04912223 (* sw s1,68(sp)  *)
    | 0x8000eba8 => 0xb581a783 (* lw a5,-1192(gp) # 80080358 <xStreamBuffer>  *)
    | 0x8000ebac => 0x04112623 (* sw ra,76(sp)  *)
    | 0x8000ebb0 => 0x04812423 (* sw s0,72(sp)  *)
    | 0x8000ebb4 => 0x05212023 (* sw s2,64(sp)  *)
    | 0x8000ebb8 => 0x03312e23 (* sw s3,60(sp)  *)
    | 0x8000ebbc => 0x03412c23 (* sw s4,56(sp)  *)
    | 0x8000ebc0 => 0x03512a23 (* sw s5,52(sp)  *)
    | 0x8000ebc4 => 0x03612823 (* sw s6,48(sp)  *)
    | 0x8000ebc8 => 0x03712623 (* sw s7,44(sp)  *)
    | 0x8000ebcc => 0x00079a63 (* bnez a5,8000ebe0 <prvReceivingTask+0x40>  *)
    | 0x8000ebd0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ebd4 => 0x07000593 (* li a1,112  *)
    | 0x8000ebd8 => 0x2d850513 (* add a0,a0,728 # 800142d8 <_etext+0x708>  *)
    | 0x8000ebdc => 0x6b4030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ebe0 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x8000ebe4 => 0x00012823 (* sw zero,16(sp)  *)
    | 0x8000ebe8 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x8000ebec => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x8000ebf0 => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x8000ebf4 => 0x00000413 (* li s0,0  *)
    | 0x8000ebf8 => 0x05300a93 (* li s5,83  *)
    | 0x8000ebfc => 0x01300b13 (* li s6,19  *)
    | 0x8000ec00 => 0x80014a37 (* lui s4,0x80014  *)
    | 0x8000ec04 => 0x80014bb7 (* lui s7,0x80014  *)
    | 0x8000ec08 => 0xb581a503 (* lw a0,-1192(gp) # 80080358 <xStreamBuffer>  *)
    | 0x8000ec0c => 0x00c10793 (* add a5,sp,12  *)
    | 0x8000ec10 => 0xfff00693 (* li a3,-1  *)
    | 0x8000ec14 => 0x00100613 (* li a2,1  *)
    | 0x8000ec18 => 0x008785b3 (* add a1,a5,s0  *)
    | 0x8000ec1c => 0xb6cf70ef (* jal 80005f88 <xStreamBufferReceive>  *)
    | 0x8000ec20 => 0x00041a63 (* bnez s0,8000ec34 <prvReceivingTask+0x94>  *)
    | 0x8000ec24 => 0x00c14403 (* lbu s0,12(sp)  *)
    | 0x8000ec28 => 0xfb840413 (* add s0,s0,-72  *)
    | 0x8000ec2c => 0x00143413 (* seqz s0,s0  *)
    | 0x8000ec30 => 0xfd9ff06f (* j 8000ec08 <prvReceivingTask+0x68>  *)
    | 0x8000ec34 => 0x02040793 (* add a5,s0,32  *)
    | 0x8000ec38 => 0x002787b3 (* add a5,a5,sp  *)
    | 0x8000ec3c => 0xfec7c783 (* lbu a5,-20(a5)  *)
    | 0x8000ec40 => 0x05579663 (* bne a5,s5,8000ec8c <prvReceivingTask+0xec>  *)
    | 0x8000ec44 => 0x314b8593 (* add a1,s7,788 # 80014314 <_etext+0x744>  *)
    | 0x8000ec48 => 0x00c10513 (* add a0,sp,12  *)
    | 0x8000ec4c => 0x609040ef (* jal 80013a54 <strcmp>  *)
    | 0x8000ec50 => 0x00050463 (* beqz a0,8000ec58 <prvReceivingTask+0xb8>  *)
    | 0x8000ec54 => 0x8201a623 (* sw zero,-2004(gp) # 8008002c <xDemoStatus>  *)
    | 0x8000ec58 => 0x82c1a703 (* lw a4,-2004(gp) # 8008002c <xDemoStatus>  *)
    | 0x8000ec5c => 0x00012623 (* sw zero,12(sp)  *)
    | 0x8000ec60 => 0x00012823 (* sw zero,16(sp)  *)
    | 0x8000ec64 => 0x00012a23 (* sw zero,20(sp)  *)
    | 0x8000ec68 => 0x00012c23 (* sw zero,24(sp)  *)
    | 0x8000ec6c => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x8000ec70 => 0x00100793 (* li a5,1  *)
    | 0x8000ec74 => 0x00f71863 (* bne a4,a5,8000ec84 <prvReceivingTask+0xe4>  *)
    | 0x8000ec78 => 0xb541a783 (* lw a5,-1196(gp) # 80080354 <ulCycleCount>  *)
    | 0x8000ec7c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000ec80 => 0xb4f1aa23 (* sw a5,-1196(gp) # 80080354 <ulCycleCount>  *)
    | 0x8000ec84 => 0x00000413 (* li s0,0  *)
    | 0x8000ec88 => 0xf81ff06f (* j 8000ec08 <prvReceivingTask+0x68>  *)
    | 0x8000ec8c => 0x00140413 (* add s0,s0,1  *)
    | 0x8000ec90 => 0xf68b7ce3 (* bgeu s6,s0,8000ec08 <prvReceivingTask+0x68>  *)
    | 0x8000ec94 => 0x0af00593 (* li a1,175  *)
    | 0x8000ec98 => 0x2d8a0513 (* add a0,s4,728 # 800142d8 <_etext+0x708>  *)
    | 0x8000ec9c => 0x5f4030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000eca0 => 0xf69ff06f (* j 8000ec08 <prvReceivingTask+0x68>  *)
    (* <vStartStreamBufferInterruptDemo> *)
    | 0x8000eca4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000eca8 => 0x00000713 (* li a4,0  *)
    | 0x8000ecac => 0x00000693 (* li a3,0  *)
    | 0x8000ecb0 => 0x00000613 (* li a2,0  *)
    | 0x8000ecb4 => 0x00a00593 (* li a1,10  *)
    | 0x8000ecb8 => 0x06400513 (* li a0,100  *)
    | 0x8000ecbc => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000ecc0 => 0xc3df60ef (* jal 800058fc <xStreamBufferGenericCreate>  *)
    | 0x8000ecc4 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000ecc8 => 0xb4a1ac23 (* sw a0,-1192(gp) # 80080358 <xStreamBuffer>  *)
    | 0x8000eccc => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000ecd0 => 0x8000f537 (* lui a0,0x8000f  *)
    | 0x8000ecd4 => 0x00000793 (* li a5,0  *)
    | 0x8000ecd8 => 0x00200713 (* li a4,2  *)
    | 0x8000ecdc => 0x00000693 (* li a3,0  *)
    | 0x8000ece0 => 0x07800613 (* li a2,120  *)
    | 0x8000ece4 => 0x32458593 (* add a1,a1,804 # 80014324 <_etext+0x754>  *)
    | 0x8000ece8 => 0xba050513 (* add a0,a0,-1120 # 8000eba0 <prvReceivingTask>  *)
    | 0x8000ecec => 0x01010113 (* add sp,sp,16  *)
    | 0x8000ecf0 => 0xb0df106f (* j 800007fc <xTaskCreate>  *)
    (* <vBasicStreamBufferSendFromISR> *)
    | 0x8000ecf4 => 0xb501a783 (* lw a5,-1200(gp) # 80080350 <xCallCount.1>  *)
    | 0x8000ecf8 => 0x06400693 (* li a3,100  *)
    | 0x8000ecfc => 0x00178793 (* add a5,a5,1  *)
    | 0x8000ed00 => 0x00f6c663 (* blt a3,a5,8000ed0c <vBasicStreamBufferSendFromISR+0x18>  *)
    | 0x8000ed04 => 0xb4f1a823 (* sw a5,-1200(gp) # 80080350 <xCallCount.1>  *)
    | 0x8000ed08 => 0x00008067 (* ret  *)
    | 0x8000ed0c => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000ed10 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000ed14 => 0xb4c1a583 (* lw a1,-1204(gp) # 8008034c <xNextByteToSend.0>  *)
    | 0x8000ed18 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x8000ed1c => 0x33078793 (* add a5,a5,816 # 80014330 <_etext+0x760>  *)
    | 0x8000ed20 => 0x00b785b3 (* add a1,a5,a1  *)
    | 0x8000ed24 => 0xb581a503 (* lw a0,-1192(gp) # 80080358 <xStreamBuffer>  *)
    | 0x8000ed28 => 0x00000693 (* li a3,0  *)
    | 0x8000ed2c => 0x00400613 (* li a2,4  *)
    | 0x8000ed30 => 0xb401a823 (* sw zero,-1200(gp) # 80080350 <xCallCount.1>  *)
    | 0x8000ed34 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000ed38 => 0x968f70ef (* jal 80005ea0 <xStreamBufferSendFromISR>  *)
    | 0x8000ed3c => 0xb4c1a783 (* lw a5,-1204(gp) # 8008034c <xNextByteToSend.0>  *)
    | 0x8000ed40 => 0x01700713 (* li a4,23  *)
    | 0x8000ed44 => 0x00478793 (* add a5,a5,4  *)
    | 0x8000ed48 => 0x00f76c63 (* bltu a4,a5,8000ed60 <vBasicStreamBufferSendFromISR+0x6c>  *)
    | 0x8000ed4c => 0xb4f1a623 (* sw a5,-1204(gp) # 8008034c <xNextByteToSend.0>  *)
    | 0x8000ed50 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000ed54 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000ed58 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000ed5c => 0x00008067 (* ret  *)
    | 0x8000ed60 => 0xb401a623 (* sw zero,-1204(gp) # 8008034c <xNextByteToSend.0>  *)
    | 0x8000ed64 => 0xfedff06f (* j 8000ed50 <vBasicStreamBufferSendFromISR+0x5c>  *)
    (* <xIsInterruptStreamBufferDemoStillRunning> *)
    | 0x8000ed68 => 0xb541a703 (* lw a4,-1196(gp) # 80080354 <ulCycleCount>  *)
    | 0x8000ed6c => 0x00071463 (* bnez a4,8000ed74 <xIsInterruptStreamBufferDemoStillRunning+0xc>  *)
    | 0x8000ed70 => 0x8201a623 (* sw zero,-2004(gp) # 8008002c <xDemoStatus>  *)
    | 0x8000ed74 => 0x82c1a503 (* lw a0,-2004(gp) # 8008002c <xDemoStatus>  *)
    | 0x8000ed78 => 0x00008067 (* ret  *)
    (* <prvRand> *)
    | 0x8000ed7c => 0xb6c1a503 (* lw a0,-1172(gp) # 8008036c <uxNextRand>  *)
    | 0x8000ed80 => 0x015a57b7 (* lui a5,0x15a5  *)
    | 0x8000ed84 => 0xe3578793 (* add a5,a5,-459 # 15a4e35 <__stack_size+0x15a4cd7>  *)
    | 0x8000ed88 => 0x02f50533 (* mul a0,a0,a5  *)
    | 0x8000ed8c => 0x00150513 (* add a0,a0,1  *)
    | 0x8000ed90 => 0xb6a1a623 (* sw a0,-1172(gp) # 8008036c <uxNextRand>  *)
    | 0x8000ed94 => 0x00151513 (* sll a0,a0,0x1  *)
    | 0x8000ed98 => 0x01155513 (* srl a0,a0,0x11  *)
    | 0x8000ed9c => 0x00008067 (* ret  *)
    (* <prvNotifyingTimer> *)
    | 0x8000eda0 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000eda4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000eda8 => 0x00000713 (* li a4,0  *)
    | 0x8000edac => 0x00200693 (* li a3,2  *)
    | 0x8000edb0 => 0x00000613 (* li a2,0  *)
    | 0x8000edb4 => 0x00000593 (* li a1,0  *)
    | 0x8000edb8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000edbc => 0xf08f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000edc0 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8000edc4 => 0x800807b7 (* lui a5,0x80080  *)
    | 0x8000edc8 => 0x0047a683 (* lw a3,4(a5) # 80080004 <xCriticalNesting>  *)
    | 0x8000edcc => 0xb741a783 (* lw a5,-1164(gp) # 80080374 <ulTimerNotificationsSent>  *)
    | 0x8000edd0 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000edd4 => 0xb6f1aa23 (* sw a5,-1164(gp) # 80080374 <ulTimerNotificationsSent>  *)
    | 0x8000edd8 => 0x00069463 (* bnez a3,8000ede0 <prvNotifyingTimer+0x40>  *)
    | 0x8000eddc => 0x30046073 (* csrs mstatus,8  *)
    | 0x8000ede0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000ede4 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000ede8 => 0x00008067 (* ret  *)
    (* <prvNotifiedTask> *)
    | 0x8000edec => 0xfc010113 (* add sp,sp,-64  *)
    | 0x8000edf0 => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x8000edf4 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x8000edf8 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8000edfc => 0x03212823 (* sw s2,48(sp)  *)
    | 0x8000ee00 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x8000ee04 => 0x03412423 (* sw s4,40(sp)  *)
    | 0x8000ee08 => 0x03512223 (* sw s5,36(sp)  *)
    | 0x8000ee0c => 0x03612023 (* sw s6,32(sp)  *)
    | 0x8000ee10 => 0x01712e23 (* sw s7,28(sp)  *)
    | 0x8000ee14 => 0x860f20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000ee18 => 0x00050493 (* mv s1,a0  *)
    | 0x8000ee1c => 0x06400713 (* li a4,100  *)
    | 0x8000ee20 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000ee24 => 0x00000613 (* li a2,0  *)
    | 0x8000ee28 => 0xfff00593 (* li a1,-1  *)
    | 0x8000ee2c => 0x00000513 (* li a0,0  *)
    | 0x8000ee30 => 0xd10f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000ee34 => 0x00050413 (* mv s0,a0  *)
    | 0x8000ee38 => 0x83cf20ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000ee3c => 0x40950533 (* sub a0,a0,s1  *)
    | 0x8000ee40 => 0x06300793 (* li a5,99  *)
    | 0x8000ee44 => 0x00a7e463 (* bltu a5,a0,8000ee4c <prvNotifiedTask+0x60>  *)
    | 0x8000ee48 => 0x8201a823 (* sw zero,-2000(gp) # 80080030 <xErrorStatus>  *)
    | 0x8000ee4c => 0x00040a63 (* beqz s0,8000ee60 <prvNotifiedTask+0x74>  *)
    | 0x8000ee50 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ee54 => 0x09700593 (* li a1,151  *)
    | 0x8000ee58 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000ee5c => 0x434030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ee60 => 0x00812783 (* lw a5,8(sp)  *)
    | 0x8000ee64 => 0x00078a63 (* beqz a5,8000ee78 <prvNotifiedTask+0x8c>  *)
    | 0x8000ee68 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ee6c => 0x09800593 (* li a1,152  *)
    | 0x8000ee70 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000ee74 => 0x41c030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ee78 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000ee7c => 0x00018637 (* lui a2,0x18  *)
    | 0x8000ee80 => 0x00c10713 (* add a4,sp,12  *)
    | 0x8000ee84 => 0x00400693 (* li a3,4  *)
    | 0x8000ee88 => 0x6a160613 (* add a2,a2,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000ee8c => 0x00000593 (* li a1,0  *)
    | 0x8000ee90 => 0xe34f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000ee94 => 0x00100793 (* li a5,1  *)
    | 0x8000ee98 => 0x00f50a63 (* beq a0,a5,8000eeac <prvNotifiedTask+0xc0>  *)
    | 0x8000ee9c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000eea0 => 0x0a600593 (* li a1,166  *)
    | 0x8000eea4 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000eea8 => 0x3e8030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000eeac => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000eeb0 => 0x00078a63 (* beqz a5,8000eec4 <prvNotifiedTask+0xd8>  *)
    | 0x8000eeb4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000eeb8 => 0x0aa00593 (* li a1,170  *)
    | 0x8000eebc => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000eec0 => 0x3d0030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000eec4 => 0xfb1f10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000eec8 => 0x00050913 (* mv s2,a0  *)
    | 0x8000eecc => 0x06400713 (* li a4,100  *)
    | 0x8000eed0 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000eed4 => 0x00000613 (* li a2,0  *)
    | 0x8000eed8 => 0xfff00593 (* li a1,-1  *)
    | 0x8000eedc => 0x00000513 (* li a0,0  *)
    | 0x8000eee0 => 0xc60f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000eee4 => 0x00050493 (* mv s1,a0  *)
    | 0x8000eee8 => 0xf8df10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000eeec => 0x41250533 (* sub a0,a0,s2  *)
    | 0x8000eef0 => 0x06300793 (* li a5,99  *)
    | 0x8000eef4 => 0x00a7f463 (* bgeu a5,a0,8000eefc <prvNotifiedTask+0x110>  *)
    | 0x8000eef8 => 0x8201a823 (* sw zero,-2000(gp) # 80080030 <xErrorStatus>  *)
    | 0x8000eefc => 0x00100793 (* li a5,1  *)
    | 0x8000ef00 => 0x00f48a63 (* beq s1,a5,8000ef14 <prvNotifiedTask+0x128>  *)
    | 0x8000ef04 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ef08 => 0x0b800593 (* li a1,184  *)
    | 0x8000ef0c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000ef10 => 0x380030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ef14 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000ef18 => 0x000187b7 (* lui a5,0x18  *)
    | 0x8000ef1c => 0x6a178793 (* add a5,a5,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000ef20 => 0x00f70a63 (* beq a4,a5,8000ef34 <prvNotifiedTask+0x148>  *)
    | 0x8000ef24 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ef28 => 0x0b900593 (* li a1,185  *)
    | 0x8000ef2c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000ef30 => 0x360030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ef34 => 0xb801a783 (* lw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000ef38 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000ef3c => 0x00018637 (* lui a2,0x18  *)
    | 0x8000ef40 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000ef44 => 0xb8f1a023 (* sw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000ef48 => 0x00400693 (* li a3,4  *)
    | 0x8000ef4c => 0x00000713 (* li a4,0  *)
    | 0x8000ef50 => 0x6a160613 (* add a2,a2,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000ef54 => 0x00000593 (* li a1,0  *)
    | 0x8000ef58 => 0xd6cf30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000ef5c => 0x00100793 (* li a5,1  *)
    | 0x8000ef60 => 0x00f50a63 (* beq a0,a5,8000ef74 <prvNotifiedTask+0x188>  *)
    | 0x8000ef64 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ef68 => 0x0c800593 (* li a1,200  *)
    | 0x8000ef6c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000ef70 => 0x320030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ef74 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000ef78 => 0x00001637 (* lui a2,0x1  *)
    | 0x8000ef7c => 0x00000713 (* li a4,0  *)
    | 0x8000ef80 => 0x00400693 (* li a3,4  *)
    | 0x8000ef84 => 0x5b360613 (* add a2,a2,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x8000ef88 => 0x00000593 (* li a1,0  *)
    | 0x8000ef8c => 0xd38f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000ef90 => 0x00050a63 (* beqz a0,8000efa4 <prvNotifiedTask+0x1b8>  *)
    | 0x8000ef94 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000ef98 => 0x0cc00593 (* li a1,204  *)
    | 0x8000ef9c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000efa0 => 0x2f0030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000efa4 => 0x00000713 (* li a4,0  *)
    | 0x8000efa8 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000efac => 0x00000613 (* li a2,0  *)
    | 0x8000efb0 => 0xfff00593 (* li a1,-1  *)
    | 0x8000efb4 => 0x00000513 (* li a0,0  *)
    | 0x8000efb8 => 0xb88f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000efbc => 0x00100793 (* li a5,1  *)
    | 0x8000efc0 => 0x00f50a63 (* beq a0,a5,8000efd4 <prvNotifiedTask+0x1e8>  *)
    | 0x8000efc4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000efc8 => 0x0d300593 (* li a1,211  *)
    | 0x8000efcc => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000efd0 => 0x2c0030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000efd4 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000efd8 => 0x000187b7 (* lui a5,0x18  *)
    | 0x8000efdc => 0x6a178793 (* add a5,a5,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000efe0 => 0x00f70a63 (* beq a4,a5,8000eff4 <prvNotifiedTask+0x208>  *)
    | 0x8000efe4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000efe8 => 0x0d400593 (* li a1,212  *)
    | 0x8000efec => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000eff0 => 0x2a0030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000eff4 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000eff8 => 0x00018637 (* lui a2,0x18  *)
    | 0x8000effc => 0x00000713 (* li a4,0  *)
    | 0x8000f000 => 0x00300693 (* li a3,3  *)
    | 0x8000f004 => 0x6a160613 (* add a2,a2,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000f008 => 0x00000593 (* li a1,0  *)
    | 0x8000f00c => 0xcb8f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f010 => 0x00100793 (* li a5,1  *)
    | 0x8000f014 => 0x00f50a63 (* beq a0,a5,8000f028 <prvNotifiedTask+0x23c>  *)
    | 0x8000f018 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f01c => 0x0e000593 (* li a1,224  *)
    | 0x8000f020 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f024 => 0x26c030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f028 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f02c => 0x00001637 (* lui a2,0x1  *)
    | 0x8000f030 => 0x00000713 (* li a4,0  *)
    | 0x8000f034 => 0x00300693 (* li a3,3  *)
    | 0x8000f038 => 0x5b360613 (* add a2,a2,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x8000f03c => 0x00000593 (* li a1,0  *)
    | 0x8000f040 => 0xc84f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f044 => 0x00100793 (* li a5,1  *)
    | 0x8000f048 => 0x00f50a63 (* beq a0,a5,8000f05c <prvNotifiedTask+0x270>  *)
    | 0x8000f04c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f050 => 0x0e300593 (* li a1,227  *)
    | 0x8000f054 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f058 => 0x238030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f05c => 0x00000713 (* li a4,0  *)
    | 0x8000f060 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f064 => 0x00000613 (* li a2,0  *)
    | 0x8000f068 => 0xfff00593 (* li a1,-1  *)
    | 0x8000f06c => 0x00000513 (* li a0,0  *)
    | 0x8000f070 => 0xad0f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f074 => 0x00100793 (* li a5,1  *)
    | 0x8000f078 => 0x00f50a63 (* beq a0,a5,8000f08c <prvNotifiedTask+0x2a0>  *)
    | 0x8000f07c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f080 => 0x0e600593 (* li a1,230  *)
    | 0x8000f084 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f088 => 0x208030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f08c => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000f090 => 0x000017b7 (* lui a5,0x1  *)
    | 0x8000f094 => 0x5b378793 (* add a5,a5,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x8000f098 => 0x00f70a63 (* beq a4,a5,8000f0ac <prvNotifiedTask+0x2c0>  *)
    | 0x8000f09c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f0a0 => 0x0e800593 (* li a1,232  *)
    | 0x8000f0a4 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f0a8 => 0x1e8030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f0ac => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f0b0 => 0x00018637 (* lui a2,0x18  *)
    | 0x8000f0b4 => 0x00000713 (* li a4,0  *)
    | 0x8000f0b8 => 0x00000693 (* li a3,0  *)
    | 0x8000f0bc => 0x6a160613 (* add a2,a2,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000f0c0 => 0x00000593 (* li a1,0  *)
    | 0x8000f0c4 => 0xc00f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f0c8 => 0x00100793 (* li a5,1  *)
    | 0x8000f0cc => 0x00f50a63 (* beq a0,a5,8000f0e0 <prvNotifiedTask+0x2f4>  *)
    | 0x8000f0d0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f0d4 => 0x0f200593 (* li a1,242  *)
    | 0x8000f0d8 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f0dc => 0x1b4030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f0e0 => 0x00000713 (* li a4,0  *)
    | 0x8000f0e4 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f0e8 => 0x00000613 (* li a2,0  *)
    | 0x8000f0ec => 0xfff00593 (* li a1,-1  *)
    | 0x8000f0f0 => 0x00000513 (* li a0,0  *)
    | 0x8000f0f4 => 0xa4cf30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f0f8 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000f0fc => 0x000017b7 (* lui a5,0x1  *)
    | 0x8000f100 => 0x5b378793 (* add a5,a5,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x8000f104 => 0x00f70a63 (* beq a4,a5,8000f118 <prvNotifiedTask+0x32c>  *)
    | 0x8000f108 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f10c => 0x0f500593 (* li a1,245  *)
    | 0x8000f110 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f114 => 0x17c030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f118 => 0x00500493 (* li s1,5  *)
    | 0x8000f11c => 0x00100913 (* li s2,1  *)
    | 0x8000f120 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x8000f124 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f128 => 0x00000713 (* li a4,0  *)
    | 0x8000f12c => 0x00200693 (* li a3,2  *)
    | 0x8000f130 => 0x00000613 (* li a2,0  *)
    | 0x8000f134 => 0x00000593 (* li a1,0  *)
    | 0x8000f138 => 0xb8cf30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f13c => 0x01250863 (* beq a0,s2,8000f14c <prvNotifiedTask+0x360>  *)
    | 0x8000f140 => 0x0ff00593 (* li a1,255  *)
    | 0x8000f144 => 0x34c98513 (* add a0,s3,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f148 => 0x148030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f14c => 0xfff48493 (* add s1,s1,-1  *)
    | 0x8000f150 => 0xfc049ae3 (* bnez s1,8000f124 <prvNotifiedTask+0x338>  *)
    | 0x8000f154 => 0x00000713 (* li a4,0  *)
    | 0x8000f158 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f15c => 0x00000613 (* li a2,0  *)
    | 0x8000f160 => 0xfff00593 (* li a1,-1  *)
    | 0x8000f164 => 0x00000513 (* li a0,0  *)
    | 0x8000f168 => 0x9d8f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f16c => 0x00100793 (* li a5,1  *)
    | 0x8000f170 => 0x00f50a63 (* beq a0,a5,8000f184 <prvNotifiedTask+0x398>  *)
    | 0x8000f174 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f178 => 0x10400593 (* li a1,260  *)
    | 0x8000f17c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f180 => 0x110030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f184 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000f188 => 0x000017b7 (* lui a5,0x1  *)
    | 0x8000f18c => 0x5b878793 (* add a5,a5,1464 # 15b8 <__stack_size+0x145a>  *)
    | 0x8000f190 => 0x00f70a63 (* beq a4,a5,8000f1a4 <prvNotifiedTask+0x3b8>  *)
    | 0x8000f194 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f198 => 0x10500593 (* li a1,261  *)
    | 0x8000f19c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f1a0 => 0x0f0030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f1a4 => 0x00000713 (* li a4,0  *)
    | 0x8000f1a8 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f1ac => 0x00000613 (* li a2,0  *)
    | 0x8000f1b0 => 0x00000593 (* li a1,0  *)
    | 0x8000f1b4 => 0x00000513 (* li a0,0  *)
    | 0x8000f1b8 => 0x988f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f1bc => 0x00050a63 (* beqz a0,8000f1d0 <prvNotifiedTask+0x3e4>  *)
    | 0x8000f1c0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f1c4 => 0x10b00593 (* li a1,267  *)
    | 0x8000f1c8 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f1cc => 0x0c4030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f1d0 => 0x00000713 (* li a4,0  *)
    | 0x8000f1d4 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f1d8 => 0x00000613 (* li a2,0  *)
    | 0x8000f1dc => 0xfff00593 (* li a1,-1  *)
    | 0x8000f1e0 => 0x00000513 (* li a0,0  *)
    | 0x8000f1e4 => 0x95cf30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f1e8 => 0x00000913 (* li s2,0  *)
    | 0x8000f1ec => 0x00100993 (* li s3,1  *)
    | 0x8000f1f0 => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x8000f1f4 => 0xfff00a13 (* li s4,-1  *)
    | 0x8000f1f8 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f1fc => 0x00000713 (* li a4,0  *)
    | 0x8000f200 => 0x00100693 (* li a3,1  *)
    | 0x8000f204 => 0x00098613 (* mv a2,s3  *)
    | 0x8000f208 => 0x00000593 (* li a1,0  *)
    | 0x8000f20c => 0xab8f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f210 => 0x00000713 (* li a4,0  *)
    | 0x8000f214 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f218 => 0x00000613 (* li a2,0  *)
    | 0x8000f21c => 0x00000593 (* li a1,0  *)
    | 0x8000f220 => 0x00000513 (* li a0,0  *)
    | 0x8000f224 => 0x91cf30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f228 => 0x00100793 (* li a5,1  *)
    | 0x8000f22c => 0x00f50863 (* beq a0,a5,8000f23c <prvNotifiedTask+0x450>  *)
    | 0x8000f230 => 0x12500593 (* li a1,293  *)
    | 0x8000f234 => 0x34ca8513 (* add a0,s5,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f238 => 0x058030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f23c => 0x00812783 (* lw a5,8(sp)  *)
    | 0x8000f240 => 0x00190913 (* add s2,s2,1  *)
    | 0x8000f244 => 0x00199993 (* sll s3,s3,0x1  *)
    | 0x8000f248 => 0xfb4798e3 (* bne a5,s4,8000f1f8 <prvNotifiedTask+0x40c>  *)
    | 0x8000f24c => 0x02000793 (* li a5,32  *)
    | 0x8000f250 => 0x00f90a63 (* beq s2,a5,8000f264 <prvNotifiedTask+0x478>  *)
    | 0x8000f254 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f258 => 0x13000593 (* li a1,304  *)
    | 0x8000f25c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f260 => 0x030030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f264 => 0x06400713 (* li a4,100  *)
    | 0x8000f268 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f26c => 0x00200613 (* li a2,2  *)
    | 0x8000f270 => 0x00100593 (* li a1,1  *)
    | 0x8000f274 => 0x00000513 (* li a0,0  *)
    | 0x8000f278 => 0x8c8f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f27c => 0x00050a63 (* beqz a0,8000f290 <prvNotifiedTask+0x4a4>  *)
    | 0x8000f280 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f284 => 0x13c00593 (* li a1,316  *)
    | 0x8000f288 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f28c => 0x004030ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f290 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f294 => 0x00000713 (* li a4,0  *)
    | 0x8000f298 => 0x00000693 (* li a3,0  *)
    | 0x8000f29c => 0xfff00613 (* li a2,-1  *)
    | 0x8000f2a0 => 0x00000593 (* li a1,0  *)
    | 0x8000f2a4 => 0xa20f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f2a8 => 0x00000713 (* li a4,0  *)
    | 0x8000f2ac => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f2b0 => 0x00000613 (* li a2,0  *)
    | 0x8000f2b4 => 0x00000593 (* li a1,0  *)
    | 0x8000f2b8 => 0x00000513 (* li a0,0  *)
    | 0x8000f2bc => 0x884f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f2c0 => 0x00100793 (* li a5,1  *)
    | 0x8000f2c4 => 0x00f50a63 (* beq a0,a5,8000f2d8 <prvNotifiedTask+0x4ec>  *)
    | 0x8000f2c8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f2cc => 0x14700593 (* li a1,327  *)
    | 0x8000f2d0 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f2d4 => 0x7bd020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f2d8 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000f2dc => 0xffe00793 (* li a5,-2  *)
    | 0x8000f2e0 => 0x00f70a63 (* beq a4,a5,8000f2f4 <prvNotifiedTask+0x508>  *)
    | 0x8000f2e4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f2e8 => 0x14800593 (* li a1,328  *)
    | 0x8000f2ec => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f2f0 => 0x7a1020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f2f4 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f2f8 => 0x00000713 (* li a4,0  *)
    | 0x8000f2fc => 0x00000693 (* li a3,0  *)
    | 0x8000f300 => 0x00000613 (* li a2,0  *)
    | 0x8000f304 => 0x00000593 (* li a1,0  *)
    | 0x8000f308 => 0x9bcf30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f30c => 0x00000713 (* li a4,0  *)
    | 0x8000f310 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f314 => 0x00200613 (* li a2,2  *)
    | 0x8000f318 => 0x00000593 (* li a1,0  *)
    | 0x8000f31c => 0x00000513 (* li a0,0  *)
    | 0x8000f320 => 0x820f30ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f324 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000f328 => 0xffe00793 (* li a5,-2  *)
    | 0x8000f32c => 0x00f70a63 (* beq a4,a5,8000f340 <prvNotifiedTask+0x554>  *)
    | 0x8000f330 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f334 => 0x15600593 (* li a1,342  *)
    | 0x8000f338 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f33c => 0x755020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f340 => 0x00000713 (* li a4,0  *)
    | 0x8000f344 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f348 => 0x00000613 (* li a2,0  *)
    | 0x8000f34c => 0x00000593 (* li a1,0  *)
    | 0x8000f350 => 0x00000513 (* li a0,0  *)
    | 0x8000f354 => 0xfedf20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f358 => 0x00050a63 (* beqz a0,8000f36c <prvNotifiedTask+0x580>  *)
    | 0x8000f35c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f360 => 0x15c00593 (* li a1,348  *)
    | 0x8000f364 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f368 => 0x729020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f36c => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000f370 => 0xffc00793 (* li a5,-4  *)
    | 0x8000f374 => 0x00f70a63 (* beq a4,a5,8000f388 <prvNotifiedTask+0x59c>  *)
    | 0x8000f378 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f37c => 0x15d00593 (* li a1,349  *)
    | 0x8000f380 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f384 => 0x70d020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f388 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f38c => 0x00c10713 (* add a4,sp,12  *)
    | 0x8000f390 => 0x00100693 (* li a3,1  *)
    | 0x8000f394 => 0x00000613 (* li a2,0  *)
    | 0x8000f398 => 0x00000593 (* li a1,0  *)
    | 0x8000f39c => 0x928f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f3a0 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x8000f3a4 => 0xffc00793 (* li a5,-4  *)
    | 0x8000f3a8 => 0x00f70a63 (* beq a4,a5,8000f3bc <prvNotifiedTask+0x5d0>  *)
    | 0x8000f3ac => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f3b0 => 0x16500593 (* li a1,357  *)
    | 0x8000f3b4 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f3b8 => 0x6d9020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f3bc => 0x00000713 (* li a4,0  *)
    | 0x8000f3c0 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f3c4 => 0xfff00613 (* li a2,-1  *)
    | 0x8000f3c8 => 0x00000593 (* li a1,0  *)
    | 0x8000f3cc => 0x00000513 (* li a0,0  *)
    | 0x8000f3d0 => 0xf71f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f3d4 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f3d8 => 0x00c10713 (* add a4,sp,12  *)
    | 0x8000f3dc => 0x00100693 (* li a3,1  *)
    | 0x8000f3e0 => 0x00000613 (* li a2,0  *)
    | 0x8000f3e4 => 0x00000593 (* li a1,0  *)
    | 0x8000f3e8 => 0x8dcf30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f3ec => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000f3f0 => 0x00078a63 (* beqz a5,8000f404 <prvNotifiedTask+0x618>  *)
    | 0x8000f3f4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f3f8 => 0x16a00593 (* li a1,362  *)
    | 0x8000f3fc => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f400 => 0x691020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f404 => 0x00700993 (* li s3,7  *)
    | 0x8000f408 => 0x00100913 (* li s2,1  *)
    | 0x8000f40c => 0x80014a37 (* lui s4,0x80014  *)
    | 0x8000f410 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f414 => 0x00c10713 (* add a4,sp,12  *)
    | 0x8000f418 => 0x00100693 (* li a3,1  *)
    | 0x8000f41c => 0x00090613 (* mv a2,s2  *)
    | 0x8000f420 => 0x00000593 (* li a1,0  *)
    | 0x8000f424 => 0x8a0f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f428 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000f42c => 0x00978863 (* beq a5,s1,8000f43c <prvNotifiedTask+0x650>  *)
    | 0x8000f430 => 0x17400593 (* li a1,372  *)
    | 0x8000f434 => 0x34ca0513 (* add a0,s4,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f438 => 0x659020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f43c => 0xfff98993 (* add s3,s3,-1  *)
    | 0x8000f440 => 0x0124e4b3 (* or s1,s1,s2  *)
    | 0x8000f444 => 0x00191913 (* sll s2,s2,0x1  *)
    | 0x8000f448 => 0xfc0994e3 (* bnez s3,8000f410 <prvNotifiedTask+0x624>  *)
    | 0x8000f44c => 0xfff00593 (* li a1,-1  *)
    | 0x8000f450 => 0x00000713 (* li a4,0  *)
    | 0x8000f454 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f458 => 0x00000613 (* li a2,0  *)
    | 0x8000f45c => 0x00000513 (* li a0,0  *)
    | 0x8000f460 => 0xee1f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f464 => 0x00000593 (* li a1,0  *)
    | 0x8000f468 => 0x00000513 (* li a0,0  *)
    | 0x8000f46c => 0xe3cf30ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000f470 => 0x00050a63 (* beqz a0,8000f484 <prvNotifiedTask+0x698>  *)
    | 0x8000f474 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f478 => 0x17e00593 (* li a1,382  *)
    | 0x8000f47c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f480 => 0x611020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f484 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f488 => 0x00018637 (* lui a2,0x18  *)
    | 0x8000f48c => 0x00c10713 (* add a4,sp,12  *)
    | 0x8000f490 => 0x00400693 (* li a3,4  *)
    | 0x8000f494 => 0x6a160613 (* add a2,a2,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000f498 => 0x00000593 (* li a1,0  *)
    | 0x8000f49c => 0x828f30ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f4a0 => 0x00000593 (* li a1,0  *)
    | 0x8000f4a4 => 0x00000513 (* li a0,0  *)
    | 0x8000f4a8 => 0xe00f30ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000f4ac => 0x00100793 (* li a5,1  *)
    | 0x8000f4b0 => 0x00f50a63 (* beq a0,a5,8000f4c4 <prvNotifiedTask+0x6d8>  *)
    | 0x8000f4b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f4b8 => 0x18600593 (* li a1,390  *)
    | 0x8000f4bc => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f4c0 => 0x5d1020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f4c4 => 0x00000593 (* li a1,0  *)
    | 0x8000f4c8 => 0x00000513 (* li a0,0  *)
    | 0x8000f4cc => 0xddcf30ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000f4d0 => 0x00050a63 (* beqz a0,8000f4e4 <prvNotifiedTask+0x6f8>  *)
    | 0x8000f4d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f4d8 => 0x18700593 (* li a1,391  *)
    | 0x8000f4dc => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f4e0 => 0x5b1020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f4e4 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f4e8 => 0x00000713 (* li a4,0  *)
    | 0x8000f4ec => 0x00100693 (* li a3,1  *)
    | 0x8000f4f0 => 0xfff00613 (* li a2,-1  *)
    | 0x8000f4f4 => 0x00000593 (* li a1,0  *)
    | 0x8000f4f8 => 0xfcdf20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f4fc => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f500 => 0xff000637 (* lui a2,0xff000  *)
    | 0x8000f504 => 0x00000593 (* li a1,0  *)
    | 0x8000f508 => 0xe20f30ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000f50c => 0xfff00793 (* li a5,-1  *)
    | 0x8000f510 => 0x00f50a63 (* beq a0,a5,8000f524 <prvNotifiedTask+0x738>  *)
    | 0x8000f514 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f518 => 0x19400593 (* li a1,404  *)
    | 0x8000f51c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f520 => 0x571020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f524 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f528 => 0x0ff00613 (* li a2,255  *)
    | 0x8000f52c => 0x00000593 (* li a1,0  *)
    | 0x8000f530 => 0xdf8f30ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000f534 => 0x010007b7 (* lui a5,0x1000  *)
    | 0x8000f538 => 0xfff78793 (* add a5,a5,-1 # ffffff <__stack_size+0xfffea1>  *)
    | 0x8000f53c => 0x00f50a63 (* beq a0,a5,8000f550 <prvNotifiedTask+0x764>  *)
    | 0x8000f540 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f544 => 0x19800593 (* li a1,408  *)
    | 0x8000f548 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f54c => 0x545020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f550 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f554 => 0xfff00613 (* li a2,-1  *)
    | 0x8000f558 => 0x00000593 (* li a1,0  *)
    | 0x8000f55c => 0xdccf30ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000f560 => 0x010007b7 (* lui a5,0x1000  *)
    | 0x8000f564 => 0xf0078793 (* add a5,a5,-256 # ffff00 <__stack_size+0xfffda2>  *)
    | 0x8000f568 => 0x00f50a63 (* beq a0,a5,8000f57c <prvNotifiedTask+0x790>  *)
    | 0x8000f56c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f570 => 0x19c00593 (* li a1,412  *)
    | 0x8000f574 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f578 => 0x519020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f57c => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f580 => 0xfff00613 (* li a2,-1  *)
    | 0x8000f584 => 0x00000593 (* li a1,0  *)
    | 0x8000f588 => 0xda0f30ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000f58c => 0x00050a63 (* beqz a0,8000f5a0 <prvNotifiedTask+0x7b4>  *)
    | 0x8000f590 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f594 => 0x19f00593 (* li a1,415  *)
    | 0x8000f598 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f59c => 0x4f5020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f5a0 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f5a4 => 0x00000613 (* li a2,0  *)
    | 0x8000f5a8 => 0x00000593 (* li a1,0  *)
    | 0x8000f5ac => 0xd7cf30ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000f5b0 => 0x00050a63 (* beqz a0,8000f5c4 <prvNotifiedTask+0x7d8>  *)
    | 0x8000f5b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f5b8 => 0x1a000593 (* li a1,416  *)
    | 0x8000f5bc => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f5c0 => 0x4d1020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f5c4 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f5c8 => 0xfff00613 (* li a2,-1  *)
    | 0x8000f5cc => 0x00000593 (* li a1,0  *)
    | 0x8000f5d0 => 0xd58f30ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000f5d4 => 0x00050a63 (* beqz a0,8000f5e8 <prvNotifiedTask+0x7fc>  *)
    | 0x8000f5d8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f5dc => 0x1a100593 (* li a1,417  *)
    | 0x8000f5e0 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f5e4 => 0x4ad020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f5e8 => 0x00000593 (* li a1,0  *)
    | 0x8000f5ec => 0x00000513 (* li a0,0  *)
    | 0x8000f5f0 => 0xcb8f30ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000f5f4 => 0x00100793 (* li a5,1  *)
    | 0x8000f5f8 => 0x00f50a63 (* beq a0,a5,8000f60c <prvNotifiedTask+0x820>  *)
    | 0x8000f5fc => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f600 => 0x1a500593 (* li a1,421  *)
    | 0x8000f604 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f608 => 0x489020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f60c => 0x00000593 (* li a1,0  *)
    | 0x8000f610 => 0x00000513 (* li a0,0  *)
    | 0x8000f614 => 0xc94f30ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000f618 => 0x00050a63 (* beqz a0,8000f62c <prvNotifiedTask+0x840>  *)
    | 0x8000f61c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f620 => 0x1a600593 (* li a1,422  *)
    | 0x8000f624 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f628 => 0x469020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f62c => 0x80010737 (* lui a4,0x80010  *)
    | 0x8000f630 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f634 => 0x8e070713 (* add a4,a4,-1824 # 8000f8e0 <prvSuspendedTaskTimerTestCallback>  *)
    | 0x8000f638 => 0x00000693 (* li a3,0  *)
    | 0x8000f63c => 0x00000613 (* li a2,0  *)
    | 0x8000f640 => 0x03200593 (* li a1,50  *)
    | 0x8000f644 => 0x37c50513 (* add a0,a0,892 # 8001437c <_etext+0x7ac>  *)
    | 0x8000f648 => 0xc5cf50ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x8000f64c => 0x00050493 (* mv s1,a0  *)
    | 0x8000f650 => 0x00051a63 (* bnez a0,8000f664 <prvNotifiedTask+0x878>  *)
    | 0x8000f654 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f658 => 0x1ad00593 (* li a1,429  *)
    | 0x8000f65c => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f660 => 0x431020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f664 => 0xb801a783 (* lw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f668 => 0x00000713 (* li a4,0  *)
    | 0x8000f66c => 0x00000693 (* li a3,0  *)
    | 0x8000f670 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000f674 => 0x00000613 (* li a2,0  *)
    | 0x8000f678 => 0xfff00593 (* li a1,-1  *)
    | 0x8000f67c => 0x00000513 (* li a0,0  *)
    | 0x8000f680 => 0xb8f1a023 (* sw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f684 => 0xcbdf20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f688 => 0x00800593 (* li a1,8  *)
    | 0x8000f68c => 0x00000513 (* li a0,0  *)
    | 0x8000f690 => 0xc80f10ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000f694 => 0x00012423 (* sw zero,8(sp)  *)
    | 0x8000f698 => 0xfdcf10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000f69c => 0x00050613 (* mv a2,a0  *)
    | 0x8000f6a0 => 0xfff00713 (* li a4,-1  *)
    | 0x8000f6a4 => 0x00000693 (* li a3,0  *)
    | 0x8000f6a8 => 0x00100593 (* li a1,1  *)
    | 0x8000f6ac => 0x00048513 (* mv a0,s1  *)
    | 0x8000f6b0 => 0xd88f50ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000f6b4 => 0xfff00713 (* li a4,-1  *)
    | 0x8000f6b8 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f6bc => 0x00000613 (* li a2,0  *)
    | 0x8000f6c0 => 0x00000593 (* li a1,0  *)
    | 0x8000f6c4 => 0x00000513 (* li a0,0  *)
    | 0x8000f6c8 => 0xc79f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f6cc => 0x00050a63 (* beqz a0,8000f6e0 <prvNotifiedTask+0x8f4>  *)
    | 0x8000f6d0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f6d4 => 0x1c200593 (* li a1,450  *)
    | 0x8000f6d8 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f6dc => 0x3b5020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f6e0 => 0x00812783 (* lw a5,8(sp)  *)
    | 0x8000f6e4 => 0x00078a63 (* beqz a5,8000f6f8 <prvNotifiedTask+0x90c>  *)
    | 0x8000f6e8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f6ec => 0x1c300593 (* li a1,451  *)
    | 0x8000f6f0 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f6f4 => 0x39d020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f6f8 => 0xb801a783 (* lw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f6fc => 0x00178793 (* add a5,a5,1  *)
    | 0x8000f700 => 0xb8f1a023 (* sw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f704 => 0xf70f10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000f708 => 0x00050613 (* mv a2,a0  *)
    | 0x8000f70c => 0xfff00713 (* li a4,-1  *)
    | 0x8000f710 => 0x00000693 (* li a3,0  *)
    | 0x8000f714 => 0x00100593 (* li a1,1  *)
    | 0x8000f718 => 0x00048513 (* mv a0,s1  *)
    | 0x8000f71c => 0xd1cf50ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000f720 => 0xfff00713 (* li a4,-1  *)
    | 0x8000f724 => 0x00810693 (* add a3,sp,8  *)
    | 0x8000f728 => 0x00000613 (* li a2,0  *)
    | 0x8000f72c => 0x00000593 (* li a1,0  *)
    | 0x8000f730 => 0x00000513 (* li a0,0  *)
    | 0x8000f734 => 0xc0df20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f738 => 0x00100793 (* li a5,1  *)
    | 0x8000f73c => 0x00f50a63 (* beq a0,a5,8000f750 <prvNotifiedTask+0x964>  *)
    | 0x8000f740 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f744 => 0x1d100593 (* li a1,465  *)
    | 0x8000f748 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f74c => 0x345020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f750 => 0x00812783 (* lw a5,8(sp)  *)
    | 0x8000f754 => 0x00079a63 (* bnez a5,8000f768 <prvNotifiedTask+0x97c>  *)
    | 0x8000f758 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f75c => 0x1d300593 (* li a1,467  *)
    | 0x8000f760 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f764 => 0x32d020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f768 => 0x00000593 (* li a1,0  *)
    | 0x8000f76c => 0x00000513 (* li a0,0  *)
    | 0x8000f770 => 0xba0f10ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000f774 => 0xfff00713 (* li a4,-1  *)
    | 0x8000f778 => 0x00000693 (* li a3,0  *)
    | 0x8000f77c => 0x00000613 (* li a2,0  *)
    | 0x8000f780 => 0x00500593 (* li a1,5  *)
    | 0x8000f784 => 0x00048513 (* mv a0,s1  *)
    | 0x8000f788 => 0xcb0f50ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000f78c => 0xb801a783 (* lw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f790 => 0x00000713 (* li a4,0  *)
    | 0x8000f794 => 0x00000693 (* li a3,0  *)
    | 0x8000f798 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000f79c => 0x00000613 (* li a2,0  *)
    | 0x8000f7a0 => 0xfff00593 (* li a1,-1  *)
    | 0x8000f7a4 => 0x00000513 (* li a0,0  *)
    | 0x8000f7a8 => 0xb8f1a023 (* sw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f7ac => 0xb95f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000f7b0 => 0x8000f737 (* lui a4,0x8000f  *)
    | 0x8000f7b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f7b8 => 0xda070713 (* add a4,a4,-608 # 8000eda0 <prvNotifyingTimer>  *)
    | 0x8000f7bc => 0x00000693 (* li a3,0  *)
    | 0x8000f7c0 => 0x00000613 (* li a2,0  *)
    | 0x8000f7c4 => 0x05a00593 (* li a1,90  *)
    | 0x8000f7c8 => 0x38c50513 (* add a0,a0,908 # 8001438c <_etext+0x7bc>  *)
    | 0x8000f7cc => 0xad8f50ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x8000f7d0 => 0xb6a1a823 (* sw a0,-1168(gp) # 80080370 <xTimer>  *)
    | 0x8000f7d4 => 0x05a00a93 (* li s5,90  *)
    | 0x8000f7d8 => 0x00a00b13 (* li s6,10  *)
    | 0x8000f7dc => 0x03200b93 (* li s7,50  *)
    | 0x8000f7e0 => 0xd9cff0ef (* jal 8000ed7c <prvRand>  *)
    | 0x8000f7e4 => 0x03557633 (* remu a2,a0,s5  *)
    | 0x8000f7e8 => 0x01667463 (* bgeu a2,s6,8000f7f0 <prvNotifiedTask+0xa04>  *)
    | 0x8000f7ec => 0x00a00613 (* li a2,10  *)
    | 0x8000f7f0 => 0xb701a503 (* lw a0,-1168(gp) # 80080370 <xTimer>  *)
    | 0x8000f7f4 => 0xfff00713 (* li a4,-1  *)
    | 0x8000f7f8 => 0x00000693 (* li a3,0  *)
    | 0x8000f7fc => 0x00400593 (* li a1,4  *)
    | 0x8000f800 => 0xc38f50ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8000f804 => 0xd78ff0ef (* jal 8000ed7c <prvRand>  *)
    | 0x8000f808 => 0x035579b3 (* remu s3,a0,s5  *)
    | 0x8000f80c => 0x0169f463 (* bgeu s3,s6,8000f814 <prvNotifiedTask+0xa28>  *)
    | 0x8000f810 => 0x00a00993 (* li s3,10  *)
    | 0x8000f814 => 0x00098613 (* mv a2,s3  *)
    | 0x8000f818 => 0x00000593 (* li a1,0  *)
    | 0x8000f81c => 0x00000513 (* li a0,0  *)
    | 0x8000f820 => 0x9f5f20ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x8000f824 => 0x00050863 (* beqz a0,8000f834 <prvNotifiedTask+0xa48>  *)
    | 0x8000f828 => 0xb781a783 (* lw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f82c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000f830 => 0xb6f1ac23 (* sw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f834 => 0x00000613 (* li a2,0  *)
    | 0x8000f838 => 0x00000593 (* li a1,0  *)
    | 0x8000f83c => 0x00000513 (* li a0,0  *)
    | 0x8000f840 => 0x9d5f20ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x8000f844 => 0x00050863 (* beqz a0,8000f854 <prvNotifiedTask+0xa68>  *)
    | 0x8000f848 => 0xb781a783 (* lw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f84c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000f850 => 0xb6f1ac23 (* sw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f854 => 0x00098613 (* mv a2,s3  *)
    | 0x8000f858 => 0x00100593 (* li a1,1  *)
    | 0x8000f85c => 0x00000513 (* li a0,0  *)
    | 0x8000f860 => 0x9b5f20ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x8000f864 => 0xb781a783 (* lw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f868 => 0x00a787b3 (* add a5,a5,a0  *)
    | 0x8000f86c => 0xb6f1ac23 (* sw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f870 => 0xb801a783 (* lw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f874 => 0x0377f7b3 (* remu a5,a5,s7  *)
    | 0x8000f878 => 0x04079463 (* bnez a5,8000f8c0 <prvNotifiedTask+0xad4>  *)
    | 0x8000f87c => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f880 => 0x00800593 (* li a1,8  *)
    | 0x8000f884 => 0xa8cf10ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000f888 => 0x00100593 (* li a1,1  *)
    | 0x8000f88c => 0xfff00613 (* li a2,-1  *)
    | 0x8000f890 => 0x00000513 (* li a0,0  *)
    | 0x8000f894 => 0x981f20ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x8000f898 => 0xb781a783 (* lw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f89c => 0x00000593 (* li a1,0  *)
    | 0x8000f8a0 => 0x00a787b3 (* add a5,a5,a0  *)
    | 0x8000f8a4 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f8a8 => 0xb6f1ac23 (* sw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f8ac => 0xa64f10ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x8000f8b0 => 0xb801a783 (* lw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f8b4 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000f8b8 => 0xb8f1a023 (* sw a5,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000f8bc => 0xf25ff06f (* j 8000f7e0 <prvNotifiedTask+0x9f4>  *)
    | 0x8000f8c0 => 0xfff00613 (* li a2,-1  *)
    | 0x8000f8c4 => 0x00100593 (* li a1,1  *)
    | 0x8000f8c8 => 0x00000513 (* li a0,0  *)
    | 0x8000f8cc => 0x949f20ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x8000f8d0 => 0xb781a783 (* lw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f8d4 => 0x00a787b3 (* add a5,a5,a0  *)
    | 0x8000f8d8 => 0xb6f1ac23 (* sw a5,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000f8dc => 0xfd5ff06f (* j 8000f8b0 <prvNotifiedTask+0xac4>  *)
    (* <prvSuspendedTaskTimerTestCallback> *)
    | 0x8000f8e0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000f8e4 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x8000f8e8 => 0xb681a783 (* lw a5,-1176(gp) # 80080368 <ulCallCount.3>  *)
    | 0x8000f8ec => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000f8f0 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000f8f4 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f8f8 => 0x04079263 (* bnez a5,8000f93c <prvSuspendedTaskTimerTestCallback+0x5c>  *)
    | 0x8000f8fc => 0xdf1f10ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000f900 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f904 => 0x920f10ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000f908 => 0x00300793 (* li a5,3  *)
    | 0x8000f90c => 0x1f100593 (* li a1,497  *)
    | 0x8000f910 => 0x04f51e63 (* bne a0,a5,8000f96c <prvSuspendedTaskTimerTestCallback+0x8c>  *)
    | 0x8000f914 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f918 => 0xb84f10ef (* jal 80000c9c <vTaskResume>  *)
    | 0x8000f91c => 0xb681a783 (* lw a5,-1176(gp) # 80080368 <ulCallCount.3>  *)
    | 0x8000f920 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000f924 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000f928 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000f92c => 0xb6f1a423 (* sw a5,-1176(gp) # 80080368 <ulCallCount.3>  *)
    | 0x8000f930 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x8000f934 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000f938 => 0x00008067 (* ret  *)
    | 0x8000f93c => 0xdb1f10ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x8000f940 => 0xb681a603 (* lw a2,-1176(gp) # 80080368 <ulCallCount.3>  *)
    | 0x8000f944 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f948 => 0x00000713 (* li a4,0  *)
    | 0x8000f94c => 0x00300693 (* li a3,3  *)
    | 0x8000f950 => 0x00000593 (* li a1,0  *)
    | 0x8000f954 => 0xb71f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000f958 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f95c => 0x8c8f10ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x8000f960 => 0x00300793 (* li a5,3  *)
    | 0x8000f964 => 0xfaf508e3 (* beq a0,a5,8000f914 <prvSuspendedTaskTimerTestCallback+0x34>  *)
    | 0x8000f968 => 0x1fe00593 (* li a1,510  *)
    | 0x8000f96c => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f970 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f974 => 0x11d020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f978 => 0xf9dff06f (* j 8000f914 <prvSuspendedTaskTimerTestCallback+0x34>  *)
    (* <vStartTaskNotifyTask> *)
    | 0x8000f97c => 0x800145b7 (* lui a1,0x80014  *)
    | 0x8000f980 => 0x8000f537 (* lui a0,0x8000f  *)
    | 0x8000f984 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000f988 => 0xb7c18793 (* add a5,gp,-1156 # 8008037c <xTaskToNotify>  *)
    | 0x8000f98c => 0x00000713 (* li a4,0  *)
    | 0x8000f990 => 0x00000693 (* li a3,0  *)
    | 0x8000f994 => 0x07800613 (* li a2,120  *)
    | 0x8000f998 => 0x39858593 (* add a1,a1,920 # 80014398 <_etext+0x7c8>  *)
    | 0x8000f99c => 0xdec50513 (* add a0,a0,-532 # 8000edec <prvNotifiedTask>  *)
    | 0x8000f9a0 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000f9a4 => 0xe59f00ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8000f9a8 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000f9ac => 0x8000f7b7 (* lui a5,0x8000f  *)
    | 0x8000f9b0 => 0xd7c78793 (* add a5,a5,-644 # 8000ed7c <prvRand>  *)
    | 0x8000f9b4 => 0xb6f1a623 (* sw a5,-1172(gp) # 8008036c <uxNextRand>  *)
    | 0x8000f9b8 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000f9bc => 0x00008067 (* ret  *)
    (* <xNotifyTaskFromISR> *)
    | 0x8000f9c0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8000f9c4 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x8000f9c8 => 0xb7c1a783 (* lw a5,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000f9cc => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8000f9d0 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x8000f9d4 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8000f9d8 => 0x00079a63 (* bnez a5,8000f9ec <xNotifyTaskFromISR+0x2c>  *)
    | 0x8000f9dc => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000f9e0 => 0x27a00593 (* li a1,634  *)
    | 0x8000f9e4 => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000f9e8 => 0x0a9020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000f9ec => 0xb701a783 (* lw a5,-1168(gp) # 80080370 <xTimer>  *)
    | 0x8000f9f0 => 0x00078c63 (* beqz a5,8000fa08 <xNotifyTaskFromISR+0x48>  *)
    | 0x8000f9f4 => 0xb641a783 (* lw a5,-1180(gp) # 80080364 <xCallCount.2>  *)
    | 0x8000f9f8 => 0x03100693 (* li a3,49  *)
    | 0x8000f9fc => 0x00178793 (* add a5,a5,1  *)
    | 0x8000fa00 => 0x02f6c063 (* blt a3,a5,8000fa20 <xNotifyTaskFromISR+0x60>  *)
    | 0x8000fa04 => 0xb6f1a223 (* sw a5,-1180(gp) # 80080364 <xCallCount.2>  *)
    | 0x8000fa08 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x8000fa0c => 0x01812403 (* lw s0,24(sp)  *)
    | 0x8000fa10 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x8000fa14 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x8000fa18 => 0x02010113 (* add sp,sp,32  *)
    | 0x8000fa1c => 0x00008067 (* ret  *)
    | 0x8000fa20 => 0xb601a783 (* lw a5,-1184(gp) # 80080360 <xAPIToUse.1>  *)
    | 0x8000fa24 => 0xb601a223 (* sw zero,-1180(gp) # 80080364 <xCallCount.2>  *)
    | 0x8000fa28 => 0x00100713 (* li a4,1  *)
    | 0x8000fa2c => 0x02e78e63 (* beq a5,a4,8000fa68 <xNotifyTaskFromISR+0xa8>  *)
    | 0x8000fa30 => 0x00200713 (* li a4,2  *)
    | 0x8000fa34 => 0x04e78a63 (* beq a5,a4,8000fa88 <xNotifyTaskFromISR+0xc8>  *)
    | 0x8000fa38 => 0x02079063 (* bnez a5,8000fa58 <xNotifyTaskFromISR+0x98>  *)
    | 0x8000fa3c => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000fa40 => 0x00000613 (* li a2,0  *)
    | 0x8000fa44 => 0x00000593 (* li a1,0  *)
    | 0x8000fa48 => 0xeddf20ef (* jal 80002924 <vTaskGenericNotifyGiveFromISR>  *)
    | 0x8000fa4c => 0xb601a783 (* lw a5,-1184(gp) # 80080360 <xAPIToUse.1>  *)
    | 0x8000fa50 => 0x00178793 (* add a5,a5,1  *)
    | 0x8000fa54 => 0xb6f1a023 (* sw a5,-1184(gp) # 80080360 <xAPIToUse.1>  *)
    | 0x8000fa58 => 0xb741a783 (* lw a5,-1164(gp) # 80080374 <ulTimerNotificationsSent>  *)
    | 0x8000fa5c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000fa60 => 0xb6f1aa23 (* sw a5,-1164(gp) # 80080374 <ulTimerNotificationsSent>  *)
    | 0x8000fa64 => 0xfa5ff06f (* j 8000fa08 <xNotifyTaskFromISR+0x48>  *)
    | 0x8000fa68 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000fa6c => 0x00000793 (* li a5,0  *)
    | 0x8000fa70 => 0x00000713 (* li a4,0  *)
    | 0x8000fa74 => 0x00200693 (* li a3,2  *)
    | 0x8000fa78 => 0x00000613 (* li a2,0  *)
    | 0x8000fa7c => 0x00000593 (* li a1,0  *)
    | 0x8000fa80 => 0xc69f20ef (* jal 800026e8 <xTaskGenericNotifyFromISR>  *)
    | 0x8000fa84 => 0xfc9ff06f (* j 8000fa4c <xNotifyTaskFromISR+0x8c>  *)
    | 0x8000fa88 => 0xb7c1a503 (* lw a0,-1156(gp) # 8008037c <xTaskToNotify>  *)
    | 0x8000fa8c => 0x00000793 (* li a5,0  *)
    | 0x8000fa90 => 0x0ff00913 (* li s2,255  *)
    | 0x8000fa94 => 0x00c10713 (* add a4,sp,12  *)
    | 0x8000fa98 => 0x00200693 (* li a3,2  *)
    | 0x8000fa9c => 0x00000613 (* li a2,0  *)
    | 0x8000faa0 => 0x00000593 (* li a1,0  *)
    | 0x8000faa4 => 0x01212623 (* sw s2,12(sp)  *)
    | 0x8000faa8 => 0xc41f20ef (* jal 800026e8 <xTaskGenericNotifyFromISR>  *)
    | 0x8000faac => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x8000fab0 => 0x01279a63 (* bne a5,s2,8000fac4 <xNotifyTaskFromISR+0x104>  *)
    | 0x8000fab4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8000fab8 => 0x29a00593 (* li a1,666  *)
    | 0x8000fabc => 0x34c50513 (* add a0,a0,844 # 8001434c <_etext+0x77c>  *)
    | 0x8000fac0 => 0x7d0020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fac4 => 0xb601a023 (* sw zero,-1184(gp) # 80080360 <xAPIToUse.1>  *)
    | 0x8000fac8 => 0xf91ff06f (* j 8000fa58 <xNotifyTaskFromISR+0x98>  *)
    (* <xAreTaskNotificationTasksStillRunning> *)
    | 0x8000facc => 0xb801a603 (* lw a2,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000fad0 => 0xb5c1a583 (* lw a1,-1188(gp) # 8008035c <ulLastNotifyCycleCount.0>  *)
    | 0x8000fad4 => 0x02c59663 (* bne a1,a2,8000fb00 <xAreTaskNotificationTasksStillRunning+0x34>  *)
    | 0x8000fad8 => 0x8201a823 (* sw zero,-2000(gp) # 80080030 <xErrorStatus>  *)
    | 0x8000fadc => 0xb741a783 (* lw a5,-1164(gp) # 80080374 <ulTimerNotificationsSent>  *)
    | 0x8000fae0 => 0xb781a683 (* lw a3,-1160(gp) # 80080378 <ulTimerNotificationsReceived>  *)
    | 0x8000fae4 => 0x00f6fa63 (* bgeu a3,a5,8000faf8 <xAreTaskNotificationTasksStillRunning+0x2c>  *)
    | 0x8000fae8 => 0x40d787b3 (* sub a5,a5,a3  *)
    | 0x8000faec => 0x00500693 (* li a3,5  *)
    | 0x8000faf0 => 0x00f6f463 (* bgeu a3,a5,8000faf8 <xAreTaskNotificationTasksStillRunning+0x2c>  *)
    | 0x8000faf4 => 0x8201a823 (* sw zero,-2000(gp) # 80080030 <xErrorStatus>  *)
    | 0x8000faf8 => 0x8301a503 (* lw a0,-2000(gp) # 80080030 <xErrorStatus>  *)
    | 0x8000fafc => 0x00008067 (* ret  *)
    | 0x8000fb00 => 0xb801a683 (* lw a3,-1152(gp) # 80080380 <ulNotifyCycleCount>  *)
    | 0x8000fb04 => 0xb4d1ae23 (* sw a3,-1188(gp) # 8008035c <ulLastNotifyCycleCount.0>  *)
    | 0x8000fb08 => 0xfd5ff06f (* j 8000fadc <xAreTaskNotificationTasksStillRunning+0x10>  *)
    (* <prvRand> *)
    | 0x8000fb0c => 0xba81a503 (* lw a0,-1112(gp) # 800803a8 <uxNextRand>  *)
    | 0x8000fb10 => 0x015a57b7 (* lui a5,0x15a5  *)
    | 0x8000fb14 => 0xe3578793 (* add a5,a5,-459 # 15a4e35 <__stack_size+0x15a4cd7>  *)
    | 0x8000fb18 => 0x02f50533 (* mul a0,a0,a5  *)
    | 0x8000fb1c => 0x00150513 (* add a0,a0,1  *)
    | 0x8000fb20 => 0xbaa1a423 (* sw a0,-1112(gp) # 800803a8 <uxNextRand>  *)
    | 0x8000fb24 => 0x00151513 (* sll a0,a0,0x1  *)
    | 0x8000fb28 => 0x01155513 (* srl a0,a0,0x11  *)
    | 0x8000fb2c => 0x00008067 (* ret  *)
    (* <prvNotifyingTimerCallback> *)
    | 0x8000fb30 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8000fb34 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8000fb38 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fb3c => 0xba01a583 (* lw a1,-1120(gp) # 800803a0 <uxIndexToNotify.8>  *)
    | 0x8000fb40 => 0x00000713 (* li a4,0  *)
    | 0x8000fb44 => 0x00200693 (* li a3,2  *)
    | 0x8000fb48 => 0x00000613 (* li a2,0  *)
    | 0x8000fb4c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000fb50 => 0x975f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fb54 => 0xba01a783 (* lw a5,-1120(gp) # 800803a0 <uxIndexToNotify.8>  *)
    | 0x8000fb58 => 0x00200713 (* li a4,2  *)
    | 0x8000fb5c => 0x00178793 (* add a5,a5,1  *)
    | 0x8000fb60 => 0x00f75463 (* bge a4,a5,8000fb68 <prvNotifyingTimerCallback+0x38>  *)
    | 0x8000fb64 => 0x00000793 (* li a5,0  *)
    | 0x8000fb68 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8000fb6c => 0xbaf1a023 (* sw a5,-1120(gp) # 800803a0 <uxIndexToNotify.8>  *)
    | 0x8000fb70 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x8000fb74 => 0x01010113 (* add sp,sp,16  *)
    | 0x8000fb78 => 0x00008067 (* ret  *)
    (* <prvNotifiedTask> *)
    | 0x8000fb7c => 0xfa010113 (* add sp,sp,-96  *)
    | 0x8000fb80 => 0x04812c23 (* sw s0,88(sp)  *)
    | 0x8000fb84 => 0x04912a23 (* sw s1,84(sp)  *)
    | 0x8000fb88 => 0x05212823 (* sw s2,80(sp)  *)
    | 0x8000fb8c => 0x05312623 (* sw s3,76(sp)  *)
    | 0x8000fb90 => 0x04112e23 (* sw ra,92(sp)  *)
    | 0x8000fb94 => 0x05412423 (* sw s4,72(sp)  *)
    | 0x8000fb98 => 0x05512223 (* sw s5,68(sp)  *)
    | 0x8000fb9c => 0x05612023 (* sw s6,64(sp)  *)
    | 0x8000fba0 => 0x03712e23 (* sw s7,60(sp)  *)
    | 0x8000fba4 => 0x03812c23 (* sw s8,56(sp)  *)
    | 0x8000fba8 => 0x03912a23 (* sw s9,52(sp)  *)
    | 0x8000fbac => 0x03a12823 (* sw s10,48(sp)  *)
    | 0x8000fbb0 => 0x03b12623 (* sw s11,44(sp)  *)
    | 0x8000fbb4 => 0x00100913 (* li s2,1  *)
    | 0x8000fbb8 => 0x80014437 (* lui s0,0x80014  *)
    | 0x8000fbbc => 0x00000a13 (* li s4,0  *)
    | 0x8000fbc0 => 0x00300b13 (* li s6,3  *)
    | 0x8000fbc4 => 0x00000a93 (* li s5,0  *)
    | 0x8000fbc8 => 0x015a0e63 (* beq s4,s5,8000fbe4 <prvNotifiedTask+0x68>  *)
    | 0x8000fbcc => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fbd0 => 0x00000713 (* li a4,0  *)
    | 0x8000fbd4 => 0x00000693 (* li a3,0  *)
    | 0x8000fbd8 => 0x00000613 (* li a2,0  *)
    | 0x8000fbdc => 0x000a8593 (* mv a1,s5  *)
    | 0x8000fbe0 => 0x8e5f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fbe4 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8000fbe8 => 0xff6a90e3 (* bne s5,s6,8000fbc8 <prvNotifiedTask+0x4c>  *)
    | 0x8000fbec => 0xa88f10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000fbf0 => 0x00050b93 (* mv s7,a0  *)
    | 0x8000fbf4 => 0x06400713 (* li a4,100  *)
    | 0x8000fbf8 => 0x01810693 (* add a3,sp,24  *)
    | 0x8000fbfc => 0x00000613 (* li a2,0  *)
    | 0x8000fc00 => 0xfff00593 (* li a1,-1  *)
    | 0x8000fc04 => 0x000a0513 (* mv a0,s4  *)
    | 0x8000fc08 => 0xf38f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000fc0c => 0x00050a93 (* mv s5,a0  *)
    | 0x8000fc10 => 0xa64f10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000fc14 => 0x41750533 (* sub a0,a0,s7  *)
    | 0x8000fc18 => 0x06300793 (* li a5,99  *)
    | 0x8000fc1c => 0x00a7e863 (* bltu a5,a0,8000fc2c <prvNotifiedTask+0xb0>  *)
    | 0x8000fc20 => 0x0e100593 (* li a1,225  *)
    | 0x8000fc24 => 0x3a440513 (* add a0,s0,932 # 800143a4 <_etext+0x7d4>  *)
    | 0x8000fc28 => 0x668020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fc2c => 0x000a8863 (* beqz s5,8000fc3c <prvNotifiedTask+0xc0>  *)
    | 0x8000fc30 => 0x0e200593 (* li a1,226  *)
    | 0x8000fc34 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fc38 => 0x658020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fc3c => 0x01812783 (* lw a5,24(sp)  *)
    | 0x8000fc40 => 0x00078863 (* beqz a5,8000fc50 <prvNotifiedTask+0xd4>  *)
    | 0x8000fc44 => 0x0e300593 (* li a1,227  *)
    | 0x8000fc48 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fc4c => 0x644020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fc50 => 0x00000a93 (* li s5,0  *)
    | 0x8000fc54 => 0x035a0063 (* beq s4,s5,8000fc74 <prvNotifiedTask+0xf8>  *)
    | 0x8000fc58 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fc5c => 0x000a8593 (* mv a1,s5  *)
    | 0x8000fc60 => 0xe49f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000fc64 => 0x01250863 (* beq a0,s2,8000fc74 <prvNotifiedTask+0xf8>  *)
    | 0x8000fc68 => 0x0f100593 (* li a1,241  *)
    | 0x8000fc6c => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fc70 => 0x620020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fc74 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8000fc78 => 0xfd6a9ee3 (* bne s5,s6,8000fc54 <prvNotifiedTask+0xd8>  *)
    | 0x8000fc7c => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000fc80 => 0xf55a12e3 (* bne s4,s5,8000fbc4 <prvNotifiedTask+0x48>  *)
    | 0x8000fc84 => 0x00018ab7 (* lui s5,0x18  *)
    | 0x8000fc88 => 0x00000a13 (* li s4,0  *)
    | 0x8000fc8c => 0x6a1a8a93 (* add s5,s5,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000fc90 => 0x06300c13 (* li s8,99  *)
    | 0x8000fc94 => 0x00300b93 (* li s7,3  *)
    | 0x8000fc98 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fc9c => 0x01c10713 (* add a4,sp,28  *)
    | 0x8000fca0 => 0x00400693 (* li a3,4  *)
    | 0x8000fca4 => 0x000a8613 (* mv a2,s5  *)
    | 0x8000fca8 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000fcac => 0x819f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fcb0 => 0x01250863 (* beq a0,s2,8000fcc0 <prvNotifiedTask+0x144>  *)
    | 0x8000fcb4 => 0x10200593 (* li a1,258  *)
    | 0x8000fcb8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fcbc => 0x5d4020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fcc0 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8000fcc4 => 0x00078863 (* beqz a5,8000fcd4 <prvNotifiedTask+0x158>  *)
    | 0x8000fcc8 => 0x10600593 (* li a1,262  *)
    | 0x8000fccc => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fcd0 => 0x5c0020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fcd4 => 0x9a0f10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000fcd8 => 0x00050c93 (* mv s9,a0  *)
    | 0x8000fcdc => 0x06400713 (* li a4,100  *)
    | 0x8000fce0 => 0x01810693 (* add a3,sp,24  *)
    | 0x8000fce4 => 0x00000613 (* li a2,0  *)
    | 0x8000fce8 => 0xfff00593 (* li a1,-1  *)
    | 0x8000fcec => 0x000a0513 (* mv a0,s4  *)
    | 0x8000fcf0 => 0xe50f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000fcf4 => 0x00050b13 (* mv s6,a0  *)
    | 0x8000fcf8 => 0x97cf10ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8000fcfc => 0x41950533 (* sub a0,a0,s9  *)
    | 0x8000fd00 => 0x00ac7863 (* bgeu s8,a0,8000fd10 <prvNotifiedTask+0x194>  *)
    | 0x8000fd04 => 0x11000593 (* li a1,272  *)
    | 0x8000fd08 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fd0c => 0x584020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fd10 => 0x012b0863 (* beq s6,s2,8000fd20 <prvNotifiedTask+0x1a4>  *)
    | 0x8000fd14 => 0x11400593 (* li a1,276  *)
    | 0x8000fd18 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fd1c => 0x574020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fd20 => 0x01812783 (* lw a5,24(sp)  *)
    | 0x8000fd24 => 0x01578863 (* beq a5,s5,8000fd34 <prvNotifiedTask+0x1b8>  *)
    | 0x8000fd28 => 0x11500593 (* li a1,277  *)
    | 0x8000fd2c => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fd30 => 0x560020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fd34 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000fd38 => 0xf77a10e3 (* bne s4,s7,8000fc98 <prvNotifiedTask+0x11c>  *)
    | 0x8000fd3c => 0x00018b37 (* lui s6,0x18  *)
    | 0x8000fd40 => 0x00001bb7 (* lui s7,0x1  *)
    | 0x8000fd44 => 0x00000a13 (* li s4,0  *)
    | 0x8000fd48 => 0x6a1b0b13 (* add s6,s6,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000fd4c => 0x5b3b8b93 (* add s7,s7,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x8000fd50 => 0x00000a93 (* li s5,0  *)
    | 0x8000fd54 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fd58 => 0x035a0463 (* beq s4,s5,8000fd80 <prvNotifiedTask+0x204>  *)
    | 0x8000fd5c => 0x00000713 (* li a4,0  *)
    | 0x8000fd60 => 0x00300693 (* li a3,3  *)
    | 0x8000fd64 => 0x000b0613 (* mv a2,s6  *)
    | 0x8000fd68 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000fd6c => 0xf58f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fd70 => 0x01250863 (* beq a0,s2,8000fd80 <prvNotifiedTask+0x204>  *)
    | 0x8000fd74 => 0x12500593 (* li a1,293  *)
    | 0x8000fd78 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fd7c => 0x514020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fd80 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8000fd84 => 0x00300793 (* li a5,3  *)
    | 0x8000fd88 => 0xfcfa96e3 (* bne s5,a5,8000fd54 <prvNotifiedTask+0x1d8>  *)
    | 0x8000fd8c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fd90 => 0x00000713 (* li a4,0  *)
    | 0x8000fd94 => 0x00400693 (* li a3,4  *)
    | 0x8000fd98 => 0x000b0613 (* mv a2,s6  *)
    | 0x8000fd9c => 0x000a0593 (* mv a1,s4  *)
    | 0x8000fda0 => 0xf24f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fda4 => 0x01250863 (* beq a0,s2,8000fdb4 <prvNotifiedTask+0x238>  *)
    | 0x8000fda8 => 0x13000593 (* li a1,304  *)
    | 0x8000fdac => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fdb0 => 0x4e0020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fdb4 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fdb8 => 0x00000713 (* li a4,0  *)
    | 0x8000fdbc => 0x00400693 (* li a3,4  *)
    | 0x8000fdc0 => 0x000b8613 (* mv a2,s7  *)
    | 0x8000fdc4 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000fdc8 => 0xefcf20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fdcc => 0x00050863 (* beqz a0,8000fddc <prvNotifiedTask+0x260>  *)
    | 0x8000fdd0 => 0x13400593 (* li a1,308  *)
    | 0x8000fdd4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fdd8 => 0x4b8020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fddc => 0x00000713 (* li a4,0  *)
    | 0x8000fde0 => 0x01810693 (* add a3,sp,24  *)
    | 0x8000fde4 => 0x00000613 (* li a2,0  *)
    | 0x8000fde8 => 0xfff00593 (* li a1,-1  *)
    | 0x8000fdec => 0x000a0513 (* mv a0,s4  *)
    | 0x8000fdf0 => 0xd50f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000fdf4 => 0x01250863 (* beq a0,s2,8000fe04 <prvNotifiedTask+0x288>  *)
    | 0x8000fdf8 => 0x13b00593 (* li a1,315  *)
    | 0x8000fdfc => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fe00 => 0x490020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fe04 => 0x01812783 (* lw a5,24(sp)  *)
    | 0x8000fe08 => 0x01678863 (* beq a5,s6,8000fe18 <prvNotifiedTask+0x29c>  *)
    | 0x8000fe0c => 0x13c00593 (* li a1,316  *)
    | 0x8000fe10 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fe14 => 0x47c020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fe18 => 0x00000a93 (* li s5,0  *)
    | 0x8000fe1c => 0x00300c13 (* li s8,3  *)
    | 0x8000fe20 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fe24 => 0x055a0063 (* beq s4,s5,8000fe64 <prvNotifiedTask+0x2e8>  *)
    | 0x8000fe28 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000fe2c => 0xc7df20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000fe30 => 0x01250863 (* beq a0,s2,8000fe40 <prvNotifiedTask+0x2c4>  *)
    | 0x8000fe34 => 0x14700593 (* li a1,327  *)
    | 0x8000fe38 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fe3c => 0x454020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fe40 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fe44 => 0xfff00613 (* li a2,-1  *)
    | 0x8000fe48 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000fe4c => 0xcddf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000fe50 => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x8000fe54 => 0x01650863 (* beq a0,s6,8000fe64 <prvNotifiedTask+0x2e8>  *)
    | 0x8000fe58 => 0x14e00593 (* li a1,334  *)
    | 0x8000fe5c => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fe60 => 0x430020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fe64 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8000fe68 => 0xfb8a9ce3 (* bne s5,s8,8000fe20 <prvNotifiedTask+0x2a4>  *)
    | 0x8000fe6c => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000fe70 => 0xef5a10e3 (* bne s4,s5,8000fd50 <prvNotifiedTask+0x1d4>  *)
    | 0x8000fe74 => 0x00018b37 (* lui s6,0x18  *)
    | 0x8000fe78 => 0x00001bb7 (* lui s7,0x1  *)
    | 0x8000fe7c => 0x00000a13 (* li s4,0  *)
    | 0x8000fe80 => 0x6a1b0b13 (* add s6,s6,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000fe84 => 0x5b3b8b93 (* add s7,s7,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x8000fe88 => 0x00000a93 (* li s5,0  *)
    | 0x8000fe8c => 0x015a0e63 (* beq s4,s5,8000fea8 <prvNotifiedTask+0x32c>  *)
    | 0x8000fe90 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fe94 => 0x00000713 (* li a4,0  *)
    | 0x8000fe98 => 0x00300693 (* li a3,3  *)
    | 0x8000fe9c => 0x000b0613 (* mv a2,s6  *)
    | 0x8000fea0 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000fea4 => 0xe20f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fea8 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8000feac => 0x00300793 (* li a5,3  *)
    | 0x8000feb0 => 0xfcfa9ee3 (* bne s5,a5,8000fe8c <prvNotifiedTask+0x310>  *)
    | 0x8000feb4 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000feb8 => 0x00000713 (* li a4,0  *)
    | 0x8000febc => 0x00300693 (* li a3,3  *)
    | 0x8000fec0 => 0x000b0613 (* mv a2,s6  *)
    | 0x8000fec4 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000fec8 => 0xdfcf20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fecc => 0x01250863 (* beq a0,s2,8000fedc <prvNotifiedTask+0x360>  *)
    | 0x8000fed0 => 0x16400593 (* li a1,356  *)
    | 0x8000fed4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fed8 => 0x3b8020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000fedc => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000fee0 => 0x00000713 (* li a4,0  *)
    | 0x8000fee4 => 0x00300693 (* li a3,3  *)
    | 0x8000fee8 => 0x000b8613 (* mv a2,s7  *)
    | 0x8000feec => 0x000a0593 (* mv a1,s4  *)
    | 0x8000fef0 => 0xdd4f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fef4 => 0x01250863 (* beq a0,s2,8000ff04 <prvNotifiedTask+0x388>  *)
    | 0x8000fef8 => 0x16700593 (* li a1,359  *)
    | 0x8000fefc => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000ff00 => 0x390020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ff04 => 0x00000713 (* li a4,0  *)
    | 0x8000ff08 => 0x01810693 (* add a3,sp,24  *)
    | 0x8000ff0c => 0xfff00613 (* li a2,-1  *)
    | 0x8000ff10 => 0x00000593 (* li a1,0  *)
    | 0x8000ff14 => 0x000a0513 (* mv a0,s4  *)
    | 0x8000ff18 => 0xc28f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8000ff1c => 0x01250863 (* beq a0,s2,8000ff2c <prvNotifiedTask+0x3b0>  *)
    | 0x8000ff20 => 0x16a00593 (* li a1,362  *)
    | 0x8000ff24 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000ff28 => 0x368020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ff2c => 0x01812783 (* lw a5,24(sp)  *)
    | 0x8000ff30 => 0x01778863 (* beq a5,s7,8000ff40 <prvNotifiedTask+0x3c4>  *)
    | 0x8000ff34 => 0x16c00593 (* li a1,364  *)
    | 0x8000ff38 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000ff3c => 0x354020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ff40 => 0x00000a93 (* li s5,0  *)
    | 0x8000ff44 => 0x00300c13 (* li s8,3  *)
    | 0x8000ff48 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000ff4c => 0x055a0063 (* beq s4,s5,8000ff8c <prvNotifiedTask+0x410>  *)
    | 0x8000ff50 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000ff54 => 0xb55f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8000ff58 => 0x01250863 (* beq a0,s2,8000ff68 <prvNotifiedTask+0x3ec>  *)
    | 0x8000ff5c => 0x17400593 (* li a1,372  *)
    | 0x8000ff60 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000ff64 => 0x32c020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ff68 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000ff6c => 0xfff00613 (* li a2,-1  *)
    | 0x8000ff70 => 0x000a8593 (* mv a1,s5  *)
    | 0x8000ff74 => 0xbb5f20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8000ff78 => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x8000ff7c => 0x01650863 (* beq a0,s6,8000ff8c <prvNotifiedTask+0x410>  *)
    | 0x8000ff80 => 0x17700593 (* li a1,375  *)
    | 0x8000ff84 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000ff88 => 0x308020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ff8c => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8000ff90 => 0xfb8a9ce3 (* bne s5,s8,8000ff48 <prvNotifiedTask+0x3cc>  *)
    | 0x8000ff94 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8000ff98 => 0xef5a18e3 (* bne s4,s5,8000fe88 <prvNotifiedTask+0x30c>  *)
    | 0x8000ff9c => 0x00001b37 (* lui s6,0x1  *)
    | 0x8000ffa0 => 0x00018bb7 (* lui s7,0x18  *)
    | 0x8000ffa4 => 0x00000a13 (* li s4,0  *)
    | 0x8000ffa8 => 0x5b3b0b13 (* add s6,s6,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x8000ffac => 0x6a1b8b93 (* add s7,s7,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8000ffb0 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000ffb4 => 0x00000713 (* li a4,0  *)
    | 0x8000ffb8 => 0x00300693 (* li a3,3  *)
    | 0x8000ffbc => 0x000b0613 (* mv a2,s6  *)
    | 0x8000ffc0 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000ffc4 => 0xd00f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000ffc8 => 0x01250863 (* beq a0,s2,8000ffd8 <prvNotifiedTask+0x45c>  *)
    | 0x8000ffcc => 0x18600593 (* li a1,390  *)
    | 0x8000ffd0 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000ffd4 => 0x2bc020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000ffd8 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8000ffdc => 0x00000713 (* li a4,0  *)
    | 0x8000ffe0 => 0x00000693 (* li a3,0  *)
    | 0x8000ffe4 => 0x000b8613 (* mv a2,s7  *)
    | 0x8000ffe8 => 0x000a0593 (* mv a1,s4  *)
    | 0x8000ffec => 0xcd8f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8000fff0 => 0x01250863 (* beq a0,s2,80010000 <prvNotifiedTask+0x484>  *)
    | 0x8000fff4 => 0x18d00593 (* li a1,397  *)
    | 0x8000fff8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8000fffc => 0x294020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010000 => 0x00000a93 (* li s5,0  *)
    | 0x80010004 => 0x00000713 (* li a4,0  *)
    | 0x80010008 => 0x01810693 (* add a3,sp,24  *)
    | 0x8001000c => 0x00000613 (* li a2,0  *)
    | 0x80010010 => 0x00000593 (* li a1,0  *)
    | 0x80010014 => 0x000a8513 (* mv a0,s5  *)
    | 0x80010018 => 0xb28f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8001001c => 0x01812783 (* lw a5,24(sp)  *)
    | 0x80010020 => 0x01678863 (* beq a5,s6,80010030 <prvNotifiedTask+0x4b4>  *)
    | 0x80010024 => 0x19700593 (* li a1,407  *)
    | 0x80010028 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8001002c => 0x264020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010030 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010034 => 0xfd5a78e3 (* bgeu s4,s5,80010004 <prvNotifiedTask+0x488>  *)
    | 0x80010038 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8001003c => 0x000a0a93 (* mv s5,s4  *)
    | 0x80010040 => 0x00300c13 (* li s8,3  *)
    | 0x80010044 => 0x358a94e3 (* bne s5,s8,80010b8c <prvNotifiedTask+0x1010>  *)
    | 0x80010048 => 0xf75a14e3 (* bne s4,s5,8000ffb0 <prvNotifiedTask+0x434>  *)
    | 0x8001004c => 0x00001b37 (* lui s6,0x1  *)
    | 0x80010050 => 0x00001bb7 (* lui s7,0x1  *)
    | 0x80010054 => 0x00000a13 (* li s4,0  *)
    | 0x80010058 => 0x5b8b0b13 (* add s6,s6,1464 # 15b8 <__stack_size+0x145a>  *)
    | 0x8001005c => 0x00300c13 (* li s8,3  *)
    | 0x80010060 => 0x5b3b8b93 (* add s7,s7,1459 # 15b3 <__stack_size+0x1455>  *)
    | 0x80010064 => 0x00500a93 (* li s5,5  *)
    | 0x80010068 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8001006c => 0x00000713 (* li a4,0  *)
    | 0x80010070 => 0x00200693 (* li a3,2  *)
    | 0x80010074 => 0x00000613 (* li a2,0  *)
    | 0x80010078 => 0x000a0593 (* mv a1,s4  *)
    | 0x8001007c => 0xc48f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80010080 => 0x01250863 (* beq a0,s2,80010090 <prvNotifiedTask+0x514>  *)
    | 0x80010084 => 0x1b400593 (* li a1,436  *)
    | 0x80010088 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8001008c => 0x204020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010090 => 0xfffa8a93 (* add s5,s5,-1  *)
    | 0x80010094 => 0xfc0a9ae3 (* bnez s5,80010068 <prvNotifiedTask+0x4ec>  *)
    | 0x80010098 => 0x00000713 (* li a4,0  *)
    | 0x8001009c => 0x01810693 (* add a3,sp,24  *)
    | 0x800100a0 => 0x00000613 (* li a2,0  *)
    | 0x800100a4 => 0x00000593 (* li a1,0  *)
    | 0x800100a8 => 0x000a8513 (* mv a0,s5  *)
    | 0x800100ac => 0xa94f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800100b0 => 0x01812783 (* lw a5,24(sp)  *)
    | 0x800100b4 => 0x01678863 (* beq a5,s6,800100c4 <prvNotifiedTask+0x548>  *)
    | 0x800100b8 => 0x1bf00593 (* li a1,447  *)
    | 0x800100bc => 0x3a440513 (* add a0,s0,932  *)
    | 0x800100c0 => 0x1d0020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800100c4 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x800100c8 => 0xfd5a78e3 (* bgeu s4,s5,80010098 <prvNotifiedTask+0x51c>  *)
    | 0x800100cc => 0x00000713 (* li a4,0  *)
    | 0x800100d0 => 0x01810693 (* add a3,sp,24  *)
    | 0x800100d4 => 0x00000613 (* li a2,0  *)
    | 0x800100d8 => 0x00000593 (* li a1,0  *)
    | 0x800100dc => 0x000a0513 (* mv a0,s4  *)
    | 0x800100e0 => 0xa60f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800100e4 => 0x00050863 (* beqz a0,800100f4 <prvNotifiedTask+0x578>  *)
    | 0x800100e8 => 0x1c500593 (* li a1,453  *)
    | 0x800100ec => 0x3a440513 (* add a0,s0,932  *)
    | 0x800100f0 => 0x1a0020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800100f4 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x800100f8 => 0x000a0a93 (* mv s5,s4  *)
    | 0x800100fc => 0x2b8a9ee3 (* bne s5,s8,80010bb8 <prvNotifiedTask+0x103c>  *)
    | 0x80010100 => 0xf75a12e3 (* bne s4,s5,80010064 <prvNotifiedTask+0x4e8>  *)
    | 0x80010104 => 0xfff00613 (* li a2,-1  *)
    | 0x80010108 => 0x00000593 (* li a1,0  *)
    | 0x8001010c => 0x00000513 (* li a0,0  *)
    | 0x80010110 => 0xa19f20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010114 => 0xfff00613 (* li a2,-1  *)
    | 0x80010118 => 0x00100593 (* li a1,1  *)
    | 0x8001011c => 0x00000513 (* li a0,0  *)
    | 0x80010120 => 0xa09f20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010124 => 0xfff00613 (* li a2,-1  *)
    | 0x80010128 => 0x00200593 (* li a1,2  *)
    | 0x8001012c => 0x00000513 (* li a0,0  *)
    | 0x80010130 => 0x9f9f20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010134 => 0x00000a13 (* li s4,0  *)
    | 0x80010138 => 0xfff00b13 (* li s6,-1  *)
    | 0x8001013c => 0x02000b93 (* li s7,32  *)
    | 0x80010140 => 0x00300c13 (* li s8,3  *)
    | 0x80010144 => 0x00000a93 (* li s5,0  *)
    | 0x80010148 => 0x00100c93 (* li s9,1  *)
    | 0x8001014c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010150 => 0x00000713 (* li a4,0  *)
    | 0x80010154 => 0x00100693 (* li a3,1  *)
    | 0x80010158 => 0x000c8613 (* mv a2,s9  *)
    | 0x8001015c => 0x000a0593 (* mv a1,s4  *)
    | 0x80010160 => 0xb64f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80010164 => 0x00000713 (* li a4,0  *)
    | 0x80010168 => 0x01810693 (* add a3,sp,24  *)
    | 0x8001016c => 0x00000613 (* li a2,0  *)
    | 0x80010170 => 0x00000593 (* li a1,0  *)
    | 0x80010174 => 0x000a0513 (* mv a0,s4  *)
    | 0x80010178 => 0x9c8f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8001017c => 0x01250863 (* beq a0,s2,8001018c <prvNotifiedTask+0x610>  *)
    | 0x80010180 => 0x1f300593 (* li a1,499  *)
    | 0x80010184 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010188 => 0x108020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001018c => 0x01812783 (* lw a5,24(sp)  *)
    | 0x80010190 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010194 => 0x001c9c93 (* sll s9,s9,0x1  *)
    | 0x80010198 => 0xfb679ae3 (* bne a5,s6,8001014c <prvNotifiedTask+0x5d0>  *)
    | 0x8001019c => 0x017a8863 (* beq s5,s7,800101ac <prvNotifiedTask+0x630>  *)
    | 0x800101a0 => 0x1fe00593 (* li a1,510  *)
    | 0x800101a4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800101a8 => 0x0e8020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800101ac => 0x00000a93 (* li s5,0  *)
    | 0x800101b0 => 0x00000713 (* li a4,0  *)
    | 0x800101b4 => 0x01810693 (* add a3,sp,24  *)
    | 0x800101b8 => 0x00000613 (* li a2,0  *)
    | 0x800101bc => 0x00000593 (* li a1,0  *)
    | 0x800101c0 => 0x000a8513 (* mv a0,s5  *)
    | 0x800101c4 => 0x97cf20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800101c8 => 0x01812783 (* lw a5,24(sp)  *)
    | 0x800101cc => 0x01678863 (* beq a5,s6,800101dc <prvNotifiedTask+0x660>  *)
    | 0x800101d0 => 0x20800593 (* li a1,520  *)
    | 0x800101d4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800101d8 => 0x0b8020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800101dc => 0x001a8a93 (* add s5,s5,1  *)
    | 0x800101e0 => 0xfd5a78e3 (* bgeu s4,s5,800101b0 <prvNotifiedTask+0x634>  *)
    | 0x800101e4 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x800101e8 => 0x000a0a93 (* mv s5,s4  *)
    | 0x800101ec => 0x1f8a9ce3 (* bne s5,s8,80010be4 <prvNotifiedTask+0x1068>  *)
    | 0x800101f0 => 0xf55a1ae3 (* bne s4,s5,80010144 <prvNotifiedTask+0x5c8>  *)
    | 0x800101f4 => 0x00000a13 (* li s4,0  *)
    | 0x800101f8 => 0xfff00c13 (* li s8,-1  *)
    | 0x800101fc => 0xffe00b13 (* li s6,-2  *)
    | 0x80010200 => 0x00300b93 (* li s7,3  *)
    | 0x80010204 => 0x06400713 (* li a4,100  *)
    | 0x80010208 => 0x01810693 (* add a3,sp,24  *)
    | 0x8001020c => 0x00200613 (* li a2,2  *)
    | 0x80010210 => 0x00100593 (* li a1,1  *)
    | 0x80010214 => 0x000a0513 (* mv a0,s4  *)
    | 0x80010218 => 0x928f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x8001021c => 0x00050863 (* beqz a0,8001022c <prvNotifiedTask+0x6b0>  *)
    | 0x80010220 => 0x22400593 (* li a1,548  *)
    | 0x80010224 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010228 => 0x068020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001022c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010230 => 0x00000713 (* li a4,0  *)
    | 0x80010234 => 0x00000693 (* li a3,0  *)
    | 0x80010238 => 0xfff00613 (* li a2,-1  *)
    | 0x8001023c => 0x000a0593 (* mv a1,s4  *)
    | 0x80010240 => 0xa84f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80010244 => 0x00000a93 (* li s5,0  *)
    | 0x80010248 => 0x00000713 (* li a4,0  *)
    | 0x8001024c => 0x01810693 (* add a3,sp,24  *)
    | 0x80010250 => 0x00000613 (* li a2,0  *)
    | 0x80010254 => 0x00000593 (* li a1,0  *)
    | 0x80010258 => 0x000a8513 (* mv a0,s5  *)
    | 0x8001025c => 0x8e4f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010260 => 0x1b5a18e3 (* bne s4,s5,80010c10 <prvNotifiedTask+0x1094>  *)
    | 0x80010264 => 0x23a00593 (* li a1,570  *)
    | 0x80010268 => 0x1b2518e3 (* bne a0,s2,80010c18 <prvNotifiedTask+0x109c>  *)
    | 0x8001026c => 0x01812783 (* lw a5,24(sp)  *)
    | 0x80010270 => 0x01678863 (* beq a5,s6,80010280 <prvNotifiedTask+0x704>  *)
    | 0x80010274 => 0x24200593 (* li a1,578  *)
    | 0x80010278 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8001027c => 0x014020ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010280 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010284 => 0xfd5a72e3 (* bgeu s4,s5,80010248 <prvNotifiedTask+0x6cc>  *)
    | 0x80010288 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x8001028c => 0x000a0a93 (* mv s5,s4  *)
    | 0x80010290 => 0x197a9ae3 (* bne s5,s7,80010c24 <prvNotifiedTask+0x10a8>  *)
    | 0x80010294 => 0xf75a18e3 (* bne s4,s5,80010204 <prvNotifiedTask+0x688>  *)
    | 0x80010298 => 0x00000a13 (* li s4,0  *)
    | 0x8001029c => 0xffe00b13 (* li s6,-2  *)
    | 0x800102a0 => 0xffc00b93 (* li s7,-4  *)
    | 0x800102a4 => 0x00300c13 (* li s8,3  *)
    | 0x800102a8 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x800102ac => 0x00000713 (* li a4,0  *)
    | 0x800102b0 => 0x00000693 (* li a3,0  *)
    | 0x800102b4 => 0x00000613 (* li a2,0  *)
    | 0x800102b8 => 0x000a0593 (* mv a1,s4  *)
    | 0x800102bc => 0xa08f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x800102c0 => 0x00000713 (* li a4,0  *)
    | 0x800102c4 => 0x01810693 (* add a3,sp,24  *)
    | 0x800102c8 => 0x00200613 (* li a2,2  *)
    | 0x800102cc => 0x00000593 (* li a1,0  *)
    | 0x800102d0 => 0x000a0513 (* mv a0,s4  *)
    | 0x800102d4 => 0x86cf20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800102d8 => 0x01812783 (* lw a5,24(sp)  *)
    | 0x800102dc => 0x01678863 (* beq a5,s6,800102ec <prvNotifiedTask+0x770>  *)
    | 0x800102e0 => 0x25e00593 (* li a1,606  *)
    | 0x800102e4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800102e8 => 0x7a9010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800102ec => 0x00000713 (* li a4,0  *)
    | 0x800102f0 => 0x01810693 (* add a3,sp,24  *)
    | 0x800102f4 => 0x00000613 (* li a2,0  *)
    | 0x800102f8 => 0x00000593 (* li a1,0  *)
    | 0x800102fc => 0x000a0513 (* mv a0,s4  *)
    | 0x80010300 => 0x840f20ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010304 => 0x00050863 (* beqz a0,80010314 <prvNotifiedTask+0x798>  *)
    | 0x80010308 => 0x26400593 (* li a1,612  *)
    | 0x8001030c => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010310 => 0x781010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010314 => 0x01812783 (* lw a5,24(sp)  *)
    | 0x80010318 => 0x01778863 (* beq a5,s7,80010328 <prvNotifiedTask+0x7ac>  *)
    | 0x8001031c => 0x26500593 (* li a1,613  *)
    | 0x80010320 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010324 => 0x76d010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010328 => 0x00000a93 (* li s5,0  *)
    | 0x8001032c => 0x035a0663 (* beq s4,s5,80010358 <prvNotifiedTask+0x7dc>  *)
    | 0x80010330 => 0x00000713 (* li a4,0  *)
    | 0x80010334 => 0x01810693 (* add a3,sp,24  *)
    | 0x80010338 => 0x00000613 (* li a2,0  *)
    | 0x8001033c => 0x00000593 (* li a1,0  *)
    | 0x80010340 => 0x000a8513 (* mv a0,s5  *)
    | 0x80010344 => 0xffdf10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010348 => 0x00050863 (* beqz a0,80010358 <prvNotifiedTask+0x7dc>  *)
    | 0x8001034c => 0x26e00593 (* li a1,622  *)
    | 0x80010350 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010354 => 0x73d010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010358 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8001035c => 0xfd8a98e3 (* bne s5,s8,8001032c <prvNotifiedTask+0x7b0>  *)
    | 0x80010360 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x80010364 => 0xf55a12e3 (* bne s4,s5,800102a8 <prvNotifiedTask+0x72c>  *)
    | 0x80010368 => 0x00000a93 (* li s5,0  *)
    | 0x8001036c => 0xffc00c93 (* li s9,-4  *)
    | 0x80010370 => 0x00300c13 (* li s8,3  *)
    | 0x80010374 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010378 => 0x01c10713 (* add a4,sp,28  *)
    | 0x8001037c => 0x00100693 (* li a3,1  *)
    | 0x80010380 => 0x00000613 (* li a2,0  *)
    | 0x80010384 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010388 => 0x93cf20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8001038c => 0x01812783 (* lw a5,24(sp)  *)
    | 0x80010390 => 0x01978863 (* beq a5,s9,800103a0 <prvNotifiedTask+0x824>  *)
    | 0x80010394 => 0x27a00593 (* li a1,634  *)
    | 0x80010398 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8001039c => 0x6f5010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800103a0 => 0x00000713 (* li a4,0  *)
    | 0x800103a4 => 0x01810693 (* add a3,sp,24  *)
    | 0x800103a8 => 0xfff00613 (* li a2,-1  *)
    | 0x800103ac => 0x00000593 (* li a1,0  *)
    | 0x800103b0 => 0x000a8513 (* mv a0,s5  *)
    | 0x800103b4 => 0xf8df10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800103b8 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x800103bc => 0x01c10713 (* add a4,sp,28  *)
    | 0x800103c0 => 0x00100693 (* li a3,1  *)
    | 0x800103c4 => 0x00000613 (* li a2,0  *)
    | 0x800103c8 => 0x000a8593 (* mv a1,s5  *)
    | 0x800103cc => 0x8f8f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x800103d0 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x800103d4 => 0x00078863 (* beqz a5,800103e4 <prvNotifiedTask+0x868>  *)
    | 0x800103d8 => 0x27f00593 (* li a1,639  *)
    | 0x800103dc => 0x3a440513 (* add a0,s0,932  *)
    | 0x800103e0 => 0x6b1010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800103e4 => 0x00000b93 (* li s7,0  *)
    | 0x800103e8 => 0x00700a13 (* li s4,7  *)
    | 0x800103ec => 0x00100b13 (* li s6,1  *)
    | 0x800103f0 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x800103f4 => 0x01c10713 (* add a4,sp,28  *)
    | 0x800103f8 => 0x00100693 (* li a3,1  *)
    | 0x800103fc => 0x000b0613 (* mv a2,s6  *)
    | 0x80010400 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010404 => 0x8c0f20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80010408 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8001040c => 0x01778863 (* beq a5,s7,8001041c <prvNotifiedTask+0x8a0>  *)
    | 0x80010410 => 0x28900593 (* li a1,649  *)
    | 0x80010414 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010418 => 0x679010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001041c => 0xfffa0a13 (* add s4,s4,-1  *)
    | 0x80010420 => 0x016bebb3 (* or s7,s7,s6  *)
    | 0x80010424 => 0x001b1b13 (* sll s6,s6,0x1  *)
    | 0x80010428 => 0xfc0a14e3 (* bnez s4,800103f0 <prvNotifiedTask+0x874>  *)
    | 0x8001042c => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010430 => 0xf58a92e3 (* bne s5,s8,80010374 <prvNotifiedTask+0x7f8>  *)
    | 0x80010434 => 0x00000a93 (* li s5,0  *)
    | 0x80010438 => 0x00300b13 (* li s6,3  *)
    | 0x8001043c => 0x000a8513 (* mv a0,s5  *)
    | 0x80010440 => 0x00000713 (* li a4,0  *)
    | 0x80010444 => 0x01810693 (* add a3,sp,24  *)
    | 0x80010448 => 0x00000613 (* li a2,0  *)
    | 0x8001044c => 0xfff00593 (* li a1,-1  *)
    | 0x80010450 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010454 => 0xeedf10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010458 => 0xff6a92e3 (* bne s5,s6,8001043c <prvNotifiedTask+0x8c0>  *)
    | 0x8001045c => 0x00018bb7 (* lui s7,0x18  *)
    | 0x80010460 => 0x00000a93 (* li s5,0  *)
    | 0x80010464 => 0x00300c13 (* li s8,3  *)
    | 0x80010468 => 0x6a1b8b93 (* add s7,s7,1697 # 186a1 <__stack_size+0x18543>  *)
    | 0x8001046c => 0x00000b13 (* li s6,0  *)
    | 0x80010470 => 0x000b0593 (* mv a1,s6  *)
    | 0x80010474 => 0x00000513 (* li a0,0  *)
    | 0x80010478 => 0xe30f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x8001047c => 0x00050863 (* beqz a0,8001048c <prvNotifiedTask+0x910>  *)
    | 0x80010480 => 0x29c00593 (* li a1,668  *)
    | 0x80010484 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010488 => 0x609010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001048c => 0x001b0b13 (* add s6,s6,1  *)
    | 0x80010490 => 0xff8b10e3 (* bne s6,s8,80010470 <prvNotifiedTask+0x8f4>  *)
    | 0x80010494 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010498 => 0x01c10713 (* add a4,sp,28  *)
    | 0x8001049c => 0x00400693 (* li a3,4  *)
    | 0x800104a0 => 0x000b8613 (* mv a2,s7  *)
    | 0x800104a4 => 0x000a8593 (* mv a1,s5  *)
    | 0x800104a8 => 0x81cf20ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x800104ac => 0x00000b13 (* li s6,0  *)
    | 0x800104b0 => 0x036a9063 (* bne s5,s6,800104d0 <prvNotifiedTask+0x954>  *)
    | 0x800104b4 => 0x000a8593 (* mv a1,s5  *)
    | 0x800104b8 => 0x00000513 (* li a0,0  *)
    | 0x800104bc => 0xdecf20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x800104c0 => 0x01250863 (* beq a0,s2,800104d0 <prvNotifiedTask+0x954>  *)
    | 0x800104c4 => 0x2ac00593 (* li a1,684  *)
    | 0x800104c8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800104cc => 0x5c5010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800104d0 => 0x000b0593 (* mv a1,s6  *)
    | 0x800104d4 => 0x00000513 (* li a0,0  *)
    | 0x800104d8 => 0xdd0f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x800104dc => 0x00050863 (* beqz a0,800104ec <prvNotifiedTask+0x970>  *)
    | 0x800104e0 => 0x2af00593 (* li a1,687  *)
    | 0x800104e4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800104e8 => 0x5a9010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800104ec => 0x001b0b13 (* add s6,s6,1  *)
    | 0x800104f0 => 0xfd8b10e3 (* bne s6,s8,800104b0 <prvNotifiedTask+0x934>  *)
    | 0x800104f4 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x800104f8 => 0xf76a9ae3 (* bne s5,s6,8001046c <prvNotifiedTask+0x8f0>  *)
    | 0x800104fc => 0x01000b37 (* lui s6,0x1000  *)
    | 0x80010500 => 0x01000bb7 (* lui s7,0x1000  *)
    | 0x80010504 => 0x00000a93 (* li s5,0  *)
    | 0x80010508 => 0xfffb0b13 (* add s6,s6,-1 # ffffff <__stack_size+0xfffea1>  *)
    | 0x8001050c => 0xf00b8b93 (* add s7,s7,-256 # ffff00 <__stack_size+0xfffda2>  *)
    | 0x80010510 => 0x00300c13 (* li s8,3  *)
    | 0x80010514 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010518 => 0x00000713 (* li a4,0  *)
    | 0x8001051c => 0x00100693 (* li a3,1  *)
    | 0x80010520 => 0xfff00613 (* li a2,-1  *)
    | 0x80010524 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010528 => 0xf9df10ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8001052c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010530 => 0xff000637 (* lui a2,0xff000  *)
    | 0x80010534 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010538 => 0xdf0f20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x8001053c => 0xfff00793 (* li a5,-1  *)
    | 0x80010540 => 0x00f50863 (* beq a0,a5,80010550 <prvNotifiedTask+0x9d4>  *)
    | 0x80010544 => 0x2bf00593 (* li a1,703  *)
    | 0x80010548 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8001054c => 0x545010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010550 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010554 => 0x0ff00613 (* li a2,255  *)
    | 0x80010558 => 0x000a8593 (* mv a1,s5  *)
    | 0x8001055c => 0xdccf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010560 => 0x01650863 (* beq a0,s6,80010570 <prvNotifiedTask+0x9f4>  *)
    | 0x80010564 => 0x2c400593 (* li a1,708  *)
    | 0x80010568 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8001056c => 0x525010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010570 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010574 => 0xfff00613 (* li a2,-1  *)
    | 0x80010578 => 0x000a8593 (* mv a1,s5  *)
    | 0x8001057c => 0xdacf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010580 => 0x01750863 (* beq a0,s7,80010590 <prvNotifiedTask+0xa14>  *)
    | 0x80010584 => 0x2c800593 (* li a1,712  *)
    | 0x80010588 => 0x3a440513 (* add a0,s0,932  *)
    | 0x8001058c => 0x505010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010590 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010594 => 0xfff00613 (* li a2,-1  *)
    | 0x80010598 => 0x000a8593 (* mv a1,s5  *)
    | 0x8001059c => 0xd8cf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x800105a0 => 0x00050863 (* beqz a0,800105b0 <prvNotifiedTask+0xa34>  *)
    | 0x800105a4 => 0x2cb00593 (* li a1,715  *)
    | 0x800105a8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800105ac => 0x4e5010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800105b0 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x800105b4 => 0x00000613 (* li a2,0  *)
    | 0x800105b8 => 0x000a8593 (* mv a1,s5  *)
    | 0x800105bc => 0xd6cf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x800105c0 => 0x00050863 (* beqz a0,800105d0 <prvNotifiedTask+0xa54>  *)
    | 0x800105c4 => 0x2cc00593 (* li a1,716  *)
    | 0x800105c8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800105cc => 0x4c5010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800105d0 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x800105d4 => 0xfff00613 (* li a2,-1  *)
    | 0x800105d8 => 0x000a8593 (* mv a1,s5  *)
    | 0x800105dc => 0xd4cf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x800105e0 => 0x00050863 (* beqz a0,800105f0 <prvNotifiedTask+0xa74>  *)
    | 0x800105e4 => 0x2cd00593 (* li a1,717  *)
    | 0x800105e8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800105ec => 0x4a5010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800105f0 => 0x000a8593 (* mv a1,s5  *)
    | 0x800105f4 => 0x00000513 (* li a0,0  *)
    | 0x800105f8 => 0xcb0f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x800105fc => 0x01250863 (* beq a0,s2,8001060c <prvNotifiedTask+0xa90>  *)
    | 0x80010600 => 0x2d100593 (* li a1,721  *)
    | 0x80010604 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010608 => 0x489010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001060c => 0x000a8593 (* mv a1,s5  *)
    | 0x80010610 => 0x00000513 (* li a0,0  *)
    | 0x80010614 => 0xc94f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x80010618 => 0x00050863 (* beqz a0,80010628 <prvNotifiedTask+0xaac>  *)
    | 0x8001061c => 0x2d200593 (* li a1,722  *)
    | 0x80010620 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010624 => 0x46d010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010628 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8001062c => 0xef8a94e3 (* bne s5,s8,80010514 <prvNotifiedTask+0x998>  *)
    | 0x80010630 => 0xbbc1a783 (* lw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010634 => 0x00000a93 (* li s5,0  *)
    | 0x80010638 => 0x00300b13 (* li s6,3  *)
    | 0x8001063c => 0x00178793 (* add a5,a5,1  *)
    | 0x80010640 => 0xbaf1ae23 (* sw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010644 => 0x000a8513 (* mv a0,s5  *)
    | 0x80010648 => 0x00000713 (* li a4,0  *)
    | 0x8001064c => 0x00000693 (* li a3,0  *)
    | 0x80010650 => 0x00000613 (* li a2,0  *)
    | 0x80010654 => 0xfff00593 (* li a1,-1  *)
    | 0x80010658 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8001065c => 0xce5f10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010660 => 0xff6a92e3 (* bne s5,s6,80010644 <prvNotifiedTask+0xac8>  *)
    | 0x80010664 => 0x00800593 (* li a1,8  *)
    | 0x80010668 => 0x00000513 (* li a0,0  *)
    | 0x8001066c => 0xca4f00ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80010670 => 0x00000a93 (* li s5,0  *)
    | 0x80010674 => 0x00300b93 (* li s7,3  *)
    | 0x80010678 => 0x00000b13 (* li s6,0  *)
    | 0x8001067c => 0x00000713 (* li a4,0  *)
    | 0x80010680 => 0x00000693 (* li a3,0  *)
    | 0x80010684 => 0x00000613 (* li a2,0  *)
    | 0x80010688 => 0x00000593 (* li a1,0  *)
    | 0x8001068c => 0x000b0513 (* mv a0,s6  *)
    | 0x80010690 => 0xcb1f10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010694 => 0x00050863 (* beqz a0,800106a4 <prvNotifiedTask+0xb28>  *)
    | 0x80010698 => 0x33900593 (* li a1,825  *)
    | 0x8001069c => 0x3a440513 (* add a0,s0,932  *)
    | 0x800106a0 => 0x3f1010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800106a4 => 0x001b0b13 (* add s6,s6,1  *)
    | 0x800106a8 => 0xfd7b1ae3 (* bne s6,s7,8001067c <prvNotifiedTask+0xb00>  *)
    | 0x800106ac => 0xbac1ab03 (* lw s6,-1108(gp) # 800803ac <xNotifyWhileSuspendedTimer>  *)
    | 0x800106b0 => 0x00012e23 (* sw zero,28(sp)  *)
    | 0x800106b4 => 0xfc0f00ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800106b8 => 0x00050613 (* mv a2,a0  *)
    | 0x800106bc => 0xfff00713 (* li a4,-1  *)
    | 0x800106c0 => 0x00000693 (* li a3,0  *)
    | 0x800106c4 => 0x00100593 (* li a1,1  *)
    | 0x800106c8 => 0x000b0513 (* mv a0,s6  *)
    | 0x800106cc => 0xd6cf40ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x800106d0 => 0xfff00713 (* li a4,-1  *)
    | 0x800106d4 => 0x01c10693 (* add a3,sp,28  *)
    | 0x800106d8 => 0x00000613 (* li a2,0  *)
    | 0x800106dc => 0x00000593 (* li a1,0  *)
    | 0x800106e0 => 0x000a8513 (* mv a0,s5  *)
    | 0x800106e4 => 0xc5df10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800106e8 => 0x00050863 (* beqz a0,800106f8 <prvNotifiedTask+0xb7c>  *)
    | 0x800106ec => 0x34700593 (* li a1,839  *)
    | 0x800106f0 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800106f4 => 0x39d010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800106f8 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x800106fc => 0x00078863 (* beqz a5,8001070c <prvNotifiedTask+0xb90>  *)
    | 0x80010700 => 0x34800593 (* li a1,840  *)
    | 0x80010704 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010708 => 0x389010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001070c => 0x00000b13 (* li s6,0  *)
    | 0x80010710 => 0x00000713 (* li a4,0  *)
    | 0x80010714 => 0x01c10693 (* add a3,sp,28  *)
    | 0x80010718 => 0x00000613 (* li a2,0  *)
    | 0x8001071c => 0x00000593 (* li a1,0  *)
    | 0x80010720 => 0x000b0513 (* mv a0,s6  *)
    | 0x80010724 => 0xc1df10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010728 => 0x00050863 (* beqz a0,80010738 <prvNotifiedTask+0xbbc>  *)
    | 0x8001072c => 0x35000593 (* li a1,848  *)
    | 0x80010730 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010734 => 0x35d010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010738 => 0x001b0b13 (* add s6,s6,1  *)
    | 0x8001073c => 0xfd7b1ae3 (* bne s6,s7,80010710 <prvNotifiedTask+0xb94>  *)
    | 0x80010740 => 0xbac1ab03 (* lw s6,-1108(gp) # 800803ac <xNotifyWhileSuspendedTimer>  *)
    | 0x80010744 => 0xf30f00ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80010748 => 0x00050613 (* mv a2,a0  *)
    | 0x8001074c => 0xfff00713 (* li a4,-1  *)
    | 0x80010750 => 0x00000693 (* li a3,0  *)
    | 0x80010754 => 0x00100593 (* li a1,1  *)
    | 0x80010758 => 0x000b0513 (* mv a0,s6  *)
    | 0x8001075c => 0xcdcf40ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80010760 => 0xfff00713 (* li a4,-1  *)
    | 0x80010764 => 0x01c10693 (* add a3,sp,28  *)
    | 0x80010768 => 0x00000613 (* li a2,0  *)
    | 0x8001076c => 0x00000593 (* li a1,0  *)
    | 0x80010770 => 0x000a8513 (* mv a0,s5  *)
    | 0x80010774 => 0xbcdf10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010778 => 0x01250863 (* beq a0,s2,80010788 <prvNotifiedTask+0xc0c>  *)
    | 0x8001077c => 0x35e00593 (* li a1,862  *)
    | 0x80010780 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010784 => 0x30d010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010788 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x8001078c => 0x00079863 (* bnez a5,8001079c <prvNotifiedTask+0xc20>  *)
    | 0x80010790 => 0x36000593 (* li a1,864  *)
    | 0x80010794 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010798 => 0x2f9010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001079c => 0x00000b13 (* li s6,0  *)
    | 0x800107a0 => 0x00000713 (* li a4,0  *)
    | 0x800107a4 => 0x01c10693 (* add a3,sp,28  *)
    | 0x800107a8 => 0x00000613 (* li a2,0  *)
    | 0x800107ac => 0x00000593 (* li a1,0  *)
    | 0x800107b0 => 0x000b0513 (* mv a0,s6  *)
    | 0x800107b4 => 0xb8df10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800107b8 => 0x00050863 (* beqz a0,800107c8 <prvNotifiedTask+0xc4c>  *)
    | 0x800107bc => 0x36900593 (* li a1,873  *)
    | 0x800107c0 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800107c4 => 0x2cd010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800107c8 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x800107cc => 0x496ae263 (* bltu s5,s6,80010c50 <prvNotifiedTask+0x10d4>  *)
    | 0x800107d0 => 0x36d00593 (* li a1,877  *)
    | 0x800107d4 => 0x49279263 (* bne a5,s2,80010c58 <prvNotifiedTask+0x10dc>  *)
    | 0x800107d8 => 0x001b0b13 (* add s6,s6,1  *)
    | 0x800107dc => 0xfd7b12e3 (* bne s6,s7,800107a0 <prvNotifiedTask+0xc24>  *)
    | 0x800107e0 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x800107e4 => 0xe96a9ae3 (* bne s5,s6,80010678 <prvNotifiedTask+0xafc>  *)
    | 0x800107e8 => 0x00000593 (* li a1,0  *)
    | 0x800107ec => 0x00000513 (* li a0,0  *)
    | 0x800107f0 => 0xb20f00ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x800107f4 => 0xbbc1a783 (* lw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x800107f8 => 0x00000a93 (* li s5,0  *)
    | 0x800107fc => 0x00300b13 (* li s6,3  *)
    | 0x80010800 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010804 => 0xbaf1ae23 (* sw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010808 => 0x000a8513 (* mv a0,s5  *)
    | 0x8001080c => 0x00000713 (* li a4,0  *)
    | 0x80010810 => 0x00000693 (* li a3,0  *)
    | 0x80010814 => 0x00000613 (* li a2,0  *)
    | 0x80010818 => 0xfff00593 (* li a1,-1  *)
    | 0x8001081c => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010820 => 0xb21f10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010824 => 0xff6a92e3 (* bne s5,s6,80010808 <prvNotifiedTask+0xc8c>  *)
    | 0x80010828 => 0x00000a93 (* li s5,0  *)
    | 0x8001082c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010830 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010834 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010838 => 0x00000713 (* li a4,0  *)
    | 0x8001083c => 0x00300693 (* li a3,3  *)
    | 0x80010840 => 0x000a8613 (* mv a2,s5  *)
    | 0x80010844 => 0x00b12623 (* sw a1,12(sp)  *)
    | 0x80010848 => 0xc7df10ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8001084c => 0x00c12583 (* lw a1,12(sp)  *)
    | 0x80010850 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010854 => 0xa54f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x80010858 => 0x00300793 (* li a5,3  *)
    | 0x8001085c => 0xfcfa98e3 (* bne s5,a5,8001082c <prvNotifiedTask+0xcb0>  *)
    | 0x80010860 => 0x00000a93 (* li s5,0  *)
    | 0x80010864 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010868 => 0x00000713 (* li a4,0  *)
    | 0x8001086c => 0x00300693 (* li a3,3  *)
    | 0x80010870 => 0x00000613 (* li a2,0  *)
    | 0x80010874 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010878 => 0xc4df10ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x8001087c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010880 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010884 => 0xa24f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x80010888 => 0xbb01ab03 (* lw s6,-1104(gp) # 800803b0 <xIncrementingIndexTimer>  *)
    | 0x8001088c => 0xde8f00ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80010890 => 0x00050613 (* mv a2,a0  *)
    | 0x80010894 => 0xfff00713 (* li a4,-1  *)
    | 0x80010898 => 0x00000693 (* li a3,0  *)
    | 0x8001089c => 0x00100593 (* li a1,1  *)
    | 0x800108a0 => 0x000b0513 (* mv a0,s6  *)
    | 0x800108a4 => 0xb94f40ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x800108a8 => 0x09600613 (* li a2,150  *)
    | 0x800108ac => 0x00000593 (* li a1,0  *)
    | 0x800108b0 => 0x000a8513 (* mv a0,s5  *)
    | 0x800108b4 => 0x961f10ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x800108b8 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x800108bc => 0x01250863 (* beq a0,s2,800108cc <prvNotifiedTask+0xd50>  *)
    | 0x800108c0 => 0x3ab00593 (* li a1,939  *)
    | 0x800108c4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800108c8 => 0x1c9010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800108cc => 0x00000513 (* li a0,0  *)
    | 0x800108d0 => 0x00300c13 (* li s8,3  *)
    | 0x800108d4 => 0x00150b13 (* add s6,a0,1  *)
    | 0x800108d8 => 0x02aa8e63 (* beq s5,a0,80010914 <prvNotifiedTask+0xd98>  *)
    | 0x800108dc => 0x00000713 (* li a4,0  *)
    | 0x800108e0 => 0x01c10693 (* add a3,sp,28  *)
    | 0x800108e4 => 0x00000613 (* li a2,0  *)
    | 0x800108e8 => 0x00000593 (* li a1,0  *)
    | 0x800108ec => 0xa55f10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800108f0 => 0x00050863 (* beqz a0,80010900 <prvNotifiedTask+0xd84>  *)
    | 0x800108f4 => 0x3b600593 (* li a1,950  *)
    | 0x800108f8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800108fc => 0x195010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010900 => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x80010904 => 0x01678863 (* beq a5,s6,80010914 <prvNotifiedTask+0xd98>  *)
    | 0x80010908 => 0x3b700593 (* li a1,951  *)
    | 0x8001090c => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010910 => 0x181010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010914 => 0x000b0513 (* mv a0,s6  *)
    | 0x80010918 => 0xfb8b1ee3 (* bne s6,s8,800108d4 <prvNotifiedTask+0xd58>  *)
    | 0x8001091c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010920 => 0x001a8c13 (* add s8,s5,1  *)
    | 0x80010924 => 0x00000713 (* li a4,0  *)
    | 0x80010928 => 0x00300693 (* li a3,3  *)
    | 0x8001092c => 0x000c0613 (* mv a2,s8  *)
    | 0x80010930 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010934 => 0xb91f10ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80010938 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x8001093c => 0x000a8593 (* mv a1,s5  *)
    | 0x80010940 => 0x968f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x80010944 => 0xbbc1a783 (* lw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010948 => 0x00178793 (* add a5,a5,1  *)
    | 0x8001094c => 0xbaf1ae23 (* sw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010950 => 0x316c1a63 (* bne s8,s6,80010c64 <prvNotifiedTask+0x10e8>  *)
    | 0x80010954 => 0x00000a93 (* li s5,0  *)
    | 0x80010958 => 0x00300b13 (* li s6,3  *)
    | 0x8001095c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010960 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010964 => 0xfff00613 (* li a2,-1  *)
    | 0x80010968 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x8001096c => 0x9bcf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010970 => 0xff6a96e3 (* bne s5,s6,8001095c <prvNotifiedTask+0xde0>  *)
    | 0x80010974 => 0x00000b13 (* li s6,0  *)
    | 0x80010978 => 0x00200c93 (* li s9,2  *)
    | 0x8001097c => 0x09500d13 (* li s10,149  *)
    | 0x80010980 => 0x00300d93 (* li s11,3  *)
    | 0x80010984 => 0xbb01aa83 (* lw s5,-1104(gp) # 800803b0 <xIncrementingIndexTimer>  *)
    | 0x80010988 => 0xcecf00ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8001098c => 0x00050613 (* mv a2,a0  *)
    | 0x80010990 => 0xfff00713 (* li a4,-1  *)
    | 0x80010994 => 0x00000693 (* li a3,0  *)
    | 0x80010998 => 0x00100593 (* li a1,1  *)
    | 0x8001099c => 0x000a8513 (* mv a0,s5  *)
    | 0x800109a0 => 0xa98f40ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x800109a4 => 0xcd0f00ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800109a8 => 0x000b0c13 (* mv s8,s6  *)
    | 0x800109ac => 0x001b0b13 (* add s6,s6,1  *)
    | 0x800109b0 => 0x00050a93 (* mv s5,a0  *)
    | 0x800109b4 => 0x000b0513 (* mv a0,s6  *)
    | 0x800109b8 => 0x019c1463 (* bne s8,s9,800109c0 <prvNotifiedTask+0xe44>  *)
    | 0x800109bc => 0x00000513 (* li a0,0  *)
    | 0x800109c0 => 0x09600713 (* li a4,150  *)
    | 0x800109c4 => 0x01c10693 (* add a3,sp,28  *)
    | 0x800109c8 => 0x00000613 (* li a2,0  *)
    | 0x800109cc => 0x00000593 (* li a1,0  *)
    | 0x800109d0 => 0x971f10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x800109d4 => 0x00050863 (* beqz a0,800109e4 <prvNotifiedTask+0xe68>  *)
    | 0x800109d8 => 0x3f400593 (* li a1,1012  *)
    | 0x800109dc => 0x3a440513 (* add a0,s0,932  *)
    | 0x800109e0 => 0x0b1010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800109e4 => 0xc90f00ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800109e8 => 0x41550533 (* sub a0,a0,s5  *)
    | 0x800109ec => 0x00ad6863 (* bltu s10,a0,800109fc <prvNotifiedTask+0xe80>  *)
    | 0x800109f0 => 0x3f700593 (* li a1,1015  *)
    | 0x800109f4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x800109f8 => 0x099010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800109fc => 0x00000a93 (* li s5,0  *)
    | 0x80010a00 => 0x00000713 (* li a4,0  *)
    | 0x80010a04 => 0x01c10693 (* add a3,sp,28  *)
    | 0x80010a08 => 0x00000613 (* li a2,0  *)
    | 0x80010a0c => 0x00000593 (* li a1,0  *)
    | 0x80010a10 => 0x000a8513 (* mv a0,s5  *)
    | 0x80010a14 => 0x92df10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010a18 => 0x258a9a63 (* bne s5,s8,80010c6c <prvNotifiedTask+0x10f0>  *)
    | 0x80010a1c => 0x01250863 (* beq a0,s2,80010a2c <prvNotifiedTask+0xeb0>  *)
    | 0x80010a20 => 0x40600593 (* li a1,1030  *)
    | 0x80010a24 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010a28 => 0x069010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010a2c => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x80010a30 => 0x01278863 (* beq a5,s2,80010a40 <prvNotifiedTask+0xec4>  *)
    | 0x80010a34 => 0x40700593 (* li a1,1031  *)
    | 0x80010a38 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010a3c => 0x055010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010a40 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010a44 => 0xfff00613 (* li a2,-1  *)
    | 0x80010a48 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010a4c => 0x8dcf20ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010a50 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010a54 => 0xfbba96e3 (* bne s5,s11,80010a00 <prvNotifiedTask+0xe84>  *)
    | 0x80010a58 => 0xbbc1a783 (* lw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010a5c => 0x00178793 (* add a5,a5,1  *)
    | 0x80010a60 => 0xbaf1ae23 (* sw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010a64 => 0xf35b10e3 (* bne s6,s5,80010984 <prvNotifiedTask+0xe08>  *)
    | 0x80010a68 => 0x00000a93 (* li s5,0  *)
    | 0x80010a6c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010a70 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010a74 => 0x00000713 (* li a4,0  *)
    | 0x80010a78 => 0x00300693 (* li a3,3  *)
    | 0x80010a7c => 0x00000613 (* li a2,0  *)
    | 0x80010a80 => 0xa45f10ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80010a84 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010a88 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010a8c => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010a90 => 0x818f20ef (* jal 80002aa8 <xTaskGenericNotifyStateClear>  *)
    | 0x80010a94 => 0x00300793 (* li a5,3  *)
    | 0x80010a98 => 0xfcfa9ae3 (* bne s5,a5,80010a6c <prvNotifiedTask+0xef0>  *)
    | 0x80010a9c => 0x80080b37 (* lui s6,0x80080  *)
    | 0x80010aa0 => 0x00300c13 (* li s8,3  *)
    | 0x80010aa4 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80010aa8 => 0x004b2783 (* lw a5,4(s6) # 80080004 <xCriticalNesting>  *)
    | 0x80010aac => 0x00178793 (* add a5,a5,1  *)
    | 0x80010ab0 => 0x00fb2223 (* sw a5,4(s6)  *)
    | 0x80010ab4 => 0xba41a783 (* lw a5,-1116(gp) # 800803a4 <xSendNotificationFromISR>  *)
    | 0x80010ab8 => 0x00078863 (* beqz a5,80010ac8 <prvNotifiedTask+0xf4c>  *)
    | 0x80010abc => 0x43400593 (* li a1,1076  *)
    | 0x80010ac0 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010ac4 => 0x7cc010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010ac8 => 0x00100793 (* li a5,1  *)
    | 0x80010acc => 0xbaf1a223 (* sw a5,-1116(gp) # 800803a4 <xSendNotificationFromISR>  *)
    | 0x80010ad0 => 0x004b2783 (* lw a5,4(s6)  *)
    | 0x80010ad4 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x80010ad8 => 0x00fb2223 (* sw a5,4(s6)  *)
    | 0x80010adc => 0x00079463 (* bnez a5,80010ae4 <prvNotifiedTask+0xf68>  *)
    | 0x80010ae0 => 0x30046073 (* csrs mstatus,8  *)
    | 0x80010ae4 => 0xfff00613 (* li a2,-1  *)
    | 0x80010ae8 => 0x00100593 (* li a1,1  *)
    | 0x80010aec => 0x000a0513 (* mv a0,s4  *)
    | 0x80010af0 => 0xf24f10ef (* jal 80002214 <ulTaskGenericNotifyTake>  *)
    | 0x80010af4 => 0xba41a783 (* lw a5,-1116(gp) # 800803a4 <xSendNotificationFromISR>  *)
    | 0x80010af8 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x80010afc => 0x00078863 (* beqz a5,80010b0c <prvNotifiedTask+0xf90>  *)
    | 0x80010b00 => 0x43f00593 (* li a1,1087  *)
    | 0x80010b04 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010b08 => 0x788010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010b0c => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x80010b10 => 0x01278863 (* beq a5,s2,80010b20 <prvNotifiedTask+0xfa4>  *)
    | 0x80010b14 => 0x44300593 (* li a1,1091  *)
    | 0x80010b18 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010b1c => 0x774010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010b20 => 0x000a8c93 (* mv s9,s5  *)
    | 0x80010b24 => 0x00000713 (* li a4,0  *)
    | 0x80010b28 => 0x01c10693 (* add a3,sp,28  *)
    | 0x80010b2c => 0x00000613 (* li a2,0  *)
    | 0x80010b30 => 0x00000593 (* li a1,0  *)
    | 0x80010b34 => 0x000a0513 (* mv a0,s4  *)
    | 0x80010b38 => 0x809f10ef (* jal 80002340 <xTaskGenericNotifyWait>  *)
    | 0x80010b3c => 0x00050863 (* beqz a0,80010b4c <prvNotifiedTask+0xfd0>  *)
    | 0x80010b40 => 0x44d00593 (* li a1,1101  *)
    | 0x80010b44 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010b48 => 0x748010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010b4c => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x80010b50 => 0x00078863 (* beqz a5,80010b60 <prvNotifiedTask+0xfe4>  *)
    | 0x80010b54 => 0x44e00593 (* li a1,1102  *)
    | 0x80010b58 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010b5c => 0x734010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010b60 => 0xfffc8c93 (* add s9,s9,-1  *)
    | 0x80010b64 => 0xfc0c90e3 (* bnez s9,80010b24 <prvNotifiedTask+0xfa8>  *)
    | 0x80010b68 => 0xbbc1a783 (* lw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010b6c => 0x001a0a13 (* add s4,s4,1  *)
    | 0x80010b70 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010b74 => 0xbaf1ae23 (* sw a5,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010b78 => 0xf38a16e3 (* bne s4,s8,80010aa4 <prvNotifiedTask+0xf28>  *)
    | 0x80010b7c => 0xbb81a783 (* lw a5,-1096(gp) # 800803b8 <ulCourseCycleCounter>  *)
    | 0x80010b80 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010b84 => 0xbaf1ac23 (* sw a5,-1096(gp) # 800803b8 <ulCourseCycleCounter>  *)
    | 0x80010b88 => 0x834ff06f (* j 8000fbbc <prvNotifiedTask+0x40>  *)
    | 0x80010b8c => 0x00000613 (* li a2,0  *)
    | 0x80010b90 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010b94 => 0x00000513 (* li a0,0  *)
    | 0x80010b98 => 0xf91f10ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010b9c => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x80010ba0 => 0x00050863 (* beqz a0,80010bb0 <prvNotifiedTask+0x1034>  *)
    | 0x80010ba4 => 0x1a300593 (* li a1,419  *)
    | 0x80010ba8 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010bac => 0x6e4010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010bb0 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010bb4 => 0xc90ff06f (* j 80010044 <prvNotifiedTask+0x4c8>  *)
    | 0x80010bb8 => 0x00000613 (* li a2,0  *)
    | 0x80010bbc => 0x000a8593 (* mv a1,s5  *)
    | 0x80010bc0 => 0x00000513 (* li a0,0  *)
    | 0x80010bc4 => 0xf65f10ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010bc8 => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x80010bcc => 0x01750863 (* beq a0,s7,80010bdc <prvNotifiedTask+0x1060>  *)
    | 0x80010bd0 => 0x1d200593 (* li a1,466  *)
    | 0x80010bd4 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010bd8 => 0x6b8010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010bdc => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010be0 => 0xd1cff06f (* j 800100fc <prvNotifiedTask+0x580>  *)
    | 0x80010be4 => 0x00000613 (* li a2,0  *)
    | 0x80010be8 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010bec => 0x00000513 (* li a0,0  *)
    | 0x80010bf0 => 0xf39f10ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010bf4 => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x80010bf8 => 0x00050863 (* beqz a0,80010c08 <prvNotifiedTask+0x108c>  *)
    | 0x80010bfc => 0x21400593 (* li a1,532  *)
    | 0x80010c00 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010c04 => 0x68c010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010c08 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010c0c => 0xde0ff06f (* j 800101ec <prvNotifiedTask+0x670>  *)
    | 0x80010c10 => 0xe4050e63 (* beqz a0,8001026c <prvNotifiedTask+0x6f0>  *)
    | 0x80010c14 => 0x23f00593 (* li a1,575  *)
    | 0x80010c18 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010c1c => 0x674010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010c20 => 0xe4cff06f (* j 8001026c <prvNotifiedTask+0x6f0>  *)
    | 0x80010c24 => 0x00000613 (* li a2,0  *)
    | 0x80010c28 => 0x000a8593 (* mv a1,s5  *)
    | 0x80010c2c => 0x00000513 (* li a0,0  *)
    | 0x80010c30 => 0xef9f10ef (* jal 80002b28 <ulTaskGenericNotifyValueClear>  *)
    | 0x80010c34 => 0x00a12c23 (* sw a0,24(sp)  *)
    | 0x80010c38 => 0x01850863 (* beq a0,s8,80010c48 <prvNotifiedTask+0x10cc>  *)
    | 0x80010c3c => 0x24d00593 (* li a1,589  *)
    | 0x80010c40 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010c44 => 0x64c010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010c48 => 0x001a8a93 (* add s5,s5,1  *)
    | 0x80010c4c => 0xe44ff06f (* j 80010290 <prvNotifiedTask+0x714>  *)
    | 0x80010c50 => 0xb80784e3 (* beqz a5,800107d8 <prvNotifiedTask+0xc5c>  *)
    | 0x80010c54 => 0x37100593 (* li a1,881  *)
    | 0x80010c58 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010c5c => 0x634010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010c60 => 0xb79ff06f (* j 800107d8 <prvNotifiedTask+0xc5c>  *)
    | 0x80010c64 => 0x000c0a93 (* mv s5,s8  *)
    | 0x80010c68 => 0xbfdff06f (* j 80010864 <prvNotifiedTask+0xce8>  *)
    | 0x80010c6c => 0x00050863 (* beqz a0,80010c7c <prvNotifiedTask+0x1100>  *)
    | 0x80010c70 => 0x41000593 (* li a1,1040  *)
    | 0x80010c74 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010c78 => 0x618010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010c7c => 0x01c12783 (* lw a5,28(sp)  *)
    | 0x80010c80 => 0xdc0788e3 (* beqz a5,80010a50 <prvNotifiedTask+0xed4>  *)
    | 0x80010c84 => 0x41100593 (* li a1,1041  *)
    | 0x80010c88 => 0x3a440513 (* add a0,s0,932  *)
    | 0x80010c8c => 0x604010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010c90 => 0xdc1ff06f (* j 80010a50 <prvNotifiedTask+0xed4>  *)
    (* <prvSuspendedTaskTimerTestCallback> *)
    | 0x80010c94 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80010c98 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80010c9c => 0xb9c1a783 (* lw a5,-1124(gp) # 8008039c <ulCallCount.7>  *)
    | 0x80010ca0 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80010ca4 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80010ca8 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80010cac => 0x0017f793 (* and a5,a5,1  *)
    | 0x80010cb0 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010cb4 => 0x04079463 (* bnez a5,80010cfc <prvSuspendedTaskTimerTestCallback+0x68>  *)
    | 0x80010cb8 => 0xa35f00ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80010cbc => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010cc0 => 0xd65ef0ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80010cc4 => 0x00300793 (* li a5,3  *)
    | 0x80010cc8 => 0x2f200593 (* li a1,754  *)
    | 0x80010ccc => 0x06f51c63 (* bne a0,a5,80010d44 <prvSuspendedTaskTimerTestCallback+0xb0>  *)
    | 0x80010cd0 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010cd4 => 0xfc9ef0ef (* jal 80000c9c <vTaskResume>  *)
    | 0x80010cd8 => 0xb9c1a783 (* lw a5,-1124(gp) # 8008039c <ulCallCount.7>  *)
    | 0x80010cdc => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80010ce0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80010ce4 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010ce8 => 0xb8f1ae23 (* sw a5,-1124(gp) # 8008039c <ulCallCount.7>  *)
    | 0x80010cec => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80010cf0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80010cf4 => 0x01010113 (* add sp,sp,16  *)
    | 0x80010cf8 => 0x00008067 (* ret  *)
    | 0x80010cfc => 0x9f1f00ef (* jal 800016ec <vTaskSuspend>  *)
    | 0x80010d00 => 0xb981a583 (* lw a1,-1128(gp) # 80080398 <uxIndexToNotify.6>  *)
    | 0x80010d04 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010d08 => 0x00000713 (* li a4,0  *)
    | 0x80010d0c => 0x00300693 (* li a3,3  *)
    | 0x80010d10 => 0x00100613 (* li a2,1  *)
    | 0x80010d14 => 0xfb0f10ef (* jal 800024c4 <xTaskGenericNotify>  *)
    | 0x80010d18 => 0xb981a783 (* lw a5,-1128(gp) # 80080398 <uxIndexToNotify.6>  *)
    | 0x80010d1c => 0x00200713 (* li a4,2  *)
    | 0x80010d20 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010d24 => 0x00f77463 (* bgeu a4,a5,80010d2c <prvSuspendedTaskTimerTestCallback+0x98>  *)
    | 0x80010d28 => 0x00000793 (* li a5,0  *)
    | 0x80010d2c => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010d30 => 0xb8f1ac23 (* sw a5,-1128(gp) # 80080398 <uxIndexToNotify.6>  *)
    | 0x80010d34 => 0xcf1ef0ef (* jal 80000a24 <eTaskGetState>  *)
    | 0x80010d38 => 0x00300793 (* li a5,3  *)
    | 0x80010d3c => 0xf8f50ae3 (* beq a0,a5,80010cd0 <prvSuspendedTaskTimerTestCallback+0x3c>  *)
    | 0x80010d40 => 0x30700593 (* li a1,775  *)
    | 0x80010d44 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010d48 => 0x3a450513 (* add a0,a0,932 # 800143a4 <_etext+0x7d4>  *)
    | 0x80010d4c => 0x544010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010d50 => 0xf81ff06f (* j 80010cd0 <prvSuspendedTaskTimerTestCallback+0x3c>  *)
    (* <vStartTaskNotifyArrayTask> *)
    | 0x80010d54 => 0x80011737 (* lui a4,0x80011  *)
    | 0x80010d58 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010d5c => 0xff010113 (* add sp,sp,-16  *)
    | 0x80010d60 => 0xc9470713 (* add a4,a4,-876 # 80010c94 <prvSuspendedTaskTimerTestCallback>  *)
    | 0x80010d64 => 0x00000693 (* li a3,0  *)
    | 0x80010d68 => 0x00000613 (* li a2,0  *)
    | 0x80010d6c => 0x03200593 (* li a1,50  *)
    | 0x80010d70 => 0x37c50513 (* add a0,a0,892 # 8001437c <_etext+0x7ac>  *)
    | 0x80010d74 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80010d78 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80010d7c => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80010d80 => 0xd25f30ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x80010d84 => 0xbaa1a623 (* sw a0,-1108(gp) # 800803ac <xNotifyWhileSuspendedTimer>  *)
    | 0x80010d88 => 0x80010737 (* lui a4,0x80010  *)
    | 0x80010d8c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010d90 => 0xb3070713 (* add a4,a4,-1232 # 8000fb30 <prvNotifyingTimerCallback>  *)
    | 0x80010d94 => 0x00000693 (* li a3,0  *)
    | 0x80010d98 => 0x00000613 (* li a2,0  *)
    | 0x80010d9c => 0x06400593 (* li a1,100  *)
    | 0x80010da0 => 0x38c50513 (* add a0,a0,908 # 8001438c <_etext+0x7bc>  *)
    | 0x80010da4 => 0xd01f30ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x80010da8 => 0xbac1a783 (* lw a5,-1108(gp) # 800803ac <xNotifyWhileSuspendedTimer>  *)
    | 0x80010dac => 0xbaa1a823 (* sw a0,-1104(gp) # 800803b0 <xIncrementingIndexTimer>  *)
    | 0x80010db0 => 0x00079a63 (* bnez a5,80010dc4 <vStartTaskNotifyArrayTask+0x70>  *)
    | 0x80010db4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010db8 => 0x09c00593 (* li a1,156  *)
    | 0x80010dbc => 0x3a450513 (* add a0,a0,932 # 800143a4 <_etext+0x7d4>  *)
    | 0x80010dc0 => 0x4d0010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010dc4 => 0xbb01a783 (* lw a5,-1104(gp) # 800803b0 <xIncrementingIndexTimer>  *)
    | 0x80010dc8 => 0x00079a63 (* bnez a5,80010ddc <vStartTaskNotifyArrayTask+0x88>  *)
    | 0x80010dcc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010dd0 => 0x09d00593 (* li a1,157  *)
    | 0x80010dd4 => 0x3a450513 (* add a0,a0,932 # 800143a4 <_etext+0x7d4>  *)
    | 0x80010dd8 => 0x4b8010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010ddc => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80010de0 => 0x80010537 (* lui a0,0x80010  *)
    | 0x80010de4 => 0xbb418793 (* add a5,gp,-1100 # 800803b4 <xTaskToNotify>  *)
    | 0x80010de8 => 0x00000713 (* li a4,0  *)
    | 0x80010dec => 0x00000693 (* li a3,0  *)
    | 0x80010df0 => 0x07800613 (* li a2,120  *)
    | 0x80010df4 => 0x3d858593 (* add a1,a1,984 # 800143d8 <_etext+0x808>  *)
    | 0x80010df8 => 0xb7c50513 (* add a0,a0,-1156 # 8000fb7c <prvNotifiedTask>  *)
    | 0x80010dfc => 0xa01ef0ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80010e00 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80010e04 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80010e08 => 0x800107b7 (* lui a5,0x80010  *)
    | 0x80010e0c => 0xb0c78793 (* add a5,a5,-1268 # 8000fb0c <prvRand>  *)
    | 0x80010e10 => 0xbaf1a423 (* sw a5,-1112(gp) # 800803a8 <uxNextRand>  *)
    | 0x80010e14 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80010e18 => 0x01010113 (* add sp,sp,16  *)
    | 0x80010e1c => 0x00008067 (* ret  *)
    (* <xNotifyArrayTaskFromISR> *)
    | 0x80010e20 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80010e24 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80010e28 => 0xbb41a783 (* lw a5,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010e2c => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80010e30 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80010e34 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80010e38 => 0x00079a63 (* bnez a5,80010e4c <xNotifyArrayTaskFromISR+0x2c>  *)
    | 0x80010e3c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010e40 => 0x46100593 (* li a1,1121  *)
    | 0x80010e44 => 0x3a450513 (* add a0,a0,932 # 800143a4 <_etext+0x7d4>  *)
    | 0x80010e48 => 0x448010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010e4c => 0xba41a703 (* lw a4,-1116(gp) # 800803a4 <xSendNotificationFromISR>  *)
    | 0x80010e50 => 0x00100693 (* li a3,1  *)
    | 0x80010e54 => 0x04d71663 (* bne a4,a3,80010ea0 <xNotifyArrayTaskFromISR+0x80>  *)
    | 0x80010e58 => 0xba01a223 (* sw zero,-1116(gp) # 800803a4 <xSendNotificationFromISR>  *)
    | 0x80010e5c => 0xb941a783 (* lw a5,-1132(gp) # 80080394 <xAPIToUse.5>  *)
    | 0x80010e60 => 0xb901a583 (* lw a1,-1136(gp) # 80080390 <uxIndexToNotify.4>  *)
    | 0x80010e64 => 0x04e78a63 (* beq a5,a4,80010eb8 <xNotifyArrayTaskFromISR+0x98>  *)
    | 0x80010e68 => 0x00200713 (* li a4,2  *)
    | 0x80010e6c => 0x06e78463 (* beq a5,a4,80010ed4 <xNotifyArrayTaskFromISR+0xb4>  *)
    | 0x80010e70 => 0x00079e63 (* bnez a5,80010e8c <xNotifyArrayTaskFromISR+0x6c>  *)
    | 0x80010e74 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010e78 => 0x00000613 (* li a2,0  *)
    | 0x80010e7c => 0xaa9f10ef (* jal 80002924 <vTaskGenericNotifyGiveFromISR>  *)
    | 0x80010e80 => 0xb941a783 (* lw a5,-1132(gp) # 80080394 <xAPIToUse.5>  *)
    | 0x80010e84 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010e88 => 0xb8f1aa23 (* sw a5,-1132(gp) # 80080394 <xAPIToUse.5>  *)
    | 0x80010e8c => 0xb901a783 (* lw a5,-1136(gp) # 80080390 <uxIndexToNotify.4>  *)
    | 0x80010e90 => 0x00200713 (* li a4,2  *)
    | 0x80010e94 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010e98 => 0x06f76e63 (* bltu a4,a5,80010f14 <xNotifyArrayTaskFromISR+0xf4>  *)
    | 0x80010e9c => 0xb8f1a823 (* sw a5,-1136(gp) # 80080390 <uxIndexToNotify.4>  *)
    | 0x80010ea0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80010ea4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80010ea8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80010eac => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80010eb0 => 0x02010113 (* add sp,sp,32  *)
    | 0x80010eb4 => 0x00008067 (* ret  *)
    | 0x80010eb8 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010ebc => 0x00000793 (* li a5,0  *)
    | 0x80010ec0 => 0x00000713 (* li a4,0  *)
    | 0x80010ec4 => 0x00200693 (* li a3,2  *)
    | 0x80010ec8 => 0x00000613 (* li a2,0  *)
    | 0x80010ecc => 0x81df10ef (* jal 800026e8 <xTaskGenericNotifyFromISR>  *)
    | 0x80010ed0 => 0xfb1ff06f (* j 80010e80 <xNotifyArrayTaskFromISR+0x60>  *)
    | 0x80010ed4 => 0xbb41a503 (* lw a0,-1100(gp) # 800803b4 <xTaskToNotify>  *)
    | 0x80010ed8 => 0x0ff00793 (* li a5,255  *)
    | 0x80010edc => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80010ee0 => 0x00c10713 (* add a4,sp,12  *)
    | 0x80010ee4 => 0x00000793 (* li a5,0  *)
    | 0x80010ee8 => 0x00200693 (* li a3,2  *)
    | 0x80010eec => 0x00000613 (* li a2,0  *)
    | 0x80010ef0 => 0xff8f10ef (* jal 800026e8 <xTaskGenericNotifyFromISR>  *)
    | 0x80010ef4 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x80010ef8 => 0x00078a63 (* beqz a5,80010f0c <xNotifyArrayTaskFromISR+0xec>  *)
    | 0x80010efc => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010f00 => 0x47d00593 (* li a1,1149  *)
    | 0x80010f04 => 0x3a450513 (* add a0,a0,932 # 800143a4 <_etext+0x7d4>  *)
    | 0x80010f08 => 0x388010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010f0c => 0xb801aa23 (* sw zero,-1132(gp) # 80080394 <xAPIToUse.5>  *)
    | 0x80010f10 => 0xf7dff06f (* j 80010e8c <xNotifyArrayTaskFromISR+0x6c>  *)
    | 0x80010f14 => 0xb801a823 (* sw zero,-1136(gp) # 80080390 <uxIndexToNotify.4>  *)
    | 0x80010f18 => 0xf89ff06f (* j 80010ea0 <xNotifyArrayTaskFromISR+0x80>  *)
    (* <xAreTaskNotificationArrayTasksStillRunning> *)
    | 0x80010f1c => 0xbbc1a603 (* lw a2,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010f20 => 0xb8c1a583 (* lw a1,-1140(gp) # 8008038c <ulLastFineCycleCount.3>  *)
    | 0x80010f24 => 0x02c59263 (* bne a1,a2,80010f48 <xAreTaskNotificationArrayTasksStillRunning+0x2c>  *)
    | 0x80010f28 => 0x8201aa23 (* sw zero,-1996(gp) # 80080034 <xErrorStatus.2>  *)
    | 0x80010f2c => 0xb881a783 (* lw a5,-1144(gp) # 80080388 <ulCallCount.1>  *)
    | 0x80010f30 => 0x00200613 (* li a2,2  *)
    | 0x80010f34 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010f38 => 0x00f66e63 (* bltu a2,a5,80010f54 <xAreTaskNotificationArrayTasksStillRunning+0x38>  *)
    | 0x80010f3c => 0xb8f1a423 (* sw a5,-1144(gp) # 80080388 <ulCallCount.1>  *)
    | 0x80010f40 => 0x8341a503 (* lw a0,-1996(gp) # 80080034 <xErrorStatus.2>  *)
    | 0x80010f44 => 0x00008067 (* ret  *)
    | 0x80010f48 => 0xbbc1a683 (* lw a3,-1092(gp) # 800803bc <ulFineCycleCount>  *)
    | 0x80010f4c => 0xb8d1a623 (* sw a3,-1140(gp) # 8008038c <ulLastFineCycleCount.3>  *)
    | 0x80010f50 => 0xfddff06f (* j 80010f2c <xAreTaskNotificationArrayTasksStillRunning+0x10>  *)
    | 0x80010f54 => 0xb801a423 (* sw zero,-1144(gp) # 80080388 <ulCallCount.1>  *)
    | 0x80010f58 => 0xbb81a603 (* lw a2,-1096(gp) # 800803b8 <ulCourseCycleCounter>  *)
    | 0x80010f5c => 0xb841a583 (* lw a1,-1148(gp) # 80080384 <ulLastCourseCycleCount.0>  *)
    | 0x80010f60 => 0x00c59663 (* bne a1,a2,80010f6c <xAreTaskNotificationArrayTasksStillRunning+0x50>  *)
    | 0x80010f64 => 0x8201aa23 (* sw zero,-1996(gp) # 80080034 <xErrorStatus.2>  *)
    | 0x80010f68 => 0xfd9ff06f (* j 80010f40 <xAreTaskNotificationArrayTasksStillRunning+0x24>  *)
    | 0x80010f6c => 0xbb81a683 (* lw a3,-1096(gp) # 800803b8 <ulCourseCycleCounter>  *)
    | 0x80010f70 => 0xb8d1a223 (* sw a3,-1148(gp) # 80080384 <ulLastCourseCycleCount.0>  *)
    | 0x80010f74 => 0xfcdff06f (* j 80010f40 <xAreTaskNotificationArrayTasksStillRunning+0x24>  *)
    (* <prvISRAutoReloadTimerCallback> *)
    | 0x80010f78 => 0xbdc1c783 (* lbu a5,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80010f7c => 0x00178793 (* add a5,a5,1  *)
    | 0x80010f80 => 0xbcf18e23 (* sb a5,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80010f84 => 0x00008067 (* ret  *)
    (* <prvISROneShotTimerCallback> *)
    | 0x80010f88 => 0xbd41c783 (* lbu a5,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80010f8c => 0x00178793 (* add a5,a5,1  *)
    | 0x80010f90 => 0xbcf18a23 (* sb a5,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80010f94 => 0x00008067 (* ret  *)
    (* <prvOneShotTimerCallback> *)
    | 0x80010f98 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80010f9c => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80010fa0 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80010fa4 => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80010fa8 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80010fac => 0x00050913 (* mv s2,a0  *)
    | 0x80010fb0 => 0xf2df30ef (* jal 80004edc <pvTimerGetTimerID>  *)
    | 0x80010fb4 => 0xbcc1a783 (* lw a5,-1076(gp) # 800803cc <uxCallCount.4>  *)
    | 0x80010fb8 => 0x00050413 (* mv s0,a0  *)
    | 0x80010fbc => 0x00a78a63 (* beq a5,a0,80010fd0 <prvOneShotTimerCallback+0x38>  *)
    | 0x80010fc0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80010fc4 => 0x4aa00593 (* li a1,1194  *)
    | 0x80010fc8 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80010fcc => 0x2c4010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80010fd0 => 0x00140593 (* add a1,s0,1  *)
    | 0x80010fd4 => 0x00090513 (* mv a0,s2  *)
    | 0x80010fd8 => 0xf51f30ef (* jal 80004f28 <vTimerSetTimerID>  *)
    | 0x80010fdc => 0xbcc1a783 (* lw a5,-1076(gp) # 800803cc <uxCallCount.4>  *)
    | 0x80010fe0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80010fe4 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010fe8 => 0xbcf1a623 (* sw a5,-1076(gp) # 800803cc <uxCallCount.4>  *)
    | 0x80010fec => 0xbe41c783 (* lbu a5,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x80010ff0 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80010ff4 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80010ff8 => 0x00178793 (* add a5,a5,1  *)
    | 0x80010ffc => 0xbef18223 (* sb a5,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x80011000 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x80011004 => 0x01010113 (* add sp,sp,16  *)
    | 0x80011008 => 0x00008067 (* ret  *)
    (* <prvTimerTestTask> *)
    | 0x8001100c => 0xfb010113 (* add sp,sp,-80  *)
    | 0x80011010 => 0x03712623 (* sw s7,44(sp)  *)
    | 0x80011014 => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011018 => 0x00300593 (* li a1,3  *)
    | 0x8001101c => 0x80011737 (* lui a4,0x80011  *)
    | 0x80011020 => 0x02f585b3 (* mul a1,a1,a5  *)
    | 0x80011024 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011028 => 0xf9870713 (* add a4,a4,-104 # 80010f98 <prvOneShotTimerCallback>  *)
    | 0x8001102c => 0x00000693 (* li a3,0  *)
    | 0x80011030 => 0x00000613 (* li a2,0  *)
    | 0x80011034 => 0x41850513 (* add a0,a0,1048 # 80014418 <_etext+0x848>  *)
    | 0x80011038 => 0x03312e23 (* sw s3,60(sp)  *)
    | 0x8001103c => 0x04112623 (* sw ra,76(sp)  *)
    | 0x80011040 => 0x04812423 (* sw s0,72(sp)  *)
    | 0x80011044 => 0x04912223 (* sw s1,68(sp)  *)
    | 0x80011048 => 0x05212023 (* sw s2,64(sp)  *)
    | 0x8001104c => 0x03412c23 (* sw s4,56(sp)  *)
    | 0x80011050 => 0x03512a23 (* sw s5,52(sp)  *)
    | 0x80011054 => 0x03612823 (* sw s6,48(sp)  *)
    | 0x80011058 => 0x03812423 (* sw s8,40(sp)  *)
    | 0x8001105c => 0x03912223 (* sw s9,36(sp)  *)
    | 0x80011060 => 0x03a12023 (* sw s10,32(sp)  *)
    | 0x80011064 => 0x01b12e23 (* sw s11,28(sp)  *)
    | 0x80011068 => 0xa3df30ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x8001106c => 0xbea1a423 (* sw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011070 => 0x02051063 (* bnez a0,80011090 <prvTimerTestTask+0x84>  *)
    | 0x80011074 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011078 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001107c => 0x00079a63 (* bnez a5,80011090 <prvTimerTestTask+0x84>  *)
    | 0x80011080 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011084 => 0x0b200593 (* li a1,178  *)
    | 0x80011088 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x8001108c => 0x204010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011090 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011094 => 0x00100593 (* li a1,1  *)
    | 0x80011098 => 0xcfdf30ef (* jal 80004d94 <vTimerSetReloadMode>  *)
    | 0x8001109c => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x800110a0 => 0xdb1f30ef (* jal 80004e50 <uxTimerGetReloadMode>  *)
    | 0x800110a4 => 0x00100793 (* li a5,1  *)
    | 0x800110a8 => 0x00f50a63 (* beq a0,a5,800110bc <prvTimerTestTask+0xb0>  *)
    | 0x800110ac => 0x80014537 (* lui a0,0x80014  *)
    | 0x800110b0 => 0x0bc00593 (* li a1,188  *)
    | 0x800110b4 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x800110b8 => 0x1d8010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800110bc => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x800110c0 => 0x00000593 (* li a1,0  *)
    | 0x800110c4 => 0xcd1f30ef (* jal 80004d94 <vTimerSetReloadMode>  *)
    | 0x800110c8 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x800110cc => 0xd85f30ef (* jal 80004e50 <uxTimerGetReloadMode>  *)
    | 0x800110d0 => 0x00050a63 (* beqz a0,800110e4 <prvTimerTestTask+0xd8>  *)
    | 0x800110d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800110d8 => 0x0c200593 (* li a1,194  *)
    | 0x800110dc => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x800110e0 => 0x1b0010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800110e4 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x800110e8 => 0x4d078413 (* add s0,a5,1232 # 800954d0 <xAutoReloadTimers>  *)
    | 0x800110ec => 0x4d078793 (* add a5,a5,1232  *)
    | 0x800110f0 => 0x00f12423 (* sw a5,8(sp)  *)
    | 0x800110f4 => 0x80014937 (* lui s2,0x80014  *)
    | 0x800110f8 => 0x00042503 (* lw a0,0(s0)  *)
    | 0x800110fc => 0xd91f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011100 => 0x00051e63 (* bnez a0,8001111c <prvTimerTestTask+0x110>  *)
    | 0x80011104 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011108 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001110c => 0x00079863 (* bnez a5,8001111c <prvTimerTestTask+0x110>  *)
    | 0x80011110 => 0x17b00593 (* li a1,379  *)
    | 0x80011114 => 0x3e890513 (* add a0,s2,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011118 => 0x178010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001111c => 0x800957b7 (* lui a5,0x80095  *)
    | 0x80011120 => 0x00440413 (* add s0,s0,4  *)
    | 0x80011124 => 0x52078793 (* add a5,a5,1312 # 80095520 <xAutoReloadTimers+0x50>  *)
    | 0x80011128 => 0xfcf418e3 (* bne s0,a5,800110f8 <prvTimerTestTask+0xec>  *)
    | 0x8001112c => 0x00812783 (* lw a5,8(sp)  *)
    | 0x80011130 => 0x0507a503 (* lw a0,80(a5)  *)
    | 0x80011134 => 0xd59f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011138 => 0x02050063 (* beqz a0,80011158 <prvTimerTestTask+0x14c>  *)
    | 0x8001113c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011140 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011144 => 0x00079a63 (* bnez a5,80011158 <prvTimerTestTask+0x14c>  *)
    | 0x80011148 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8001114c => 0x18200593 (* li a1,386  *)
    | 0x80011150 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011154 => 0x13c010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011158 => 0x80095d37 (* lui s10,0x80095  *)
    | 0x8001115c => 0x800144b7 (* lui s1,0x80014  *)
    | 0x80011160 => 0x4b8d0c13 (* add s8,s10,1208 # 800954b8 <ucAutoReloadTimerCounters>  *)
    | 0x80011164 => 0x00100a13 (* li s4,1  *)
    | 0x80011168 => 0x00000513 (* li a0,0  *)
    | 0x8001116c => 0x981ef0ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x80011170 => 0x00800593 (* li a1,8  *)
    | 0x80011174 => 0x00050a93 (* mv s5,a0  *)
    | 0x80011178 => 0x00000513 (* li a0,0  *)
    | 0x8001117c => 0x995ef0ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80011180 => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011184 => 0x01400913 (* li s2,20  *)
    | 0x80011188 => 0x4b8d0c93 (* add s9,s10,1208  *)
    | 0x8001118c => 0x02f90933 (* mul s2,s2,a5  *)
    | 0x80011190 => 0x00100b13 (* li s6,1  *)
    | 0x80011194 => 0x01500d93 (* li s11,21  *)
    | 0x80011198 => 0x00090513 (* mv a0,s2  *)
    | 0x8001119c => 0x97cf00ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800111a0 => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x800111a4 => 0x000cc683 (* lbu a3,0(s9)  *)
    | 0x800111a8 => 0x02fb07b3 (* mul a5,s6,a5  *)
    | 0x800111ac => 0x02f957b3 (* divu a5,s2,a5  *)
    | 0x800111b0 => 0x0ff7f793 (* zext.b a5,a5  *)
    | 0x800111b4 => 0xfff78713 (* add a4,a5,-1  *)
    | 0x800111b8 => 0x0ff77713 (* zext.b a4,a4  *)
    | 0x800111bc => 0x00e6e463 (* bltu a3,a4,800111c4 <prvTimerTestTask+0x1b8>  *)
    | 0x800111c0 => 0x00d7fe63 (* bgeu a5,a3,800111dc <prvTimerTestTask+0x1d0>  *)
    | 0x800111c4 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800111c8 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800111cc => 0x00079863 (* bnez a5,800111dc <prvTimerTestTask+0x1d0>  *)
    | 0x800111d0 => 0x1a900593 (* li a1,425  *)
    | 0x800111d4 => 0x3e848513 (* add a0,s1,1000 # 800143e8 <_etext+0x818>  *)
    | 0x800111d8 => 0x0b8010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800111dc => 0x001b0b13 (* add s6,s6,1  *)
    | 0x800111e0 => 0x001c8c93 (* add s9,s9,1  *)
    | 0x800111e4 => 0xfbbb1ee3 (* bne s6,s11,800111a0 <prvTimerTestTask+0x194>  *)
    | 0x800111e8 => 0x000a8593 (* mv a1,s5  *)
    | 0x800111ec => 0x00000513 (* li a0,0  *)
    | 0x800111f0 => 0x921ef0ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x800111f4 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800111f8 => 0x01479863 (* bne a5,s4,80011208 <prvTimerTestTask+0x1fc>  *)
    | 0x800111fc => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011200 => 0x00178793 (* add a5,a5,1  *)
    | 0x80011204 => 0xbef1a823 (* sw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011208 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x8001120c => 0x4d078913 (* add s2,a5,1232 # 800954d0 <xAutoReloadTimers>  *)
    | 0x80011210 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80011214 => 0xc79f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011218 => 0x00051e63 (* bnez a0,80011234 <prvTimerTestTask+0x228>  *)
    | 0x8001121c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011220 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011224 => 0x00079863 (* bnez a5,80011234 <prvTimerTestTask+0x228>  *)
    | 0x80011228 => 0x1c700593 (* li a1,455  *)
    | 0x8001122c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011230 => 0x060010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011234 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80011238 => 0x00000713 (* li a4,0  *)
    | 0x8001123c => 0x00000693 (* li a3,0  *)
    | 0x80011240 => 0x00000613 (* li a2,0  *)
    | 0x80011244 => 0x00300593 (* li a1,3  *)
    | 0x80011248 => 0x9f1f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8001124c => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80011250 => 0xc3df30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011254 => 0x00050e63 (* beqz a0,80011270 <prvTimerTestTask+0x264>  *)
    | 0x80011258 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001125c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011260 => 0x00079863 (* bnez a5,80011270 <prvTimerTestTask+0x264>  *)
    | 0x80011264 => 0x1d300593 (* li a1,467  *)
    | 0x80011268 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x8001126c => 0x024010ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011270 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x80011274 => 0x00490913 (* add s2,s2,4  *)
    | 0x80011278 => 0x52078793 (* add a5,a5,1312 # 80095520 <xAutoReloadTimers+0x50>  *)
    | 0x8001127c => 0xf8f91ae3 (* bne s2,a5,80011210 <prvTimerTestTask+0x204>  *)
    | 0x80011280 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80011284 => 0x80080937 (* lui s2,0x80080  *)
    | 0x80011288 => 0x00492783 (* lw a5,4(s2) # 80080004 <xCriticalNesting>  *)
    | 0x8001128c => 0x00178793 (* add a5,a5,1  *)
    | 0x80011290 => 0x00f92223 (* sw a5,4(s2)  *)
    | 0x80011294 => 0x014c4783 (* lbu a5,20(s8)  *)
    | 0x80011298 => 0x00078e63 (* beqz a5,800112b4 <prvTimerTestTask+0x2a8>  *)
    | 0x8001129c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800112a0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800112a4 => 0x00079863 (* bnez a5,800112b4 <prvTimerTestTask+0x2a8>  *)
    | 0x800112a8 => 0x1e000593 (* li a1,480  *)
    | 0x800112ac => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800112b0 => 0x7e1000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800112b4 => 0x01500613 (* li a2,21  *)
    | 0x800112b8 => 0x00000593 (* li a1,0  *)
    | 0x800112bc => 0x000c0513 (* mv a0,s8  *)
    | 0x800112c0 => 0x488020ef (* jal 80013748 <memset>  *)
    | 0x800112c4 => 0x00492783 (* lw a5,4(s2)  *)
    | 0x800112c8 => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800112cc => 0x00f92223 (* sw a5,4(s2)  *)
    | 0x800112d0 => 0x00079463 (* bnez a5,800112d8 <prvTimerTestTask+0x2cc>  *)
    | 0x800112d4 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800112d8 => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x800112dc => 0x01400513 (* li a0,20  *)
    | 0x800112e0 => 0x00000913 (* li s2,0  *)
    | 0x800112e4 => 0x02f50533 (* mul a0,a0,a5  *)
    | 0x800112e8 => 0x01400a93 (* li s5,20  *)
    | 0x800112ec => 0x82cf00ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800112f0 => 0x012c07b3 (* add a5,s8,s2  *)
    | 0x800112f4 => 0x0007c783 (* lbu a5,0(a5)  *)
    | 0x800112f8 => 0x00078e63 (* beqz a5,80011314 <prvTimerTestTask+0x308>  *)
    | 0x800112fc => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011300 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011304 => 0x00079863 (* bnez a5,80011314 <prvTimerTestTask+0x308>  *)
    | 0x80011308 => 0x1f100593 (* li a1,497  *)
    | 0x8001130c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011310 => 0x781000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011314 => 0x00190913 (* add s2,s2,1  *)
    | 0x80011318 => 0xfd591ce3 (* bne s2,s5,800112f0 <prvTimerTestTask+0x2e4>  *)
    | 0x8001131c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011320 => 0x01479863 (* bne a5,s4,80011330 <prvTimerTestTask+0x324>  *)
    | 0x80011324 => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011328 => 0x00178793 (* add a5,a5,1  *)
    | 0x8001132c => 0xbef1a823 (* sw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011330 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011334 => 0xb59f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011338 => 0x00050e63 (* beqz a0,80011354 <prvTimerTestTask+0x348>  *)
    | 0x8001133c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011340 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011344 => 0x00079863 (* bnez a5,80011354 <prvTimerTestTask+0x348>  *)
    | 0x80011348 => 0x20700593 (* li a1,519  *)
    | 0x8001134c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011350 => 0x741000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011354 => 0xbe41c783 (* lbu a5,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x80011358 => 0x00078e63 (* beqz a5,80011374 <prvTimerTestTask+0x368>  *)
    | 0x8001135c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011360 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011364 => 0x00079863 (* bnez a5,80011374 <prvTimerTestTask+0x368>  *)
    | 0x80011368 => 0x20d00593 (* li a1,525  *)
    | 0x8001136c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011370 => 0x721000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011374 => 0xbe81a903 (* lw s2,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011378 => 0xafdef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8001137c => 0x00050613 (* mv a2,a0  *)
    | 0x80011380 => 0x00000713 (* li a4,0  *)
    | 0x80011384 => 0x00000693 (* li a3,0  *)
    | 0x80011388 => 0x00100593 (* li a1,1  *)
    | 0x8001138c => 0x00090513 (* mv a0,s2  *)
    | 0x80011390 => 0x8a9f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011394 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011398 => 0xaf5f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x8001139c => 0x00051e63 (* bnez a0,800113b8 <prvTimerTestTask+0x3ac>  *)
    | 0x800113a0 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800113a4 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800113a8 => 0x00079863 (* bnez a5,800113b8 <prvTimerTestTask+0x3ac>  *)
    | 0x800113ac => 0x21600593 (* li a1,534  *)
    | 0x800113b0 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800113b4 => 0x6dd000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800113b8 => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x800113bc => 0x00900513 (* li a0,9  *)
    | 0x800113c0 => 0x02f50533 (* mul a0,a0,a5  *)
    | 0x800113c4 => 0xf55ef0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800113c8 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x800113cc => 0xac1f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x800113d0 => 0x00050e63 (* beqz a0,800113ec <prvTimerTestTask+0x3e0>  *)
    | 0x800113d4 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800113d8 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800113dc => 0x00079863 (* bnez a5,800113ec <prvTimerTestTask+0x3e0>  *)
    | 0x800113e0 => 0x22100593 (* li a1,545  *)
    | 0x800113e4 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800113e8 => 0x6a9000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800113ec => 0xbe41c783 (* lbu a5,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x800113f0 => 0x53478663 (* beq a5,s4,8001191c <prvTimerTestTask+0x910>  *)
    | 0x800113f4 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800113f8 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800113fc => 0x00079863 (* bnez a5,8001140c <prvTimerTestTask+0x400>  *)
    | 0x80011400 => 0x22700593 (* li a1,551  *)
    | 0x80011404 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011408 => 0x689000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001140c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011410 => 0x01479863 (* bne a5,s4,80011420 <prvTimerTestTask+0x414>  *)
    | 0x80011414 => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011418 => 0x00178793 (* add a5,a5,1  *)
    | 0x8001141c => 0xbef1a823 (* sw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011420 => 0xbe81a903 (* lw s2,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011424 => 0xa51ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80011428 => 0x00050613 (* mv a2,a0  *)
    | 0x8001142c => 0x00000713 (* li a4,0  *)
    | 0x80011430 => 0x00000693 (* li a3,0  *)
    | 0x80011434 => 0x00100593 (* li a1,1  *)
    | 0x80011438 => 0x00090513 (* mv a0,s2  *)
    | 0x8001143c => 0xffcf30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011440 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011444 => 0xa49f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011448 => 0x00051e63 (* bnez a0,80011464 <prvTimerTestTask+0x458>  *)
    | 0x8001144c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011450 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011454 => 0x00079863 (* bnez a5,80011464 <prvTimerTestTask+0x458>  *)
    | 0x80011458 => 0x24400593 (* li a1,580  *)
    | 0x8001145c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011460 => 0x631000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011464 => 0x00812783 (* lw a5,8(sp)  *)
    | 0x80011468 => 0x04c7a903 (* lw s2,76(a5)  *)
    | 0x8001146c => 0xa09ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80011470 => 0x00050613 (* mv a2,a0  *)
    | 0x80011474 => 0x00000713 (* li a4,0  *)
    | 0x80011478 => 0x00000693 (* li a3,0  *)
    | 0x8001147c => 0x00100593 (* li a1,1  *)
    | 0x80011480 => 0x00090513 (* mv a0,s2  *)
    | 0x80011484 => 0xfb4f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011488 => 0x00812783 (* lw a5,8(sp)  *)
    | 0x8001148c => 0x04c7a503 (* lw a0,76(a5)  *)
    | 0x80011490 => 0x9fdf30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011494 => 0x00051e63 (* bnez a0,800114b0 <prvTimerTestTask+0x4a4>  *)
    | 0x80011498 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001149c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800114a0 => 0x00079863 (* bnez a5,800114b0 <prvTimerTestTask+0x4a4>  *)
    | 0x800114a4 => 0x24e00593 (* li a1,590  *)
    | 0x800114a8 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800114ac => 0x5e5000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800114b0 => 0x80095937 (* lui s2,0x80095  *)
    | 0x800114b4 => 0x00a00c93 (* li s9,10  *)
    | 0x800114b8 => 0x4d090913 (* add s2,s2,1232 # 800954d0 <xAutoReloadTimers>  *)
    | 0x800114bc => 0xbd01a503 (* lw a0,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x800114c0 => 0x00300793 (* li a5,3  *)
    | 0x800114c4 => 0x02a78533 (* mul a0,a5,a0  *)
    | 0x800114c8 => 0x00155513 (* srl a0,a0,0x1  *)
    | 0x800114cc => 0xe4def0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800114d0 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x800114d4 => 0x9b9f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x800114d8 => 0x00051e63 (* bnez a0,800114f4 <prvTimerTestTask+0x4e8>  *)
    | 0x800114dc => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800114e0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800114e4 => 0x00079863 (* bnez a5,800114f4 <prvTimerTestTask+0x4e8>  *)
    | 0x800114e8 => 0x25d00593 (* li a1,605  *)
    | 0x800114ec => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800114f0 => 0x5a1000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800114f4 => 0xbe41c783 (* lbu a5,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x800114f8 => 0x00078e63 (* beqz a5,80011514 <prvTimerTestTask+0x508>  *)
    | 0x800114fc => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011500 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011504 => 0x00079863 (* bnez a5,80011514 <prvTimerTestTask+0x508>  *)
    | 0x80011508 => 0x26300593 (* li a1,611  *)
    | 0x8001150c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011510 => 0x581000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011514 => 0x04c92503 (* lw a0,76(s2)  *)
    | 0x80011518 => 0x975f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x8001151c => 0x00051e63 (* bnez a0,80011538 <prvTimerTestTask+0x52c>  *)
    | 0x80011520 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011524 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011528 => 0x00079863 (* bnez a5,80011538 <prvTimerTestTask+0x52c>  *)
    | 0x8001152c => 0x26900593 (* li a1,617  *)
    | 0x80011530 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011534 => 0x55d000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011538 => 0x013c4783 (* lbu a5,19(s8)  *)
    | 0x8001153c => 0x00078e63 (* beqz a5,80011558 <prvTimerTestTask+0x54c>  *)
    | 0x80011540 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011544 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011548 => 0x00079863 (* bnez a5,80011558 <prvTimerTestTask+0x54c>  *)
    | 0x8001154c => 0x26f00593 (* li a1,623  *)
    | 0x80011550 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011554 => 0x53d000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011558 => 0xbe81a783 (* lw a5,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x8001155c => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80011560 => 0x915ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80011564 => 0x00050613 (* mv a2,a0  *)
    | 0x80011568 => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x8001156c => 0x00000713 (* li a4,0  *)
    | 0x80011570 => 0x00000693 (* li a3,0  *)
    | 0x80011574 => 0x00200593 (* li a1,2  *)
    | 0x80011578 => 0xec0f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8001157c => 0x04c92783 (* lw a5,76(s2)  *)
    | 0x80011580 => 0x00f12623 (* sw a5,12(sp)  *)
    | 0x80011584 => 0x8f1ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80011588 => 0x00050613 (* mv a2,a0  *)
    | 0x8001158c => 0x00c12503 (* lw a0,12(sp)  *)
    | 0x80011590 => 0x00000713 (* li a4,0  *)
    | 0x80011594 => 0x00000693 (* li a3,0  *)
    | 0x80011598 => 0x00200593 (* li a1,2  *)
    | 0x8001159c => 0xe9cf30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x800115a0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800115a4 => 0x01479863 (* bne a5,s4,800115b4 <prvTimerTestTask+0x5a8>  *)
    | 0x800115a8 => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x800115ac => 0x00178793 (* add a5,a5,1  *)
    | 0x800115b0 => 0xbef1a823 (* sw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x800115b4 => 0xfffc8c93 (* add s9,s9,-1  *)
    | 0x800115b8 => 0x0ffcfc93 (* zext.b s9,s9  *)
    | 0x800115bc => 0xf00c90e3 (* bnez s9,800114bc <prvTimerTestTask+0x4b0>  *)
    | 0x800115c0 => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x800115c4 => 0x01400513 (* li a0,20  *)
    | 0x800115c8 => 0x02f50533 (* mul a0,a0,a5  *)
    | 0x800115cc => 0xd4def0ef (* jal 80001318 <vTaskDelay>  *)
    | 0x800115d0 => 0xbe41c783 (* lbu a5,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x800115d4 => 0x01478e63 (* beq a5,s4,800115f0 <prvTimerTestTask+0x5e4>  *)
    | 0x800115d8 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800115dc => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800115e0 => 0x00079863 (* bnez a5,800115f0 <prvTimerTestTask+0x5e4>  *)
    | 0x800115e4 => 0x28600593 (* li a1,646  *)
    | 0x800115e8 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800115ec => 0x4a5000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800115f0 => 0x013c4783 (* lbu a5,19(s8)  *)
    | 0x800115f4 => 0x00079e63 (* bnez a5,80011610 <prvTimerTestTask+0x604>  *)
    | 0x800115f8 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800115fc => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011600 => 0x00079863 (* bnez a5,80011610 <prvTimerTestTask+0x604>  *)
    | 0x80011604 => 0x28c00593 (* li a1,652  *)
    | 0x80011608 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x8001160c => 0x485000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011610 => 0x04c92503 (* lw a0,76(s2)  *)
    | 0x80011614 => 0x879f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011618 => 0x00051e63 (* bnez a0,80011634 <prvTimerTestTask+0x628>  *)
    | 0x8001161c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011620 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011624 => 0x00079863 (* bnez a5,80011634 <prvTimerTestTask+0x628>  *)
    | 0x80011628 => 0x29400593 (* li a1,660  *)
    | 0x8001162c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011630 => 0x461000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011634 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011638 => 0x855f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x8001163c => 0x01451e63 (* bne a0,s4,80011658 <prvTimerTestTask+0x64c>  *)
    | 0x80011640 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011644 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011648 => 0x00079863 (* bnez a5,80011658 <prvTimerTestTask+0x64c>  *)
    | 0x8001164c => 0x29a00593 (* li a1,666  *)
    | 0x80011650 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011654 => 0x43d000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011658 => 0x04c92503 (* lw a0,76(s2)  *)
    | 0x8001165c => 0x00000713 (* li a4,0  *)
    | 0x80011660 => 0x00000693 (* li a3,0  *)
    | 0x80011664 => 0x00000613 (* li a2,0  *)
    | 0x80011668 => 0x00300593 (* li a1,3  *)
    | 0x8001166c => 0xdccf30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011670 => 0x04c92503 (* lw a0,76(s2)  *)
    | 0x80011674 => 0x819f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011678 => 0x00050e63 (* beqz a0,80011694 <prvTimerTestTask+0x688>  *)
    | 0x8001167c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011680 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011684 => 0x00079863 (* bnez a5,80011694 <prvTimerTestTask+0x688>  *)
    | 0x80011688 => 0x2a300593 (* li a1,675  *)
    | 0x8001168c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011690 => 0x401000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011694 => 0x4b8d0793 (* add a5,s10,1208  *)
    | 0x80011698 => 0x000789a3 (* sb zero,19(a5)  *)
    | 0x8001169c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800116a0 => 0xbe018223 (* sb zero,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x800116a4 => 0x4b8d0c93 (* add s9,s10,1208  *)
    | 0x800116a8 => 0x01479863 (* bne a5,s4,800116b8 <prvTimerTestTask+0x6ac>  *)
    | 0x800116ac => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x800116b0 => 0x00178793 (* add a5,a5,1  *)
    | 0x800116b4 => 0xbef1a823 (* sw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x800116b8 => 0xbf41c783 (* lbu a5,-1036(gp) # 800803f4 <ucIsBacklogDemoEnabled>  *)
    | 0x800116bc => 0x00092503 (* lw a0,0(s2)  *)
    | 0x800116c0 => 0x1d479263 (* bne a5,s4,80011884 <prvTimerTestTask+0x878>  *)
    | 0x800116c4 => 0xfc8f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x800116c8 => 0x00050e63 (* beqz a0,800116e4 <prvTimerTestTask+0x6d8>  *)
    | 0x800116cc => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800116d0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800116d4 => 0x00079863 (* bnez a5,800116e4 <prvTimerTestTask+0x6d8>  *)
    | 0x800116d8 => 0x2bf00593 (* li a1,703  *)
    | 0x800116dc => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800116e0 => 0x3b1000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800116e4 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x800116e8 => 0x00100713 (* li a4,1  *)
    | 0x800116ec => 0xbee18623 (* sb a4,-1044(gp) # 800803ec <ucIsStopNeededInTimerZeroCallback>  *)
    | 0x800116f0 => 0x00000693 (* li a3,0  *)
    | 0x800116f4 => 0x00000713 (* li a4,0  *)
    | 0x800116f8 => 0x00100613 (* li a2,1  *)
    | 0x800116fc => 0x00400593 (* li a1,4  *)
    | 0x80011700 => 0xd38f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011704 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80011708 => 0xf84f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x8001170c => 0x00051e63 (* bnez a0,80011728 <prvTimerTestTask+0x71c>  *)
    | 0x80011710 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011714 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011718 => 0x00079863 (* bnez a5,80011728 <prvTimerTestTask+0x71c>  *)
    | 0x8001171c => 0x2d100593 (* li a1,721  *)
    | 0x80011720 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011724 => 0x36d000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011728 => 0x00200513 (* li a0,2  *)
    | 0x8001172c => 0xd39ef0ef (* jal 80001464 <xTaskCatchUpTicks>  *)
    | 0x80011730 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80011734 => 0xf58f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011738 => 0x00050e63 (* beqz a0,80011754 <prvTimerTestTask+0x748>  *)
    | 0x8001173c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011740 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011744 => 0x00079863 (* bnez a5,80011754 <prvTimerTestTask+0x748>  *)
    | 0x80011748 => 0x2de00593 (* li a1,734  *)
    | 0x8001174c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011750 => 0x341000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011754 => 0xbd01a603 (* lw a2,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011758 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x8001175c => 0x00000713 (* li a4,0  *)
    | 0x80011760 => 0x00000693 (* li a3,0  *)
    | 0x80011764 => 0x00400593 (* li a1,4  *)
    | 0x80011768 => 0xcd0f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8001176c => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80011770 => 0x00000713 (* li a4,0  *)
    | 0x80011774 => 0x00000693 (* li a3,0  *)
    | 0x80011778 => 0x00000613 (* li a2,0  *)
    | 0x8001177c => 0x00300593 (* li a1,3  *)
    | 0x80011780 => 0xcb8f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011784 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011788 => 0x000c8023 (* sb zero,0(s9)  *)
    | 0x8001178c => 0xf00f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011790 => 0x00050e63 (* beqz a0,800117ac <prvTimerTestTask+0x7a0>  *)
    | 0x80011794 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011798 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001179c => 0x00079863 (* bnez a5,800117ac <prvTimerTestTask+0x7a0>  *)
    | 0x800117a0 => 0x2f000593 (* li a1,752  *)
    | 0x800117a4 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800117a8 => 0x2e9000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800117ac => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x800117b0 => 0x00000713 (* li a4,0  *)
    | 0x800117b4 => 0x00000693 (* li a3,0  *)
    | 0x800117b8 => 0x00100613 (* li a2,1  *)
    | 0x800117bc => 0x00400593 (* li a1,4  *)
    | 0x800117c0 => 0xc78f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x800117c4 => 0x00000513 (* li a0,0  *)
    | 0x800117c8 => 0xb24ef0ef (* jal 80000aec <uxTaskPriorityGet>  *)
    | 0x800117cc => 0x00800593 (* li a1,8  *)
    | 0x800117d0 => 0x00050c93 (* mv s9,a0  *)
    | 0x800117d4 => 0x00000513 (* li a0,0  *)
    | 0x800117d8 => 0xb38ef0ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x800117dc => 0xbe81a903 (* lw s2,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x800117e0 => 0xe94ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800117e4 => 0x00050613 (* mv a2,a0  *)
    | 0x800117e8 => 0x00000713 (* li a4,0  *)
    | 0x800117ec => 0x00000693 (* li a3,0  *)
    | 0x800117f0 => 0x00200593 (* li a1,2  *)
    | 0x800117f4 => 0x00090513 (* mv a0,s2  *)
    | 0x800117f8 => 0xc40f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x800117fc => 0x00100513 (* li a0,1  *)
    | 0x80011800 => 0xc65ef0ef (* jal 80001464 <xTaskCatchUpTicks>  *)
    | 0x80011804 => 0x00000513 (* li a0,0  *)
    | 0x80011808 => 0x000c8593 (* mv a1,s9  *)
    | 0x8001180c => 0xb04ef0ef (* jal 80000b10 <vTaskPrioritySet>  *)
    | 0x80011810 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011814 => 0xe78f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011818 => 0x00050e63 (* beqz a0,80011834 <prvTimerTestTask+0x828>  *)
    | 0x8001181c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011820 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011824 => 0x00079863 (* bnez a5,80011834 <prvTimerTestTask+0x828>  *)
    | 0x80011828 => 0x30f00593 (* li a1,783  *)
    | 0x8001182c => 0x3e848513 (* add a0,s1,1000  *)
    | 0x80011830 => 0x261000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011834 => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011838 => 0x00300613 (* li a2,3  *)
    | 0x8001183c => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011840 => 0x02f60633 (* mul a2,a2,a5  *)
    | 0x80011844 => 0x00000713 (* li a4,0  *)
    | 0x80011848 => 0x00000693 (* li a3,0  *)
    | 0x8001184c => 0x00400593 (* li a1,4  *)
    | 0x80011850 => 0xbe8f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011854 => 0xbe81a503 (* lw a0,-1048(gp) # 800803e8 <xOneShotTimer>  *)
    | 0x80011858 => 0x00000713 (* li a4,0  *)
    | 0x8001185c => 0x00000693 (* li a3,0  *)
    | 0x80011860 => 0x00000613 (* li a2,0  *)
    | 0x80011864 => 0x00300593 (* li a1,3  *)
    | 0x80011868 => 0xbd0f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x8001186c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011870 => 0xbe018223 (* sb zero,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x80011874 => 0x01479863 (* bne a5,s4,80011884 <prvTimerTestTask+0x878>  *)
    | 0x80011878 => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x8001187c => 0x00178793 (* add a5,a5,1  *)
    | 0x80011880 => 0xbef1a823 (* sw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011884 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x80011888 => 0x4d078913 (* add s2,a5,1232 # 800954d0 <xAutoReloadTimers>  *)
    | 0x8001188c => 0x00092503 (* lw a0,0(s2)  *)
    | 0x80011890 => 0xdfcf30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x80011894 => 0x00050e63 (* beqz a0,800118b0 <prvTimerTestTask+0x8a4>  *)
    | 0x80011898 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001189c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800118a0 => 0x00079863 (* bnez a5,800118b0 <prvTimerTestTask+0x8a4>  *)
    | 0x800118a4 => 0x32f00593 (* li a1,815  *)
    | 0x800118a8 => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800118ac => 0x1e5000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800118b0 => 0x00092a83 (* lw s5,0(s2)  *)
    | 0x800118b4 => 0xdc0ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x800118b8 => 0x00050613 (* mv a2,a0  *)
    | 0x800118bc => 0x00000713 (* li a4,0  *)
    | 0x800118c0 => 0x00000693 (* li a3,0  *)
    | 0x800118c4 => 0x00100593 (* li a1,1  *)
    | 0x800118c8 => 0x000a8513 (* mv a0,s5  *)
    | 0x800118cc => 0xb6cf30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x800118d0 => 0x00092503 (* lw a0,0(s2)  *)
    | 0x800118d4 => 0xdb8f30ef (* jal 80004e8c <xTimerIsTimerActive>  *)
    | 0x800118d8 => 0x00051e63 (* bnez a0,800118f4 <prvTimerTestTask+0x8e8>  *)
    | 0x800118dc => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800118e0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800118e4 => 0x00079863 (* bnez a5,800118f4 <prvTimerTestTask+0x8e8>  *)
    | 0x800118e8 => 0x33b00593 (* li a1,827  *)
    | 0x800118ec => 0x3e848513 (* add a0,s1,1000  *)
    | 0x800118f0 => 0x1a1000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800118f4 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x800118f8 => 0x00490913 (* add s2,s2,4  *)
    | 0x800118fc => 0x52078793 (* add a5,a5,1312 # 80095520 <xAutoReloadTimers+0x50>  *)
    | 0x80011900 => 0xf8f916e3 (* bne s2,a5,8001188c <prvTimerTestTask+0x880>  *)
    | 0x80011904 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011908 => 0x874790e3 (* bne a5,s4,80011168 <prvTimerTestTask+0x15c>  *)
    | 0x8001190c => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011910 => 0x00178793 (* add a5,a5,1  *)
    | 0x80011914 => 0xbef1a823 (* sw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011918 => 0x84dff06f (* j 80011164 <prvTimerTestTask+0x158>  *)
    | 0x8001191c => 0xbe018223 (* sb zero,-1052(gp) # 800803e4 <ucOneShotTimerCounter>  *)
    | 0x80011920 => 0xaedff06f (* j 8001140c <prvTimerTestTask+0x400>  *)
    (* <prvAutoReloadTimerCallback> *)
    | 0x80011924 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80011928 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x8001192c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80011930 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80011934 => 0x00050413 (* mv s0,a0  *)
    | 0x80011938 => 0xda4f30ef (* jal 80004edc <pvTimerGetTimerID>  *)
    | 0x8001193c => 0x01500793 (* li a5,21  *)
    | 0x80011940 => 0x04a7ee63 (* bltu a5,a0,8001199c <prvAutoReloadTimerCallback+0x78>  *)
    | 0x80011944 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x80011948 => 0x4b878793 (* add a5,a5,1208 # 800954b8 <ucAutoReloadTimerCounters>  *)
    | 0x8001194c => 0x00a787b3 (* add a5,a5,a0  *)
    | 0x80011950 => 0x0007c703 (* lbu a4,0(a5)  *)
    | 0x80011954 => 0x00170713 (* add a4,a4,1  *)
    | 0x80011958 => 0x00e78023 (* sb a4,0(a5)  *)
    | 0x8001195c => 0x02051663 (* bnez a0,80011988 <prvAutoReloadTimerCallback+0x64>  *)
    | 0x80011960 => 0xbec1c703 (* lbu a4,-1044(gp) # 800803ec <ucIsStopNeededInTimerZeroCallback>  *)
    | 0x80011964 => 0x00100793 (* li a5,1  *)
    | 0x80011968 => 0x02f71063 (* bne a4,a5,80011988 <prvAutoReloadTimerCallback+0x64>  *)
    | 0x8001196c => 0x00000713 (* li a4,0  *)
    | 0x80011970 => 0x00000693 (* li a3,0  *)
    | 0x80011974 => 0x00000613 (* li a2,0  *)
    | 0x80011978 => 0x00300593 (* li a1,3  *)
    | 0x8001197c => 0x00040513 (* mv a0,s0  *)
    | 0x80011980 => 0xab8f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011984 => 0xbe018623 (* sb zero,-1044(gp) # 800803ec <ucIsStopNeededInTimerZeroCallback>  *)
    | 0x80011988 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x8001198c => 0x00812403 (* lw s0,8(sp)  *)
    | 0x80011990 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x80011994 => 0x01010113 (* add sp,sp,16  *)
    | 0x80011998 => 0x00008067 (* ret  *)
    | 0x8001199c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800119a0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800119a4 => 0xfe0792e3 (* bnez a5,80011988 <prvAutoReloadTimerCallback+0x64>  *)
    | 0x800119a8 => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800119ac => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800119b0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800119b4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800119b8 => 0x49a00593 (* li a1,1178  *)
    | 0x800119bc => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x800119c0 => 0x01010113 (* add sp,sp,16  *)
    | 0x800119c4 => 0x0cd0006f (* j 80012290 <vAssertCalled>  *)
    (* <vStartTimerDemoTask> *)
    | 0x800119c8 => 0xfd010113 (* add sp,sp,-48  *)
    | 0x800119cc => 0x02812423 (* sw s0,40(sp)  *)
    | 0x800119d0 => 0x00050413 (* mv s0,a0  *)
    | 0x800119d4 => 0x80095537 (* lui a0,0x80095  *)
    | 0x800119d8 => 0x01500613 (* li a2,21  *)
    | 0x800119dc => 0x00000593 (* li a1,0  *)
    | 0x800119e0 => 0x4b850513 (* add a0,a0,1208 # 800954b8 <ucAutoReloadTimerCounters>  *)
    | 0x800119e4 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x800119e8 => 0x02912223 (* sw s1,36(sp)  *)
    | 0x800119ec => 0x03212023 (* sw s2,32(sp)  *)
    | 0x800119f0 => 0x01312e23 (* sw s3,28(sp)  *)
    | 0x800119f4 => 0x01412c23 (* sw s4,24(sp)  *)
    | 0x800119f8 => 0x01512a23 (* sw s5,20(sp)  *)
    | 0x800119fc => 0x01612823 (* sw s6,16(sp)  *)
    | 0x80011a00 => 0x01712623 (* sw s7,12(sp)  *)
    | 0x80011a04 => 0x80095b37 (* lui s6,0x80095  *)
    | 0x80011a08 => 0x01812423 (* sw s8,8(sp)  *)
    | 0x80011a0c => 0x01912223 (* sw s9,4(sp)  *)
    | 0x80011a10 => 0x539010ef (* jal 80013748 <memset>  *)
    | 0x80011a14 => 0x4d0b0513 (* add a0,s6,1232 # 800954d0 <xAutoReloadTimers>  *)
    | 0x80011a18 => 0x05400613 (* li a2,84  *)
    | 0x80011a1c => 0x00000593 (* li a1,0  *)
    | 0x80011a20 => 0x529010ef (* jal 80013748 <memset>  *)
    | 0x80011a24 => 0x4d0b0493 (* add s1,s6,1232  *)
    | 0x80011a28 => 0xbc81a823 (* sw s0,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011a2c => 0x4d0b0b13 (* add s6,s6,1232  *)
    | 0x80011a30 => 0x00000413 (* li s0,0  *)
    | 0x80011a34 => 0x80012bb7 (* lui s7,0x80012  *)
    | 0x80011a38 => 0x800149b7 (* lui s3,0x80014  *)
    | 0x80011a3c => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x80011a40 => 0x01400c13 (* li s8,20  *)
    | 0x80011a44 => 0xbd01a583 (* lw a1,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011a48 => 0x00040693 (* mv a3,s0  *)
    | 0x80011a4c => 0x00140413 (* add s0,s0,1  *)
    | 0x80011a50 => 0x02b405b3 (* mul a1,s0,a1  *)
    | 0x80011a54 => 0x924b8713 (* add a4,s7,-1756 # 80011924 <prvAutoReloadTimerCallback>  *)
    | 0x80011a58 => 0x00100613 (* li a2,1  *)
    | 0x80011a5c => 0x42898513 (* add a0,s3,1064 # 80014428 <_etext+0x858>  *)
    | 0x80011a60 => 0x844f30ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x80011a64 => 0x00a4a023 (* sw a0,0(s1)  *)
    | 0x80011a68 => 0x12051263 (* bnez a0,80011b8c <vStartTimerDemoTask+0x1c4>  *)
    | 0x80011a6c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011a70 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011a74 => 0x12a00593 (* li a1,298  *)
    | 0x80011a78 => 0x16078463 (* beqz a5,80011be0 <vStartTimerDemoTask+0x218>  *)
    | 0x80011a7c => 0x00448493 (* add s1,s1,4  *)
    | 0x80011a80 => 0xfd8412e3 (* bne s0,s8,80011a44 <vStartTimerDemoTask+0x7c>  *)
    | 0x80011a84 => 0xbd01a583 (* lw a1,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011a88 => 0x924b8713 (* add a4,s7,-1756  *)
    | 0x80011a8c => 0x01400693 (* li a3,20  *)
    | 0x80011a90 => 0x02b405b3 (* mul a1,s0,a1  *)
    | 0x80011a94 => 0x00100613 (* li a2,1  *)
    | 0x80011a98 => 0x42898513 (* add a0,s3,1064  *)
    | 0x80011a9c => 0x808f30ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x80011aa0 => 0x04ab2823 (* sw a0,80(s6)  *)
    | 0x80011aa4 => 0x00050493 (* mv s1,a0  *)
    | 0x80011aa8 => 0x14051263 (* bnez a0,80011bec <vStartTimerDemoTask+0x224>  *)
    | 0x80011aac => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011ab0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011ab4 => 0x14800593 (* li a1,328  *)
    | 0x80011ab8 => 0x16078463 (* beqz a5,80011c20 <vStartTimerDemoTask+0x258>  *)
    | 0x80011abc => 0x00010937 (* lui s2,0x10  *)
    | 0x80011ac0 => 0x80011737 (* lui a4,0x80011  *)
    | 0x80011ac4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011ac8 => 0xf7870713 (* add a4,a4,-136 # 80010f78 <prvISRAutoReloadTimerCallback>  *)
    | 0x80011acc => 0x00000693 (* li a3,0  *)
    | 0x80011ad0 => 0x00100613 (* li a2,1  *)
    | 0x80011ad4 => 0xfff90593 (* add a1,s2,-1 # ffff <__stack_size+0xfea1>  *)
    | 0x80011ad8 => 0x43450513 (* add a0,a0,1076 # 80014434 <_etext+0x864>  *)
    | 0x80011adc => 0xfc9f20ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x80011ae0 => 0xbea1a023 (* sw a0,-1056(gp) # 800803e0 <xISRAutoReloadTimer>  *)
    | 0x80011ae4 => 0x80011737 (* lui a4,0x80011  *)
    | 0x80011ae8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011aec => 0xf8870713 (* add a4,a4,-120 # 80010f88 <prvISROneShotTimerCallback>  *)
    | 0x80011af0 => 0x00000693 (* li a3,0  *)
    | 0x80011af4 => 0x00000613 (* li a2,0  *)
    | 0x80011af8 => 0xfff90593 (* add a1,s2,-1  *)
    | 0x80011afc => 0x43c50513 (* add a0,a0,1084 # 8001443c <_etext+0x86c>  *)
    | 0x80011b00 => 0xfa5f20ef (* jal 80004aa4 <xTimerCreate>  *)
    | 0x80011b04 => 0xbca1ac23 (* sw a0,-1064(gp) # 800803d8 <xISROneShotTimer>  *)
    | 0x80011b08 => 0xbe01a783 (* lw a5,-1056(gp) # 800803e0 <xISRAutoReloadTimer>  *)
    | 0x80011b0c => 0x00078463 (* beqz a5,80011b14 <vStartTimerDemoTask+0x14c>  *)
    | 0x80011b10 => 0x02051063 (* bnez a0,80011b30 <vStartTimerDemoTask+0x168>  *)
    | 0x80011b14 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011b18 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011b1c => 0x00079a63 (* bnez a5,80011b30 <vStartTimerDemoTask+0x168>  *)
    | 0x80011b20 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011b24 => 0x16600593 (* li a1,358  *)
    | 0x80011b28 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011b2c => 0x764000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011b30 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011b34 => 0x0e078e63 (* beqz a5,80011c30 <vStartTimerDemoTask+0x268>  *)
    | 0x80011b38 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80011b3c => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80011b40 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80011b44 => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80011b48 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x80011b4c => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x80011b50 => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x80011b54 => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x80011b58 => 0x00c12b83 (* lw s7,12(sp)  *)
    | 0x80011b5c => 0x00812c03 (* lw s8,8(sp)  *)
    | 0x80011b60 => 0x00412c83 (* lw s9,4(sp)  *)
    | 0x80011b64 => 0x800145b7 (* lui a1,0x80014  *)
    | 0x80011b68 => 0x80011537 (* lui a0,0x80011  *)
    | 0x80011b6c => 0x00000793 (* li a5,0  *)
    | 0x80011b70 => 0x00500713 (* li a4,5  *)
    | 0x80011b74 => 0x00000693 (* li a3,0  *)
    | 0x80011b78 => 0x07800613 (* li a2,120  *)
    | 0x80011b7c => 0x44458593 (* add a1,a1,1092 # 80014444 <_etext+0x874>  *)
    | 0x80011b80 => 0x00c50513 (* add a0,a0,12 # 8001100c <prvTimerTestTask>  *)
    | 0x80011b84 => 0x03010113 (* add sp,sp,48  *)
    | 0x80011b88 => 0xc75ee06f (* j 800007fc <xTaskCreate>  *)
    | 0x80011b8c => 0xac8f30ef (* jal 80004e54 <pcTimerGetName>  *)
    | 0x80011b90 => 0x42898593 (* add a1,s3,1064  *)
    | 0x80011b94 => 0x6c1010ef (* jal 80013a54 <strcmp>  *)
    | 0x80011b98 => 0x00050863 (* beqz a0,80011ba8 <vStartTimerDemoTask+0x1e0>  *)
    | 0x80011b9c => 0x12e00593 (* li a1,302  *)
    | 0x80011ba0 => 0x3e8a8513 (* add a0,s5,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011ba4 => 0x6ec000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011ba8 => 0x0004ac83 (* lw s9,0(s1)  *)
    | 0x80011bac => 0xac8ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80011bb0 => 0x00050613 (* mv a2,a0  *)
    | 0x80011bb4 => 0xfff00713 (* li a4,-1  *)
    | 0x80011bb8 => 0x00000693 (* li a3,0  *)
    | 0x80011bbc => 0x00100593 (* li a1,1  *)
    | 0x80011bc0 => 0x000c8513 (* mv a0,s9  *)
    | 0x80011bc4 => 0x874f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011bc8 => 0x00100793 (* li a5,1  *)
    | 0x80011bcc => 0xeaf508e3 (* beq a0,a5,80011a7c <vStartTimerDemoTask+0xb4>  *)
    | 0x80011bd0 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011bd4 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011bd8 => 0xea0792e3 (* bnez a5,80011a7c <vStartTimerDemoTask+0xb4>  *)
    | 0x80011bdc => 0x13700593 (* li a1,311  *)
    | 0x80011be0 => 0x3e8a8513 (* add a0,s5,1000  *)
    | 0x80011be4 => 0x6ac000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011be8 => 0xe95ff06f (* j 80011a7c <vStartTimerDemoTask+0xb4>  *)
    | 0x80011bec => 0xa88ef0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80011bf0 => 0x00050613 (* mv a2,a0  *)
    | 0x80011bf4 => 0xfff00713 (* li a4,-1  *)
    | 0x80011bf8 => 0x00000693 (* li a3,0  *)
    | 0x80011bfc => 0x00100593 (* li a1,1  *)
    | 0x80011c00 => 0x00048513 (* mv a0,s1  *)
    | 0x80011c04 => 0x834f30ef (* jal 80004c38 <xTimerGenericCommandFromTask>  *)
    | 0x80011c08 => 0x00100793 (* li a5,1  *)
    | 0x80011c0c => 0xeaf518e3 (* bne a0,a5,80011abc <vStartTimerDemoTask+0xf4>  *)
    | 0x80011c10 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011c14 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011c18 => 0xea0792e3 (* bnez a5,80011abc <vStartTimerDemoTask+0xf4>  *)
    | 0x80011c1c => 0x15100593 (* li a1,337  *)
    | 0x80011c20 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011c24 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011c28 => 0x668000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011c2c => 0xe91ff06f (* j 80011abc <vStartTimerDemoTask+0xf4>  *)
    | 0x80011c30 => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80011c34 => 0x02812403 (* lw s0,40(sp)  *)
    | 0x80011c38 => 0x02412483 (* lw s1,36(sp)  *)
    | 0x80011c3c => 0x02012903 (* lw s2,32(sp)  *)
    | 0x80011c40 => 0x01c12983 (* lw s3,28(sp)  *)
    | 0x80011c44 => 0x01812a03 (* lw s4,24(sp)  *)
    | 0x80011c48 => 0x01412a83 (* lw s5,20(sp)  *)
    | 0x80011c4c => 0x01012b03 (* lw s6,16(sp)  *)
    | 0x80011c50 => 0x00c12b83 (* lw s7,12(sp)  *)
    | 0x80011c54 => 0x00812c03 (* lw s8,8(sp)  *)
    | 0x80011c58 => 0x00412c83 (* lw s9,4(sp)  *)
    | 0x80011c5c => 0x03010113 (* add sp,sp,48  *)
    | 0x80011c60 => 0x00008067 (* ret  *)
    (* <xAreTimerDemoTasksStillRunning> *)
    | 0x80011c64 => 0xbc81a683 (* lw a3,-1080(gp) # 800803c8 <xLastCycleFrequency.3>  *)
    | 0x80011c68 => 0x00a68663 (* beq a3,a0,80011c74 <xAreTimerDemoTasksStillRunning+0x10>  *)
    | 0x80011c6c => 0xbc01a223 (* sw zero,-1084(gp) # 800803c4 <xIterationsWithoutCounterIncrement.2>  *)
    | 0x80011c70 => 0xbca1a423 (* sw a0,-1080(gp) # 800803c8 <xLastCycleFrequency.3>  *)
    | 0x80011c74 => 0xbf01a683 (* lw a3,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011c78 => 0xbc01a883 (* lw a7,-1088(gp) # 800803c0 <ulLastLoopCounter.1>  *)
    | 0x80011c7c => 0xbd01a783 (* lw a5,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011c80 => 0x02d89c63 (* bne a7,a3,80011cb8 <xAreTimerDemoTasksStillRunning+0x54>  *)
    | 0x80011c84 => 0xbc41a683 (* lw a3,-1084(gp) # 800803c4 <xIterationsWithoutCounterIncrement.2>  *)
    | 0x80011c88 => 0x00168693 (* add a3,a3,1  *)
    | 0x80011c8c => 0xbcd1a223 (* sw a3,-1084(gp) # 800803c4 <xIterationsWithoutCounterIncrement.2>  *)
    | 0x80011c90 => 0x01400713 (* li a4,20  *)
    | 0x80011c94 => 0x02e787b3 (* mul a5,a5,a4  *)
    | 0x80011c98 => 0x02a7d7b3 (* divu a5,a5,a0  *)
    | 0x80011c9c => 0x00178793 (* add a5,a5,1  *)
    | 0x80011ca0 => 0x00d7f463 (* bgeu a5,a3,80011ca8 <xAreTimerDemoTasksStillRunning+0x44>  *)
    | 0x80011ca4 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011ca8 => 0xbf01a783 (* lw a5,-1040(gp) # 800803f0 <ulLoopCounter>  *)
    | 0x80011cac => 0x83c1a503 (* lw a0,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011cb0 => 0xbcf1a023 (* sw a5,-1088(gp) # 800803c0 <ulLastLoopCounter.1>  *)
    | 0x80011cb4 => 0x00008067 (* ret  *)
    | 0x80011cb8 => 0xbc01a223 (* sw zero,-1084(gp) # 800803c4 <xIterationsWithoutCounterIncrement.2>  *)
    | 0x80011cbc => 0xfedff06f (* j 80011ca8 <xAreTimerDemoTasksStillRunning+0x44>  *)
    (* <vTimerPeriodicISRTests> *)
    | 0x80011cc0 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80011cc4 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80011cc8 => 0x8381a783 (* lw a5,-1992(gp) # 80080038 <uxTick.0>  *)
    | 0x80011ccc => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80011cd0 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80011cd4 => 0x00178793 (* add a5,a5,1  *)
    | 0x80011cd8 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80011cdc => 0x01212823 (* sw s2,16(sp)  *)
    | 0x80011ce0 => 0x82f1ac23 (* sw a5,-1992(gp) # 80080038 <uxTick.0>  *)
    | 0x80011ce4 => 0xbd01a603 (* lw a2,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011ce8 => 0x0a079063 (* bnez a5,80011d88 <vTimerPeriodicISRTests+0xc8>  *)
    | 0x80011cec => 0xbe01a503 (* lw a0,-1056(gp) # 800803e0 <xISRAutoReloadTimer>  *)
    | 0x80011cf0 => 0xbc018e23 (* sb zero,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011cf4 => 0xbc018a23 (* sb zero,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011cf8 => 0x00000713 (* li a4,0  *)
    | 0x80011cfc => 0xfff00793 (* li a5,-1  *)
    | 0x80011d00 => 0x00000693 (* li a3,0  *)
    | 0x80011d04 => 0x00900593 (* li a1,9  *)
    | 0x80011d08 => 0x82f1ac23 (* sw a5,-1992(gp) # 80080038 <uxTick.0>  *)
    | 0x80011d0c => 0xfedf20ef (* jal 80004cf8 <xTimerGenericCommandFromISR>  *)
    | 0x80011d10 => 0x00100793 (* li a5,1  *)
    | 0x80011d14 => 0x00050493 (* mv s1,a0  *)
    | 0x80011d18 => 0x02f51263 (* bne a0,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011d1c => 0xbd01a603 (* lw a2,-1072(gp) # 800803d0 <xBasePeriod>  *)
    | 0x80011d20 => 0xbd81a503 (* lw a0,-1064(gp) # 800803d8 <xISROneShotTimer>  *)
    | 0x80011d24 => 0x00000713 (* li a4,0  *)
    | 0x80011d28 => 0x00000693 (* li a3,0  *)
    | 0x80011d2c => 0x00900593 (* li a1,9  *)
    | 0x80011d30 => 0xfc9f20ef (* jal 80004cf8 <xTimerGenericCommandFromISR>  *)
    | 0x80011d34 => 0x02951263 (* bne a0,s1,80011d58 <vTimerPeriodicISRTests+0x98>  *)
    | 0x80011d38 => 0x8201ac23 (* sw zero,-1992(gp) # 80080038 <uxTick.0>  *)
    | 0x80011d3c => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80011d40 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80011d44 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80011d48 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80011d4c => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80011d50 => 0x02010113 (* add sp,sp,32  *)
    | 0x80011d54 => 0x00008067 (* ret  *)
    | 0x80011d58 => 0xbe01a503 (* lw a0,-1056(gp) # 800803e0 <xISRAutoReloadTimer>  *)
    | 0x80011d5c => 0x00000713 (* li a4,0  *)
    | 0x80011d60 => 0x00000693 (* li a3,0  *)
    | 0x80011d64 => 0x00000613 (* li a2,0  *)
    | 0x80011d68 => 0x00800593 (* li a1,8  *)
    | 0x80011d6c => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80011d70 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80011d74 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80011d78 => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80011d7c => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80011d80 => 0x02010113 (* add sp,sp,32  *)
    | 0x80011d84 => 0xf75f206f (* j 80004cf8 <xTimerGenericCommandFromISR>  *)
    | 0x80011d88 => 0xffa60693 (* add a3,a2,-6 # fefffffa <_stack_top+0x7ef6a30c>  *)
    | 0x80011d8c => 0x04d79463 (* bne a5,a3,80011dd4 <vTimerPeriodicISRTests+0x114>  *)
    | 0x80011d90 => 0xbdc1c783 (* lbu a5,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011d94 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011d98 => 0x00e7e7b3 (* or a5,a5,a4  *)
    | 0x80011d9c => 0xfa0780e3 (* beqz a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011da0 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011da4 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011da8 => 0x39700593 (* li a1,919  *)
    | 0x80011dac => 0xf80798e3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011db0 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x80011db4 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80011db8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x80011dbc => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80011dc0 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80011dc4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011dc8 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011dcc => 0x02010113 (* add sp,sp,32  *)
    | 0x80011dd0 => 0x4c00006f (* j 80012290 <vAssertCalled>  *)
    | 0x80011dd4 => 0x00660713 (* add a4,a2,6  *)
    | 0x80011dd8 => 0x02e79663 (* bne a5,a4,80011e04 <vTimerPeriodicISRTests+0x144>  *)
    | 0x80011ddc => 0xbdc1c783 (* lbu a5,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011de0 => 0x00100713 (* li a4,1  *)
    | 0x80011de4 => 0x00e79663 (* bne a5,a4,80011df0 <vTimerPeriodicISRTests+0x130>  *)
    | 0x80011de8 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011dec => 0xf4f708e3 (* beq a4,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011df0 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011df4 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011df8 => 0x3a100593 (* li a1,929  *)
    | 0x80011dfc => 0xf40790e3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011e00 => 0xfb1ff06f (* j 80011db0 <vTimerPeriodicISRTests+0xf0>  *)
    | 0x80011e04 => 0x00161713 (* sll a4,a2,0x1  *)
    | 0x80011e08 => 0xffa70713 (* add a4,a4,-6  *)
    | 0x80011e0c => 0x02e79663 (* bne a5,a4,80011e38 <vTimerPeriodicISRTests+0x178>  *)
    | 0x80011e10 => 0xbdc1c783 (* lbu a5,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011e14 => 0x00100713 (* li a4,1  *)
    | 0x80011e18 => 0x00e79663 (* bne a5,a4,80011e24 <vTimerPeriodicISRTests+0x164>  *)
    | 0x80011e1c => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011e20 => 0xf0f70ee3 (* beq a4,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011e24 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011e28 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011e2c => 0x3ac00593 (* li a1,940  *)
    | 0x80011e30 => 0xf00796e3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011e34 => 0xf7dff06f (* j 80011db0 <vTimerPeriodicISRTests+0xf0>  *)
    | 0x80011e38 => 0x00c70593 (* add a1,a4,12  *)
    | 0x80011e3c => 0x04b79663 (* bne a5,a1,80011e88 <vTimerPeriodicISRTests+0x1c8>  *)
    | 0x80011e40 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011e44 => 0x00200793 (* li a5,2  *)
    | 0x80011e48 => 0x02f70063 (* beq a4,a5,80011e68 <vTimerPeriodicISRTests+0x1a8>  *)
    | 0x80011e4c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011e50 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011e54 => 0x00079a63 (* bnez a5,80011e68 <vTimerPeriodicISRTests+0x1a8>  *)
    | 0x80011e58 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011e5c => 0x3b700593 (* li a1,951  *)
    | 0x80011e60 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011e64 => 0x42c000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011e68 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011e6c => 0x00100793 (* li a5,1  *)
    | 0x80011e70 => 0xecf706e3 (* beq a4,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011e74 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011e78 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011e7c => 0x3bd00593 (* li a1,957  *)
    | 0x80011e80 => 0xea079ee3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011e84 => 0xf2dff06f (* j 80011db0 <vTimerPeriodicISRTests+0xf0>  *)
    | 0x80011e88 => 0x00670713 (* add a4,a4,6  *)
    | 0x80011e8c => 0x00265593 (* srl a1,a2,0x2  *)
    | 0x80011e90 => 0x00b70733 (* add a4,a4,a1  *)
    | 0x80011e94 => 0x04e79663 (* bne a5,a4,80011ee0 <vTimerPeriodicISRTests+0x220>  *)
    | 0x80011e98 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011e9c => 0x00200793 (* li a5,2  *)
    | 0x80011ea0 => 0x02f70063 (* beq a4,a5,80011ec0 <vTimerPeriodicISRTests+0x200>  *)
    | 0x80011ea4 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011ea8 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011eac => 0x00079a63 (* bnez a5,80011ec0 <vTimerPeriodicISRTests+0x200>  *)
    | 0x80011eb0 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011eb4 => 0x3c800593 (* li a1,968  *)
    | 0x80011eb8 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011ebc => 0x3d4000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011ec0 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011ec4 => 0x00100793 (* li a5,1  *)
    | 0x80011ec8 => 0xe6f70ae3 (* beq a4,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011ecc => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011ed0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011ed4 => 0x3ce00593 (* li a1,974  *)
    | 0x80011ed8 => 0xe60792e3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011edc => 0xed5ff06f (* j 80011db0 <vTimerPeriodicISRTests+0xf0>  *)
    | 0x80011ee0 => 0x00300593 (* li a1,3  *)
    | 0x80011ee4 => 0x02b60733 (* mul a4,a2,a1  *)
    | 0x80011ee8 => 0x02e79263 (* bne a5,a4,80011f0c <vTimerPeriodicISRTests+0x24c>  *)
    | 0x80011eec => 0xbd81a403 (* lw s0,-1064(gp) # 800803d8 <xISROneShotTimer>  *)
    | 0x80011ef0 => 0xf8dee0ef (* jal 80000e7c <xTaskGetTickCountFromISR>  *)
    | 0x80011ef4 => 0x00050613 (* mv a2,a0  *)
    | 0x80011ef8 => 0x00000713 (* li a4,0  *)
    | 0x80011efc => 0x00000693 (* li a3,0  *)
    | 0x80011f00 => 0x00600593 (* li a1,6  *)
    | 0x80011f04 => 0x00040513 (* mv a0,s0  *)
    | 0x80011f08 => 0xe65ff06f (* j 80011d6c <vTimerPeriodicISRTests+0xac>  *)
    | 0x80011f0c => 0x00670713 (* add a4,a4,6  *)
    | 0x80011f10 => 0x06e79463 (* bne a5,a4,80011f78 <vTimerPeriodicISRTests+0x2b8>  *)
    | 0x80011f14 => 0xbdc1c783 (* lbu a5,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011f18 => 0x02b78063 (* beq a5,a1,80011f38 <vTimerPeriodicISRTests+0x278>  *)
    | 0x80011f1c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011f20 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011f24 => 0x00079a63 (* bnez a5,80011f38 <vTimerPeriodicISRTests+0x278>  *)
    | 0x80011f28 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011f2c => 0x3de00593 (* li a1,990  *)
    | 0x80011f30 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011f34 => 0x35c000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011f38 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011f3c => 0x00100793 (* li a5,1  *)
    | 0x80011f40 => 0x02f70063 (* beq a4,a5,80011f60 <vTimerPeriodicISRTests+0x2a0>  *)
    | 0x80011f44 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011f48 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011f4c => 0x00079a63 (* bnez a5,80011f60 <vTimerPeriodicISRTests+0x2a0>  *)
    | 0x80011f50 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011f54 => 0x3e400593 (* li a1,996  *)
    | 0x80011f58 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011f5c => 0x334000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011f60 => 0xbe01a503 (* lw a0,-1056(gp) # 800803e0 <xISRAutoReloadTimer>  *)
    | 0x80011f64 => 0x00000713 (* li a4,0  *)
    | 0x80011f68 => 0x00000693 (* li a3,0  *)
    | 0x80011f6c => 0x00000613 (* li a2,0  *)
    | 0x80011f70 => 0x00800593 (* li a1,8  *)
    | 0x80011f74 => 0xdf9ff06f (* j 80011d6c <vTimerPeriodicISRTests+0xac>  *)
    | 0x80011f78 => 0x00269693 (* sll a3,a3,0x2  *)
    | 0x80011f7c => 0x04d79463 (* bne a5,a3,80011fc4 <vTimerPeriodicISRTests+0x304>  *)
    | 0x80011f80 => 0xbdc1c783 (* lbu a5,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011f84 => 0x02b78063 (* beq a5,a1,80011fa4 <vTimerPeriodicISRTests+0x2e4>  *)
    | 0x80011f88 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011f8c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011f90 => 0x00079a63 (* bnez a5,80011fa4 <vTimerPeriodicISRTests+0x2e4>  *)
    | 0x80011f94 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011f98 => 0x3f300593 (* li a1,1011  *)
    | 0x80011f9c => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011fa0 => 0x2f0000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011fa4 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011fa8 => 0x00100793 (* li a5,1  *)
    | 0x80011fac => 0xd8f708e3 (* beq a4,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011fb0 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011fb4 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011fb8 => 0x3f900593 (* li a1,1017  *)
    | 0x80011fbc => 0xd80790e3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80011fc0 => 0xdf1ff06f (* j 80011db0 <vTimerPeriodicISRTests+0xf0>  *)
    | 0x80011fc4 => 0x00261713 (* sll a4,a2,0x2  *)
    | 0x80011fc8 => 0x00670713 (* add a4,a4,6  *)
    | 0x80011fcc => 0x04e79663 (* bne a5,a4,80012018 <vTimerPeriodicISRTests+0x358>  *)
    | 0x80011fd0 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80011fd4 => 0x00300793 (* li a5,3  *)
    | 0x80011fd8 => 0x02f70063 (* beq a4,a5,80011ff8 <vTimerPeriodicISRTests+0x338>  *)
    | 0x80011fdc => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011fe0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80011fe4 => 0x00079a63 (* bnez a5,80011ff8 <vTimerPeriodicISRTests+0x338>  *)
    | 0x80011fe8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80011fec => 0x40400593 (* li a1,1028  *)
    | 0x80011ff0 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80011ff4 => 0x29c000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80011ff8 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80011ffc => 0x00200793 (* li a5,2  *)
    | 0x80012000 => 0xd2f70ee3 (* beq a4,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80012004 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012008 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001200c => 0x40a00593 (* li a1,1034  *)
    | 0x80012010 => 0xd20796e3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x80012014 => 0xd9dff06f (* j 80011db0 <vTimerPeriodicISRTests+0xf0>  *)
    | 0x80012018 => 0x00361713 (* sll a4,a2,0x3  *)
    | 0x8001201c => 0x06e79263 (* bne a5,a4,80012080 <vTimerPeriodicISRTests+0x3c0>  *)
    | 0x80012020 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80012024 => 0x00300793 (* li a5,3  *)
    | 0x80012028 => 0x02f70063 (* beq a4,a5,80012048 <vTimerPeriodicISRTests+0x388>  *)
    | 0x8001202c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012030 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012034 => 0x00079a63 (* bnez a5,80012048 <vTimerPeriodicISRTests+0x388>  *)
    | 0x80012038 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8001203c => 0x41500593 (* li a1,1045  *)
    | 0x80012040 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80012044 => 0x24c000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80012048 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x8001204c => 0x00200793 (* li a5,2  *)
    | 0x80012050 => 0x00f70a63 (* beq a4,a5,80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x80012054 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012058 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001205c => 0x41b00593 (* li a1,1051  *)
    | 0x80012060 => 0x06078a63 (* beqz a5,800120d4 <vTimerPeriodicISRTests+0x414>  *)
    | 0x80012064 => 0xbd81a403 (* lw s0,-1064(gp) # 800803d8 <xISROneShotTimer>  *)
    | 0x80012068 => 0xe15ee0ef (* jal 80000e7c <xTaskGetTickCountFromISR>  *)
    | 0x8001206c => 0x00050613 (* mv a2,a0  *)
    | 0x80012070 => 0x00000713 (* li a4,0  *)
    | 0x80012074 => 0x00000693 (* li a3,0  *)
    | 0x80012078 => 0x00700593 (* li a1,7  *)
    | 0x8001207c => 0xe89ff06f (* j 80011f04 <vTimerPeriodicISRTests+0x244>  *)
    | 0x80012080 => 0x00900713 (* li a4,9  *)
    | 0x80012084 => 0x02e60733 (* mul a4,a2,a4  *)
    | 0x80012088 => 0xffa70713 (* add a4,a4,-6  *)
    | 0x8001208c => 0x04e79c63 (* bne a5,a4,800120e4 <vTimerPeriodicISRTests+0x424>  *)
    | 0x80012090 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80012094 => 0x00300793 (* li a5,3  *)
    | 0x80012098 => 0x02f70063 (* beq a4,a5,800120b8 <vTimerPeriodicISRTests+0x3f8>  *)
    | 0x8001209c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800120a0 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800120a4 => 0x00079a63 (* bnez a5,800120b8 <vTimerPeriodicISRTests+0x3f8>  *)
    | 0x800120a8 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800120ac => 0x42900593 (* li a1,1065  *)
    | 0x800120b0 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x800120b4 => 0x1dc000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800120b8 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x800120bc => 0x00200793 (* li a5,2  *)
    | 0x800120c0 => 0xfaf702e3 (* beq a4,a5,80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x800120c4 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800120c8 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800120cc => 0x42f00593 (* li a1,1071  *)
    | 0x800120d0 => 0xf8079ae3 (* bnez a5,80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x800120d4 => 0x80014537 (* lui a0,0x80014  *)
    | 0x800120d8 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x800120dc => 0x1b4000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800120e0 => 0xf85ff06f (* j 80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x800120e4 => 0x00a00713 (* li a4,10  *)
    | 0x800120e8 => 0x02e60733 (* mul a4,a2,a4  *)
    | 0x800120ec => 0xff470713 (* add a4,a4,-12  *)
    | 0x800120f0 => 0x04e79663 (* bne a5,a4,8001213c <vTimerPeriodicISRTests+0x47c>  *)
    | 0x800120f4 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x800120f8 => 0x00300793 (* li a5,3  *)
    | 0x800120fc => 0x02f70063 (* beq a4,a5,8001211c <vTimerPeriodicISRTests+0x45c>  *)
    | 0x80012100 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012104 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012108 => 0x00079a63 (* bnez a5,8001211c <vTimerPeriodicISRTests+0x45c>  *)
    | 0x8001210c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012110 => 0x43c00593 (* li a1,1084  *)
    | 0x80012114 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80012118 => 0x178000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8001211c => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80012120 => 0x00200793 (* li a5,2  *)
    | 0x80012124 => 0xf4f700e3 (* beq a4,a5,80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x80012128 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001212c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012130 => 0x44200593 (* li a1,1090  *)
    | 0x80012134 => 0xf20798e3 (* bnez a5,80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x80012138 => 0xf9dff06f (* j 800120d4 <vTimerPeriodicISRTests+0x414>  *)
    | 0x8001213c => 0x00b00713 (* li a4,11  *)
    | 0x80012140 => 0x02e60733 (* mul a4,a2,a4  *)
    | 0x80012144 => 0xfee70713 (* add a4,a4,-18  *)
    | 0x80012148 => 0x04e79663 (* bne a5,a4,80012194 <vTimerPeriodicISRTests+0x4d4>  *)
    | 0x8001214c => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x80012150 => 0x00300793 (* li a5,3  *)
    | 0x80012154 => 0x02f70063 (* beq a4,a5,80012174 <vTimerPeriodicISRTests+0x4b4>  *)
    | 0x80012158 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001215c => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012160 => 0x00079a63 (* bnez a5,80012174 <vTimerPeriodicISRTests+0x4b4>  *)
    | 0x80012164 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012168 => 0x44f00593 (* li a1,1103  *)
    | 0x8001216c => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80012170 => 0x120000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80012174 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80012178 => 0x00200793 (* li a5,2  *)
    | 0x8001217c => 0xeef704e3 (* beq a4,a5,80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x80012180 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012184 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012188 => 0xec079ee3 (* bnez a5,80012064 <vTimerPeriodicISRTests+0x3a4>  *)
    | 0x8001218c => 0x45500593 (* li a1,1109  *)
    | 0x80012190 => 0xf45ff06f (* j 800120d4 <vTimerPeriodicISRTests+0x414>  *)
    | 0x80012194 => 0x00c00713 (* li a4,12  *)
    | 0x80012198 => 0x02e60733 (* mul a4,a2,a4  *)
    | 0x8001219c => 0xff470713 (* add a4,a4,-12  *)
    | 0x800121a0 => 0x04e79663 (* bne a5,a4,800121ec <vTimerPeriodicISRTests+0x52c>  *)
    | 0x800121a4 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x800121a8 => 0x00300793 (* li a5,3  *)
    | 0x800121ac => 0x02f70063 (* beq a4,a5,800121cc <vTimerPeriodicISRTests+0x50c>  *)
    | 0x800121b0 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800121b4 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800121b8 => 0x00079a63 (* bnez a5,800121cc <vTimerPeriodicISRTests+0x50c>  *)
    | 0x800121bc => 0x80014537 (* lui a0,0x80014  *)
    | 0x800121c0 => 0x46400593 (* li a1,1124  *)
    | 0x800121c4 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x800121c8 => 0x0c8000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x800121cc => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x800121d0 => 0x00300793 (* li a5,3  *)
    | 0x800121d4 => 0xb6f704e3 (* beq a4,a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x800121d8 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800121dc => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x800121e0 => 0xb4079ee3 (* bnez a5,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x800121e4 => 0x46a00593 (* li a1,1130  *)
    | 0x800121e8 => 0xbc9ff06f (* j 80011db0 <vTimerPeriodicISRTests+0xf0>  *)
    | 0x800121ec => 0x00f00713 (* li a4,15  *)
    | 0x800121f0 => 0x02e60633 (* mul a2,a2,a4  *)
    | 0x800121f4 => 0xb4c794e3 (* bne a5,a2,80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    | 0x800121f8 => 0xbdc1c703 (* lbu a4,-1060(gp) # 800803dc <ucISRAutoReloadTimerCounter>  *)
    | 0x800121fc => 0x00300793 (* li a5,3  *)
    | 0x80012200 => 0x02f70063 (* beq a4,a5,80012220 <vTimerPeriodicISRTests+0x560>  *)
    | 0x80012204 => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012208 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x8001220c => 0x00079a63 (* bnez a5,80012220 <vTimerPeriodicISRTests+0x560>  *)
    | 0x80012210 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012214 => 0x47500593 (* li a1,1141  *)
    | 0x80012218 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x8001221c => 0x074000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80012220 => 0xbd41c703 (* lbu a4,-1068(gp) # 800803d4 <ucISROneShotTimerCounter>  *)
    | 0x80012224 => 0x00300793 (* li a5,3  *)
    | 0x80012228 => 0x02f70063 (* beq a4,a5,80012248 <vTimerPeriodicISRTests+0x588>  *)
    | 0x8001222c => 0x8201ae23 (* sw zero,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012230 => 0x83c1a783 (* lw a5,-1988(gp) # 8008003c <xTestStatus>  *)
    | 0x80012234 => 0x00079a63 (* bnez a5,80012248 <vTimerPeriodicISRTests+0x588>  *)
    | 0x80012238 => 0x80014537 (* lui a0,0x80014  *)
    | 0x8001223c => 0x47b00593 (* li a1,1147  *)
    | 0x80012240 => 0x3e850513 (* add a0,a0,1000 # 800143e8 <_etext+0x818>  *)
    | 0x80012244 => 0x04c000ef (* jal 80012290 <vAssertCalled>  *)
    | 0x80012248 => 0xfff00793 (* li a5,-1  *)
    | 0x8001224c => 0x82f1ac23 (* sw a5,-1992(gp) # 80080038 <uxTick.0>  *)
    | 0x80012250 => 0xaedff06f (* j 80011d3c <vTimerPeriodicISRTests+0x7c>  *)
    (* <vApplicationMallocFailedHook> *)
    | 0x80012254 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012258 => 0xff010113 (* add sp,sp,-16  *)
    | 0x8001225c => 0x44c50513 (* add a0,a0,1100 # 8001444c <_etext+0x87c>  *)
    | 0x80012260 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80012264 => 0x229000ef (* jal 80012c8c <printf>  *)
    | 0x80012268 => 0x30047073 (* csrc mstatus,8  *)
    | 0x8001226c => 0x0000006f (* j 8001226c <vApplicationMallocFailedHook+0x18>  *)
    (* <vApplicationStackOverflowHook> *)
    | 0x80012270 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012274 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80012278 => 0x46050513 (* add a0,a0,1120 # 80014460 <_etext+0x890>  *)
    | 0x8001227c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80012280 => 0x20d000ef (* jal 80012c8c <printf>  *)
    | 0x80012284 => 0x30047073 (* csrc mstatus,8  *)
    | 0x80012288 => 0x0000006f (* j 80012288 <vApplicationStackOverflowHook+0x18>  *)
    (* <vApplicationTickHook> *)
    | 0x8001228c => 0x4f80006f (* j 80012784 <vFullDemoTickHookFunction>  *)
    (* <vAssertCalled> *)
    | 0x80012290 => 0x00050613 (* mv a2,a0  *)
    | 0x80012294 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012298 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8001229c => 0x47c50513 (* add a0,a0,1148 # 8001447c <_etext+0x8ac>  *)
    | 0x800122a0 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800122a4 => 0x00012623 (* sw zero,12(sp)  *)
    | 0x800122a8 => 0x1e5000ef (* jal 80012c8c <printf>  *)
    | 0x800122ac => 0x30047073 (* csrc mstatus,8  *)
    | 0x800122b0 => 0x80080737 (* lui a4,0x80080  *)
    | 0x800122b4 => 0x00472783 (* lw a5,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x800122b8 => 0x00178793 (* add a5,a5,1  *)
    | 0x800122bc => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x800122c0 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x800122c4 => 0x02078263 (* beqz a5,800122e8 <vAssertCalled+0x58>  *)
    | 0x800122c8 => 0x00472783 (* lw a5,4(a4)  *)
    | 0x800122cc => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800122d0 => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x800122d4 => 0x00079463 (* bnez a5,800122dc <vAssertCalled+0x4c>  *)
    | 0x800122d8 => 0x30046073 (* csrs mstatus,8  *)
    | 0x800122dc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800122e0 => 0x02010113 (* add sp,sp,32  *)
    | 0x800122e4 => 0x00008067 (* ret  *)
    | 0x800122e8 => 0x00000013 (* nop  *)
    | 0x800122ec => 0x00000013 (* nop  *)
    | 0x800122f0 => 0xfd1ff06f (* j 800122c0 <vAssertCalled+0x30>  *)
    (* <vApplicationGetIdleTaskMemory> *)
    | 0x800122f4 => 0x800967b7 (* lui a5,0x80096  *)
    | 0x800122f8 => 0xb2878793 (* add a5,a5,-1240 # 80095b28 <xIdleTaskTCB.3>  *)
    | 0x800122fc => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x80012300 => 0x800967b7 (* lui a5,0x80096  *)
    | 0x80012304 => 0x94878793 (* add a5,a5,-1720 # 80095948 <uxIdleTaskStack.2>  *)
    | 0x80012308 => 0x00f5a023 (* sw a5,0(a1)  *)
    | 0x8001230c => 0x07800793 (* li a5,120  *)
    | 0x80012310 => 0x00f62023 (* sw a5,0(a2)  *)
    | 0x80012314 => 0x00008067 (* ret  *)
    (* <vApplicationGetTimerTaskMemory> *)
    | 0x80012318 => 0x800967b7 (* lui a5,0x80096  *)
    | 0x8001231c => 0x8e478793 (* add a5,a5,-1820 # 800958e4 <xTimerTaskTCB.1>  *)
    | 0x80012320 => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x80012324 => 0x800957b7 (* lui a5,0x80095  *)
    | 0x80012328 => 0x52478793 (* add a5,a5,1316 # 80095524 <uxTimerTaskStack.0>  *)
    | 0x8001232c => 0x00f5a023 (* sw a5,0(a1)  *)
    | 0x80012330 => 0x0f000793 (* li a5,240  *)
    | 0x80012334 => 0x00f62023 (* sw a5,0(a2)  *)
    | 0x80012338 => 0x00008067 (* ret  *)
    (* <prvCheckTask> *)
    | 0x8001233c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012340 => 0xfb010113 (* add sp,sp,-80  *)
    | 0x80012344 => 0x49850513 (* add a0,a0,1176 # 80014498 <_etext+0x8c8>  *)
    | 0x80012348 => 0x04112623 (* sw ra,76(sp)  *)
    | 0x8001234c => 0x04812423 (* sw s0,72(sp)  *)
    | 0x80012350 => 0x03312e23 (* sw s3,60(sp)  *)
    | 0x80012354 => 0x03412c23 (* sw s4,56(sp)  *)
    | 0x80012358 => 0x03512a23 (* sw s5,52(sp)  *)
    | 0x8001235c => 0x03612823 (* sw s6,48(sp)  *)
    | 0x80012360 => 0x03812423 (* sw s8,40(sp)  *)
    | 0x80012364 => 0x04912223 (* sw s1,68(sp)  *)
    | 0x80012368 => 0x05212023 (* sw s2,64(sp)  *)
    | 0x8001236c => 0x03712623 (* sw s7,44(sp)  *)
    | 0x80012370 => 0x03912223 (* sw s9,36(sp)  *)
    | 0x80012374 => 0x119000ef (* jal 80012c8c <printf>  *)
    | 0x80012378 => 0xafdee0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x8001237c => 0x800149b7 (* lui s3,0x80014  *)
    | 0x80012380 => 0x80014a37 (* lui s4,0x80014  *)
    | 0x80012384 => 0x80014ab7 (* lui s5,0x80014  *)
    | 0x80012388 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x8001238c => 0x00000b13 (* li s6,0  *)
    | 0x80012390 => 0x00000c13 (* li s8,0  *)
    | 0x80012394 => 0x4f898993 (* add s3,s3,1272 # 800144f8 <_etext+0x928>  *)
    | 0x80012398 => 0x4b0a0a13 (* add s4,s4,1200 # 800144b0 <_etext+0x8e0>  *)
    | 0x8001239c => 0x5cca8a93 (* add s5,s5,1484 # 800145cc <_etext+0x9fc>  *)
    | 0x800123a0 => 0x000015b7 (* lui a1,0x1  *)
    | 0x800123a4 => 0x38858593 (* add a1,a1,904 # 1388 <__stack_size+0x122a>  *)
    | 0x800123a8 => 0x01c10513 (* add a0,sp,28  *)
    | 0x800123ac => 0xe95ee0ef (* jal 80001240 <xTaskDelayUntil>  *)
    | 0x800123b0 => 0xf34fc0ef (* jal 8000eae4 <xAreStreamBufferTasksStillRunning>  *)
    | 0x800123b4 => 0x00100793 (* li a5,1  *)
    | 0x800123b8 => 0x00050493 (* mv s1,a0  *)
    | 0x800123bc => 0x02f50463 (* beq a0,a5,800123e4 <prvCheckTask+0xa8>  *)
    | 0x800123c0 => 0x8541a023 (* sw s4,-1984(gp) # 80080040 <pcMessage.0>  *)
    | 0x800123c4 => 0xf75f60ef (* jal 80009338 <xAreGenericQueueTasksStillRunning>  *)
    | 0x800123c8 => 0x00100793 (* li a5,1  *)
    | 0x800123cc => 0x00050493 (* mv s1,a0  *)
    | 0x800123d0 => 0x02f50263 (* beq a0,a5,800123f4 <prvCheckTask+0xb8>  *)
    | 0x800123d4 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x800123d8 => 0x54478793 (* add a5,a5,1348 # 80014544 <_etext+0x974>  *)
    | 0x800123dc => 0x84f1a023 (* sw a5,-1984(gp) # 80080040 <pcMessage.0>  *)
    | 0x800123e0 => 0x03c0006f (* j 8001241c <prvCheckTask+0xe0>  *)
    | 0x800123e4 => 0x831f80ef (* jal 8000ac14 <xAreMessageBufferTasksStillRunning>  *)
    | 0x800123e8 => 0xfc950ee3 (* beq a0,s1,800123c4 <prvCheckTask+0x88>  *)
    | 0x800123ec => 0x8531a023 (* sw s3,-1984(gp) # 80080040 <pcMessage.0>  *)
    | 0x800123f0 => 0xfd5ff06f (* j 800123c4 <prvCheckTask+0x88>  *)
    | 0x800123f4 => 0xe44f50ef (* jal 80007a38 <xIsCreateTaskStillRunning>  *)
    | 0x800123f8 => 0x00050913 (* mv s2,a0  *)
    | 0x800123fc => 0x00950863 (* beq a0,s1,8001240c <prvCheckTask+0xd0>  *)
    | 0x80012400 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x80012404 => 0x58c78793 (* add a5,a5,1420 # 8001458c <_etext+0x9bc>  *)
    | 0x80012408 => 0xfd5ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x8001240c => 0x994f50ef (* jal 800075a0 <xAreBlockTimeTestTasksStillRunning>  *)
    | 0x80012410 => 0x00050493 (* mv s1,a0  *)
    | 0x80012414 => 0x03250a63 (* beq a0,s2,80012448 <prvCheckTask+0x10c>  *)
    | 0x80012418 => 0x8551a023 (* sw s5,-1984(gp) # 80080040 <pcMessage.0>  *)
    | 0x8001241c => 0x8401a583 (* lw a1,-1984(gp) # 80080040 <pcMessage.0>  *)
    | 0x80012420 => 0xbfc1ac03 (* lw s8,-1028(gp) # 800803fc <ulRegTest1LoopCounter>  *)
    | 0x80012424 => 0xbf81ab03 (* lw s6,-1032(gp) # 800803f8 <ulRegTest2LoopCounter>  *)
    | 0x80012428 => 0x00b12623 (* sw a1,12(sp)  *)
    | 0x8001242c => 0xa49ee0ef (* jal 80000e74 <xTaskGetTickCount>  *)
    | 0x80012430 => 0x00c12583 (* lw a1,12(sp)  *)
    | 0x80012434 => 0x00050613 (* mv a2,a0  *)
    | 0x80012438 => 0x80015537 (* lui a0,0x80015  *)
    | 0x8001243c => 0xbac50513 (* add a0,a0,-1108 # 80014bac <_etext+0xfdc>  *)
    | 0x80012440 => 0x04d000ef (* jal 80012c8c <printf>  *)
    | 0x80012444 => 0xf5dff06f (* j 800123a0 <prvCheckTask+0x64>  *)
    | 0x80012448 => 0xe30fa0ef (* jal 8000ca78 <xAreSemaphoreTasksStillRunning>  *)
    | 0x8001244c => 0x00050913 (* mv s2,a0  *)
    | 0x80012450 => 0x00950863 (* beq a0,s1,80012460 <prvCheckTask+0x124>  *)
    | 0x80012454 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x80012458 => 0x61878793 (* add a5,a5,1560 # 80014618 <_etext+0xa48>  *)
    | 0x8001245c => 0xf81ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012460 => 0xa35f80ef (* jal 8000ae94 <xArePollingQueuesStillRunning>  *)
    | 0x80012464 => 0x00050493 (* mv s1,a0  *)
    | 0x80012468 => 0x01250863 (* beq a0,s2,80012478 <prvCheckTask+0x13c>  *)
    | 0x8001246c => 0x800147b7 (* lui a5,0x80014  *)
    | 0x80012470 => 0x66078793 (* add a5,a5,1632 # 80014660 <_etext+0xa90>  *)
    | 0x80012474 => 0xf69ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012478 => 0xe89f80ef (* jal 8000b300 <xAreQueuePeekTasksStillRunning>  *)
    | 0x8001247c => 0x00050913 (* mv s2,a0  *)
    | 0x80012480 => 0x00950863 (* beq a0,s1,80012490 <prvCheckTask+0x154>  *)
    | 0x80012484 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x80012488 => 0x6a478793 (* add a5,a5,1700 # 800146a4 <_etext+0xad4>  *)
    | 0x8001248c => 0xf51ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012490 => 0xaa8fa0ef (* jal 8000c738 <xAreRecursiveMutexTasksStillRunning>  *)
    | 0x80012494 => 0x00050493 (* mv s1,a0  *)
    | 0x80012498 => 0x01250863 (* beq a0,s2,800124a8 <prvCheckTask+0x16c>  *)
    | 0x8001249c => 0x800147b7 (* lui a5,0x80014  *)
    | 0x800124a0 => 0x6ec78793 (* add a5,a5,1772 # 800146ec <_etext+0xb1c>  *)
    | 0x800124a4 => 0xf39ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800124a8 => 0xc3df90ef (* jal 8000c0e4 <xAreQueueSetTasksStillRunning>  *)
    | 0x800124ac => 0x00050913 (* mv s2,a0  *)
    | 0x800124b0 => 0x00950863 (* beq a0,s1,800124c0 <prvCheckTask+0x184>  *)
    | 0x800124b4 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x800124b8 => 0x73878793 (* add a5,a5,1848 # 80014738 <_etext+0xb68>  *)
    | 0x800124bc => 0xf21ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800124c0 => 0xbecf60ef (* jal 800088ac <xAreEventGroupTasksStillRunning>  *)
    | 0x800124c4 => 0x00050493 (* mv s1,a0  *)
    | 0x800124c8 => 0x01250863 (* beq a0,s2,800124d8 <prvCheckTask+0x19c>  *)
    | 0x800124cc => 0x800147b7 (* lui a5,0x80014  *)
    | 0x800124d0 => 0x77c78793 (* add a5,a5,1916 # 8001477c <_etext+0xbac>  *)
    | 0x800124d4 => 0xf09ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800124d8 => 0xa7df40ef (* jal 80006f54 <xAreAbortDelayTestTasksStillRunning>  *)
    | 0x800124dc => 0x00950863 (* beq a0,s1,800124ec <prvCheckTask+0x1b0>  *)
    | 0x800124e0 => 0x800147b7 (* lui a5,0x80014  *)
    | 0x800124e4 => 0x7c478793 (* add a5,a5,1988 # 800147c4 <_etext+0xbf4>  *)
    | 0x800124e8 => 0xef5ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800124ec => 0xbd0f50ef (* jal 800078bc <xAreCountingSemaphoreTasksStillRunning>  *)
    | 0x800124f0 => 0x00100793 (* li a5,1  *)
    | 0x800124f4 => 0x00050493 (* mv s1,a0  *)
    | 0x800124f8 => 0x00f50863 (* beq a0,a5,80012508 <prvCheckTask+0x1cc>  *)
    | 0x800124fc => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80012500 => 0x81078793 (* add a5,a5,-2032 # 80014810 <_etext+0xc40>  *)
    | 0x80012504 => 0xed9ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012508 => 0x989f50ef (* jal 80007e90 <xAreDynamicPriorityTasksStillRunning>  *)
    | 0x8001250c => 0x00050913 (* mv s2,a0  *)
    | 0x80012510 => 0x00950863 (* beq a0,s1,80012520 <prvCheckTask+0x1e4>  *)
    | 0x80012514 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80012518 => 0x86078793 (* add a5,a5,-1952 # 80014860 <_etext+0xc90>  *)
    | 0x8001251c => 0xec1ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012520 => 0xee8f70ef (* jal 80009c08 <xAreMessageBufferAMPTasksStillRunning>  *)
    | 0x80012524 => 0x00050493 (* mv s1,a0  *)
    | 0x80012528 => 0x01250863 (* beq a0,s2,80012538 <prvCheckTask+0x1fc>  *)
    | 0x8001252c => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80012530 => 0x8ac78793 (* add a5,a5,-1876 # 800148ac <_etext+0xcdc>  *)
    | 0x80012534 => 0xea9ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012538 => 0xf61f80ef (* jal 8000b498 <xIsQueueOverwriteTaskStillRunning>  *)
    | 0x8001253c => 0x00050913 (* mv s2,a0  *)
    | 0x80012540 => 0x00950863 (* beq a0,s1,80012550 <prvCheckTask+0x214>  *)
    | 0x80012544 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80012548 => 0x8f878793 (* add a5,a5,-1800 # 800148f8 <_etext+0xd28>  *)
    | 0x8001254c => 0xe91ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012550 => 0xe55f90ef (* jal 8000c3a4 <xAreQueueSetPollTasksStillRunning>  *)
    | 0x80012554 => 0x00050493 (* mv s1,a0  *)
    | 0x80012558 => 0x01250863 (* beq a0,s2,80012568 <prvCheckTask+0x22c>  *)
    | 0x8001255c => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80012560 => 0x94078793 (* add a5,a5,-1728 # 80014940 <_etext+0xd70>  *)
    | 0x80012564 => 0xe79ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012568 => 0x888fb0ef (* jal 8000d5f0 <xAreStaticAllocationTasksStillRunning>  *)
    | 0x8001256c => 0x00050913 (* mv s2,a0  *)
    | 0x80012570 => 0x00950863 (* beq a0,s1,80012580 <prvCheckTask+0x244>  *)
    | 0x80012574 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80012578 => 0x98878793 (* add a5,a5,-1656 # 80014988 <_etext+0xdb8>  *)
    | 0x8001257c => 0xe61ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012580 => 0xd4cfd0ef (* jal 8000facc <xAreTaskNotificationTasksStillRunning>  *)
    | 0x80012584 => 0x00050493 (* mv s1,a0  *)
    | 0x80012588 => 0x01250863 (* beq a0,s2,80012598 <prvCheckTask+0x25c>  *)
    | 0x8001258c => 0x800157b7 (* lui a5,0x80015  *)
    | 0x80012590 => 0x9d478793 (* add a5,a5,-1580 # 800149d4 <_etext+0xe04>  *)
    | 0x80012594 => 0xe49ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012598 => 0x985fe0ef (* jal 80010f1c <xAreTaskNotificationArrayTasksStillRunning>  *)
    | 0x8001259c => 0x00050913 (* mv s2,a0  *)
    | 0x800125a0 => 0x00950863 (* beq a0,s1,800125b0 <prvCheckTask+0x274>  *)
    | 0x800125a4 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x800125a8 => 0xa2078793 (* add a5,a5,-1504 # 80014a20 <_etext+0xe50>  *)
    | 0x800125ac => 0xe31ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800125b0 => 0x00001537 (* lui a0,0x1  *)
    | 0x800125b4 => 0x38850513 (* add a0,a0,904 # 1388 <__stack_size+0x122a>  *)
    | 0x800125b8 => 0xeacff0ef (* jal 80011c64 <xAreTimerDemoTasksStillRunning>  *)
    | 0x800125bc => 0x00050493 (* mv s1,a0  *)
    | 0x800125c0 => 0x01250863 (* beq a0,s2,800125d0 <prvCheckTask+0x294>  *)
    | 0x800125c4 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x800125c8 => 0xa7478793 (* add a5,a5,-1420 # 80014a74 <_etext+0xea4>  *)
    | 0x800125cc => 0xe11ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800125d0 => 0xf98fc0ef (* jal 8000ed68 <xIsInterruptStreamBufferDemoStillRunning>  *)
    | 0x800125d4 => 0x00950863 (* beq a0,s1,800125e4 <prvCheckTask+0x2a8>  *)
    | 0x800125d8 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x800125dc => 0xabc78793 (* add a5,a5,-1348 # 80014abc <_etext+0xeec>  *)
    | 0x800125e0 => 0xdfdff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800125e4 => 0xb94f70ef (* jal 80009978 <xAreInterruptSemaphoreTasksStillRunning>  *)
    | 0x800125e8 => 0x00100793 (* li a5,1  *)
    | 0x800125ec => 0x00f50863 (* beq a0,a5,800125fc <prvCheckTask+0x2c0>  *)
    | 0x800125f0 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x800125f4 => 0xb0c78793 (* add a5,a5,-1268 # 80014b0c <_etext+0xf3c>  *)
    | 0x800125f8 => 0xde5ff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x800125fc => 0xbfc1a703 (* lw a4,-1028(gp) # 800803fc <ulRegTest1LoopCounter>  *)
    | 0x80012600 => 0xbf81a783 (* lw a5,-1032(gp) # 800803f8 <ulRegTest2LoopCounter>  *)
    | 0x80012604 => 0x01871863 (* bne a4,s8,80012614 <prvCheckTask+0x2d8>  *)
    | 0x80012608 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x8001260c => 0xb5c78793 (* add a5,a5,-1188 # 80014b5c <_etext+0xf8c>  *)
    | 0x80012610 => 0xdcdff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    | 0x80012614 => 0xe0fb14e3 (* bne s6,a5,8001241c <prvCheckTask+0xe0>  *)
    | 0x80012618 => 0x800157b7 (* lui a5,0x80015  *)
    | 0x8001261c => 0xb8478793 (* add a5,a5,-1148 # 80014b84 <_etext+0xfb4>  *)
    | 0x80012620 => 0xdbdff06f (* j 800123dc <prvCheckTask+0xa0>  *)
    (* <prvRegTestTaskEntry2> *)
    | 0x80012624 => 0x876547b7 (* lui a5,0x87654  *)
    | 0x80012628 => 0x32178793 (* add a5,a5,801 # 87654321 <_stack_top+0x75be633>  *)
    | 0x8001262c => 0x02f51063 (* bne a0,a5,8001264c <prvRegTestTaskEntry2+0x28>  *)
    | 0x80012630 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80012634 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80012638 => 0x629000ef (* jal 80013460 <vRegTest2Implementation>  *)
    | 0x8001263c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80012640 => 0x00000513 (* li a0,0  *)
    | 0x80012644 => 0x01010113 (* add sp,sp,16  *)
    | 0x80012648 => 0xa8cee06f (* j 800008d4 <vTaskDelete>  *)
    | 0x8001264c => 0x00000513 (* li a0,0  *)
    | 0x80012650 => 0xff9ff06f (* j 80012648 <prvRegTestTaskEntry2+0x24>  *)
    (* <prvRegTestTaskEntry1> *)
    | 0x80012654 => 0x123457b7 (* lui a5,0x12345  *)
    | 0x80012658 => 0x67878793 (* add a5,a5,1656 # 12345678 <__stack_size+0x1234551a>  *)
    | 0x8001265c => 0x02f51063 (* bne a0,a5,8001267c <prvRegTestTaskEntry1+0x28>  *)
    | 0x80012660 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80012664 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80012668 => 0x489000ef (* jal 800132f0 <vRegTest1Implementation>  *)
    | 0x8001266c => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x80012670 => 0x00000513 (* li a0,0  *)
    | 0x80012674 => 0x01010113 (* add sp,sp,16  *)
    | 0x80012678 => 0xa5cee06f (* j 800008d4 <vTaskDelete>  *)
    | 0x8001267c => 0x00000513 (* li a0,0  *)
    | 0x80012680 => 0xff9ff06f (* j 80012678 <prvRegTestTaskEntry1+0x24>  *)
    (* <main_full> *)
    | 0x80012684 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80012688 => 0x00000513 (* li a0,0  *)
    | 0x8001268c => 0x00112623 (* sw ra,12(sp)  *)
    | 0x80012690 => 0xb81f60ef (* jal 80009210 <vStartGenericQueueTasks>  *)
    | 0x80012694 => 0x800fa0ef (* jal 8000c694 <vStartRecursiveMutexTasks>  *)
    | 0x80012698 => 0xe81f40ef (* jal 80007518 <vCreateBlockTimeTasks>  *)
    | 0x8001269c => 0x00100513 (* li a0,1  *)
    | 0x800126a0 => 0xa44fa0ef (* jal 8000c8e4 <vStartSemaphoreTasks>  *)
    | 0x800126a4 => 0x00200513 (* li a0,2  *)
    | 0x800126a8 => 0xf48f80ef (* jal 8000adf0 <vStartPolledQueueTasks>  *)
    | 0x800126ac => 0xb79f80ef (* jal 8000b224 <vStartQueuePeekTasks>  *)
    | 0x800126b0 => 0x9b9f90ef (* jal 8000c068 <vStartQueueSetTasks>  *)
    | 0x800126b4 => 0x83cf60ef (* jal 800086f0 <vStartEventGroupTasks>  *)
    | 0x800126b8 => 0x0b400513 (* li a0,180  *)
    | 0x800126bc => 0xbc0f80ef (* jal 8000aa7c <vStartMessageBufferTasks>  *)
    | 0x800126c0 => 0xa98fc0ef (* jal 8000e958 <vStartStreamBufferTasks>  *)
    | 0x800126c4 => 0x839f40ef (* jal 80006efc <vCreateAbortDelayTasks>  *)
    | 0x800126c8 => 0x910f50ef (* jal 800077d8 <vStartCountingSemaphoreTasks>  *)
    | 0x800126cc => 0xec4f50ef (* jal 80007d90 <vStartDynamicPriorityTasks>  *)
    | 0x800126d0 => 0x07800513 (* li a0,120  *)
    | 0x800126d4 => 0xc48f70ef (* jal 80009b1c <vStartMessageBufferAMPTasks>  *)
    | 0x800126d8 => 0x00000513 (* li a0,0  *)
    | 0x800126dc => 0xd71f80ef (* jal 8000b44c <vStartQueueOverwriteTask>  *)
    | 0x800126e0 => 0xbe5f90ef (* jal 8000c2c4 <vStartQueueSetPollingTask>  *)
    | 0x800126e4 => 0xeddfa0ef (* jal 8000d5c0 <vStartStaticallyAllocatedTasks>  *)
    | 0x800126e8 => 0xa94fd0ef (* jal 8000f97c <vStartTaskNotifyTask>  *)
    | 0x800126ec => 0xe68fe0ef (* jal 80010d54 <vStartTaskNotifyArrayTask>  *)
    | 0x800126f0 => 0x03200513 (* li a0,50  *)
    | 0x800126f4 => 0xad4ff0ef (* jal 800119c8 <vStartTimerDemoTask>  *)
    | 0x800126f8 => 0xdacfc0ef (* jal 8000eca4 <vStartStreamBufferInterruptDemo>  *)
    | 0x800126fc => 0x8f0f70ef (* jal 800097ec <vStartInterruptSemaphoreTasks>  *)
    | 0x80012700 => 0x123456b7 (* lui a3,0x12345  *)
    | 0x80012704 => 0x800155b7 (* lui a1,0x80015  *)
    | 0x80012708 => 0x80012537 (* lui a0,0x80012  *)
    | 0x8001270c => 0x00000793 (* li a5,0  *)
    | 0x80012710 => 0x00000713 (* li a4,0  *)
    | 0x80012714 => 0x67868693 (* add a3,a3,1656 # 12345678 <__stack_size+0x1234551a>  *)
    | 0x80012718 => 0x05a00613 (* li a2,90  *)
    | 0x8001271c => 0xbb858593 (* add a1,a1,-1096 # 80014bb8 <_etext+0xfe8>  *)
    | 0x80012720 => 0x65450513 (* add a0,a0,1620 # 80012654 <prvRegTestTaskEntry1>  *)
    | 0x80012724 => 0x8d8ee0ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80012728 => 0x876546b7 (* lui a3,0x87654  *)
    | 0x8001272c => 0x800155b7 (* lui a1,0x80015  *)
    | 0x80012730 => 0x80012537 (* lui a0,0x80012  *)
    | 0x80012734 => 0x00000793 (* li a5,0  *)
    | 0x80012738 => 0x00000713 (* li a4,0  *)
    | 0x8001273c => 0x32168693 (* add a3,a3,801 # 87654321 <_stack_top+0x75be633>  *)
    | 0x80012740 => 0x05a00613 (* li a2,90  *)
    | 0x80012744 => 0xbc058593 (* add a1,a1,-1088 # 80014bc0 <_etext+0xff0>  *)
    | 0x80012748 => 0x62450513 (* add a0,a0,1572 # 80012624 <prvRegTestTaskEntry2>  *)
    | 0x8001274c => 0x8b0ee0ef (* jal 800007fc <xTaskCreate>  *)
    | 0x80012750 => 0x00300513 (* li a0,3  *)
    | 0x80012754 => 0xac0f50ef (* jal 80007a14 <vCreateSuicidalTasks>  *)
    | 0x80012758 => 0x800155b7 (* lui a1,0x80015  *)
    | 0x8001275c => 0x80012537 (* lui a0,0x80012  *)
    | 0x80012760 => 0x00000793 (* li a5,0  *)
    | 0x80012764 => 0x00000713 (* li a4,0  *)
    | 0x80012768 => 0x00000693 (* li a3,0  *)
    | 0x8001276c => 0x0b400613 (* li a2,180  *)
    | 0x80012770 => 0xbc858593 (* add a1,a1,-1080 # 80014bc8 <_etext+0xff8>  *)
    | 0x80012774 => 0x33c50513 (* add a0,a0,828 # 8001233c <prvCheckTask>  *)
    | 0x80012778 => 0x884ee0ef (* jal 800007fc <xTaskCreate>  *)
    | 0x8001277c => 0xe1cee0ef (* jal 80000d98 <vTaskStartScheduler>  *)
    | 0x80012780 => 0x0000006f (* j 80012780 <main_full+0xfc>  *)
    (* <vFullDemoTickHookFunction> *)
    | 0x80012784 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80012788 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8001278c => 0x9ddf90ef (* jal 8000c168 <vQueueSetAccessQueueSetFromISR>  *)
    | 0x80012790 => 0x848f60ef (* jal 800087d8 <vPeriodicEventGroupsProcessing>  *)
    | 0x80012794 => 0xaecfc0ef (* jal 8000ea80 <vPeriodicStreamBufferProcessing>  *)
    | 0x80012798 => 0xd21f80ef (* jal 8000b4b8 <vQueueOverwritePeriodicISRDemo>  *)
    | 0x8001279c => 0xba9f90ef (* jal 8000c344 <vQueueSetPollingInterruptAccess>  *)
    | 0x800127a0 => 0xa20fd0ef (* jal 8000f9c0 <xNotifyTaskFromISR>  *)
    | 0x800127a4 => 0xe7cfe0ef (* jal 80010e20 <xNotifyArrayTaskFromISR>  *)
    | 0x800127a8 => 0xd18ff0ef (* jal 80011cc0 <vTimerPeriodicISRTests>  *)
    | 0x800127ac => 0xd48fc0ef (* jal 8000ecf4 <vBasicStreamBufferSendFromISR>  *)
    | 0x800127b0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800127b4 => 0x01010113 (* add sp,sp,16  *)
    | 0x800127b8 => 0x914f706f (* j 800098cc <vInterruptSemaphorePeriodicTest>  *)
    (* <vOutNS16550> *)
    | 0x800127bc => 0x00052703 (* lw a4,0(a0)  *)
    | 0x800127c0 => 0x00574783 (* lbu a5,5(a4)  *)
    | 0x800127c4 => 0x0207f793 (* and a5,a5,32  *)
    | 0x800127c8 => 0x00079463 (* bnez a5,800127d0 <vOutNS16550+0x14>  *)
    | 0x800127cc => 0x0000006f (* j 800127cc <vOutNS16550+0x10>  *)
    | 0x800127d0 => 0x00b70023 (* sb a1,0(a4)  *)
    | 0x800127d4 => 0x00008067 (* ret  *)
    (* <printchar> *)
    | 0x800127d8 => 0x02050463 (* beqz a0,80012800 <printchar+0x28>  *)
    | 0x800127dc => 0x00052783 (* lw a5,0(a0)  *)
    | 0x800127e0 => 0x00061c63 (* bnez a2,800127f8 <printchar+0x20>  *)
    | 0x800127e4 => 0x00b78023 (* sb a1,0(a5)  *)
    | 0x800127e8 => 0x00052783 (* lw a5,0(a0)  *)
    | 0x800127ec => 0x00178793 (* add a5,a5,1  *)
    | 0x800127f0 => 0x00f52023 (* sw a5,0(a0)  *)
    | 0x800127f4 => 0x00008067 (* ret  *)
    | 0x800127f8 => 0xfec7e6e3 (* bltu a5,a2,800127e4 <printchar+0xc>  *)
    | 0x800127fc => 0x00008067 (* ret  *)
    | 0x80012800 => 0x0ff5f593 (* zext.b a1,a1  *)
    | 0x80012804 => 0x84418513 (* add a0,gp,-1980 # 80080044 <dev>  *)
    | 0x80012808 => 0xfb5ff06f (* j 800127bc <vOutNS16550>  *)
    (* <prints> *)
    | 0x8001280c => 0xfe010113 (* add sp,sp,-32  *)
    | 0x80012810 => 0x00812c23 (* sw s0,24(sp)  *)
    | 0x80012814 => 0x00912a23 (* sw s1,20(sp)  *)
    | 0x80012818 => 0x01212823 (* sw s2,16(sp)  *)
    | 0x8001281c => 0x01312623 (* sw s3,12(sp)  *)
    | 0x80012820 => 0x01512223 (* sw s5,4(sp)  *)
    | 0x80012824 => 0x01612023 (* sw s6,0(sp)  *)
    | 0x80012828 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x8001282c => 0x01412423 (* sw s4,8(sp)  *)
    | 0x80012830 => 0x00050913 (* mv s2,a0  *)
    | 0x80012834 => 0x00058b13 (* mv s6,a1  *)
    | 0x80012838 => 0x00060413 (* mv s0,a2  *)
    | 0x8001283c => 0x00068493 (* mv s1,a3  *)
    | 0x80012840 => 0x00070993 (* mv s3,a4  *)
    | 0x80012844 => 0x02000a93 (* li s5,32  *)
    | 0x80012848 => 0x02c05263 (* blez a2,8001286c <prints+0x60>  *)
    | 0x8001284c => 0x00058513 (* mv a0,a1  *)
    | 0x80012850 => 0x178010ef (* jal 800139c8 <strlen>  *)
    | 0x80012854 => 0x02855663 (* bge a0,s0,80012880 <prints+0x74>  *)
    | 0x80012858 => 0x40a40433 (* sub s0,s0,a0  *)
    | 0x8001285c => 0x0024f793 (* and a5,s1,2  *)
    | 0x80012860 => 0x03000a93 (* li s5,48  *)
    | 0x80012864 => 0x00079463 (* bnez a5,8001286c <prints+0x60>  *)
    | 0x80012868 => 0x02000a93 (* li s5,32  *)
    | 0x8001286c => 0x0014f493 (* and s1,s1,1  *)
    | 0x80012870 => 0x04048263 (* beqz s1,800128b4 <prints+0xa8>  *)
    | 0x80012874 => 0x00000493 (* li s1,0  *)
    | 0x80012878 => 0x00048a13 (* mv s4,s1  *)
    | 0x8001287c => 0x0500006f (* j 800128cc <prints+0xc0>  *)
    | 0x80012880 => 0x00000413 (* li s0,0  *)
    | 0x80012884 => 0xfd9ff06f (* j 8001285c <prints+0x50>  *)
    | 0x80012888 => 0x00098613 (* mv a2,s3  *)
    | 0x8001288c => 0x000a8593 (* mv a1,s5  *)
    | 0x80012890 => 0x00090513 (* mv a0,s2  *)
    | 0x80012894 => 0xf45ff0ef (* jal 800127d8 <printchar>  *)
    | 0x80012898 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x8001289c => 0xfe9046e3 (* bgtz s1,80012888 <prints+0x7c>  *)
    | 0x800128a0 => 0x00040493 (* mv s1,s0  *)
    | 0x800128a4 => 0x00045463 (* bgez s0,800128ac <prints+0xa0>  *)
    | 0x800128a8 => 0x00000493 (* li s1,0  *)
    | 0x800128ac => 0x40940433 (* sub s0,s0,s1  *)
    | 0x800128b0 => 0xfc9ff06f (* j 80012878 <prints+0x6c>  *)
    | 0x800128b4 => 0x00040493 (* mv s1,s0  *)
    | 0x800128b8 => 0xfe5ff06f (* j 8001289c <prints+0x90>  *)
    | 0x800128bc => 0x00098613 (* mv a2,s3  *)
    | 0x800128c0 => 0x00090513 (* mv a0,s2  *)
    | 0x800128c4 => 0xf15ff0ef (* jal 800127d8 <printchar>  *)
    | 0x800128c8 => 0x001a0a13 (* add s4,s4,1  *)
    | 0x800128cc => 0x409a07b3 (* sub a5,s4,s1  *)
    | 0x800128d0 => 0x00fb07b3 (* add a5,s6,a5  *)
    | 0x800128d4 => 0x0007c583 (* lbu a1,0(a5)  *)
    | 0x800128d8 => 0xfe0592e3 (* bnez a1,800128bc <prints+0xb0>  *)
    | 0x800128dc => 0x00040493 (* mv s1,s0  *)
    | 0x800128e0 => 0x02904c63 (* bgtz s1,80012918 <prints+0x10c>  *)
    | 0x800128e4 => 0x00045463 (* bgez s0,800128ec <prints+0xe0>  *)
    | 0x800128e8 => 0x00000413 (* li s0,0  *)
    | 0x800128ec => 0x01440533 (* add a0,s0,s4  *)
    | 0x800128f0 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800128f4 => 0x01812403 (* lw s0,24(sp)  *)
    | 0x800128f8 => 0x01412483 (* lw s1,20(sp)  *)
    | 0x800128fc => 0x01012903 (* lw s2,16(sp)  *)
    | 0x80012900 => 0x00c12983 (* lw s3,12(sp)  *)
    | 0x80012904 => 0x00812a03 (* lw s4,8(sp)  *)
    | 0x80012908 => 0x00412a83 (* lw s5,4(sp)  *)
    | 0x8001290c => 0x00012b03 (* lw s6,0(sp)  *)
    | 0x80012910 => 0x02010113 (* add sp,sp,32  *)
    | 0x80012914 => 0x00008067 (* ret  *)
    | 0x80012918 => 0x00098613 (* mv a2,s3  *)
    | 0x8001291c => 0x000a8593 (* mv a1,s5  *)
    | 0x80012920 => 0x00090513 (* mv a0,s2  *)
    | 0x80012924 => 0xeb5ff0ef (* jal 800127d8 <printchar>  *)
    | 0x80012928 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x8001292c => 0xfb5ff06f (* j 800128e0 <prints+0xd4>  *)
    (* <printi> *)
    | 0x80012930 => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80012934 => 0x02812c23 (* sw s0,56(sp)  *)
    | 0x80012938 => 0x02912a23 (* sw s1,52(sp)  *)
    | 0x8001293c => 0x02112e23 (* sw ra,60(sp)  *)
    | 0x80012940 => 0x03212823 (* sw s2,48(sp)  *)
    | 0x80012944 => 0x03312623 (* sw s3,44(sp)  *)
    | 0x80012948 => 0x00068413 (* mv s0,a3  *)
    | 0x8001294c => 0x00070493 (* mv s1,a4  *)
    | 0x80012950 => 0x00078693 (* mv a3,a5  *)
    | 0x80012954 => 0x00088713 (* mv a4,a7  *)
    | 0x80012958 => 0x02059a63 (* bnez a1,8001298c <printi+0x5c>  *)
    | 0x8001295c => 0x03000793 (* li a5,48  *)
    | 0x80012960 => 0x00048613 (* mv a2,s1  *)
    | 0x80012964 => 0x01410593 (* add a1,sp,20  *)
    | 0x80012968 => 0x00f11a23 (* sh a5,20(sp)  *)
    | 0x8001296c => 0xea1ff0ef (* jal 8001280c <prints>  *)
    | 0x80012970 => 0x03c12083 (* lw ra,60(sp)  *)
    | 0x80012974 => 0x03812403 (* lw s0,56(sp)  *)
    | 0x80012978 => 0x03412483 (* lw s1,52(sp)  *)
    | 0x8001297c => 0x03012903 (* lw s2,48(sp)  *)
    | 0x80012980 => 0x02c12983 (* lw s3,44(sp)  *)
    | 0x80012984 => 0x04010113 (* add sp,sp,64  *)
    | 0x80012988 => 0x00008067 (* ret  *)
    | 0x8001298c => 0x00050913 (* mv s2,a0  *)
    | 0x80012990 => 0x00060313 (* mv t1,a2  *)
    | 0x80012994 => 0x00040a63 (* beqz s0,800129a8 <printi+0x78>  *)
    | 0x80012998 => 0x00a00793 (* li a5,10  *)
    | 0x8001299c => 0x08f61463 (* bne a2,a5,80012a24 <printi+0xf4>  *)
    | 0x800129a0 => 0x0805d263 (* bgez a1,80012a24 <printi+0xf4>  *)
    | 0x800129a4 => 0x40b005b3 (* neg a1,a1  *)
    | 0x800129a8 => 0x00010fa3 (* sb zero,31(sp)  *)
    | 0x800129ac => 0x01f10793 (* add a5,sp,31  *)
    | 0x800129b0 => 0x00900513 (* li a0,9  *)
    | 0x800129b4 => 0xfc680813 (* add a6,a6,-58  *)
    | 0x800129b8 => 0x0265fe33 (* remu t3,a1,t1  *)
    | 0x800129bc => 0x01c57463 (* bgeu a0,t3,800129c4 <printi+0x94>  *)
    | 0x800129c0 => 0x010e0e33 (* add t3,t3,a6  *)
    | 0x800129c4 => 0x030e0e13 (* add t3,t3,48  *)
    | 0x800129c8 => 0xffc78fa3 (* sb t3,-1(a5)  *)
    | 0x800129cc => 0x0265d633 (* divu a2,a1,t1  *)
    | 0x800129d0 => 0xfff78993 (* add s3,a5,-1  *)
    | 0x800129d4 => 0x0465fc63 (* bgeu a1,t1,80012a2c <printi+0xfc>  *)
    | 0x800129d8 => 0x02040a63 (* beqz s0,80012a0c <printi+0xdc>  *)
    | 0x800129dc => 0x04048e63 (* beqz s1,80012a38 <printi+0x108>  *)
    | 0x800129e0 => 0x0026f613 (* and a2,a3,2  *)
    | 0x800129e4 => 0x04060a63 (* beqz a2,80012a38 <printi+0x108>  *)
    | 0x800129e8 => 0x00070613 (* mv a2,a4  *)
    | 0x800129ec => 0x02d00593 (* li a1,45  *)
    | 0x800129f0 => 0x00090513 (* mv a0,s2  *)
    | 0x800129f4 => 0x00d12623 (* sw a3,12(sp)  *)
    | 0x800129f8 => 0x00e12423 (* sw a4,8(sp)  *)
    | 0x800129fc => 0xdddff0ef (* jal 800127d8 <printchar>  *)
    | 0x80012a00 => 0x00812703 (* lw a4,8(sp)  *)
    | 0x80012a04 => 0x00c12683 (* lw a3,12(sp)  *)
    | 0x80012a08 => 0xfff48493 (* add s1,s1,-1  *)
    | 0x80012a0c => 0x00048613 (* mv a2,s1  *)
    | 0x80012a10 => 0x00098593 (* mv a1,s3  *)
    | 0x80012a14 => 0x00090513 (* mv a0,s2  *)
    | 0x80012a18 => 0xdf5ff0ef (* jal 8001280c <prints>  *)
    | 0x80012a1c => 0x00850533 (* add a0,a0,s0  *)
    | 0x80012a20 => 0xf51ff06f (* j 80012970 <printi+0x40>  *)
    | 0x80012a24 => 0x00000413 (* li s0,0  *)
    | 0x80012a28 => 0xf81ff06f (* j 800129a8 <printi+0x78>  *)
    | 0x80012a2c => 0x00060593 (* mv a1,a2  *)
    | 0x80012a30 => 0x00098793 (* mv a5,s3  *)
    | 0x80012a34 => 0xf85ff06f (* j 800129b8 <printi+0x88>  *)
    | 0x80012a38 => 0x02d00613 (* li a2,45  *)
    | 0x80012a3c => 0xfec98fa3 (* sb a2,-1(s3)  *)
    | 0x80012a40 => 0x00000413 (* li s0,0  *)
    | 0x80012a44 => 0xffe78993 (* add s3,a5,-2  *)
    | 0x80012a48 => 0xfc5ff06f (* j 80012a0c <printi+0xdc>  *)
    (* <tiny_print> *)
    | 0x80012a4c => 0xfb010113 (* add sp,sp,-80  *)
    | 0x80012a50 => 0x04812423 (* sw s0,72(sp)  *)
    | 0x80012a54 => 0x04912223 (* sw s1,68(sp)  *)
    | 0x80012a58 => 0x03312e23 (* sw s3,60(sp)  *)
    | 0x80012a5c => 0x03412c23 (* sw s4,56(sp)  *)
    | 0x80012a60 => 0x04112623 (* sw ra,76(sp)  *)
    | 0x80012a64 => 0x05212023 (* sw s2,64(sp)  *)
    | 0x80012a68 => 0x03512a23 (* sw s5,52(sp)  *)
    | 0x80012a6c => 0x03612823 (* sw s6,48(sp)  *)
    | 0x80012a70 => 0x03712623 (* sw s7,44(sp)  *)
    | 0x80012a74 => 0x03812423 (* sw s8,40(sp)  *)
    | 0x80012a78 => 0x03912223 (* sw s9,36(sp)  *)
    | 0x80012a7c => 0x03a12023 (* sw s10,32(sp)  *)
    | 0x80012a80 => 0x01b12e23 (* sw s11,28(sp)  *)
    | 0x80012a84 => 0x00050993 (* mv s3,a0  *)
    | 0x80012a88 => 0x00058493 (* mv s1,a1  *)
    | 0x80012a8c => 0x00060413 (* mv s0,a2  *)
    | 0x80012a90 => 0x00000a13 (* li s4,0  *)
    | 0x80012a94 => 0x00068863 (* beqz a3,80012aa4 <tiny_print+0x58>  *)
    | 0x80012a98 => 0x00052a03 (* lw s4,0(a0)  *)
    | 0x80012a9c => 0xfff68693 (* add a3,a3,-1  *)
    | 0x80012aa0 => 0x00da0a33 (* add s4,s4,a3  *)
    | 0x80012aa4 => 0x00000913 (* li s2,0  *)
    | 0x80012aa8 => 0x02500a93 (* li s5,37  *)
    | 0x80012aac => 0x02d00b93 (* li s7,45  *)
    | 0x80012ab0 => 0x03000c13 (* li s8,48  *)
    | 0x80012ab4 => 0x00900c93 (* li s9,9  *)
    | 0x80012ab8 => 0x00a00d13 (* li s10,10  *)
    | 0x80012abc => 0x07300b13 (* li s6,115  *)
    | 0x80012ac0 => 0x0740006f (* j 80012b34 <tiny_print+0xe8>  *)
    | 0x80012ac4 => 0x1b579863 (* bne a5,s5,80012c74 <tiny_print+0x228>  *)
    | 0x80012ac8 => 0x0014c683 (* lbu a3,1(s1)  *)
    | 0x80012acc => 0x06068863 (* beqz a3,80012b3c <tiny_print+0xf0>  *)
    | 0x80012ad0 => 0x00148713 (* add a4,s1,1  *)
    | 0x80012ad4 => 0x19568e63 (* beq a3,s5,80012c70 <tiny_print+0x224>  *)
    | 0x80012ad8 => 0x00000793 (* li a5,0  *)
    | 0x80012adc => 0x01769663 (* bne a3,s7,80012ae8 <tiny_print+0x9c>  *)
    | 0x80012ae0 => 0x00248713 (* add a4,s1,2  *)
    | 0x80012ae4 => 0x00100793 (* li a5,1  *)
    | 0x80012ae8 => 0x00070493 (* mv s1,a4  *)
    | 0x80012aec => 0x0004c703 (* lbu a4,0(s1)  *)
    | 0x80012af0 => 0x00148693 (* add a3,s1,1  *)
    | 0x80012af4 => 0x09870a63 (* beq a4,s8,80012b88 <tiny_print+0x13c>  *)
    | 0x80012af8 => 0x00000613 (* li a2,0  *)
    | 0x80012afc => 0x0004c703 (* lbu a4,0(s1)  *)
    | 0x80012b00 => 0x00148513 (* add a0,s1,1  *)
    | 0x80012b04 => 0xfd070693 (* add a3,a4,-48  *)
    | 0x80012b08 => 0x0ff6f593 (* zext.b a1,a3  *)
    | 0x80012b0c => 0x08bcf463 (* bgeu s9,a1,80012b94 <tiny_print+0x148>  *)
    | 0x80012b10 => 0x0d670063 (* beq a4,s6,80012bd0 <tiny_print+0x184>  *)
    | 0x80012b14 => 0x08eb6863 (* bltu s6,a4,80012ba4 <tiny_print+0x158>  *)
    | 0x80012b18 => 0x06300693 (* li a3,99  *)
    | 0x80012b1c => 0x12d70a63 (* beq a4,a3,80012c50 <tiny_print+0x204>  *)
    | 0x80012b20 => 0x06400693 (* li a3,100  *)
    | 0x80012b24 => 0x0cd70a63 (* beq a4,a3,80012bf8 <tiny_print+0x1ac>  *)
    | 0x80012b28 => 0x05800693 (* li a3,88  *)
    | 0x80012b2c => 0x0ed70e63 (* beq a4,a3,80012c28 <tiny_print+0x1dc>  *)
    | 0x80012b30 => 0x00148493 (* add s1,s1,1  *)
    | 0x80012b34 => 0x0004c783 (* lbu a5,0(s1)  *)
    | 0x80012b38 => 0xf80796e3 (* bnez a5,80012ac4 <tiny_print+0x78>  *)
    | 0x80012b3c => 0x00098663 (* beqz s3,80012b48 <tiny_print+0xfc>  *)
    | 0x80012b40 => 0x0009a783 (* lw a5,0(s3)  *)
    | 0x80012b44 => 0x00078023 (* sb zero,0(a5)  *)
    | 0x80012b48 => 0x04c12083 (* lw ra,76(sp)  *)
    | 0x80012b4c => 0x04812403 (* lw s0,72(sp)  *)
    | 0x80012b50 => 0x04412483 (* lw s1,68(sp)  *)
    | 0x80012b54 => 0x03c12983 (* lw s3,60(sp)  *)
    | 0x80012b58 => 0x03812a03 (* lw s4,56(sp)  *)
    | 0x80012b5c => 0x03412a83 (* lw s5,52(sp)  *)
    | 0x80012b60 => 0x03012b03 (* lw s6,48(sp)  *)
    | 0x80012b64 => 0x02c12b83 (* lw s7,44(sp)  *)
    | 0x80012b68 => 0x02812c03 (* lw s8,40(sp)  *)
    | 0x80012b6c => 0x02412c83 (* lw s9,36(sp)  *)
    | 0x80012b70 => 0x02012d03 (* lw s10,32(sp)  *)
    | 0x80012b74 => 0x01c12d83 (* lw s11,28(sp)  *)
    | 0x80012b78 => 0x00090513 (* mv a0,s2  *)
    | 0x80012b7c => 0x04012903 (* lw s2,64(sp)  *)
    | 0x80012b80 => 0x05010113 (* add sp,sp,80  *)
    | 0x80012b84 => 0x00008067 (* ret  *)
    | 0x80012b88 => 0x0027e793 (* or a5,a5,2  *)
    | 0x80012b8c => 0x00068493 (* mv s1,a3  *)
    | 0x80012b90 => 0xf5dff06f (* j 80012aec <tiny_print+0xa0>  *)
    | 0x80012b94 => 0x03a60633 (* mul a2,a2,s10  *)
    | 0x80012b98 => 0x00050493 (* mv s1,a0  *)
    | 0x80012b9c => 0x00c68633 (* add a2,a3,a2  *)
    | 0x80012ba0 => 0xf5dff06f (* j 80012afc <tiny_print+0xb0>  *)
    | 0x80012ba4 => 0x07500693 (* li a3,117  *)
    | 0x80012ba8 => 0x08d70863 (* beq a4,a3,80012c38 <tiny_print+0x1ec>  *)
    | 0x80012bac => 0x07800693 (* li a3,120  *)
    | 0x80012bb0 => 0xf8d710e3 (* bne a4,a3,80012b30 <tiny_print+0xe4>  *)
    | 0x80012bb4 => 0x00440d93 (* add s11,s0,4  *)
    | 0x80012bb8 => 0x000a0893 (* mv a7,s4  *)
    | 0x80012bbc => 0x06100813 (* li a6,97  *)
    | 0x80012bc0 => 0x00060713 (* mv a4,a2  *)
    | 0x80012bc4 => 0x00000693 (* li a3,0  *)
    | 0x80012bc8 => 0x01000613 (* li a2,16  *)
    | 0x80012bcc => 0x0440006f (* j 80012c10 <tiny_print+0x1c4>  *)
    | 0x80012bd0 => 0x00042583 (* lw a1,0(s0)  *)
    | 0x80012bd4 => 0x00440d93 (* add s11,s0,4  *)
    | 0x80012bd8 => 0x00059663 (* bnez a1,80012be4 <tiny_print+0x198>  *)
    | 0x80012bdc => 0x800155b7 (* lui a1,0x80015  *)
    | 0x80012be0 => 0xbe858593 (* add a1,a1,-1048 # 80014be8 <_etext+0x1018>  *)
    | 0x80012be4 => 0x000a0713 (* mv a4,s4  *)
    | 0x80012be8 => 0x00078693 (* mv a3,a5  *)
    | 0x80012bec => 0x00098513 (* mv a0,s3  *)
    | 0x80012bf0 => 0xc1dff0ef (* jal 8001280c <prints>  *)
    | 0x80012bf4 => 0x0280006f (* j 80012c1c <tiny_print+0x1d0>  *)
    | 0x80012bf8 => 0x00440d93 (* add s11,s0,4  *)
    | 0x80012bfc => 0x000a0893 (* mv a7,s4  *)
    | 0x80012c00 => 0x06100813 (* li a6,97  *)
    | 0x80012c04 => 0x00060713 (* mv a4,a2  *)
    | 0x80012c08 => 0x00100693 (* li a3,1  *)
    | 0x80012c0c => 0x00a00613 (* li a2,10  *)
    | 0x80012c10 => 0x00042583 (* lw a1,0(s0)  *)
    | 0x80012c14 => 0x00098513 (* mv a0,s3  *)
    | 0x80012c18 => 0xd19ff0ef (* jal 80012930 <printi>  *)
    | 0x80012c1c => 0x00a90933 (* add s2,s2,a0  *)
    | 0x80012c20 => 0x000d8413 (* mv s0,s11  *)
    | 0x80012c24 => 0xf0dff06f (* j 80012b30 <tiny_print+0xe4>  *)
    | 0x80012c28 => 0x00440d93 (* add s11,s0,4  *)
    | 0x80012c2c => 0x000a0893 (* mv a7,s4  *)
    | 0x80012c30 => 0x04100813 (* li a6,65  *)
    | 0x80012c34 => 0xf8dff06f (* j 80012bc0 <tiny_print+0x174>  *)
    | 0x80012c38 => 0x00440d93 (* add s11,s0,4  *)
    | 0x80012c3c => 0x000a0893 (* mv a7,s4  *)
    | 0x80012c40 => 0x06100813 (* li a6,97  *)
    | 0x80012c44 => 0x00060713 (* mv a4,a2  *)
    | 0x80012c48 => 0x00000693 (* li a3,0  *)
    | 0x80012c4c => 0xfc1ff06f (* j 80012c0c <tiny_print+0x1c0>  *)
    | 0x80012c50 => 0x00042703 (* lw a4,0(s0)  *)
    | 0x80012c54 => 0x00440d93 (* add s11,s0,4  *)
    | 0x80012c58 => 0x000106a3 (* sb zero,13(sp)  *)
    | 0x80012c5c => 0x00e10623 (* sb a4,12(sp)  *)
    | 0x80012c60 => 0x00078693 (* mv a3,a5  *)
    | 0x80012c64 => 0x000a0713 (* mv a4,s4  *)
    | 0x80012c68 => 0x00c10593 (* add a1,sp,12  *)
    | 0x80012c6c => 0xf81ff06f (* j 80012bec <tiny_print+0x1a0>  *)
    | 0x80012c70 => 0x00070493 (* mv s1,a4  *)
    | 0x80012c74 => 0x0004c583 (* lbu a1,0(s1)  *)
    | 0x80012c78 => 0x000a0613 (* mv a2,s4  *)
    | 0x80012c7c => 0x00098513 (* mv a0,s3  *)
    | 0x80012c80 => 0xb59ff0ef (* jal 800127d8 <printchar>  *)
    | 0x80012c84 => 0x00190913 (* add s2,s2,1  *)
    | 0x80012c88 => 0xea9ff06f (* j 80012b30 <tiny_print+0xe4>  *)
    (* <printf> *)
    | 0x80012c8c => 0xfc010113 (* add sp,sp,-64  *)
    | 0x80012c90 => 0x02b12223 (* sw a1,36(sp)  *)
    | 0x80012c94 => 0x02c12423 (* sw a2,40(sp)  *)
    | 0x80012c98 => 0x02d12623 (* sw a3,44(sp)  *)
    | 0x80012c9c => 0x02410613 (* add a2,sp,36  *)
    | 0x80012ca0 => 0x00050593 (* mv a1,a0  *)
    | 0x80012ca4 => 0x00000693 (* li a3,0  *)
    | 0x80012ca8 => 0x00000513 (* li a0,0  *)
    | 0x80012cac => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x80012cb0 => 0x02e12823 (* sw a4,48(sp)  *)
    | 0x80012cb4 => 0x02f12a23 (* sw a5,52(sp)  *)
    | 0x80012cb8 => 0x03012c23 (* sw a6,56(sp)  *)
    | 0x80012cbc => 0x03112e23 (* sw a7,60(sp)  *)
    | 0x80012cc0 => 0x00c12623 (* sw a2,12(sp)  *)
    | 0x80012cc4 => 0xd89ff0ef (* jal 80012a4c <tiny_print>  *)
    | 0x80012cc8 => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x80012ccc => 0x04010113 (* add sp,sp,64  *)
    | 0x80012cd0 => 0x00008067 (* ret  *)
    (* <sprintf> *)
    | 0x80012cd4 => 0xfb010113 (* add sp,sp,-80  *)
    | 0x80012cd8 => 0x00a12623 (* sw a0,12(sp)  *)
    | 0x80012cdc => 0x02c12c23 (* sw a2,56(sp)  *)
    | 0x80012ce0 => 0x02d12e23 (* sw a3,60(sp)  *)
    | 0x80012ce4 => 0x03810613 (* add a2,sp,56  *)
    | 0x80012ce8 => 0x00c10513 (* add a0,sp,12  *)
    | 0x80012cec => 0x00000693 (* li a3,0  *)
    | 0x80012cf0 => 0x02112623 (* sw ra,44(sp)  *)
    | 0x80012cf4 => 0x04e12023 (* sw a4,64(sp)  *)
    | 0x80012cf8 => 0x04f12223 (* sw a5,68(sp)  *)
    | 0x80012cfc => 0x05012423 (* sw a6,72(sp)  *)
    | 0x80012d00 => 0x05112623 (* sw a7,76(sp)  *)
    | 0x80012d04 => 0x00c12e23 (* sw a2,28(sp)  *)
    | 0x80012d08 => 0xd45ff0ef (* jal 80012a4c <tiny_print>  *)
    | 0x80012d0c => 0x02c12083 (* lw ra,44(sp)  *)
    | 0x80012d10 => 0x05010113 (* add sp,sp,80  *)
    | 0x80012d14 => 0x00008067 (* ret  *)
    (* <pxPortInitialiseStack> *)
    | 0x80012d18 => 0x300022f3 (* csrr t0,mstatus  *)
    | 0x80012d1c => 0xff72f293 (* and t0,t0,-9  *)
    | 0x80012d20 => 0x18800313 (* li t1,392  *)
    | 0x80012d24 => 0x00431313 (* sll t1,t1,0x4  *)
    | 0x80012d28 => 0x0062e2b3 (* or t0,t0,t1  *)
    | 0x80012d2c => 0xffc50513 (* add a0,a0,-4  *)
    | 0x80012d30 => 0x00552023 (* sw t0,0(a0)  *)
    | 0x80012d34 => 0xffc50513 (* add a0,a0,-4  *)
    | 0x80012d38 => 0x00052023 (* sw zero,0(a0)  *)
    | 0x80012d3c => 0xfa850513 (* add a0,a0,-88  *)
    | 0x80012d40 => 0x00c52023 (* sw a2,0(a0)  *)
    | 0x80012d44 => 0xfe850513 (* add a0,a0,-24  *)
    | 0x80012d48 => 0x8cc1a283 (* lw t0,-1844(gp) # 800800cc <xTaskReturnAddress>  *)
    | 0x80012d4c => 0x00552023 (* sw t0,0(a0)  *)
    | 0x80012d50 => 0x00000293 (* li t0,0  *)
    (* <chip_specific_stack_frame> *)
    | 0x80012d54 => 0x00028a63 (* beqz t0,80012d68 <chip_specific_stack_frame+0x14>  *)
    | 0x80012d58 => 0xffc50513 (* add a0,a0,-4  *)
    | 0x80012d5c => 0x00052023 (* sw zero,0(a0)  *)
    | 0x80012d60 => 0xfff28293 (* add t0,t0,-1  *)
    | 0x80012d64 => 0xff1ff06f (* j 80012d54 <chip_specific_stack_frame>  *)
    | 0x80012d68 => 0xffc50513 (* add a0,a0,-4  *)
    | 0x80012d6c => 0x00b52023 (* sw a1,0(a0)  *)
    | 0x80012d70 => 0x00008067 (* ret  *)
    (* <xPortStartFirstTask> *)
    | 0x80012d74 => 0x8981a103 (* lw sp,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80012d78 => 0x00012103 (* lw sp,0(sp)  *)
    | 0x80012d7c => 0x00012083 (* lw ra,0(sp)  *)
    | 0x80012d80 => 0x01012383 (* lw t2,16(sp)  *)
    | 0x80012d84 => 0x01412403 (* lw s0,20(sp)  *)
    | 0x80012d88 => 0x01812483 (* lw s1,24(sp)  *)
    | 0x80012d8c => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x80012d90 => 0x02012583 (* lw a1,32(sp)  *)
    | 0x80012d94 => 0x02412603 (* lw a2,36(sp)  *)
    | 0x80012d98 => 0x02812683 (* lw a3,40(sp)  *)
    | 0x80012d9c => 0x02c12703 (* lw a4,44(sp)  *)
    | 0x80012da0 => 0x03012783 (* lw a5,48(sp)  *)
    | 0x80012da4 => 0x03412803 (* lw a6,52(sp)  *)
    | 0x80012da8 => 0x03812883 (* lw a7,56(sp)  *)
    | 0x80012dac => 0x03c12903 (* lw s2,60(sp)  *)
    | 0x80012db0 => 0x04012983 (* lw s3,64(sp)  *)
    | 0x80012db4 => 0x04412a03 (* lw s4,68(sp)  *)
    | 0x80012db8 => 0x04812a83 (* lw s5,72(sp)  *)
    | 0x80012dbc => 0x04c12b03 (* lw s6,76(sp)  *)
    | 0x80012dc0 => 0x05012b83 (* lw s7,80(sp)  *)
    | 0x80012dc4 => 0x05412c03 (* lw s8,84(sp)  *)
    | 0x80012dc8 => 0x05812c83 (* lw s9,88(sp)  *)
    | 0x80012dcc => 0x05c12d03 (* lw s10,92(sp)  *)
    | 0x80012dd0 => 0x06012d83 (* lw s11,96(sp)  *)
    | 0x80012dd4 => 0x06412e03 (* lw t3,100(sp)  *)
    | 0x80012dd8 => 0x06812e83 (* lw t4,104(sp)  *)
    | 0x80012ddc => 0x06c12f03 (* lw t5,108(sp)  *)
    | 0x80012de0 => 0x07012f83 (* lw t6,112(sp)  *)
    | 0x80012de4 => 0x07412283 (* lw t0,116(sp)  *)
    | 0x80012de8 => 0x0006d317 (* auipc t1,0x6d  *)
    | 0x80012dec => 0x21832303 (* lw t1,536(t1) # 80080000 <pxCriticalNesting>  *)
    | 0x80012df0 => 0x00532023 (* sw t0,0(t1)  *)
    | 0x80012df4 => 0x07812283 (* lw t0,120(sp)  *)
    | 0x80012df8 => 0x00828293 (* add t0,t0,8  *)
    | 0x80012dfc => 0x30029073 (* csrw mstatus,t0  *)
    | 0x80012e00 => 0x00812283 (* lw t0,8(sp)  *)
    | 0x80012e04 => 0x00c12303 (* lw t1,12(sp)  *)
    | 0x80012e08 => 0x07c10113 (* add sp,sp,124  *)
    | 0x80012e0c => 0x00008067 (* ret  *)
    (* <freertos_risc_v_application_exception_handler> *)
    | 0x80012e10 => 0x342022f3 (* csrr t0,mcause  *)
    | 0x80012e14 => 0x34102373 (* csrr t1,mepc  *)
    | 0x80012e18 => 0x300023f3 (* csrr t2,mstatus  *)
    | 0x80012e1c => 0x0000006f (* j 80012e1c <freertos_risc_v_application_exception_handler+0xc>  *)
    (* <freertos_risc_v_application_interrupt_handler> *)
    | 0x80012e20 => 0x342022f3 (* csrr t0,mcause  *)
    | 0x80012e24 => 0x34102373 (* csrr t1,mepc  *)
    | 0x80012e28 => 0x300023f3 (* csrr t2,mstatus  *)
    | 0x80012e2c => 0x0000006f (* j 80012e2c <freertos_risc_v_application_interrupt_handler+0xc>  *)
    (* <freertos_risc_v_exception_handler> *)
    | 0x80012e30 => 0xf8410113 (* add sp,sp,-124  *)
    | 0x80012e34 => 0x00112223 (* sw ra,4(sp)  *)
    | 0x80012e38 => 0x00512423 (* sw t0,8(sp)  *)
    | 0x80012e3c => 0x00612623 (* sw t1,12(sp)  *)
    | 0x80012e40 => 0x00712823 (* sw t2,16(sp)  *)
    | 0x80012e44 => 0x00812a23 (* sw s0,20(sp)  *)
    | 0x80012e48 => 0x00912c23 (* sw s1,24(sp)  *)
    | 0x80012e4c => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x80012e50 => 0x02b12023 (* sw a1,32(sp)  *)
    | 0x80012e54 => 0x02c12223 (* sw a2,36(sp)  *)
    | 0x80012e58 => 0x02d12423 (* sw a3,40(sp)  *)
    | 0x80012e5c => 0x02e12623 (* sw a4,44(sp)  *)
    | 0x80012e60 => 0x02f12823 (* sw a5,48(sp)  *)
    | 0x80012e64 => 0x03012a23 (* sw a6,52(sp)  *)
    | 0x80012e68 => 0x03112c23 (* sw a7,56(sp)  *)
    | 0x80012e6c => 0x03212e23 (* sw s2,60(sp)  *)
    | 0x80012e70 => 0x05312023 (* sw s3,64(sp)  *)
    | 0x80012e74 => 0x05412223 (* sw s4,68(sp)  *)
    | 0x80012e78 => 0x05512423 (* sw s5,72(sp)  *)
    | 0x80012e7c => 0x05612623 (* sw s6,76(sp)  *)
    | 0x80012e80 => 0x05712823 (* sw s7,80(sp)  *)
    | 0x80012e84 => 0x05812a23 (* sw s8,84(sp)  *)
    | 0x80012e88 => 0x05912c23 (* sw s9,88(sp)  *)
    | 0x80012e8c => 0x05a12e23 (* sw s10,92(sp)  *)
    | 0x80012e90 => 0x07b12023 (* sw s11,96(sp)  *)
    | 0x80012e94 => 0x07c12223 (* sw t3,100(sp)  *)
    | 0x80012e98 => 0x07d12423 (* sw t4,104(sp)  *)
    | 0x80012e9c => 0x07e12623 (* sw t5,108(sp)  *)
    | 0x80012ea0 => 0x07f12823 (* sw t6,112(sp)  *)
    | 0x80012ea4 => 0x0006d297 (* auipc t0,0x6d  *)
    | 0x80012ea8 => 0x1602a283 (* lw t0,352(t0) # 80080004 <xCriticalNesting>  *)
    | 0x80012eac => 0x06512a23 (* sw t0,116(sp)  *)
    | 0x80012eb0 => 0x300022f3 (* csrr t0,mstatus  *)
    | 0x80012eb4 => 0x06512c23 (* sw t0,120(sp)  *)
    | 0x80012eb8 => 0x8981a283 (* lw t0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80012ebc => 0x0022a023 (* sw sp,0(t0)  *)
    | 0x80012ec0 => 0x34202573 (* csrr a0,mcause  *)
    | 0x80012ec4 => 0x341025f3 (* csrr a1,mepc  *)
    | 0x80012ec8 => 0x00458593 (* add a1,a1,4  *)
    | 0x80012ecc => 0x00b12023 (* sw a1,0(sp)  *)
    | 0x80012ed0 => 0x8501a103 (* lw sp,-1968(gp) # 80080050 <xISRStackTop>  *)
    | 0x80012ed4 => 0x00b00293 (* li t0,11  *)
    | 0x80012ed8 => 0x0a551463 (* bne a0,t0,80012f80 <other_exception>  *)
    | 0x80012edc => 0xf04ee0ef (* jal 800015e0 <vTaskSwitchContext>  *)
    | 0x80012ee0 => 0x8981a303 (* lw t1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80012ee4 => 0x00032103 (* lw sp,0(t1)  *)
    | 0x80012ee8 => 0x00012283 (* lw t0,0(sp)  *)
    | 0x80012eec => 0x34129073 (* csrw mepc,t0  *)
    | 0x80012ef0 => 0x07812283 (* lw t0,120(sp)  *)
    | 0x80012ef4 => 0x30029073 (* csrw mstatus,t0  *)
    | 0x80012ef8 => 0x07412283 (* lw t0,116(sp)  *)
    | 0x80012efc => 0x0006d317 (* auipc t1,0x6d  *)
    | 0x80012f00 => 0x10432303 (* lw t1,260(t1) # 80080000 <pxCriticalNesting>  *)
    | 0x80012f04 => 0x00532023 (* sw t0,0(t1)  *)
    | 0x80012f08 => 0x00412083 (* lw ra,4(sp)  *)
    | 0x80012f0c => 0x00812283 (* lw t0,8(sp)  *)
    | 0x80012f10 => 0x00c12303 (* lw t1,12(sp)  *)
    | 0x80012f14 => 0x01012383 (* lw t2,16(sp)  *)
    | 0x80012f18 => 0x01412403 (* lw s0,20(sp)  *)
    | 0x80012f1c => 0x01812483 (* lw s1,24(sp)  *)
    | 0x80012f20 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x80012f24 => 0x02012583 (* lw a1,32(sp)  *)
    | 0x80012f28 => 0x02412603 (* lw a2,36(sp)  *)
    | 0x80012f2c => 0x02812683 (* lw a3,40(sp)  *)
    | 0x80012f30 => 0x02c12703 (* lw a4,44(sp)  *)
    | 0x80012f34 => 0x03012783 (* lw a5,48(sp)  *)
    | 0x80012f38 => 0x03412803 (* lw a6,52(sp)  *)
    | 0x80012f3c => 0x03812883 (* lw a7,56(sp)  *)
    | 0x80012f40 => 0x03c12903 (* lw s2,60(sp)  *)
    | 0x80012f44 => 0x04012983 (* lw s3,64(sp)  *)
    | 0x80012f48 => 0x04412a03 (* lw s4,68(sp)  *)
    | 0x80012f4c => 0x04812a83 (* lw s5,72(sp)  *)
    | 0x80012f50 => 0x04c12b03 (* lw s6,76(sp)  *)
    | 0x80012f54 => 0x05012b83 (* lw s7,80(sp)  *)
    | 0x80012f58 => 0x05412c03 (* lw s8,84(sp)  *)
    | 0x80012f5c => 0x05812c83 (* lw s9,88(sp)  *)
    | 0x80012f60 => 0x05c12d03 (* lw s10,92(sp)  *)
    | 0x80012f64 => 0x06012d83 (* lw s11,96(sp)  *)
    | 0x80012f68 => 0x06412e03 (* lw t3,100(sp)  *)
    | 0x80012f6c => 0x06812e83 (* lw t4,104(sp)  *)
    | 0x80012f70 => 0x06c12f03 (* lw t5,108(sp)  *)
    | 0x80012f74 => 0x07012f83 (* lw t6,112(sp)  *)
    | 0x80012f78 => 0x07c10113 (* add sp,sp,124  *)
    | 0x80012f7c => 0x30200073 (* mret  *)
    (* <other_exception> *)
    | 0x80012f80 => 0xe91ff0ef (* jal 80012e10 <freertos_risc_v_application_exception_handler>  *)
    | 0x80012f84 => 0x8981a303 (* lw t1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80012f88 => 0x00032103 (* lw sp,0(t1)  *)
    | 0x80012f8c => 0x00012283 (* lw t0,0(sp)  *)
    | 0x80012f90 => 0x34129073 (* csrw mepc,t0  *)
    | 0x80012f94 => 0x07812283 (* lw t0,120(sp)  *)
    | 0x80012f98 => 0x30029073 (* csrw mstatus,t0  *)
    | 0x80012f9c => 0x07412283 (* lw t0,116(sp)  *)
    | 0x80012fa0 => 0x0006d317 (* auipc t1,0x6d  *)
    | 0x80012fa4 => 0x06032303 (* lw t1,96(t1) # 80080000 <pxCriticalNesting>  *)
    | 0x80012fa8 => 0x00532023 (* sw t0,0(t1)  *)
    | 0x80012fac => 0x00412083 (* lw ra,4(sp)  *)
    | 0x80012fb0 => 0x00812283 (* lw t0,8(sp)  *)
    | 0x80012fb4 => 0x00c12303 (* lw t1,12(sp)  *)
    | 0x80012fb8 => 0x01012383 (* lw t2,16(sp)  *)
    | 0x80012fbc => 0x01412403 (* lw s0,20(sp)  *)
    | 0x80012fc0 => 0x01812483 (* lw s1,24(sp)  *)
    | 0x80012fc4 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x80012fc8 => 0x02012583 (* lw a1,32(sp)  *)
    | 0x80012fcc => 0x02412603 (* lw a2,36(sp)  *)
    | 0x80012fd0 => 0x02812683 (* lw a3,40(sp)  *)
    | 0x80012fd4 => 0x02c12703 (* lw a4,44(sp)  *)
    | 0x80012fd8 => 0x03012783 (* lw a5,48(sp)  *)
    | 0x80012fdc => 0x03412803 (* lw a6,52(sp)  *)
    | 0x80012fe0 => 0x03812883 (* lw a7,56(sp)  *)
    | 0x80012fe4 => 0x03c12903 (* lw s2,60(sp)  *)
    | 0x80012fe8 => 0x04012983 (* lw s3,64(sp)  *)
    | 0x80012fec => 0x04412a03 (* lw s4,68(sp)  *)
    | 0x80012ff0 => 0x04812a83 (* lw s5,72(sp)  *)
    | 0x80012ff4 => 0x04c12b03 (* lw s6,76(sp)  *)
    | 0x80012ff8 => 0x05012b83 (* lw s7,80(sp)  *)
    | 0x80012ffc => 0x05412c03 (* lw s8,84(sp)  *)
    | 0x80013000 => 0x05812c83 (* lw s9,88(sp)  *)
    | 0x80013004 => 0x05c12d03 (* lw s10,92(sp)  *)
    | 0x80013008 => 0x06012d83 (* lw s11,96(sp)  *)
    | 0x8001300c => 0x06412e03 (* lw t3,100(sp)  *)
    | 0x80013010 => 0x06812e83 (* lw t4,104(sp)  *)
    | 0x80013014 => 0x06c12f03 (* lw t5,108(sp)  *)
    | 0x80013018 => 0x07012f83 (* lw t6,112(sp)  *)
    | 0x8001301c => 0x07c10113 (* add sp,sp,124  *)
    | 0x80013020 => 0x30200073 (* mret  *)
    (* <freertos_risc_v_interrupt_handler> *)
    | 0x80013024 => 0xf8410113 (* add sp,sp,-124  *)
    | 0x80013028 => 0x00112223 (* sw ra,4(sp)  *)
    | 0x8001302c => 0x00512423 (* sw t0,8(sp)  *)
    | 0x80013030 => 0x00612623 (* sw t1,12(sp)  *)
    | 0x80013034 => 0x00712823 (* sw t2,16(sp)  *)
    | 0x80013038 => 0x00812a23 (* sw s0,20(sp)  *)
    | 0x8001303c => 0x00912c23 (* sw s1,24(sp)  *)
    | 0x80013040 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x80013044 => 0x02b12023 (* sw a1,32(sp)  *)
    | 0x80013048 => 0x02c12223 (* sw a2,36(sp)  *)
    | 0x8001304c => 0x02d12423 (* sw a3,40(sp)  *)
    | 0x80013050 => 0x02e12623 (* sw a4,44(sp)  *)
    | 0x80013054 => 0x02f12823 (* sw a5,48(sp)  *)
    | 0x80013058 => 0x03012a23 (* sw a6,52(sp)  *)
    | 0x8001305c => 0x03112c23 (* sw a7,56(sp)  *)
    | 0x80013060 => 0x03212e23 (* sw s2,60(sp)  *)
    | 0x80013064 => 0x05312023 (* sw s3,64(sp)  *)
    | 0x80013068 => 0x05412223 (* sw s4,68(sp)  *)
    | 0x8001306c => 0x05512423 (* sw s5,72(sp)  *)
    | 0x80013070 => 0x05612623 (* sw s6,76(sp)  *)
    | 0x80013074 => 0x05712823 (* sw s7,80(sp)  *)
    | 0x80013078 => 0x05812a23 (* sw s8,84(sp)  *)
    | 0x8001307c => 0x05912c23 (* sw s9,88(sp)  *)
    | 0x80013080 => 0x05a12e23 (* sw s10,92(sp)  *)
    | 0x80013084 => 0x07b12023 (* sw s11,96(sp)  *)
    | 0x80013088 => 0x07c12223 (* sw t3,100(sp)  *)
    | 0x8001308c => 0x07d12423 (* sw t4,104(sp)  *)
    | 0x80013090 => 0x07e12623 (* sw t5,108(sp)  *)
    | 0x80013094 => 0x07f12823 (* sw t6,112(sp)  *)
    | 0x80013098 => 0x0006d297 (* auipc t0,0x6d  *)
    | 0x8001309c => 0xf6c2a283 (* lw t0,-148(t0) # 80080004 <xCriticalNesting>  *)
    | 0x800130a0 => 0x06512a23 (* sw t0,116(sp)  *)
    | 0x800130a4 => 0x300022f3 (* csrr t0,mstatus  *)
    | 0x800130a8 => 0x06512c23 (* sw t0,120(sp)  *)
    | 0x800130ac => 0x8981a283 (* lw t0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800130b0 => 0x0022a023 (* sw sp,0(t0)  *)
    | 0x800130b4 => 0x34202573 (* csrr a0,mcause  *)
    | 0x800130b8 => 0x341025f3 (* csrr a1,mepc  *)
    | 0x800130bc => 0x00b12023 (* sw a1,0(sp)  *)
    | 0x800130c0 => 0x8501a103 (* lw sp,-1968(gp) # 80080050 <xISRStackTop>  *)
    | 0x800130c4 => 0xd5dff0ef (* jal 80012e20 <freertos_risc_v_application_interrupt_handler>  *)
    | 0x800130c8 => 0x8981a303 (* lw t1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800130cc => 0x00032103 (* lw sp,0(t1)  *)
    | 0x800130d0 => 0x00012283 (* lw t0,0(sp)  *)
    | 0x800130d4 => 0x34129073 (* csrw mepc,t0  *)
    | 0x800130d8 => 0x07812283 (* lw t0,120(sp)  *)
    | 0x800130dc => 0x30029073 (* csrw mstatus,t0  *)
    | 0x800130e0 => 0x07412283 (* lw t0,116(sp)  *)
    | 0x800130e4 => 0x0006d317 (* auipc t1,0x6d  *)
    | 0x800130e8 => 0xf1c32303 (* lw t1,-228(t1) # 80080000 <pxCriticalNesting>  *)
    | 0x800130ec => 0x00532023 (* sw t0,0(t1)  *)
    | 0x800130f0 => 0x00412083 (* lw ra,4(sp)  *)
    | 0x800130f4 => 0x00812283 (* lw t0,8(sp)  *)
    | 0x800130f8 => 0x00c12303 (* lw t1,12(sp)  *)
    | 0x800130fc => 0x01012383 (* lw t2,16(sp)  *)
    | 0x80013100 => 0x01412403 (* lw s0,20(sp)  *)
    | 0x80013104 => 0x01812483 (* lw s1,24(sp)  *)
    | 0x80013108 => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x8001310c => 0x02012583 (* lw a1,32(sp)  *)
    | 0x80013110 => 0x02412603 (* lw a2,36(sp)  *)
    | 0x80013114 => 0x02812683 (* lw a3,40(sp)  *)
    | 0x80013118 => 0x02c12703 (* lw a4,44(sp)  *)
    | 0x8001311c => 0x03012783 (* lw a5,48(sp)  *)
    | 0x80013120 => 0x03412803 (* lw a6,52(sp)  *)
    | 0x80013124 => 0x03812883 (* lw a7,56(sp)  *)
    | 0x80013128 => 0x03c12903 (* lw s2,60(sp)  *)
    | 0x8001312c => 0x04012983 (* lw s3,64(sp)  *)
    | 0x80013130 => 0x04412a03 (* lw s4,68(sp)  *)
    | 0x80013134 => 0x04812a83 (* lw s5,72(sp)  *)
    | 0x80013138 => 0x04c12b03 (* lw s6,76(sp)  *)
    | 0x8001313c => 0x05012b83 (* lw s7,80(sp)  *)
    | 0x80013140 => 0x05412c03 (* lw s8,84(sp)  *)
    | 0x80013144 => 0x05812c83 (* lw s9,88(sp)  *)
    | 0x80013148 => 0x05c12d03 (* lw s10,92(sp)  *)
    | 0x8001314c => 0x06012d83 (* lw s11,96(sp)  *)
    | 0x80013150 => 0x06412e03 (* lw t3,100(sp)  *)
    | 0x80013154 => 0x06812e83 (* lw t4,104(sp)  *)
    | 0x80013158 => 0x06c12f03 (* lw t5,108(sp)  *)
    | 0x8001315c => 0x07012f83 (* lw t6,112(sp)  *)
    | 0x80013160 => 0x07c10113 (* add sp,sp,124  *)
    | 0x80013164 => 0x30200073 (* mret  *)
    (* <freertos_risc_v_mtimer_interrupt_handler> *)
    | 0x80013168 => 0xf8410113 (* add sp,sp,-124  *)
    | 0x8001316c => 0x00112223 (* sw ra,4(sp)  *)
    | 0x80013170 => 0x00512423 (* sw t0,8(sp)  *)
    | 0x80013174 => 0x00612623 (* sw t1,12(sp)  *)
    | 0x80013178 => 0x00712823 (* sw t2,16(sp)  *)
    | 0x8001317c => 0x00812a23 (* sw s0,20(sp)  *)
    | 0x80013180 => 0x00912c23 (* sw s1,24(sp)  *)
    | 0x80013184 => 0x00a12e23 (* sw a0,28(sp)  *)
    | 0x80013188 => 0x02b12023 (* sw a1,32(sp)  *)
    | 0x8001318c => 0x02c12223 (* sw a2,36(sp)  *)
    | 0x80013190 => 0x02d12423 (* sw a3,40(sp)  *)
    | 0x80013194 => 0x02e12623 (* sw a4,44(sp)  *)
    | 0x80013198 => 0x02f12823 (* sw a5,48(sp)  *)
    | 0x8001319c => 0x03012a23 (* sw a6,52(sp)  *)
    | 0x800131a0 => 0x03112c23 (* sw a7,56(sp)  *)
    | 0x800131a4 => 0x03212e23 (* sw s2,60(sp)  *)
    | 0x800131a8 => 0x05312023 (* sw s3,64(sp)  *)
    | 0x800131ac => 0x05412223 (* sw s4,68(sp)  *)
    | 0x800131b0 => 0x05512423 (* sw s5,72(sp)  *)
    | 0x800131b4 => 0x05612623 (* sw s6,76(sp)  *)
    | 0x800131b8 => 0x05712823 (* sw s7,80(sp)  *)
    | 0x800131bc => 0x05812a23 (* sw s8,84(sp)  *)
    | 0x800131c0 => 0x05912c23 (* sw s9,88(sp)  *)
    | 0x800131c4 => 0x05a12e23 (* sw s10,92(sp)  *)
    | 0x800131c8 => 0x07b12023 (* sw s11,96(sp)  *)
    | 0x800131cc => 0x07c12223 (* sw t3,100(sp)  *)
    | 0x800131d0 => 0x07d12423 (* sw t4,104(sp)  *)
    | 0x800131d4 => 0x07e12623 (* sw t5,108(sp)  *)
    | 0x800131d8 => 0x07f12823 (* sw t6,112(sp)  *)
    | 0x800131dc => 0x0006d297 (* auipc t0,0x6d  *)
    | 0x800131e0 => 0xe282a283 (* lw t0,-472(t0) # 80080004 <xCriticalNesting>  *)
    | 0x800131e4 => 0x06512a23 (* sw t0,116(sp)  *)
    | 0x800131e8 => 0x300022f3 (* csrr t0,mstatus  *)
    | 0x800131ec => 0x06512c23 (* sw t0,120(sp)  *)
    | 0x800131f0 => 0x8981a283 (* lw t0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800131f4 => 0x0022a023 (* sw sp,0(t0)  *)
    | 0x800131f8 => 0x34202573 (* csrr a0,mcause  *)
    | 0x800131fc => 0x341025f3 (* csrr a1,mepc  *)
    | 0x80013200 => 0x00b12023 (* sw a1,0(sp)  *)
    | 0x80013204 => 0x8501a103 (* lw sp,-1968(gp) # 80080050 <xISRStackTop>  *)
    | 0x80013208 => 0x8d01a503 (* lw a0,-1840(gp) # 800800d0 <pullMachineTimerCompareRegister>  *)
    | 0x8001320c => 0x8081a583 (* lw a1,-2040(gp) # 80080008 <pullNextTime>  *)
    | 0x80013210 => 0xfff00713 (* li a4,-1  *)
    | 0x80013214 => 0x0005a603 (* lw a2,0(a1)  *)
    | 0x80013218 => 0x0045a683 (* lw a3,4(a1)  *)
    | 0x8001321c => 0x00e52023 (* sw a4,0(a0)  *)
    | 0x80013220 => 0x00d52223 (* sw a3,4(a0)  *)
    | 0x80013224 => 0x00c52023 (* sw a2,0(a0)  *)
    | 0x80013228 => 0x84c1a283 (* lw t0,-1972(gp) # 8008004c <uxTimerIncrementsForOneTick>  *)
    | 0x8001322c => 0x00c28733 (* add a4,t0,a2  *)
    | 0x80013230 => 0x00c73333 (* sltu t1,a4,a2  *)
    | 0x80013234 => 0x006683b3 (* add t2,a3,t1  *)
    | 0x80013238 => 0x00e5a023 (* sw a4,0(a1)  *)
    | 0x8001323c => 0x0075a223 (* sw t2,4(a1)  *)
    | 0x80013240 => 0xc4ded0ef (* jal 80000e8c <xTaskIncrementTick>  *)
    | 0x80013244 => 0x00050463 (* beqz a0,8001324c <exit_without_context_switch>  *)
    | 0x80013248 => 0xb98ee0ef (* jal 800015e0 <vTaskSwitchContext>  *)
    (* <exit_without_context_switch> *)
    | 0x8001324c => 0x8981a303 (* lw t1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80013250 => 0x00032103 (* lw sp,0(t1)  *)
    | 0x80013254 => 0x00012283 (* lw t0,0(sp)  *)
    | 0x80013258 => 0x34129073 (* csrw mepc,t0  *)
    | 0x8001325c => 0x07812283 (* lw t0,120(sp)  *)
    | 0x80013260 => 0x30029073 (* csrw mstatus,t0  *)
    | 0x80013264 => 0x07412283 (* lw t0,116(sp)  *)
    | 0x80013268 => 0x0006d317 (* auipc t1,0x6d  *)
    | 0x8001326c => 0xd9832303 (* lw t1,-616(t1) # 80080000 <pxCriticalNesting>  *)
    | 0x80013270 => 0x00532023 (* sw t0,0(t1)  *)
    | 0x80013274 => 0x00412083 (* lw ra,4(sp)  *)
    | 0x80013278 => 0x00812283 (* lw t0,8(sp)  *)
    | 0x8001327c => 0x00c12303 (* lw t1,12(sp)  *)
    | 0x80013280 => 0x01012383 (* lw t2,16(sp)  *)
    | 0x80013284 => 0x01412403 (* lw s0,20(sp)  *)
    | 0x80013288 => 0x01812483 (* lw s1,24(sp)  *)
    | 0x8001328c => 0x01c12503 (* lw a0,28(sp)  *)
    | 0x80013290 => 0x02012583 (* lw a1,32(sp)  *)
    | 0x80013294 => 0x02412603 (* lw a2,36(sp)  *)
    | 0x80013298 => 0x02812683 (* lw a3,40(sp)  *)
    | 0x8001329c => 0x02c12703 (* lw a4,44(sp)  *)
    | 0x800132a0 => 0x03012783 (* lw a5,48(sp)  *)
    | 0x800132a4 => 0x03412803 (* lw a6,52(sp)  *)
    | 0x800132a8 => 0x03812883 (* lw a7,56(sp)  *)
    | 0x800132ac => 0x03c12903 (* lw s2,60(sp)  *)
    | 0x800132b0 => 0x04012983 (* lw s3,64(sp)  *)
    | 0x800132b4 => 0x04412a03 (* lw s4,68(sp)  *)
    | 0x800132b8 => 0x04812a83 (* lw s5,72(sp)  *)
    | 0x800132bc => 0x04c12b03 (* lw s6,76(sp)  *)
    | 0x800132c0 => 0x05012b83 (* lw s7,80(sp)  *)
    | 0x800132c4 => 0x05412c03 (* lw s8,84(sp)  *)
    | 0x800132c8 => 0x05812c83 (* lw s9,88(sp)  *)
    | 0x800132cc => 0x05c12d03 (* lw s10,92(sp)  *)
    | 0x800132d0 => 0x06012d83 (* lw s11,96(sp)  *)
    | 0x800132d4 => 0x06412e03 (* lw t3,100(sp)  *)
    | 0x800132d8 => 0x06812e83 (* lw t4,104(sp)  *)
    | 0x800132dc => 0x06c12f03 (* lw t5,108(sp)  *)
    | 0x800132e0 => 0x07012f83 (* lw t6,112(sp)  *)
    | 0x800132e4 => 0x07c10113 (* add sp,sp,124  *)
    | 0x800132e8 => 0x30200073 (* mret  *)
    | 0x800132ec => 0x0000 (* .insn 2, 0x  *)
    (* <vRegTest1Implementation> *)
    | 0x800132f0 => 0x00500293 (* li t0,5  *)
    | 0x800132f4 => 0x00600313 (* li t1,6  *)
    | 0x800132f8 => 0x00700393 (* li t2,7  *)
    | 0x800132fc => 0x00800413 (* li s0,8  *)
    | 0x80013300 => 0x00900493 (* li s1,9  *)
    | 0x80013304 => 0x00a00513 (* li a0,10  *)
    | 0x80013308 => 0x00b00593 (* li a1,11  *)
    | 0x8001330c => 0x00c00613 (* li a2,12  *)
    | 0x80013310 => 0x00d00693 (* li a3,13  *)
    | 0x80013314 => 0x00e00713 (* li a4,14  *)
    | 0x80013318 => 0x01000813 (* li a6,16  *)
    | 0x8001331c => 0x01100893 (* li a7,17  *)
    | 0x80013320 => 0x01200913 (* li s2,18  *)
    | 0x80013324 => 0x01300993 (* li s3,19  *)
    | 0x80013328 => 0x01400a13 (* li s4,20  *)
    | 0x8001332c => 0x01500a93 (* li s5,21  *)
    | 0x80013330 => 0x01600b13 (* li s6,22  *)
    | 0x80013334 => 0x01700b93 (* li s7,23  *)
    | 0x80013338 => 0x01800c13 (* li s8,24  *)
    | 0x8001333c => 0x01900c93 (* li s9,25  *)
    | 0x80013340 => 0x01a00d13 (* li s10,26  *)
    | 0x80013344 => 0x01b00d93 (* li s11,27  *)
    | 0x80013348 => 0x01c00e13 (* li t3,28  *)
    | 0x8001334c => 0x01d00e93 (* li t4,29  *)
    | 0x80013350 => 0x01e00f13 (* li t5,30  *)
    | 0x80013354 => 0x01f00f93 (* li t6,31  *)
    (* <reg1_loop> *)
    | 0x80013358 => 0x00500793 (* li a5,5  *)
    | 0x8001335c => 0x0e579663 (* bne a5,t0,80013448 <reg1_error_loop>  *)
    | 0x80013360 => 0x00600793 (* li a5,6  *)
    | 0x80013364 => 0x0e679263 (* bne a5,t1,80013448 <reg1_error_loop>  *)
    | 0x80013368 => 0x00700793 (* li a5,7  *)
    | 0x8001336c => 0x0c779e63 (* bne a5,t2,80013448 <reg1_error_loop>  *)
    | 0x80013370 => 0x00800793 (* li a5,8  *)
    | 0x80013374 => 0x0c879a63 (* bne a5,s0,80013448 <reg1_error_loop>  *)
    | 0x80013378 => 0x00900793 (* li a5,9  *)
    | 0x8001337c => 0x0c979663 (* bne a5,s1,80013448 <reg1_error_loop>  *)
    | 0x80013380 => 0x00a00793 (* li a5,10  *)
    | 0x80013384 => 0x0ca79263 (* bne a5,a0,80013448 <reg1_error_loop>  *)
    | 0x80013388 => 0x00b00793 (* li a5,11  *)
    | 0x8001338c => 0x0ab79e63 (* bne a5,a1,80013448 <reg1_error_loop>  *)
    | 0x80013390 => 0x00c00793 (* li a5,12  *)
    | 0x80013394 => 0x0ac79a63 (* bne a5,a2,80013448 <reg1_error_loop>  *)
    | 0x80013398 => 0x00d00793 (* li a5,13  *)
    | 0x8001339c => 0x0ad79663 (* bne a5,a3,80013448 <reg1_error_loop>  *)
    | 0x800133a0 => 0x00e00793 (* li a5,14  *)
    | 0x800133a4 => 0x0ae79263 (* bne a5,a4,80013448 <reg1_error_loop>  *)
    | 0x800133a8 => 0x01000793 (* li a5,16  *)
    | 0x800133ac => 0x09079e63 (* bne a5,a6,80013448 <reg1_error_loop>  *)
    | 0x800133b0 => 0x01100793 (* li a5,17  *)
    | 0x800133b4 => 0x09179a63 (* bne a5,a7,80013448 <reg1_error_loop>  *)
    | 0x800133b8 => 0x01200793 (* li a5,18  *)
    | 0x800133bc => 0x09279663 (* bne a5,s2,80013448 <reg1_error_loop>  *)
    | 0x800133c0 => 0x01300793 (* li a5,19  *)
    | 0x800133c4 => 0x09379263 (* bne a5,s3,80013448 <reg1_error_loop>  *)
    | 0x800133c8 => 0x01400793 (* li a5,20  *)
    | 0x800133cc => 0x07479e63 (* bne a5,s4,80013448 <reg1_error_loop>  *)
    | 0x800133d0 => 0x01500793 (* li a5,21  *)
    | 0x800133d4 => 0x07579a63 (* bne a5,s5,80013448 <reg1_error_loop>  *)
    | 0x800133d8 => 0x01600793 (* li a5,22  *)
    | 0x800133dc => 0x07679663 (* bne a5,s6,80013448 <reg1_error_loop>  *)
    | 0x800133e0 => 0x01700793 (* li a5,23  *)
    | 0x800133e4 => 0x07779263 (* bne a5,s7,80013448 <reg1_error_loop>  *)
    | 0x800133e8 => 0x01800793 (* li a5,24  *)
    | 0x800133ec => 0x05879e63 (* bne a5,s8,80013448 <reg1_error_loop>  *)
    | 0x800133f0 => 0x01900793 (* li a5,25  *)
    | 0x800133f4 => 0x05979a63 (* bne a5,s9,80013448 <reg1_error_loop>  *)
    | 0x800133f8 => 0x01a00793 (* li a5,26  *)
    | 0x800133fc => 0x05a79663 (* bne a5,s10,80013448 <reg1_error_loop>  *)
    | 0x80013400 => 0x01b00793 (* li a5,27  *)
    | 0x80013404 => 0x05b79263 (* bne a5,s11,80013448 <reg1_error_loop>  *)
    | 0x80013408 => 0x01c00793 (* li a5,28  *)
    | 0x8001340c => 0x03c79e63 (* bne a5,t3,80013448 <reg1_error_loop>  *)
    | 0x80013410 => 0x01d00793 (* li a5,29  *)
    | 0x80013414 => 0x03d79a63 (* bne a5,t4,80013448 <reg1_error_loop>  *)
    | 0x80013418 => 0x01e00793 (* li a5,30  *)
    | 0x8001341c => 0x03e79663 (* bne a5,t5,80013448 <reg1_error_loop>  *)
    | 0x80013420 => 0x01f00793 (* li a5,31  *)
    | 0x80013424 => 0x03f79263 (* bne a5,t6,80013448 <reg1_error_loop>  *)
    | 0x80013428 => 0x00000797 (* auipc a5,0x0  *)
    | 0x8001342c => 0x0287a783 (* lw a5,40(a5) # 80013450 <ulRegTest1LoopCounterConst>  *)
    | 0x80013430 => 0x0007a703 (* lw a4,0(a5)  *)
    | 0x80013434 => 0x00170713 (* add a4,a4,1  *)
    | 0x80013438 => 0x00e7a023 (* sw a4,0(a5)  *)
    | 0x8001343c => 0x00e00713 (* li a4,14  *)
    | 0x80013440 => 0x00000073 (* ecall  *)
    | 0x80013444 => 0xf15ff0ef (* jal 80013358 <reg1_loop>  *)
    (* <reg1_error_loop> *)
    | 0x80013448 => 0x000000ef (* jal 80013448 <reg1_error_loop>  *)
    | 0x8001344c => 0x00000013 (* nop  *)
    (* <ulRegTest1LoopCounterConst> *)
    | 0x80013450 => 0x800803fc (* .word 0x800803fc  *)
    | 0x80013454 => 0x00000013 (* nop  *)
    | 0x80013458 => 0x00000013 (* nop  *)
    | 0x8001345c => 0x00000013 (* nop  *)
    (* <vRegTest2Implementation> *)
    | 0x80013460 => 0x06100313 (* li t1,97  *)
    | 0x80013464 => 0x07100393 (* li t2,113  *)
    | 0x80013468 => 0x08100413 (* li s0,129  *)
    | 0x8001346c => 0x09100493 (* li s1,145  *)
    | 0x80013470 => 0x0a100513 (* li a0,161  *)
    | 0x80013474 => 0x0b100593 (* li a1,177  *)
    | 0x80013478 => 0x0c100613 (* li a2,193  *)
    | 0x8001347c => 0x0d100693 (* li a3,209  *)
    | 0x80013480 => 0x0e100713 (* li a4,225  *)
    | 0x80013484 => 0x0f100793 (* li a5,241  *)
    | 0x80013488 => 0x02000813 (* li a6,32  *)
    | 0x8001348c => 0x02100893 (* li a7,33  *)
    | 0x80013490 => 0x02200913 (* li s2,34  *)
    | 0x80013494 => 0x02300993 (* li s3,35  *)
    | 0x80013498 => 0x02400a13 (* li s4,36  *)
    | 0x8001349c => 0x02500a93 (* li s5,37  *)
    | 0x800134a0 => 0x02600b13 (* li s6,38  *)
    | 0x800134a4 => 0x02700b93 (* li s7,39  *)
    | 0x800134a8 => 0x02800c13 (* li s8,40  *)
    | 0x800134ac => 0x02900c93 (* li s9,41  *)
    | 0x800134b0 => 0x02a00d13 (* li s10,42  *)
    | 0x800134b4 => 0x02b00d93 (* li s11,43  *)
    | 0x800134b8 => 0x02c00e13 (* li t3,44  *)
    | 0x800134bc => 0x02d00e93 (* li t4,45  *)
    | 0x800134c0 => 0x02e00f13 (* li t5,46  *)
    | 0x800134c4 => 0x02f00f93 (* li t6,47  *)
    (* <Reg2_loop> *)
    | 0x800134c8 => 0x06100293 (* li t0,97  *)
    | 0x800134cc => 0x0e629463 (* bne t0,t1,800135b4 <reg2_error_loop>  *)
    | 0x800134d0 => 0x07100293 (* li t0,113  *)
    | 0x800134d4 => 0x0e729063 (* bne t0,t2,800135b4 <reg2_error_loop>  *)
    | 0x800134d8 => 0x08100293 (* li t0,129  *)
    | 0x800134dc => 0x0c829c63 (* bne t0,s0,800135b4 <reg2_error_loop>  *)
    | 0x800134e0 => 0x09100293 (* li t0,145  *)
    | 0x800134e4 => 0x0c929863 (* bne t0,s1,800135b4 <reg2_error_loop>  *)
    | 0x800134e8 => 0x0a100293 (* li t0,161  *)
    | 0x800134ec => 0x0ca29463 (* bne t0,a0,800135b4 <reg2_error_loop>  *)
    | 0x800134f0 => 0x0b100293 (* li t0,177  *)
    | 0x800134f4 => 0x0cb29063 (* bne t0,a1,800135b4 <reg2_error_loop>  *)
    | 0x800134f8 => 0x0c100293 (* li t0,193  *)
    | 0x800134fc => 0x0ac29c63 (* bne t0,a2,800135b4 <reg2_error_loop>  *)
    | 0x80013500 => 0x0d100293 (* li t0,209  *)
    | 0x80013504 => 0x0ad29863 (* bne t0,a3,800135b4 <reg2_error_loop>  *)
    | 0x80013508 => 0x0e100293 (* li t0,225  *)
    | 0x8001350c => 0x0ae29463 (* bne t0,a4,800135b4 <reg2_error_loop>  *)
    | 0x80013510 => 0x0f100293 (* li t0,241  *)
    | 0x80013514 => 0x0af29063 (* bne t0,a5,800135b4 <reg2_error_loop>  *)
    | 0x80013518 => 0x02000293 (* li t0,32  *)
    | 0x8001351c => 0x09029c63 (* bne t0,a6,800135b4 <reg2_error_loop>  *)
    | 0x80013520 => 0x02100293 (* li t0,33  *)
    | 0x80013524 => 0x09129863 (* bne t0,a7,800135b4 <reg2_error_loop>  *)
    | 0x80013528 => 0x02200293 (* li t0,34  *)
    | 0x8001352c => 0x09229463 (* bne t0,s2,800135b4 <reg2_error_loop>  *)
    | 0x80013530 => 0x02300293 (* li t0,35  *)
    | 0x80013534 => 0x09329063 (* bne t0,s3,800135b4 <reg2_error_loop>  *)
    | 0x80013538 => 0x02400293 (* li t0,36  *)
    | 0x8001353c => 0x07429c63 (* bne t0,s4,800135b4 <reg2_error_loop>  *)
    | 0x80013540 => 0x02500293 (* li t0,37  *)
    | 0x80013544 => 0x07529863 (* bne t0,s5,800135b4 <reg2_error_loop>  *)
    | 0x80013548 => 0x02600293 (* li t0,38  *)
    | 0x8001354c => 0x07629463 (* bne t0,s6,800135b4 <reg2_error_loop>  *)
    | 0x80013550 => 0x02700293 (* li t0,39  *)
    | 0x80013554 => 0x07729063 (* bne t0,s7,800135b4 <reg2_error_loop>  *)
    | 0x80013558 => 0x02800293 (* li t0,40  *)
    | 0x8001355c => 0x05829c63 (* bne t0,s8,800135b4 <reg2_error_loop>  *)
    | 0x80013560 => 0x02900293 (* li t0,41  *)
    | 0x80013564 => 0x05929863 (* bne t0,s9,800135b4 <reg2_error_loop>  *)
    | 0x80013568 => 0x02a00293 (* li t0,42  *)
    | 0x8001356c => 0x05a29463 (* bne t0,s10,800135b4 <reg2_error_loop>  *)
    | 0x80013570 => 0x02b00293 (* li t0,43  *)
    | 0x80013574 => 0x05b29063 (* bne t0,s11,800135b4 <reg2_error_loop>  *)
    | 0x80013578 => 0x02c00293 (* li t0,44  *)
    | 0x8001357c => 0x03c29c63 (* bne t0,t3,800135b4 <reg2_error_loop>  *)
    | 0x80013580 => 0x02d00293 (* li t0,45  *)
    | 0x80013584 => 0x03d29863 (* bne t0,t4,800135b4 <reg2_error_loop>  *)
    | 0x80013588 => 0x02e00293 (* li t0,46  *)
    | 0x8001358c => 0x03e29463 (* bne t0,t5,800135b4 <reg2_error_loop>  *)
    | 0x80013590 => 0x02f00293 (* li t0,47  *)
    | 0x80013594 => 0x03f29063 (* bne t0,t6,800135b4 <reg2_error_loop>  *)
    | 0x80013598 => 0x00000297 (* auipc t0,0x0  *)
    | 0x8001359c => 0x0282a283 (* lw t0,40(t0) # 800135c0 <ulRegTest2LoopCounterConst>  *)
    | 0x800135a0 => 0x0002a303 (* lw t1,0(t0)  *)
    | 0x800135a4 => 0x00130313 (* add t1,t1,1  *)
    | 0x800135a8 => 0x0062a023 (* sw t1,0(t0)  *)
    | 0x800135ac => 0x06100313 (* li t1,97  *)
    | 0x800135b0 => 0xf19ff0ef (* jal 800134c8 <Reg2_loop>  *)
    (* <reg2_error_loop> *)
    | 0x800135b4 => 0x000000ef (* jal 800135b4 <reg2_error_loop>  *)
    | 0x800135b8 => 0x00000013 (* nop  *)
    | 0x800135bc => 0x00000013 (* nop  *)
    (* <ulRegTest2LoopCounterConst> *)
    | 0x800135c0 => 0x800803f8 (* .word 0x800803f8  *)
    (* <freertos_vector_table> *)
    | 0x80013600 => 0x831ff06f (* j 80012e30 <freertos_risc_v_exception_handler>  *)
    (* <IRQ_1> *)
    | 0x80013604 => 0xa21ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_2> *)
    | 0x80013608 => 0xa1dff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_3> *)
    | 0x8001360c => 0xa19ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_4> *)
    | 0x80013610 => 0xa15ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_5> *)
    | 0x80013614 => 0xa11ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_6> *)
    | 0x80013618 => 0xa0dff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_7> *)
    | 0x8001361c => 0xb4dff06f (* j 80013168 <freertos_risc_v_mtimer_interrupt_handler>  *)
    (* <IRQ_8> *)
    | 0x80013620 => 0xa05ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_9> *)
    | 0x80013624 => 0xa01ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_10> *)
    | 0x80013628 => 0x9fdff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_11> *)
    | 0x8001362c => 0x9f9ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_12> *)
    | 0x80013630 => 0x9f5ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_13> *)
    | 0x80013634 => 0x9f1ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_14> *)
    | 0x80013638 => 0x9edff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <IRQ_15> *)
    | 0x8001363c => 0x9e9ff06f (* j 80013024 <freertos_risc_v_interrupt_handler>  *)
    (* <__clzsi2> *)
    | 0x80013680 => 0x000107b7 (* lui a5,0x10  *)
    | 0x80013684 => 0x02f57a63 (* bgeu a0,a5,800136b8 <__clzsi2+0x38>  *)
    | 0x80013688 => 0x10053793 (* sltiu a5,a0,256  *)
    | 0x8001368c => 0x0017b793 (* seqz a5,a5  *)
    | 0x80013690 => 0x00379793 (* sll a5,a5,0x3  *)
    | 0x80013694 => 0x80015737 (* lui a4,0x80015  *)
    | 0x80013698 => 0x02000693 (* li a3,32  *)
    | 0x8001369c => 0x40f686b3 (* sub a3,a3,a5  *)
    | 0x800136a0 => 0x00f55533 (* srl a0,a0,a5  *)
    | 0x800136a4 => 0xc5c70793 (* add a5,a4,-932 # 80014c5c <__clz_tab>  *)
    | 0x800136a8 => 0x00a787b3 (* add a5,a5,a0  *)
    | 0x800136ac => 0x0007c503 (* lbu a0,0(a5) # 10000 <__stack_size+0xfea2>  *)
    | 0x800136b0 => 0x40a68533 (* sub a0,a3,a0  *)
    | 0x800136b4 => 0x00008067 (* ret  *)
    | 0x800136b8 => 0x01000737 (* lui a4,0x1000  *)
    | 0x800136bc => 0x01800793 (* li a5,24  *)
    | 0x800136c0 => 0xfce57ae3 (* bgeu a0,a4,80013694 <__clzsi2+0x14>  *)
    | 0x800136c4 => 0x01000793 (* li a5,16  *)
    | 0x800136c8 => 0xfcdff06f (* j 80013694 <__clzsi2+0x14>  *)
    (* <memcmp> *)
    | 0x800136cc => 0x00300793 (* li a5,3  *)
    | 0x800136d0 => 0x02c7fe63 (* bgeu a5,a2,8001370c <memcmp+0x40>  *)
    | 0x800136d4 => 0x00a5e7b3 (* or a5,a1,a0  *)
    | 0x800136d8 => 0x0037f793 (* and a5,a5,3  *)
    | 0x800136dc => 0x02079463 (* bnez a5,80013704 <memcmp+0x38>  *)
    | 0x800136e0 => 0x00300693 (* li a3,3  *)
    | 0x800136e4 => 0x0140006f (* j 800136f8 <memcmp+0x2c>  *)
    | 0x800136e8 => 0xffc60613 (* add a2,a2,-4  *)
    | 0x800136ec => 0x00450513 (* add a0,a0,4  *)
    | 0x800136f0 => 0x00458593 (* add a1,a1,4  *)
    | 0x800136f4 => 0x00c6fc63 (* bgeu a3,a2,8001370c <memcmp+0x40>  *)
    | 0x800136f8 => 0x00052703 (* lw a4,0(a0)  *)
    | 0x800136fc => 0x0005a783 (* lw a5,0(a1)  *)
    | 0x80013700 => 0xfef704e3 (* beq a4,a5,800136e8 <memcmp+0x1c>  *)
    | 0x80013704 => 0xfff60693 (* add a3,a2,-1  *)
    | 0x80013708 => 0x00c0006f (* j 80013714 <memcmp+0x48>  *)
    | 0x8001370c => 0xfff60693 (* add a3,a2,-1  *)
    | 0x80013710 => 0x02060863 (* beqz a2,80013740 <memcmp+0x74>  *)
    | 0x80013714 => 0x00168693 (* add a3,a3,1  *)
    | 0x80013718 => 0x00d506b3 (* add a3,a0,a3  *)
    | 0x8001371c => 0x0080006f (* j 80013724 <memcmp+0x58>  *)
    | 0x80013720 => 0x02a68063 (* beq a3,a0,80013740 <memcmp+0x74>  *)
    | 0x80013724 => 0x00054783 (* lbu a5,0(a0)  *)
    | 0x80013728 => 0x0005c703 (* lbu a4,0(a1)  *)
    | 0x8001372c => 0x00150513 (* add a0,a0,1  *)
    | 0x80013730 => 0x00158593 (* add a1,a1,1  *)
    | 0x80013734 => 0xfee786e3 (* beq a5,a4,80013720 <memcmp+0x54>  *)
    | 0x80013738 => 0x40e78533 (* sub a0,a5,a4  *)
    | 0x8001373c => 0x00008067 (* ret  *)
    | 0x80013740 => 0x00000513 (* li a0,0  *)
    | 0x80013744 => 0x00008067 (* ret  *)
    (* <memset> *)
    | 0x80013748 => 0x00f00313 (* li t1,15  *)
    | 0x8001374c => 0x00050713 (* mv a4,a0  *)
    | 0x80013750 => 0x02c37e63 (* bgeu t1,a2,8001378c <memset+0x44>  *)
    | 0x80013754 => 0x00f77793 (* and a5,a4,15  *)
    | 0x80013758 => 0x0a079063 (* bnez a5,800137f8 <memset+0xb0>  *)
    | 0x8001375c => 0x08059263 (* bnez a1,800137e0 <memset+0x98>  *)
    | 0x80013760 => 0xff067693 (* and a3,a2,-16  *)
    | 0x80013764 => 0x00f67613 (* and a2,a2,15  *)
    | 0x80013768 => 0x00e686b3 (* add a3,a3,a4  *)
    | 0x8001376c => 0x00b72023 (* sw a1,0(a4) # 1000000 <__stack_size+0xfffea2>  *)
    | 0x80013770 => 0x00b72223 (* sw a1,4(a4)  *)
    | 0x80013774 => 0x00b72423 (* sw a1,8(a4)  *)
    | 0x80013778 => 0x00b72623 (* sw a1,12(a4)  *)
    | 0x8001377c => 0x01070713 (* add a4,a4,16  *)
    | 0x80013780 => 0xfed766e3 (* bltu a4,a3,8001376c <memset+0x24>  *)
    | 0x80013784 => 0x00061463 (* bnez a2,8001378c <memset+0x44>  *)
    | 0x80013788 => 0x00008067 (* ret  *)
    | 0x8001378c => 0x40c306b3 (* sub a3,t1,a2  *)
    | 0x80013790 => 0x00269693 (* sll a3,a3,0x2  *)
    | 0x80013794 => 0x00000297 (* auipc t0,0x0  *)
    | 0x80013798 => 0x005686b3 (* add a3,a3,t0  *)
    | 0x8001379c => 0x00c68067 (* jr 12(a3)  *)
    | 0x800137a0 => 0x00b70723 (* sb a1,14(a4)  *)
    | 0x800137a4 => 0x00b706a3 (* sb a1,13(a4)  *)
    | 0x800137a8 => 0x00b70623 (* sb a1,12(a4)  *)
    | 0x800137ac => 0x00b705a3 (* sb a1,11(a4)  *)
    | 0x800137b0 => 0x00b70523 (* sb a1,10(a4)  *)
    | 0x800137b4 => 0x00b704a3 (* sb a1,9(a4)  *)
    | 0x800137b8 => 0x00b70423 (* sb a1,8(a4)  *)
    | 0x800137bc => 0x00b703a3 (* sb a1,7(a4)  *)
    | 0x800137c0 => 0x00b70323 (* sb a1,6(a4)  *)
    | 0x800137c4 => 0x00b702a3 (* sb a1,5(a4)  *)
    | 0x800137c8 => 0x00b70223 (* sb a1,4(a4)  *)
    | 0x800137cc => 0x00b701a3 (* sb a1,3(a4)  *)
    | 0x800137d0 => 0x00b70123 (* sb a1,2(a4)  *)
    | 0x800137d4 => 0x00b700a3 (* sb a1,1(a4)  *)
    | 0x800137d8 => 0x00b70023 (* sb a1,0(a4)  *)
    | 0x800137dc => 0x00008067 (* ret  *)
    | 0x800137e0 => 0x0ff5f593 (* zext.b a1,a1  *)
    | 0x800137e4 => 0x00859693 (* sll a3,a1,0x8  *)
    | 0x800137e8 => 0x00d5e5b3 (* or a1,a1,a3  *)
    | 0x800137ec => 0x01059693 (* sll a3,a1,0x10  *)
    | 0x800137f0 => 0x00d5e5b3 (* or a1,a1,a3  *)
    | 0x800137f4 => 0xf6dff06f (* j 80013760 <memset+0x18>  *)
    | 0x800137f8 => 0x00279693 (* sll a3,a5,0x2  *)
    | 0x800137fc => 0x00000297 (* auipc t0,0x0  *)
    | 0x80013800 => 0x005686b3 (* add a3,a3,t0  *)
    | 0x80013804 => 0x00008293 (* mv t0,ra  *)
    | 0x80013808 => 0xfa0680e7 (* jalr -96(a3)  *)
    | 0x8001380c => 0x00028093 (* mv ra,t0  *)
    | 0x80013810 => 0xff078793 (* add a5,a5,-16  *)
    | 0x80013814 => 0x40f70733 (* sub a4,a4,a5  *)
    | 0x80013818 => 0x00f60633 (* add a2,a2,a5  *)
    | 0x8001381c => 0xf6c378e3 (* bgeu t1,a2,8001378c <memset+0x44>  *)
    | 0x80013820 => 0xf3dff06f (* j 8001375c <memset+0x14>  *)
    (* <memcpy> *)
    | 0x80013824 => 0x00a5c7b3 (* xor a5,a1,a0  *)
    | 0x80013828 => 0x0037f793 (* and a5,a5,3  *)
    | 0x8001382c => 0x00c508b3 (* add a7,a0,a2  *)
    | 0x80013830 => 0x06079463 (* bnez a5,80013898 <memcpy+0x74>  *)
    | 0x80013834 => 0x00300793 (* li a5,3  *)
    | 0x80013838 => 0x06c7f063 (* bgeu a5,a2,80013898 <memcpy+0x74>  *)
    | 0x8001383c => 0x00357793 (* and a5,a0,3  *)
    | 0x80013840 => 0x00050713 (* mv a4,a0  *)
    | 0x80013844 => 0x06079a63 (* bnez a5,800138b8 <memcpy+0x94>  *)
    | 0x80013848 => 0xffc8f613 (* and a2,a7,-4  *)
    | 0x8001384c => 0x40e606b3 (* sub a3,a2,a4  *)
    | 0x80013850 => 0x02000793 (* li a5,32  *)
    | 0x80013854 => 0x08d7ce63 (* blt a5,a3,800138f0 <memcpy+0xcc>  *)
    | 0x80013858 => 0x00058693 (* mv a3,a1  *)
    | 0x8001385c => 0x00070793 (* mv a5,a4  *)
    | 0x80013860 => 0x02c77863 (* bgeu a4,a2,80013890 <memcpy+0x6c>  *)
    | 0x80013864 => 0x0006a803 (* lw a6,0(a3)  *)
    | 0x80013868 => 0x00478793 (* add a5,a5,4  *)
    | 0x8001386c => 0x00468693 (* add a3,a3,4  *)
    | 0x80013870 => 0xff07ae23 (* sw a6,-4(a5)  *)
    | 0x80013874 => 0xfec7e8e3 (* bltu a5,a2,80013864 <memcpy+0x40>  *)
    | 0x80013878 => 0xfff60793 (* add a5,a2,-1  *)
    | 0x8001387c => 0x40e787b3 (* sub a5,a5,a4  *)
    | 0x80013880 => 0xffc7f793 (* and a5,a5,-4  *)
    | 0x80013884 => 0x00478793 (* add a5,a5,4  *)
    | 0x80013888 => 0x00f70733 (* add a4,a4,a5  *)
    | 0x8001388c => 0x00f585b3 (* add a1,a1,a5  *)
    | 0x80013890 => 0x01176863 (* bltu a4,a7,800138a0 <memcpy+0x7c>  *)
    | 0x80013894 => 0x00008067 (* ret  *)
    | 0x80013898 => 0x00050713 (* mv a4,a0  *)
    | 0x8001389c => 0x05157863 (* bgeu a0,a7,800138ec <memcpy+0xc8>  *)
    | 0x800138a0 => 0x0005c783 (* lbu a5,0(a1)  *)
    | 0x800138a4 => 0x00170713 (* add a4,a4,1  *)
    | 0x800138a8 => 0x00158593 (* add a1,a1,1  *)
    | 0x800138ac => 0xfef70fa3 (* sb a5,-1(a4)  *)
    | 0x800138b0 => 0xfee898e3 (* bne a7,a4,800138a0 <memcpy+0x7c>  *)
    | 0x800138b4 => 0x00008067 (* ret  *)
    | 0x800138b8 => 0x0005c683 (* lbu a3,0(a1)  *)
    | 0x800138bc => 0x00170713 (* add a4,a4,1  *)
    | 0x800138c0 => 0x00377793 (* and a5,a4,3  *)
    | 0x800138c4 => 0xfed70fa3 (* sb a3,-1(a4)  *)
    | 0x800138c8 => 0x00158593 (* add a1,a1,1  *)
    | 0x800138cc => 0xf6078ee3 (* beqz a5,80013848 <memcpy+0x24>  *)
    | 0x800138d0 => 0x0005c683 (* lbu a3,0(a1)  *)
    | 0x800138d4 => 0x00170713 (* add a4,a4,1  *)
    | 0x800138d8 => 0x00377793 (* and a5,a4,3  *)
    | 0x800138dc => 0xfed70fa3 (* sb a3,-1(a4)  *)
    | 0x800138e0 => 0x00158593 (* add a1,a1,1  *)
    | 0x800138e4 => 0xfc079ae3 (* bnez a5,800138b8 <memcpy+0x94>  *)
    | 0x800138e8 => 0xf61ff06f (* j 80013848 <memcpy+0x24>  *)
    | 0x800138ec => 0x00008067 (* ret  *)
    | 0x800138f0 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800138f4 => 0x00812623 (* sw s0,12(sp)  *)
    | 0x800138f8 => 0x02000413 (* li s0,32  *)
    | 0x800138fc => 0x0005a383 (* lw t2,0(a1)  *)
    | 0x80013900 => 0x0045a283 (* lw t0,4(a1)  *)
    | 0x80013904 => 0x0085af83 (* lw t6,8(a1)  *)
    | 0x80013908 => 0x00c5af03 (* lw t5,12(a1)  *)
    | 0x8001390c => 0x0105ae83 (* lw t4,16(a1)  *)
    | 0x80013910 => 0x0145ae03 (* lw t3,20(a1)  *)
    | 0x80013914 => 0x0185a303 (* lw t1,24(a1)  *)
    | 0x80013918 => 0x01c5a803 (* lw a6,28(a1)  *)
    | 0x8001391c => 0x0205a683 (* lw a3,32(a1)  *)
    | 0x80013920 => 0x02470713 (* add a4,a4,36  *)
    | 0x80013924 => 0x40e607b3 (* sub a5,a2,a4  *)
    | 0x80013928 => 0xfc772e23 (* sw t2,-36(a4)  *)
    | 0x8001392c => 0xfe572023 (* sw t0,-32(a4)  *)
    | 0x80013930 => 0xfff72223 (* sw t6,-28(a4)  *)
    | 0x80013934 => 0xffe72423 (* sw t5,-24(a4)  *)
    | 0x80013938 => 0xffd72623 (* sw t4,-20(a4)  *)
    | 0x8001393c => 0xffc72823 (* sw t3,-16(a4)  *)
    | 0x80013940 => 0xfe672a23 (* sw t1,-12(a4)  *)
    | 0x80013944 => 0xff072c23 (* sw a6,-8(a4)  *)
    | 0x80013948 => 0xfed72e23 (* sw a3,-4(a4)  *)
    | 0x8001394c => 0x02458593 (* add a1,a1,36  *)
    | 0x80013950 => 0xfaf446e3 (* blt s0,a5,800138fc <memcpy+0xd8>  *)
    | 0x80013954 => 0x00058693 (* mv a3,a1  *)
    | 0x80013958 => 0x00070793 (* mv a5,a4  *)
    | 0x8001395c => 0x02c77863 (* bgeu a4,a2,8001398c <memcpy+0x168>  *)
    | 0x80013960 => 0x0006a803 (* lw a6,0(a3)  *)
    | 0x80013964 => 0x00478793 (* add a5,a5,4  *)
    | 0x80013968 => 0x00468693 (* add a3,a3,4  *)
    | 0x8001396c => 0xff07ae23 (* sw a6,-4(a5)  *)
    | 0x80013970 => 0xfec7e8e3 (* bltu a5,a2,80013960 <memcpy+0x13c>  *)
    | 0x80013974 => 0xfff60793 (* add a5,a2,-1  *)
    | 0x80013978 => 0x40e787b3 (* sub a5,a5,a4  *)
    | 0x8001397c => 0xffc7f793 (* and a5,a5,-4  *)
    | 0x80013980 => 0x00478793 (* add a5,a5,4  *)
    | 0x80013984 => 0x00f70733 (* add a4,a4,a5  *)
    | 0x80013988 => 0x00f585b3 (* add a1,a1,a5  *)
    | 0x8001398c => 0x01176863 (* bltu a4,a7,8001399c <memcpy+0x178>  *)
    | 0x80013990 => 0x00c12403 (* lw s0,12(sp)  *)
    | 0x80013994 => 0x01010113 (* add sp,sp,16  *)
    | 0x80013998 => 0x00008067 (* ret  *)
    | 0x8001399c => 0x0005c783 (* lbu a5,0(a1)  *)
    | 0x800139a0 => 0x00170713 (* add a4,a4,1  *)
    | 0x800139a4 => 0x00158593 (* add a1,a1,1  *)
    | 0x800139a8 => 0xfef70fa3 (* sb a5,-1(a4)  *)
    | 0x800139ac => 0xfee882e3 (* beq a7,a4,80013990 <memcpy+0x16c>  *)
    | 0x800139b0 => 0x0005c783 (* lbu a5,0(a1)  *)
    | 0x800139b4 => 0x00170713 (* add a4,a4,1  *)
    | 0x800139b8 => 0x00158593 (* add a1,a1,1  *)
    | 0x800139bc => 0xfef70fa3 (* sb a5,-1(a4)  *)
    | 0x800139c0 => 0xfce89ee3 (* bne a7,a4,8001399c <memcpy+0x178>  *)
    | 0x800139c4 => 0xfcdff06f (* j 80013990 <memcpy+0x16c>  *)
    (* <strlen> *)
    | 0x800139c8 => 0x00357793 (* and a5,a0,3  *)
    | 0x800139cc => 0x00050713 (* mv a4,a0  *)
    | 0x800139d0 => 0x04079c63 (* bnez a5,80013a28 <strlen+0x60>  *)
    | 0x800139d4 => 0x7f7f86b7 (* lui a3,0x7f7f8  *)
    | 0x800139d8 => 0xf7f68693 (* add a3,a3,-129 # 7f7f7f7f <__stack_size+0x7f7f7e21>  *)
    | 0x800139dc => 0xfff00593 (* li a1,-1  *)
    | 0x800139e0 => 0x00072603 (* lw a2,0(a4)  *)
    | 0x800139e4 => 0x00470713 (* add a4,a4,4  *)
    | 0x800139e8 => 0x00d677b3 (* and a5,a2,a3  *)
    | 0x800139ec => 0x00d787b3 (* add a5,a5,a3  *)
    | 0x800139f0 => 0x00c7e7b3 (* or a5,a5,a2  *)
    | 0x800139f4 => 0x00d7e7b3 (* or a5,a5,a3  *)
    | 0x800139f8 => 0xfeb784e3 (* beq a5,a1,800139e0 <strlen+0x18>  *)
    | 0x800139fc => 0xffc74683 (* lbu a3,-4(a4)  *)
    | 0x80013a00 => 0x40a707b3 (* sub a5,a4,a0  *)
    | 0x80013a04 => 0x04068463 (* beqz a3,80013a4c <strlen+0x84>  *)
    | 0x80013a08 => 0xffd74683 (* lbu a3,-3(a4)  *)
    | 0x80013a0c => 0x02068c63 (* beqz a3,80013a44 <strlen+0x7c>  *)
    | 0x80013a10 => 0xffe74503 (* lbu a0,-2(a4)  *)
    | 0x80013a14 => 0x00a03533 (* snez a0,a0  *)
    | 0x80013a18 => 0x00f50533 (* add a0,a0,a5  *)
    | 0x80013a1c => 0xffe50513 (* add a0,a0,-2  *)
    | 0x80013a20 => 0x00008067 (* ret  *)
    | 0x80013a24 => 0xfa0688e3 (* beqz a3,800139d4 <strlen+0xc>  *)
    | 0x80013a28 => 0x00074783 (* lbu a5,0(a4)  *)
    | 0x80013a2c => 0x00170713 (* add a4,a4,1  *)
    | 0x80013a30 => 0x00377693 (* and a3,a4,3  *)
    | 0x80013a34 => 0xfe0798e3 (* bnez a5,80013a24 <strlen+0x5c>  *)
    | 0x80013a38 => 0x40a70733 (* sub a4,a4,a0  *)
    | 0x80013a3c => 0xfff70513 (* add a0,a4,-1  *)
    | 0x80013a40 => 0x00008067 (* ret  *)
    | 0x80013a44 => 0xffd78513 (* add a0,a5,-3  *)
    | 0x80013a48 => 0x00008067 (* ret  *)
    | 0x80013a4c => 0xffc78513 (* add a0,a5,-4  *)
    | 0x80013a50 => 0x00008067 (* ret  *)
    (* <strcmp> *)
    | 0x80013a54 => 0x00b56733 (* or a4,a0,a1  *)
    | 0x80013a58 => 0xfff00393 (* li t2,-1  *)
    | 0x80013a5c => 0x00377713 (* and a4,a4,3  *)
    | 0x80013a60 => 0x10071063 (* bnez a4,80013b60 <strcmp+0x10c>  *)
    | 0x80013a64 => 0x7f7f87b7 (* lui a5,0x7f7f8  *)
    | 0x80013a68 => 0xf7f78793 (* add a5,a5,-129 # 7f7f7f7f <__stack_size+0x7f7f7e21>  *)
    | 0x80013a6c => 0x00052603 (* lw a2,0(a0)  *)
    | 0x80013a70 => 0x0005a683 (* lw a3,0(a1)  *)
    | 0x80013a74 => 0x00f672b3 (* and t0,a2,a5  *)
    | 0x80013a78 => 0x00f66333 (* or t1,a2,a5  *)
    | 0x80013a7c => 0x00f282b3 (* add t0,t0,a5  *)
    | 0x80013a80 => 0x0062e2b3 (* or t0,t0,t1  *)
    | 0x80013a84 => 0x10729263 (* bne t0,t2,80013b88 <strcmp+0x134>  *)
    | 0x80013a88 => 0x08d61663 (* bne a2,a3,80013b14 <strcmp+0xc0>  *)
    | 0x80013a8c => 0x00452603 (* lw a2,4(a0)  *)
    | 0x80013a90 => 0x0045a683 (* lw a3,4(a1)  *)
    | 0x80013a94 => 0x00f672b3 (* and t0,a2,a5  *)
    | 0x80013a98 => 0x00f66333 (* or t1,a2,a5  *)
    | 0x80013a9c => 0x00f282b3 (* add t0,t0,a5  *)
    | 0x80013aa0 => 0x0062e2b3 (* or t0,t0,t1  *)
    | 0x80013aa4 => 0x0c729e63 (* bne t0,t2,80013b80 <strcmp+0x12c>  *)
    | 0x80013aa8 => 0x06d61663 (* bne a2,a3,80013b14 <strcmp+0xc0>  *)
    | 0x80013aac => 0x00852603 (* lw a2,8(a0)  *)
    | 0x80013ab0 => 0x0085a683 (* lw a3,8(a1)  *)
    | 0x80013ab4 => 0x00f672b3 (* and t0,a2,a5  *)
    | 0x80013ab8 => 0x00f66333 (* or t1,a2,a5  *)
    | 0x80013abc => 0x00f282b3 (* add t0,t0,a5  *)
    | 0x80013ac0 => 0x0062e2b3 (* or t0,t0,t1  *)
    | 0x80013ac4 => 0x0c729863 (* bne t0,t2,80013b94 <strcmp+0x140>  *)
    | 0x80013ac8 => 0x04d61663 (* bne a2,a3,80013b14 <strcmp+0xc0>  *)
    | 0x80013acc => 0x00c52603 (* lw a2,12(a0)  *)
    | 0x80013ad0 => 0x00c5a683 (* lw a3,12(a1)  *)
    | 0x80013ad4 => 0x00f672b3 (* and t0,a2,a5  *)
    | 0x80013ad8 => 0x00f66333 (* or t1,a2,a5  *)
    | 0x80013adc => 0x00f282b3 (* add t0,t0,a5  *)
    | 0x80013ae0 => 0x0062e2b3 (* or t0,t0,t1  *)
    | 0x80013ae4 => 0x0c729263 (* bne t0,t2,80013ba8 <strcmp+0x154>  *)
    | 0x80013ae8 => 0x02d61663 (* bne a2,a3,80013b14 <strcmp+0xc0>  *)
    | 0x80013aec => 0x01052603 (* lw a2,16(a0)  *)
    | 0x80013af0 => 0x0105a683 (* lw a3,16(a1)  *)
    | 0x80013af4 => 0x00f672b3 (* and t0,a2,a5  *)
    | 0x80013af8 => 0x00f66333 (* or t1,a2,a5  *)
    | 0x80013afc => 0x00f282b3 (* add t0,t0,a5  *)
    | 0x80013b00 => 0x0062e2b3 (* or t0,t0,t1  *)
    | 0x80013b04 => 0x0a729c63 (* bne t0,t2,80013bbc <strcmp+0x168>  *)
    | 0x80013b08 => 0x01450513 (* add a0,a0,20  *)
    | 0x80013b0c => 0x01458593 (* add a1,a1,20  *)
    | 0x80013b10 => 0xf4d60ee3 (* beq a2,a3,80013a6c <strcmp+0x18>  *)
    | 0x80013b14 => 0x01061713 (* sll a4,a2,0x10  *)
    | 0x80013b18 => 0x01069793 (* sll a5,a3,0x10  *)
    | 0x80013b1c => 0x00f71e63 (* bne a4,a5,80013b38 <strcmp+0xe4>  *)
    | 0x80013b20 => 0x01065713 (* srl a4,a2,0x10  *)
    | 0x80013b24 => 0x0106d793 (* srl a5,a3,0x10  *)
    | 0x80013b28 => 0x40f70533 (* sub a0,a4,a5  *)
    | 0x80013b2c => 0x0ff57593 (* zext.b a1,a0  *)
    | 0x80013b30 => 0x02059063 (* bnez a1,80013b50 <strcmp+0xfc>  *)
    | 0x80013b34 => 0x00008067 (* ret  *)
    | 0x80013b38 => 0x01075713 (* srl a4,a4,0x10  *)
    | 0x80013b3c => 0x0107d793 (* srl a5,a5,0x10  *)
    | 0x80013b40 => 0x40f70533 (* sub a0,a4,a5  *)
    | 0x80013b44 => 0x0ff57593 (* zext.b a1,a0  *)
    | 0x80013b48 => 0x00059463 (* bnez a1,80013b50 <strcmp+0xfc>  *)
    | 0x80013b4c => 0x00008067 (* ret  *)
    | 0x80013b50 => 0x0ff77713 (* zext.b a4,a4  *)
    | 0x80013b54 => 0x0ff7f793 (* zext.b a5,a5  *)
    | 0x80013b58 => 0x40f70533 (* sub a0,a4,a5  *)
    | 0x80013b5c => 0x00008067 (* ret  *)
    | 0x80013b60 => 0x00054603 (* lbu a2,0(a0)  *)
    | 0x80013b64 => 0x0005c683 (* lbu a3,0(a1)  *)
    | 0x80013b68 => 0x00150513 (* add a0,a0,1  *)
    | 0x80013b6c => 0x00158593 (* add a1,a1,1  *)
    | 0x80013b70 => 0x00d61463 (* bne a2,a3,80013b78 <strcmp+0x124>  *)
    | 0x80013b74 => 0xfe0616e3 (* bnez a2,80013b60 <strcmp+0x10c>  *)
    | 0x80013b78 => 0x40d60533 (* sub a0,a2,a3  *)
    | 0x80013b7c => 0x00008067 (* ret  *)
    | 0x80013b80 => 0x00450513 (* add a0,a0,4  *)
    | 0x80013b84 => 0x00458593 (* add a1,a1,4  *)
    | 0x80013b88 => 0xfcd61ce3 (* bne a2,a3,80013b60 <strcmp+0x10c>  *)
    | 0x80013b8c => 0x00000513 (* li a0,0  *)
    | 0x80013b90 => 0x00008067 (* ret  *)
    | 0x80013b94 => 0x00850513 (* add a0,a0,8  *)
    | 0x80013b98 => 0x00858593 (* add a1,a1,8  *)
    | 0x80013b9c => 0xfcd612e3 (* bne a2,a3,80013b60 <strcmp+0x10c>  *)
    | 0x80013ba0 => 0x00000513 (* li a0,0  *)
    | 0x80013ba4 => 0x00008067 (* ret  *)
    | 0x80013ba8 => 0x00c50513 (* add a0,a0,12  *)
    | 0x80013bac => 0x00c58593 (* add a1,a1,12  *)
    | 0x80013bb0 => 0xfad618e3 (* bne a2,a3,80013b60 <strcmp+0x10c>  *)
    | 0x80013bb4 => 0x00000513 (* li a0,0  *)
    | 0x80013bb8 => 0x00008067 (* ret  *)
    | 0x80013bbc => 0x01050513 (* add a0,a0,16  *)
    | 0x80013bc0 => 0x01058593 (* add a1,a1,16  *)
    | 0x80013bc4 => 0xf8d61ee3 (* bne a2,a3,80013b60 <strcmp+0x10c>  *)
    | 0x80013bc8 => 0x00000513 (* li a0,0  *)
    | 0x80013bcc => 0x00008067 (* ret  *)
    | _ => 0
    end.

Definition start_lifted_RTOSDemo : N := 0x80000000.
Definition end_lifted_RTOSDemo : N := 0x80013bcc.

(* TODO : how to handle multiple functions?
   Ideally, each function should be its own coq function.
   But then you run into the issue of having to manually
   link all of your functions together. For now, I'm going
   to do this.
*)
Definition vTaskSwitchContext (a : addr) : N :=
    match a with
    (* <vApplicationStackOverflowHook> *)
    | 0x80012270 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012274 => 0xff010113 (* add sp,sp,-16  *)
    | 0x80012278 => 0x46050513 (* add a0,a0,1120 # 80014460 <_etext+0x890>  *)
    | 0x8001227c => 0x00112623 (* sw ra,12(sp)  *)
    (* WARNING/TODO/NOTICE : 
        I'm manually replacing the instruction here at 0x80012280:
            0x20d000ef (* jal 80012c8c <printf> *)
        with a nop:
            0x00000013 (* addi zero, zero, 0 *)
        This is because dealing with printf is a huge pain for my timing proof,
        and this goes into an infinite loop (by design)anyways just a few 
        instructions later! So replacing this call has no bearing on a timing
        proof (although it may have a bearing on future correctness proofs)

        This is a lot easier than recompiling the operating system :)
    *)
    (* | 0x80012280 => 0x20d000ef (* jal 80012c8c <printf>  *) *)
    | 0x80012280 => 0x00000013 (* addi zero, zero, 0 *)
    (* TODO 
       switch this back to
            0x30047073 (* csrc mstatus,8  *)
       I don't want to implement the ZICSR extension rn
    *)
    (* | 0x80012284 => 0x30047073 (* csrc mstatus,8  *) *)
    | 0x80012284 => 0x00000013 (* addi zero, zero, 0 *)
    | 0x80012288 => 0x0000006f (* j 80012288 <vApplicationStackOverflowHook+0x18>  *)
    (* <vAssertCalled> *)
    | 0x80012290 => 0x00050613 (* mv a2,a0  *)
    | 0x80012294 => 0x80014537 (* lui a0,0x80014  *)
    | 0x80012298 => 0xfe010113 (* add sp,sp,-32  *)
    | 0x8001229c => 0x47c50513 (* add a0,a0,1148 # 8001447c <_etext+0x8ac>  *)
    | 0x800122a0 => 0x00112e23 (* sw ra,28(sp)  *)
    | 0x800122a4 => 0x00012623 (* sw zero,12(sp)  *)
    (* WARNING/TODO/NOTICE : 
        I'm manually replacing the instruction here at 0x80012280:
            0x20d000ef (* jal 80012c8c <printf> *)
        with a nop:
            0x00000013 (* addi zero, zero, 0 *)
        This is because dealing with printf is a huge pain for my timing proof,
        and this goes into an infinite loop (by design)anyways just a few 
        instructions later! So replacing this call has no bearing on a timing
        proof (although it may have a bearing on future correctness proofs)

        This is a lot easier than recompiling the operating system :)
    *)
    (* | 0x800122a8 => 0x1e5000ef (* jal 80012c8c <printf>  *) *)
    | 0x800122a8 => 0x00000013 (* addi zero, zero, 0 *)
    (* TODO 
       switch this back to
            0x30047073 (* csrc mstatus,8  *)
       I don't want to implement the ZICSR extension rn
    *)
    (* | 0x800122ac => 0x30047073 (* csrc mstatus,8  *) *)
    | 0x800122ac => 0x00000013 (* addi zero, zero, 0 *)
    | 0x800122b0 => 0x80080737 (* lui a4,0x80080  *)
    | 0x800122b4 => 0x00472783 (* lw a5,4(a4) # 80080004 <xCriticalNesting>  *)
    | 0x800122b8 => 0x00178793 (* add a5,a5,1  *)
    | 0x800122bc => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x800122c0 => 0x00c12783 (* lw a5,12(sp)  *)
    | 0x800122c4 => 0x02078263 (* beqz a5,800122e8 <vAssertCalled+0x58>  *)
    | 0x800122c8 => 0x00472783 (* lw a5,4(a4)  *)
    | 0x800122cc => 0xfff78793 (* add a5,a5,-1  *)
    | 0x800122d0 => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x800122d4 => 0x00079463 (* bnez a5,800122dc <vAssertCalled+0x4c>  *)
    (* TODO 
       switch this back to
            0x30047073 (* csrc mstatus,8  *)
       I don't want to implement the ZICSR extension rn
    *)
    (* | 0x800122d8 => 0x30046073 (* csrs mstatus,8  *) *)
    | 0x800122d8 => 0x00000013 (* addi zero, zero, 0*)
    | 0x800122dc => 0x01c12083 (* lw ra,28(sp)  *)
    | 0x800122e0 => 0x02010113 (* add sp,sp,32  *)
    | 0x800122e4 => 0x00008067 (* ret  *)
    | 0x800122e8 => 0x00000013 (* nop  *)
    | 0x800122ec => 0x00000013 (* nop  *)
    | 0x800122f0 => 0xfd1ff06f (* j 800122c0 <vAssertCalled+0x30>  *)
    (* <__clzsi2> *)
    | 0x80013680 => 0x000107b7 (* lui a5,0x10  *)
    | 0x80013684 => 0x02f57a63 (* bgeu a0,a5,800136b8 <__clzsi2+0x38>  *)
    | 0x80013688 => 0x10053793 (* sltiu a5,a0,256  *)
    | 0x8001368c => 0x0017b793 (* seqz a5,a5  *)
    | 0x80013690 => 0x00379793 (* sll a5,a5,0x3  *)
    | 0x80013694 => 0x80015737 (* lui a4,0x80015  *)
    | 0x80013698 => 0x02000693 (* li a3,32  *)
    | 0x8001369c => 0x40f686b3 (* sub a3,a3,a5  *)
    | 0x800136a0 => 0x00f55533 (* srl a0,a0,a5  *)
    | 0x800136a4 => 0xc5c70793 (* add a5,a4,-932 # 80014c5c <__clz_tab>  *)
    | 0x800136a8 => 0x00a787b3 (* add a5,a5,a0  *)
    | 0x800136ac => 0x0007c503 (* lbu a0,0(a5) # 10000 <__stack_size+0xfea2>  *)
    | 0x800136b0 => 0x40a68533 (* sub a0,a3,a0  *)
    | 0x800136b4 => 0x00008067 (* ret  *)
    | 0x800136b8 => 0x01000737 (* lui a4,0x1000  *)
    | 0x800136bc => 0x01800793 (* li a5,24  *)
    | 0x800136c0 => 0xfce57ae3 (* bgeu a0,a4,80013694 <__clzsi2+0x14>  *)
    | 0x800136c4 => 0x01000793 (* li a5,16  *)
    | 0x800136c8 => 0xfcdff06f (* j 80013694 <__clzsi2+0x14>  *)
    (* <vTsakSwitchContext> *)
    | 0x800015e0 => 0x8601a703 (* lw a4,-1952(gp) # 80080060 <uxSchedulerSuspended>  *)
    | 0x800015e4 => 0x00070863 (* beqz a4,800015f4 <vTaskSwitchContext+0x14>  *)
    | 0x800015e8 => 0x00100713 (* li a4,1  *)
    | 0x800015ec => 0x86e1aa23 (* sw a4,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x800015f0 => 0x00008067 (* ret  *)
    | 0x800015f4 => 0xff010113 (* add sp,sp,-16  *)
    | 0x800015f8 => 0x8601aa23 (* sw zero,-1932(gp) # 80080074 <xYieldPendings>  *)
    | 0x800015fc => 0x01212023 (* sw s2,0(sp)  *)
    | 0x80001600 => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001604 => 0xa5a5a737 (* lui a4,0xa5a5a  *)
    | 0x80001608 => 0x00112623 (* sw ra,12(sp)  *)
    | 0x8000160c => 0x0307a783 (* lw a5,48(a5)  *)
    | 0x80001610 => 0x00812423 (* sw s0,8(sp)  *)
    | 0x80001614 => 0x00912223 (* sw s1,4(sp)  *)
    | 0x80001618 => 0x0007a603 (* lw a2,0(a5)  *)
    | 0x8000161c => 0x5a570713 (* add a4,a4,1445 # a5a5a5a5 <_stack_top+0x259c48b7>  *)
    | 0x80001620 => 0x00e61e63 (* bne a2,a4,8000163c <vTaskSwitchContext+0x5c>  *)
    | 0x80001624 => 0x0047a683 (* lw a3,4(a5)  *)
    | 0x80001628 => 0x00c69a63 (* bne a3,a2,8000163c <vTaskSwitchContext+0x5c>  *)
    | 0x8000162c => 0x0087a703 (* lw a4,8(a5)  *)
    | 0x80001630 => 0x00d71663 (* bne a4,a3,8000163c <vTaskSwitchContext+0x5c>  *)
    | 0x80001634 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x80001638 => 0x00e78a63 (* beq a5,a4,8000164c <vTaskSwitchContext+0x6c>  *)
    | 0x8000163c => 0x8981a583 (* lw a1,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001640 => 0x8981a503 (* lw a0,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x80001644 => 0x03458593 (* add a1,a1,52  *)
    | 0x80001648 => 0x429100ef (* jal 80012270 <vApplicationStackOverflowHook>  *)
    | 0x8000164c => 0x8801a503 (* lw a0,-1920(gp) # 80080080 <uxTopReadyPriority>  *)
    | 0x80001650 => 0x01f00493 (* li s1,31  *)
    | 0x80001654 => 0x02c120ef (* jal 80013680 <__clzsi2>  *)
    | 0x80001658 => 0x40a484b3 (* sub s1,s1,a0  *)
    | 0x8000165c => 0x01400713 (* li a4,20  *)
    | 0x80001660 => 0x02e48733 (* mul a4,s1,a4  *)
    | 0x80001664 => 0xc6418793 (* add a5,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x80001668 => 0xc6418413 (* add s0,gp,-924 # 80080464 <pxReadyTasksLists>  *)
    | 0x8000166c => 0x00e787b3 (* add a5,a5,a4  *)
    | 0x80001670 => 0x0007a783 (* lw a5,0(a5)  *)
    | 0x80001674 => 0x00079c63 (* bnez a5,8000168c <vTaskSwitchContext+0xac>  *)
    | 0x80001678 => 0x000015b7 (* lui a1,0x1  *)
    | 0x8000167c => 0x80014537 (* lui a0,0x80014  *)
    | 0x80001680 => 0x41358593 (* add a1,a1,1043 # 1413 <__stack_size+0x12b5>  *)
    | 0x80001684 => 0xbd050513 (* add a0,a0,-1072 # 80013bd0 <_etext>  *)
    | 0x80001688 => 0x409100ef (* jal 80012290 <vAssertCalled>  *)
    | 0x8000168c => 0x01400793 (* li a5,20  *)
    | 0x80001690 => 0x02f487b3 (* mul a5,s1,a5  *)
    | 0x80001694 => 0x00f40733 (* add a4,s0,a5  *)
    | 0x80001698 => 0x00472683 (* lw a3,4(a4)  *)
    | 0x8000169c => 0x00878793 (* add a5,a5,8  *)
    | 0x800016a0 => 0x00f407b3 (* add a5,s0,a5  *)
    | 0x800016a4 => 0x0046a683 (* lw a3,4(a3)  *)
    | 0x800016a8 => 0x00d72223 (* sw a3,4(a4)  *)
    | 0x800016ac => 0x00f69663 (* bne a3,a5,800016b8 <vTaskSwitchContext+0xd8>  *)
    | 0x800016b0 => 0x00c72783 (* lw a5,12(a4)  *)
    | 0x800016b4 => 0x00f72223 (* sw a5,4(a4)  *)
    | 0x800016b8 => 0x01400793 (* li a5,20  *)
    | 0x800016bc => 0x02f484b3 (* mul s1,s1,a5  *)
    | 0x800016c0 => 0x00c12083 (* lw ra,12(sp)  *)
    | 0x800016c4 => 0x00940433 (* add s0,s0,s1  *)
    | 0x800016c8 => 0x00442783 (* lw a5,4(s0)  *)
    | 0x800016cc => 0x00812403 (* lw s0,8(sp)  *)
    | 0x800016d0 => 0x00412483 (* lw s1,4(sp)  *)
    | 0x800016d4 => 0x00c7a783 (* lw a5,12(a5)  *)
    | 0x800016d8 => 0x88f1ac23 (* sw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800016dc => 0x8981a783 (* lw a5,-1896(gp) # 80080098 <pxCurrentTCB>  *)
    | 0x800016e0 => 0x00012903 (* lw s2,0(sp)  *)
    | 0x800016e4 => 0x01010113 (* add sp,sp,16  *)
    | 0x800016e8 => 0x00008067 (* ret  *)
    | _ => 0
    end.

Definition start_vTaskSwitchContext : N := 0x800015e0.
Definition end_vTaskSwitchContext : N := 0x800016e8.


Definition vTaskSwitchContext_stack_frame_size : N := 16.
