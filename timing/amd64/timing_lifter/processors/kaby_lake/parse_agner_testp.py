# This file generates i5_7300u.py
# https://github.com/biqar/agner-testp/tree/master
# First need to run ./agner-testp/testp/TestScripts/allsh1.sh to generate ./agner-testp/testp/TestScripts/results1/
import os
import re
import sys
from collections import defaultdict
from pathlib import Path

custom = {
    "ret": 13,
    "jle": 5
}

def parse_agner_results(dir, mnemonics):
    wcet_dict = defaultdict(int)

    mnemonics = set(mnemonics)

    # Get all .txt files in current directory
    txt_files = [Path(f) for f in os.listdir(dir) if f.endswith('.txt')]

    # Pattern to extract numeric columns (Core cyc, Instruct)
    numeric_line = re.compile(r'^\s*(\d+)\s+(\d+)\s+(\d+)')

    for fname in txt_files:
        print(f"# {fname}")
        with open(Path(dir) / fname) as f:
            current_instr = None
            for line in f:
                line = line.strip()
                # Detect new instruction block
                found = False
                for word in line.split():
                    if word.lower() in mnemonics:
                        current_instr = word.lower()
                        found = True
                        mnemonics.remove(current_instr)
                        break
                if found:
                    continue

                if current_instr:
                    mnum = numeric_line.match(line)
                    if mnum:
                        # Core cyc = column 2, Instruct = column 3
                        core_cyc = int(mnum.group(2))
                        instructs = int(mnum.group(3))
                        if instructs > 0:
                            latency = int(round(core_cyc / instructs))
                            # Update WCET as max observed
                            wcet_dict[current_instr] = max(wcet_dict[current_instr], latency)
    return dict(wcet_dict)

header = """# This file was generated by parse_agner_testp.py
def time_of_instr(mnemonic: str, args: List[X86Var]) -> str :
    match mnemonic:"""

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("usage: python parse_agner_testp.py <path_to_results1>")
        exit(1)

    with open("./x86_mnemonics.txt") as file:
        mnemonics = [line.strip().lower() for line in file.readlines()]

    wcet = parse_agner_results(sys.argv[1], mnemonics)

    wcet.update(custom)

    print(header)
    # Print sorted by mnemonic
    for instr in sorted(wcet.keys()):
        print(f"        case \"{instr}\":\n            return \"{wcet[instr]}\"")
