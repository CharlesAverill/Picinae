(* Generated by pcode2coq.py
arch: armv8
file: memrchr.lo
function: __memrchr
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition memrchr_lo___memrchr_armv8 : program := fun _ a => match a with

(* 0x00100000: and w1,w1,#0xff *)
| 1048576 => Some (4,
	Move (V_TEMP 75136) (BinOp OP_AND (Extract 31 0 (Var R_X1)) (Word 255 32)) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 75136)))
)

(* 0x00100004: sub x2,x2,#0x1 *)
| 1048580 => Some (4,
	Move R_X2 (BinOp OP_MINUS (Var R_X2) (Word 1 64))
)

(* 0x00100008: cmn x2,#0x1 *)
| 1048584 => Some (4,
	Move (V_TEMP 114560) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 114560))) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 114560))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 114560)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 114816) (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 114560))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 114816)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 114816)) (Word 0 64))) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x0010000c: b.ne 0x00100018 *)
| 1048588 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048600 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100010: mov x0,#0x0 *)
| 1048592 => Some (4,
	Move R_X0 (Word 0 64)
)

(* 0x00100014: b 0x0010002c *)
| 1048596 => Some (4,
	Jmp (Word 1048620 64)
)

(* 0x00100018: ldrb w4,[x0, x2, LSL ] *)
| 1048600 => Some (4,
	Move (V_TEMP 23040) (Var R_X2) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 0 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 28928))) $;
	Move (V_TEMP 152320) (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 1) $;
	Move R_X4 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152320)))
)

(* 0x0010001c: sub x3,x2,#0x1 *)
| 1048604 => Some (4,
	Move R_X3 (BinOp OP_MINUS (Var R_X2) (Word 1 64))
)

(* 0x00100020: cmp w4,w1 *)
| 1048608 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X4)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X4)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X4)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X4)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X4)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100024: b.ne 0x00100030 *)
| 1048612 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048624 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100028: add x0,x0,x2 *)
| 1048616 => Some (4,
	Move (V_TEMP 74624) (Var R_X2) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 74624))) (Var R_X0))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 74624))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 74624)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 74880) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 74624))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_X0 (Var (V_TEMP 74880))
)

(* 0x0010002c: ret *)
| 1048620 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100030: mov x2,x3 *)
| 1048624 => Some (4,
	Move R_X2 (Var R_X3)
)

(* 0x00100034: b 0x00100008 *)
| 1048628 => Some (4,
	Jmp (Word 1048584 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx memrchr_lo___memrchr_armv8. Proof. Picinae_typecheck. Qed.