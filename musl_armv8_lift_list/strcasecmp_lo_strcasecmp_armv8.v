(* Generated by pcode2coq.py + ixb's own hands
arch: armv8
file: strcasecmp.lo
function: strcasecmp
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition strcasecmp_lo_strcasecmp_armv8 : program := fun _ a => match a with

(* 0x00100000: stp x29,x30,[sp, #-0x30]! *)
| 1048576 => Some (4,
	Move (V_TEMP 238080) (Var R_X29) $;
	Move (V_TEMP 238208) (Var R_X30) $;
	Move R_SP (BinOp OP_PLUS (Var R_SP) (Word 18446744073709551568 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var R_SP) (Cast CAST_LOW 64 (Var (V_TEMP 238080))) LittleE 8) $;
	Move (V_TEMP 238336) (BinOp OP_PLUS (Var R_SP) (Word 8 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 238336)) (Cast CAST_LOW 64 (Var (V_TEMP 238208))) LittleE 8)
)

(* 0x00100004: mov x29,sp *)
| 1048580 => Some (4,
	Move R_X29 (Var R_SP)
)

(* 0x00100008: stp x19,x20,[sp, #0x10] *)
| 1048584 => Some (4,
	Move (V_TEMP 238080) (Var R_X19) $;
	Move (V_TEMP 238208) (Var R_X20) $;
	Move (V_TEMP 31616) (BinOp OP_PLUS (Var R_SP) (Word 16 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 31616)) (Cast CAST_LOW 64 (Var (V_TEMP 238080))) LittleE 8) $;
	Move (V_TEMP 238336) (BinOp OP_PLUS (Var (V_TEMP 31616)) (Word 8 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 238336)) (Cast CAST_LOW 64 (Var (V_TEMP 238208))) LittleE 8)
)

(* 0x0010000c: mov x20,x0 *)
| 1048588 => Some (4,
	Move R_X20 (Var R_X0)
)

(* 0x00100010: mov x19,x1 *)
| 1048592 => Some (4,
	Move R_X19 (Var R_X1)
)

(* 0x00100014: str x21,[sp, #0x20] *)
| 1048596 => Some (4,
	Move (V_TEMP 25856) (BinOp OP_PLUS (Var R_SP) (Word 32 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25856)) (Cast CAST_LOW 64 (Var R_X21)) LittleE 8)
)

(* 0x00100018: ldrb w0,[x20] *)
| 1048600 => Some (4,
	Move (V_TEMP 26240) (Var R_X20) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0010001c: cbz w0,0x00100048 *)
| 1048604 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X0)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048648 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100020: ldrb w1,[x19] *)
| 1048608 => Some (4,
	Move (V_TEMP 26240) (Var R_X19) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100024: cbz w1,0x00100048 *)
| 1048612 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X1)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048648 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100028: cmp w0,w1 *)
| 1048616 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X0)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x0010002c: b.eq 0x00100070 *)
| 1048620 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048688 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100030: bl 0x00200000 *)
| 1048624 => Some (4,
	Move R_X30 (BinOp OP_PLUS (Word 1048624 64) (Word 4 64)) $;
	Jmp (Word 2097152 64)
)

(* 0x00100034: mov w21,w0 *)
| 1048628 => Some (4,
	Move R_X21 (Cast CAST_UNSIGNED 64 (Extract 31 0 (Var R_X0)))
)

(* 0x00100038: ldrb w0,[x19] *)
| 1048632 => Some (4,
	Move (V_TEMP 26240) (Var R_X19) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0010003c: bl 0x00200000 *)
| 1048636 => Some (4,
	Move R_X30 (BinOp OP_PLUS (Word 1048636 64) (Word 4 64)) $;
	Jmp (Word 2097152 64)
)

(* 0x00100040: cmp w21,w0 *)
| 1048640 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X21)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X21)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X21)) (Extract 31 0 (Var R_X0))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X21)) (Extract 31 0 (Var R_X0))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X21)) (Extract 31 0 (Var R_X0))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100044: b.eq 0x00100070 *)
| 1048644 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048688 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100048: ldrb w0,[x20] *)
| 1048648 => Some (4,
	Move (V_TEMP 26240) (Var R_X20) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0010004c: bl 0x00200000 *)
| 1048652 => Some (4,
	Move R_X30 (BinOp OP_PLUS (Word 1048652 64) (Word 4 64)) $;
	Jmp (Word 2097152 64)
)

(* 0x00100050: mov w20,w0 *)
| 1048656 => Some (4,
	Move R_X20 (Cast CAST_UNSIGNED 64 (Extract 31 0 (Var R_X0)))
)

(* 0x00100054: ldrb w0,[x19] *)
| 1048660 => Some (4,
	Move (V_TEMP 26240) (Var R_X19) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100058: bl 0x00200000 *)
| 1048664 => Some (4,
	Move R_X30 (BinOp OP_PLUS (Word 1048664 64) (Word 4 64)) $;
	Jmp (Word 2097152 64)
)

(* 0x0010005c: sub w0,w20,w0 *)
| 1048668 => Some (4,
	Move (V_TEMP 251008) (BinOp OP_MINUS (Extract 31 0 (Var R_X20)) (Extract 31 0 (Var R_X0))) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 251008)))
)

(* 0x00100060: ldp x19,x20,[sp, #0x10] *)
| 1048672 => Some (4,
	Move (V_TEMP 31616) (BinOp OP_PLUS (Var R_SP) (Word 16 64)) $;
	Move (V_TEMP 148352) (Load (Var V_MEM64) (Var (V_TEMP 31616)) LittleE 8) $;
	Move (V_TEMP 148480) (BinOp OP_PLUS (Var (V_TEMP 31616)) (Word 8 64)) $;
	Move (V_TEMP 148736) (Load (Var V_MEM64) (Var (V_TEMP 148480)) LittleE 8) $;
	Move R_X19 (Var (V_TEMP 148352)) $;
	Move R_X20 (Var (V_TEMP 148736))
)

(* 0x00100064: ldr x21,[sp, #0x20] *)
| 1048676 => Some (4,
	Move (V_TEMP 25856) (BinOp OP_PLUS (Var R_SP) (Word 32 64)) $;
	Move R_X21 (Load (Var V_MEM64) (Var (V_TEMP 25856)) LittleE 8)
)

(* 0x00100068: ldp x29,x30,[sp], #0x30 *)
| 1048680 => Some (4,
	Move (V_TEMP 31872) (Var R_SP) $;
	Move R_SP (BinOp OP_PLUS (Var R_SP) (Word 48 64)) $;
	Move (V_TEMP 148352) (Load (Var V_MEM64) (Var (V_TEMP 31872)) LittleE 8) $;
	Move (V_TEMP 148480) (BinOp OP_PLUS (Var (V_TEMP 31872)) (Word 8 64)) $;
	Move (V_TEMP 148736) (Load (Var V_MEM64) (Var (V_TEMP 148480)) LittleE 8) $;
	Move R_X29 (Var (V_TEMP 148352)) $;
	Move R_X30 (Var (V_TEMP 148736))
)

(* 0x0010006c: ret *)
| 1048684 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100070: add x20,x20,#0x1 *)
| 1048688 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X20) (Var (V_TEMP 73344))) (Var R_X20))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X20) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X20) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X20) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X20) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X20 (Var (V_TEMP 73600))
)

(* 0x00100074: add x19,x19,#0x1 *)
| 1048692 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Var R_X19))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X19 (Var (V_TEMP 73600))
)

(* 0x00100078: b 0x00100018 *)
| 1048696 => Some (4,
	Jmp (Word 1048600 64)
)

(* Begin tolower *)
(* 0x00200000: sub w1,w0,#0x41 *)
| 2097152 => Some (4,
	Move (V_TEMP 249216) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 65 32)) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 249216)))
)

(* 0x00200004: cmp w1,#0x19 *)
| 2097156 => Some (4,
	Move (V_TEMP 117120) (Word 25 32) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Word 25 32) (Extract 31 0 (Var R_X1)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X1)) (Word 25 32)) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X1)) (Word 25 32)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Word 25 32) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 117376) (BinOp OP_MINUS (Extract 31 0 (Var R_X1)) (Var (V_TEMP 117120))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00200008: b.hi 0x00200010 *)
| 2097160 => Some (4,
	Move (V_TEMP 3456) (UnOp OP_NOT (Var R_ZR)) $;
	Move (V_TEMP 3712) (BinOp OP_AND (Var R_CY) (Var (V_TEMP 3456))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 3712))) (
		Jmp (Word 2097168 64)
	) (* else *) (
		Nop
	)
)

(* 0x0020000c: orr w0,w0,#0x20 *)
| 2097164 => Some (4,
	Move (V_TEMP 184064) (BinOp OP_OR (Extract 31 0 (Var R_X0)) (Word 32 32)) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 184064)))
)

(* 0x00200010: ret *)
| 2097168 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)


| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx strcasecmp_lo_strcasecmp_armv8. Proof. Picinae_typecheck. Qed.
