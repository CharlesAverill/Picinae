(* Generated by pcode2coq.py
arch: armv8
file: strcspn.lo
function: strcspn
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition strcspn_lo_strcspn_armv8 : program := fun _ a => match a with

(* 0x00100000: stp x29,x30,[sp, #-0x50]! *)
| 1048576 => Some (4,
	Move (V_TEMP 238080) (Var R_X29) $;
	Move (V_TEMP 238208) (Var R_X30) $;
	Move R_SP (BinOp OP_PLUS (Var R_SP) (Word 18446744073709551536 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var R_SP) (Cast CAST_LOW 64 (Var (V_TEMP 238080))) LittleE 8) $;
	Move (V_TEMP 238336) (BinOp OP_PLUS (Var R_SP) (Word 8 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 238336)) (Cast CAST_LOW 64 (Var (V_TEMP 238208))) LittleE 8)
)

(* 0x00100004: mov x29,sp *)
| 1048580 => Some (4,
	Move R_X29 (Var R_SP)
)

(* 0x00100008: stp x19,x20,[sp, #0x10] *)
| 1048584 => Some (4,
	Move (V_TEMP 238080) (Var R_X19) $;
	Move (V_TEMP 238208) (Var R_X20) $;
	Move (V_TEMP 31616) (BinOp OP_PLUS (Var R_SP) (Word 16 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 31616)) (Cast CAST_LOW 64 (Var (V_TEMP 238080))) LittleE 8) $;
	Move (V_TEMP 238336) (BinOp OP_PLUS (Var (V_TEMP 31616)) (Word 8 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 238336)) (Cast CAST_LOW 64 (Var (V_TEMP 238208))) LittleE 8)
)

(* 0x0010000c: mov x20,x1 *)
| 1048588 => Some (4,
	Move R_X20 (Var R_X1)
)

(* 0x00100010: mov x19,x0 *)
| 1048592 => Some (4,
	Move R_X19 (Var R_X0)
)

(* 0x00100014: str x21,[sp, #0x20] *)
| 1048596 => Some (4,
	Move (V_TEMP 25856) (BinOp OP_PLUS (Var R_SP) (Word 32 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25856)) (Cast CAST_LOW 64 (Var R_X21)) LittleE 8)
)

(* 0x00100018: ldrb w1,[x1] *)
| 1048600 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0010001c: cbz w1,0x00100028 *)
| 1048604 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X1)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048616 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100020: ldrb w0,[x20, #0x1] *)
| 1048608 => Some (4,
	Move (V_TEMP 25088) (BinOp OP_PLUS (Var R_X20) (Word 1 64)) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 25088)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100024: cbnz w0,0x00100044 *)
| 1048612 => Some (4,
	Move (V_TEMP 101888) (Cast CAST_UNSIGNED 8 (BinOp OP_NEQ (Extract 31 0 (Var R_X0)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 101888))) (
		Jmp (Word 1048644 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100028: mov x0,x19 *)
| 1048616 => Some (4,
	Move R_X0 (Var R_X19)
)

(* 0x0010002c: bl 0x00101000 *)
| 1048620 => Some (4,
	Move R_X30 (BinOp OP_PLUS (Word 1048620 64) (Word 4 64)) $;
	Jmp (Word 1052672 64)
)

(* 0x00100030: ldr x21,[sp, #0x20] *)
| 1048624 => Some (4,
	Move (V_TEMP 25856) (BinOp OP_PLUS (Var R_SP) (Word 32 64)) $;
	Move R_X21 (Load (Var V_MEM64) (Var (V_TEMP 25856)) LittleE 8)
)

(* 0x00100034: sub x0,x0,x19 *)
| 1048628 => Some (4,
	Move R_X0 (BinOp OP_MINUS (Var R_X0) (Var R_X19))
)

(* 0x00100038: ldp x19,x20,[sp, #0x10] *)
| 1048632 => Some (4,
	Move (V_TEMP 31616) (BinOp OP_PLUS (Var R_SP) (Word 16 64)) $;
	Move (V_TEMP 148352) (Load (Var V_MEM64) (Var (V_TEMP 31616)) LittleE 8) $;
	Move (V_TEMP 148480) (BinOp OP_PLUS (Var (V_TEMP 31616)) (Word 8 64)) $;
	Move (V_TEMP 148736) (Load (Var V_MEM64) (Var (V_TEMP 148480)) LittleE 8) $;
	Move R_X19 (Var (V_TEMP 148352)) $;
	Move R_X20 (Var (V_TEMP 148736))
)

(* 0x0010003c: ldp x29,x30,[sp], #0x50 *)
| 1048636 => Some (4,
	Move (V_TEMP 31872) (Var R_SP) $;
	Move R_SP (BinOp OP_PLUS (Var R_SP) (Word 80 64)) $;
	Move (V_TEMP 148352) (Load (Var V_MEM64) (Var (V_TEMP 31872)) LittleE 8) $;
	Move (V_TEMP 148480) (BinOp OP_PLUS (Var (V_TEMP 31872)) (Word 8 64)) $;
	Move (V_TEMP 148736) (Load (Var V_MEM64) (Var (V_TEMP 148480)) LittleE 8) $;
	Move R_X29 (Var (V_TEMP 148352)) $;
	Move R_X30 (Var (V_TEMP 148736))
)

(* 0x00100040: ret *)
| 1048640 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100044: add x21,sp,#0x30 *)
| 1048644 => Some (4,
	Move (V_TEMP 73344) (Word 48 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) (Var R_SP))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_SP) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_SP) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X21 (Var (V_TEMP 73600))
)

(* 0x00100048: mov x2,#0x20 *)
| 1048648 => Some (4,
	Move R_X2 (Word 32 64)
)

(* 0x0010004c: mov x0,x21 *)
| 1048652 => Some (4,
	Move R_X0 (Var R_X21)
)

(* 0x00100050: mov w1,#0x0 *)
| 1048656 => Some (4,
	Move R_X1 (Word 0 64)
)

(* 0x00100054: bl 0x00101008 *)
| 1048660 => Some (4,
	Move R_X30 (BinOp OP_PLUS (Word 1048660 64) (Word 4 64)) $;
	Jmp (Word 1052680 64)
)

(* 0x00100058: mov x3,#0x1 *)
| 1048664 => Some (4,
	Move R_X3 (Word 1 64)
)

(* 0x0010005c: ldrb w0,[x20] *)
| 1048668 => Some (4,
	Move (V_TEMP 26240) (Var R_X20) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100060: cbz w0,0x001000a0 *)
| 1048672 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X0)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048736 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100064: ubfx x1,x0,#0x6,#0x2 *)
| 1048676 => Some (4,
	Move (V_TEMP 269056) (Var R_X0) $;
	Move (V_TEMP 269184) (BinOp OP_RSHIFT (Var (V_TEMP 269056)) (Word 6 64)) $;
	Move (V_TEMP 269312) (BinOp OP_MINUS (Word 64 64) (Word 6 64)) $;
	Move (V_TEMP 269440) (BinOp OP_LSHIFT (Var (V_TEMP 269056)) (Var (V_TEMP 269312))) $;
	Move (V_TEMP 269568) (BinOp OP_OR (Var (V_TEMP 269184)) (Var (V_TEMP 269440))) $;
	Move (V_TEMP 269824) (BinOp OP_AND (Var (V_TEMP 269568)) (Word 18158513697557839875 64)) $;
	Move R_X1 (BinOp OP_AND (Var (V_TEMP 269824)) (Word 3 64))
)

(* 0x00100068: add x20,x20,#0x1 *)
| 1048680 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X20) (Var (V_TEMP 73344))) (Var R_X20))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X20) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X20) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X20) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X20) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X20 (Var (V_TEMP 73600))
)

(* 0x0010006c: lsl x0,x3,x0 *)
| 1048684 => Some (4,
	Move (V_TEMP 162816) (BinOp OP_AND (Var R_X0) (Word 63 64)) $;
	Move R_X0 (BinOp OP_LSHIFT (Var R_X3) (Var (V_TEMP 162816)))
)

(* 0x00100070: ldr x2,[x21, x1, LSL #0x3] *)
| 1048688 => Some (4,
	Move (V_TEMP 23040) (Var R_X1) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 3 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X21) (Var (V_TEMP 28928))) $;
	Move R_X2 (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 8)
)

(* 0x00100074: orr x0,x0,x2 *)
| 1048692 => Some (4,
	Move R_X0 (BinOp OP_OR (Var R_X0) (Var R_X2))
)

(* 0x00100078: str x0,[x21, x1, LSL #0x3] *)
| 1048696 => Some (4,
	Move (V_TEMP 238976) (Var R_X0) $;
	Move (V_TEMP 23040) (Var R_X1) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 3 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X21) (Var (V_TEMP 28928))) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 30080)) (Cast CAST_LOW 64 (Var (V_TEMP 238976))) LittleE 8)
)

(* 0x0010007c: b 0x0010005c *)
| 1048700 => Some (4,
	Jmp (Word 1048668 64)
)

(* 0x00100080: add x0,x0,#0x1 *)
| 1048704 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Var R_X0))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X0 (Var (V_TEMP 73600))
)

(* 0x00100084: ldrb w2,[x0] *)
| 1048708 => Some (4,
	Move (V_TEMP 26240) (Var R_X0) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100088: cbz w2,0x00100030 *)
| 1048712 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X2)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048624 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010008c: ubfx x1,x2,#0x6,#0x2 *)
| 1048716 => Some (4,
	Move (V_TEMP 269056) (Var R_X2) $;
	Move (V_TEMP 269184) (BinOp OP_RSHIFT (Var (V_TEMP 269056)) (Word 6 64)) $;
	Move (V_TEMP 269312) (BinOp OP_MINUS (Word 64 64) (Word 6 64)) $;
	Move (V_TEMP 269440) (BinOp OP_LSHIFT (Var (V_TEMP 269056)) (Var (V_TEMP 269312))) $;
	Move (V_TEMP 269568) (BinOp OP_OR (Var (V_TEMP 269184)) (Var (V_TEMP 269440))) $;
	Move (V_TEMP 269824) (BinOp OP_AND (Var (V_TEMP 269568)) (Word 18158513697557839875 64)) $;
	Move R_X1 (BinOp OP_AND (Var (V_TEMP 269824)) (Word 3 64))
)

(* 0x00100090: ldr x1,[x21, x1, LSL #0x3] *)
| 1048720 => Some (4,
	Move (V_TEMP 23040) (Var R_X1) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 3 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X21) (Var (V_TEMP 28928))) $;
	Move R_X1 (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 8)
)

(* 0x00100094: lsr x1,x1,x2 *)
| 1048724 => Some (4,
	Move (V_TEMP 165120) (BinOp OP_AND (Var R_X2) (Word 63 64)) $;
	Move R_X1 (BinOp OP_RSHIFT (Var R_X1) (Var (V_TEMP 165120)))
)

(* 0x00100098: tbz w1,#0x0,0x00100080 *)
| 1048728 => Some (4,
	Move (V_TEMP 100608) (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 0 32)) $;
	Move (V_TEMP 100736) (BinOp OP_AND (Var (V_TEMP 100608)) (Word 1 32)) $;
	Move (V_TEMP 100992) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 100736)) (Word 0 32))) $;
	Move (V_TEMP 260352) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 100992)) (Word 1 8))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 260352))) (
		Jmp (Word 1048704 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010009c: b 0x00100030 *)
| 1048732 => Some (4,
	Jmp (Word 1048624 64)
)

(* 0x001000a0: mov x0,x19 *)
| 1048736 => Some (4,
	Move R_X0 (Var R_X19)
)

(* 0x001000a4: b 0x00100084 *)
| 1048740 => Some (4,
	Jmp (Word 1048708 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx strcspn_lo_strcspn_armv8. Proof. Picinae_typecheck. Qed.