(* Generated by pcode2coq.py
arch: armv8
file: atoi.lo
function: atoi
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition atoi_lo_atoi_armv8 : program := fun _ a => match a with

(* 0x00100000: mov x1,x0 *)
| 1048576 => Some (4,
	Move R_X1 (Var R_X0)
)

(* 0x00100004: ldrb w0,[x1] *)
| 1048580 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100008: sub w2,w0,#0x9 *)
| 1048584 => Some (4,
	Move (V_TEMP 249216) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 9 32)) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 249216)))
)

(* 0x0010000c: cmp w0,#0x20 *)
| 1048588 => Some (4,
	Move (V_TEMP 117120) (Word 32 32) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Word 32 32) (Extract 31 0 (Var R_X0)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 32 32)) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 32 32)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Word 32 32) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 117376) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Var (V_TEMP 117120))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100010: ccmp w2,#0x4,#0x0,ne *)
| 1048592 => Some (4,
	Move (V_TEMP 5760) (UnOp OP_NOT (Var R_ZR)) $;
	Move (V_TEMP 105600) (Var (V_TEMP 5760)) $;
	Move (V_TEMP 105728) (Word 0 8) $;
	Move (V_TEMP 59264) (BinOp OP_AND (Var (V_TEMP 105728)) (Word 8 8)) $;
	Move R_NG (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 59264)) (Word 8 8))) $;
	Move (V_TEMP 59520) (BinOp OP_AND (Var (V_TEMP 105728)) (Word 4 8)) $;
	Move R_ZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 59520)) (Word 4 8))) $;
	Move (V_TEMP 59776) (BinOp OP_AND (Var (V_TEMP 105728)) (Word 2 8)) $;
	Move R_CY (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 59776)) (Word 2 8))) $;
	Move (V_TEMP 60032) (BinOp OP_AND (Var (V_TEMP 105728)) (Word 1 8)) $;
	Move R_OV (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 60032)) (Word 1 8))) $;
	Move (V_TEMP 105856) (UnOp OP_NOT (Var (V_TEMP 105600))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 105856))) (
		Jmp (Word 1048596 64)
	) (* else *) (
		Nop
	) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Word 4 32) (Extract 31 0 (Var R_X2)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X2)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X2)) (Word 4 32)) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X2)) (Word 4 32)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Word 4 32) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 106112) (BinOp OP_MINUS (Extract 31 0 (Var R_X2)) (Word 4 32)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 106112)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 106112)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100014: b.ls 0x0010003c *)
| 1048596 => Some (4,
	Move (V_TEMP 3840) (UnOp OP_NOT (Var R_CY)) $;
	Move (V_TEMP 4096) (BinOp OP_OR (Var (V_TEMP 3840)) (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 4096))) (
		Jmp (Word 1048636 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100018: cmp w0,#0x2b *)
| 1048600 => Some (4,
	Move (V_TEMP 117120) (Word 43 32) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Word 43 32) (Extract 31 0 (Var R_X0)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 43 32)) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 43 32)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Word 43 32) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 117376) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Var (V_TEMP 117120))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x0010001c: b.eq 0x00100044 *)
| 1048604 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048644 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100020: cmp w0,#0x2d *)
| 1048608 => Some (4,
	Move (V_TEMP 117120) (Word 45 32) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Word 45 32) (Extract 31 0 (Var R_X0)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 45 32)) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Word 45 32)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Word 45 32) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 117376) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Var (V_TEMP 117120))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100024: b.ne 0x00100074 *)
| 1048612 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048692 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100028: mov w3,#0x1 *)
| 1048616 => Some (4,
	Move R_X3 (Word 1 64)
)

(* 0x0010002c: add x1,x1,#0x1 *)
| 1048620 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x00100030: mov w0,#0x0 *)
| 1048624 => Some (4,
	Move R_X0 (Word 0 64)
)

(* 0x00100034: mov w4,#0xa *)
| 1048628 => Some (4,
	Move R_X4 (Word 10 64)
)

(* 0x00100038: b 0x00100058 *)
| 1048632 => Some (4,
	Jmp (Word 1048664 64)
)

(* 0x0010003c: add x1,x1,#0x1 *)
| 1048636 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x00100040: b 0x00100004 *)
| 1048640 => Some (4,
	Jmp (Word 1048580 64)
)

(* 0x00100044: mov w3,#0x0 *)
| 1048644 => Some (4,
	Move R_X3 (Word 0 64)
)

(* 0x00100048: b 0x0010002c *)
| 1048648 => Some (4,
	Jmp (Word 1048620 64)
)

(* 0x0010004c: mul w0,w0,w4 *)
| 1048652 => Some (4,
	Move (V_TEMP 176256) (BinOp OP_TIMES (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X4))) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 176256)))
)

(* 0x00100050: add x1,x1,#0x1 *)
| 1048656 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x00100054: sub w0,w0,w2 *)
| 1048660 => Some (4,
	Move (V_TEMP 251008) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X2))) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 251008)))
)

(* 0x00100058: ldrb w2,[x1] *)
| 1048664 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0010005c: sub w2,w2,#0x30 *)
| 1048668 => Some (4,
	Move (V_TEMP 249216) (BinOp OP_MINUS (Extract 31 0 (Var R_X2)) (Word 48 32)) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 249216)))
)

(* 0x00100060: cmp w2,#0x9 *)
| 1048672 => Some (4,
	Move (V_TEMP 117120) (Word 9 32) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Word 9 32) (Extract 31 0 (Var R_X2)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X2)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X2)) (Word 9 32)) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X2)) (Word 9 32)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Word 9 32) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 117376) (BinOp OP_MINUS (Extract 31 0 (Var R_X2)) (Var (V_TEMP 117120))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 117376)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100064: b.ls 0x0010004c *)
| 1048676 => Some (4,
	Move (V_TEMP 3840) (UnOp OP_NOT (Var R_CY)) $;
	Move (V_TEMP 4096) (BinOp OP_OR (Var (V_TEMP 3840)) (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 4096))) (
		Jmp (Word 1048652 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100068: cbnz w3,0x00100070 *)
| 1048680 => Some (4,
	Move (V_TEMP 101888) (Cast CAST_UNSIGNED 8 (BinOp OP_NEQ (Extract 31 0 (Var R_X3)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 101888))) (
		Jmp (Word 1048688 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010006c: neg w0,w0 *)
| 1048684 => Some (4,
	Move (V_TEMP 177664) (UnOp OP_NEG (Extract 31 0 (Var R_X0))) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 177664)))
)

(* 0x00100070: ret *)
| 1048688 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100074: mov w3,#0x0 *)
| 1048692 => Some (4,
	Move R_X3 (Word 0 64)
)

(* 0x00100078: b 0x00100030 *)
| 1048696 => Some (4,
	Jmp (Word 1048624 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx atoi_lo_atoi_armv8. Proof. Picinae_typecheck. Qed.