(* Generated by pcode2coq.py + ixb's own hands
arch: armv8
file: strchrnul.lo
function: __strchrnul
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition strchrnul_lo___strchrnul_armv8 : program := fun _ a => match a with

(* 0x00100000: stp x29,x30,[sp, #-0x20]! *)
| 1048576 => Some (4,
	Move (V_TEMP 238080) (Var R_X29) $;
	Move (V_TEMP 238208) (Var R_X30) $;
	Move R_SP (BinOp OP_PLUS (Var R_SP) (Word 18446744073709551584 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var R_SP) (Cast CAST_LOW 64 (Var (V_TEMP 238080))) LittleE 8) $;
	Move (V_TEMP 238336) (BinOp OP_PLUS (Var R_SP) (Word 8 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 238336)) (Cast CAST_LOW 64 (Var (V_TEMP 238208))) LittleE 8)
)

(* 0x00100004: ands w1,w1,#0xff *)
| 1048580 => Some (4,
	Move (V_TEMP 76672) (BinOp OP_AND (Extract 31 0 (Var R_X1)) (Word 255 32)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 76672)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 76672)) (Word 0 32))) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 76672))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Word 0 8) $;
	Move R_OV (Word 0 8)
)

(* 0x00100008: mov x29,sp *)
| 1048584 => Some (4,
	Move R_X29 (Var R_SP)
)

(* 0x0010000c: str x19,[sp, #0x10] *)
| 1048588 => Some (4,
	Move (V_TEMP 25856) (BinOp OP_PLUS (Var R_SP) (Word 16 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25856)) (Cast CAST_LOW 64 (Var R_X19)) LittleE 8)
)

(* 0x00100010: mov x19,x0 *)
| 1048592 => Some (4,
	Move R_X19 (Var R_X0)
)

(* 0x00100014: b.ne 0x00100044 *)
| 1048596 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048644 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100018: bl 0x00200000 *)
| 1048600 => Some (4,
	Move R_X30 (BinOp OP_PLUS (Word 1048600 64) (Word 4 64)) $;
	Jmp (Word 2097152 64)
)

(* 0x0010001c: add x19,x19,x0 *)
| 1048604 => Some (4,
	Move (V_TEMP 74624) (Var R_X0) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 74624))) (Var R_X19))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 74624))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 74624)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 74880) (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 74624))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_X19 (Var (V_TEMP 74880))
)

(* 0x00100020: mov x0,x19 *)
| 1048608 => Some (4,
	Move R_X0 (Var R_X19)
)

(* 0x00100024: ldr x19,[sp, #0x10] *)
| 1048612 => Some (4,
	Move (V_TEMP 25856) (BinOp OP_PLUS (Var R_SP) (Word 16 64)) $;
	Move R_X19 (Load (Var V_MEM64) (Var (V_TEMP 25856)) LittleE 8)
)

(* 0x00100028: ldp x29,x30,[sp], #0x20 *)
| 1048616 => Some (4,
	Move (V_TEMP 31872) (Var R_SP) $;
	Move R_SP (BinOp OP_PLUS (Var R_SP) (Word 32 64)) $;
	Move (V_TEMP 148352) (Load (Var V_MEM64) (Var (V_TEMP 31872)) LittleE 8) $;
	Move (V_TEMP 148480) (BinOp OP_PLUS (Var (V_TEMP 31872)) (Word 8 64)) $;
	Move (V_TEMP 148736) (Load (Var V_MEM64) (Var (V_TEMP 148480)) LittleE 8) $;
	Move R_X29 (Var (V_TEMP 148352)) $;
	Move R_X30 (Var (V_TEMP 148736))
)

(* 0x0010002c: ret *)
| 1048620 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100030: ldrb w0,[x19] *)
| 1048624 => Some (4,
	Move (V_TEMP 26240) (Var R_X19) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100034: cbz w0,0x00100020 *)
| 1048628 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X0)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048608 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100038: cmp w0,w1 *)
| 1048632 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X0)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x0010003c: b.eq 0x00100020 *)
| 1048636 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048608 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100040: add x19,x19,#0x1 *)
| 1048640 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Var R_X19))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X19 (Var (V_TEMP 73600))
)

(* 0x00100044: tst x19,#0x7 *)
| 1048644 => Some (4,
	Move (V_TEMP 261120) (BinOp OP_AND (Var R_X19) (Word 7 64)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Word 0 8) $;
	Move R_OV (Word 0 8)
)

(* 0x00100048: b.ne 0x00100030 *)
| 1048648 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048624 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010004c: sxtw x3,w1 *)
| 1048652 => Some (4,
	Move R_X3 (Cast CAST_SIGNED 64 (Extract 31 0 (Var R_X1)))
)

(* 0x00100050: orr x0,xzr,#0x101010101010101 *)
| 1048656 => Some (4,
	Move (V_TEMP 1408) (Word 0 64) $;
	Move R_X0 (BinOp OP_OR (Var (V_TEMP 1408)) (Word 72340172838076673 64))
)

(* 0x00100054: orr x4,xzr,#-0x101010101010102 *)
| 1048660 => Some (4,
	Move (V_TEMP 1408) (Word 0 64) $;
	Move R_X4 (BinOp OP_OR (Var (V_TEMP 1408)) (Word 18374403900871474942 64))
)

(* 0x00100058: movk x4,#0xfeff *)
| 1048664 => Some (4,
	Move R_X4 (BinOp OP_AND (Var R_X4) (Word 18446744073709486080 64)) $;
	Move R_X4 (BinOp OP_OR (Var R_X4) (Word 65279 64))
)

(* 0x0010005c: mul x3,x3,x0 *)
| 1048668 => Some (4,
	Move R_X3 (BinOp OP_TIMES (Var R_X3) (Var R_X0))
)

(* 0x00100060: ldr x0,[x19] *)
| 1048672 => Some (4,
	Move (V_TEMP 26624) (Var R_X19) $;
	Move R_X0 (Load (Var V_MEM64) (Var (V_TEMP 26624)) LittleE 8)
)

(* 0x00100064: eor x2,x0,x3 *)
| 1048676 => Some (4,
	Move R_X2 (BinOp OP_XOR (Var R_X0) (Var R_X3))
)

(* 0x00100068: add x5,x0,x4 *)
| 1048680 => Some (4,
	Move (V_TEMP 74624) (Var R_X4) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 74624))) (Var R_X0))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 74624))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 74624)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 74880) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 74624))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_X5 (Var (V_TEMP 74880))
)

(* 0x0010006c: bic x0,x5,x0 *)
| 1048684 => Some (4,
	Move (V_TEMP 90624) (UnOp OP_NEG (Word 1 64)) $;
	Move (V_TEMP 90880) (BinOp OP_XOR (Var R_X0) (Var (V_TEMP 90624))) $;
	Move R_X0 (BinOp OP_AND (Var R_X5) (Var (V_TEMP 90880)))
)

(* 0x00100070: add x5,x2,x4 *)
| 1048688 => Some (4,
	Move (V_TEMP 74624) (Var R_X4) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 74624))) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 74624))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 74624)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 74880) (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 74624))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_X5 (Var (V_TEMP 74880))
)

(* 0x00100074: bic x2,x5,x2 *)
| 1048692 => Some (4,
	Move (V_TEMP 90624) (UnOp OP_NEG (Word 1 64)) $;
	Move (V_TEMP 90880) (BinOp OP_XOR (Var R_X2) (Var (V_TEMP 90624))) $;
	Move R_X2 (BinOp OP_AND (Var R_X5) (Var (V_TEMP 90880)))
)

(* 0x00100078: orr x0,x0,x2 *)
| 1048696 => Some (4,
	Move R_X0 (BinOp OP_OR (Var R_X0) (Var R_X2))
)

(* 0x0010007c: tst x0,#-0x7f7f7f7f7f7f7f80 *)
| 1048700 => Some (4,
	Move (V_TEMP 261120) (BinOp OP_AND (Var R_X0) (Word 9259542123273814144 64)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Word 0 8) $;
	Move R_OV (Word 0 8)
)

(* 0x00100080: b.eq 0x0010009c *)
| 1048704 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048732 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100084: ldrb w0,[x19] *)
| 1048708 => Some (4,
	Move (V_TEMP 26240) (Var R_X19) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100088: cbz w0,0x00100020 *)
| 1048712 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X0)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048608 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010008c: cmp w0,w1 *)
| 1048716 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X0)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100090: b.eq 0x00100020 *)
| 1048720 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048608 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100094: add x19,x19,#0x1 *)
| 1048724 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Var R_X19))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X19 (Var (V_TEMP 73600))
)

(* 0x00100098: b 0x00100084 *)
| 1048728 => Some (4,
	Jmp (Word 1048708 64)
)

(* 0x0010009c: add x19,x19,#0x8 *)
| 1048732 => Some (4,
	Move (V_TEMP 73344) (Word 8 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Var R_X19))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X19) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X19) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X19 (Var (V_TEMP 73600))
)

(* 0x001000a0: b 0x00100060 *)
| 1048736 => Some (4,
	Jmp (Word 1048672 64)
)

(* Begin strlen *)
(* 0x00200000: mov x1,x0 *)
| 2097152 => Some (4,
	Move R_X1 (Var R_X0)
)

(* 0x00200004: tst x1,#0x7 *)
| 2097156 => Some (4,
	Move (V_TEMP 261120) (BinOp OP_AND (Var R_X1) (Word 7 64)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Word 0 8) $;
	Move R_OV (Word 0 8)
)

(* 0x00200008: b.ne 0x00200038 *)
| 2097160 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 2097208 64)
	) (* else *) (
		Nop
	)
)

(* 0x0020000c: orr x4,xzr,#-0x101010101010102 *)
| 2097164 => Some (4,
	Move (V_TEMP 1408) (Word 0 64) $;
	Move R_X4 (BinOp OP_OR (Var (V_TEMP 1408)) (Word 18374403900871474942 64))
)

(* 0x00200010: movk x4,#0xfeff *)
| 2097168 => Some (4,
	Move R_X4 (BinOp OP_AND (Var R_X4) (Word 18446744073709486080 64)) $;
	Move R_X4 (BinOp OP_OR (Var R_X4) (Word 65279 64))
)

(* 0x00200014: ldr x2,[x1] *)
| 2097172 => Some (4,
	Move (V_TEMP 26624) (Var R_X1) $;
	Move R_X2 (Load (Var V_MEM64) (Var (V_TEMP 26624)) LittleE 8)
)

(* 0x00200018: add x3,x2,x4 *)
| 2097176 => Some (4,
	Move (V_TEMP 74624) (Var R_X4) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 74624))) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 74624))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 74624)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 74880) (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 74624))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_X3 (Var (V_TEMP 74880))
)

(* 0x0020001c: bic x2,x3,x2 *)
| 2097180 => Some (4,
	Move (V_TEMP 90624) (UnOp OP_NEG (Word 1 64)) $;
	Move (V_TEMP 90880) (BinOp OP_XOR (Var R_X2) (Var (V_TEMP 90624))) $;
	Move R_X2 (BinOp OP_AND (Var R_X3) (Var (V_TEMP 90880)))
)

(* 0x00200020: tst x2,#-0x7f7f7f7f7f7f7f80 *)
| 2097184 => Some (4,
	Move (V_TEMP 261120) (BinOp OP_AND (Var R_X2) (Word 9259542123273814144 64)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Word 0 8) $;
	Move R_OV (Word 0 8)
)

(* 0x00200024: b.eq 0x00200050 *)
| 2097188 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 2097232 64)
	) (* else *) (
		Nop
	)
)

(* 0x00200028: ldrb w2,[x1] *)
| 2097192 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0020002c: cbz w2,0x00200040 *)
| 2097196 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X2)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 2097216 64)
	) (* else *) (
		Nop
	)
)

(* 0x00200030: add x1,x1,#0x1 *)
| 2097200 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x00200034: b 0x00200028 *)
| 2097204 => Some (4,
	Jmp (Word 2097192 64)
)

(* 0x00200038: ldrb w2,[x1] *)
| 2097208 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0020003c: cbnz w2,0x00200048 *)
| 2097212 => Some (4,
	Move (V_TEMP 101888) (Cast CAST_UNSIGNED 8 (BinOp OP_NEQ (Extract 31 0 (Var R_X2)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 101888))) (
		Jmp (Word 2097224 64)
	) (* else *) (
		Nop
	)
)

(* 0x00200040: sub x0,x1,x0 *)
| 2097216 => Some (4,
	Move R_X0 (BinOp OP_MINUS (Var R_X1) (Var R_X0))
)

(* 0x00200044: ret *)
| 2097220 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00200048: add x1,x1,#0x1 *)
| 2097224 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x0020004c: b 0x00200004 *)
| 2097228 => Some (4,
	Jmp (Word 2097156 64)
)

(* 0x00200050: add x1,x1,#0x8 *)
| 2097232 => Some (4,
	Move (V_TEMP 73344) (Word 8 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x00200054: b 0x00200014 *)
| 2097236 => Some (4,
	Jmp (Word 2097172 64)
)


| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx strchrnul_lo___strchrnul_armv8. Proof. Picinae_typecheck. Qed.
