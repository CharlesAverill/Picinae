(* Generated by pcode2coq.py
arch: armv8
file: wmemchr.lo
function: wmemchr
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition wmemchr_lo_wmemchr_armv8 : program := fun _ a => match a with

(* 0x00100000: cbz x2,0x00100020 *)
| 1048576 => Some (4,
	Move (V_TEMP 102272) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var R_X2) (Word 0 64))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102272))) (
		Jmp (Word 1048608 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100004: ldr w3,[x0] *)
| 1048580 => Some (4,
	Move (V_TEMP 26496) (Var R_X0) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 26496)) LittleE 4) $;
	Move R_X3 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x00100008: cmp w3,w1 *)
| 1048584 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X3)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X3)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x0010000c: b.ne 0x00100014 *)
| 1048588 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048596 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100010: ret *)
| 1048592 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100014: sub x2,x2,#0x1 *)
| 1048596 => Some (4,
	Move R_X2 (BinOp OP_MINUS (Var R_X2) (Word 1 64))
)

(* 0x00100018: add x0,x0,#0x4 *)
| 1048600 => Some (4,
	Move (V_TEMP 73344) (Word 4 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Var R_X0))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X0 (Var (V_TEMP 73600))
)

(* 0x0010001c: b 0x00100000 *)
| 1048604 => Some (4,
	Jmp (Word 1048576 64)
)

(* 0x00100020: mov x0,#0x0 *)
| 1048608 => Some (4,
	Move R_X0 (Word 0 64)
)

(* 0x00100024: b 0x00100010 *)
| 1048612 => Some (4,
	Jmp (Word 1048592 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx wmemchr_lo_wmemchr_armv8. Proof. Picinae_typecheck. Qed.