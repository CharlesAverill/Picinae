(* Generated by pcode2coq.py + ixb's own hands
arch: armv8
file: wcslen.lo
function: wcslen
*)

Require Import Picinae_armv8.
Require Import NArith.
Open Scope N.


(*Init: starting addr is 5242880 and R_RX0 = x0*)
Definition wcslen_lo_wcslen_armv8 : program := fun _ a => match a with

(* 0x00500000: mov x1,x0 *)
  (*Invs R_RX0 = x0*)
| 5242880 => Some (4,
	Move R_X1 (Var R_X0)
)

(* 0x00500004: ldr w2,[x1] *)
| 5242884 => Some (4,
	Move (V_TEMP 26496) (Var R_X1) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 26496)) LittleE 4) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x00500008: cbnz w2,0x00500018 *)
| 5242888 => Some (4,
	Move (V_TEMP 101888) (Cast CAST_UNSIGNED 8 (BinOp OP_NEQ (Extract 31 0 (Var R_X2)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 101888))) (
		Jmp (Word 5242904 64)
	) (* else *) (
		Nop
	)
)

(* 0x0050000c: sub x0,x1,x0 *)
| 5242892 => Some (4,
	Move R_X0 (BinOp OP_MINUS (Var R_X1) (Var R_X0))
)

(* 0x00500010: asr x0,x0,#0x2 *)
| 5242896 => Some (4,
	Move R_X0 (BinOp OP_ARSHIFT (Var R_X0) (Word 2 64))
)

(* 0x00500014: ret *)
| 5242900 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00500018: add x1,x1,#0x4 *)
| 5242904 => Some (4,
	Move (V_TEMP 73344) (Word 4 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x0050001c: b 0x00500004 *)
| 5242908 => Some (4,
	Jmp (Word 5242884 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx wcslen_lo_wcslen_armv8. Proof. Picinae_typecheck. Qed.

Definition Init (t:trace) s xs' x0 x1 x2 :=
  startof t xs' = (Addr 5242880, s)
  /\ models arm8typctx s
  /\ s R_X0 = x0
  /\ s R_X1 = x1
  /\ s R_X2 = x2.

Section Invs.

  Variable x0 : N.
  Variable x1 : N.
  Variable x2 : N.

  Variable mem : memory.  (* initial memory state *)
  Variable p : addr.      (* pointer argument *)

  (* The first k bytes are non-nil. *)
  Definition nilfree (k:N) := forall i, i < k -> (getmem 64 LittleE 1 mem (p+i)) <> 0.
  
  (* strlen must return a number k such that the first k bytes of p are non-nil
     and the k+1st byte is nil. *)
  Definition postcondition (s:store) :=
    exists k, s R_X0 = k /\ nilfree k /\ (getmem 64 LittleE 1 mem (p+k)) = 0.

  Definition Invs (t:trace) : option Prop :=
    match t with (Addr a, s)::_ =>
      match a with
      | 5242880 => Some (s R_X0 = x0 /\ s R_X1 = x1 /\ s R_X2 = x2)
      | 5242888 => Some (s R_X0 = x0)
      | 5242900 => Some (postcondition s)
      | _ => None
      end
    | _ => None end.
  

End Invs.


Definition exit (t:trace) : bool :=
  match t with (Addr a, _)::_ =>
    match a with
      5242900 => true
    | _ => false
    end
  | _ => false
  end.

Theorem wcslen_partial_correctness :
  forall s t xs' x0 x1 x2 mem p (INIT: Init t s xs' x0 x1 x2),
    satisfies_all wcslen_lo_wcslen_armv8 (Invs x0 x1 x2 mem p) exit (xs'::t).
Proof.
  intros s t xs' x0 x1 x2 mem p INIT. destruct INIT as (ENTRY & MDL & R2).
  apply prove_invs.

  (* Base Case *)
  simpl. rewrite ENTRY. arm8_step. assumption.

  (* Inductive Case *)
  intros.
  eapply startof_prefix in ENTRY; try eassumption.
  eapply preservation_exec_prog in MDL; try (eassumption || apply welltyped).
  clear - PRE MDL. rename t1 into t; rename s1 into s.
  destruct_inv 64 PRE. destruct PRE.

  arm8_step. arm8_step. reflexivity. arm8_step. arm8_step.
  arm8_step. arm8_step. assumption.
  arm8_step. arm8_step.
  split.
  reflexivity. 
   Qed.
