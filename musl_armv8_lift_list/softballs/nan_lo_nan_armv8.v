(* Generated by pcode2coq.py
arch: armv8
file: nan.lo
function: nan
*)

Require Import Picinae_armv8.
Require Import NArith.
Open Scope N.

Definition nan_lo_nan_armv8 : program := fun _ a => match a with

(* 0x00100000: adrp x0,0x100000 *)
  (*Moves a 64 bit int of 1048576 into R_X0*)
| 1048576 => Some (4,
	Move R_X0 (Word 1048576 64)
)

(* 0x00100004: ldr d0,[x0, #0x10] *)
| 1048580 => Some (4,
    (*Add 16 to R_X0 and move that into a V_TEMP*)
	Move (V_TEMP 25856) (BinOp OP_PLUS (Var R_X0) (Word 16 64)) $;
	Move R_Z0 (BinOp OP_OR
		(BinOp OP_LSHIFT (Cast CAST_UNSIGNED 256 (Load (Var V_MEM64) (Var (V_TEMP 25856)) LittleE 8)) (Word 0 256))
		(BinOp OP_AND (Var R_Z0) (Word 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 256))) $;
	Move R_Z0 (BinOp OP_OR
		(BinOp OP_LSHIFT (Cast CAST_UNSIGNED 256 (Word 0 64)) (Word 64 256))
		(BinOp OP_AND (Var R_Z0) (Word 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF 256))) $;
	Move R_Z0 (BinOp OP_OR
		(BinOp OP_LSHIFT (Cast CAST_UNSIGNED 256 (Word 0 64)) (Word 128 256))
		(BinOp OP_AND (Var R_Z0) (Word 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 256))) $;
	Move R_Z0 (BinOp OP_OR
		(BinOp OP_LSHIFT (Cast CAST_UNSIGNED 256 (Word 0 64)) (Word 192 256))
		(BinOp OP_AND (Var R_Z0) (Word 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 256)))
)

(* 0x00100008: ret *)
| 1048584 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx nan_lo_nan_armv8. Proof. Picinae_typecheck. Qed.

Definition Init (t:trace) s xs' m64 :=
  startof t xs' = (Addr 1048576, s)
  /\ models arm8typctx s
  /\ s V_MEM64 = m64.

Section Invs.

  Variable m64 : N.

  Axiom nan : xnbits m64 (8 * 1048592) 64 = 0x000000000000f87f.

  Definition postcondition (n:N) : Prop := 
    n = 0x000000000000f87f.

  Definition Invs (t:trace) : option Prop :=
    match t with (Addr a, s)::_ =>
      match a with
      | 1048576 => Some (s V_MEM64 = m64)
      | 1048584 => Some (postcondition (s R_Z0))
      | _ => None
      end
    | _ => None end.

End Invs.

Definition exit (t:trace) : bool :=
  match t with (Addr a, _)::_ =>
    match a with
      1048584 => true
    | _ => false
    end
  | _ => false
  end.

Theorem nan_partial_correctness :
  forall s t xs' m64 (INIT: Init t s xs' m64),
    satisfies_all nan_lo_nan_armv8 (Invs m64) exit (xs'::t).
Proof.
  intros s t xs' m64 INIT. destruct INIT as (ENTRY & MDL & R2).
  apply prove_invs.

  (* Base Case *)
  simpl. rewrite ENTRY. arm8_step. assumption.

  (* Inductive Case *)
  intros.
  eapply startof_prefix in ENTRY; try eassumption.
  eapply preservation_exec_prog in MDL; try (eassumption || apply welltyped).
  clear - PRE MDL. rename t1 into t; rename s1 into s.
  destruct_inv 64 PRE.

  arm8_step. arm8_step. clear ACC t0. destruct PRE.
   rewrite N.land_lor_distr_l. rewrite <- N.land_assoc. simpl. 
   rewrite N.land_0_r. rewrite N.lor_0_r. rewrite getmem_xbits.
   assert(xbits (s V_MEM64) (8 * 1048592) (8 * (8 + 1048592)) =
   xnbits (s V_MEM64) (8 * 1048592) 64) as XNX. 
   - assert (8 * (8 + 1048592) = (64 + 8 * 1048592)) as EQ. 
     reflexivity. unfold xnbits. rewrite EQ. reflexivity.
   - rewrite XNX. rewrite nan. 
     + reflexivity.
   - reflexivity.
  Qed.                                         
