(* Generated by pcode2coq.py
arch: armv8
file: wcscpy.lo
function: wcscpy
*)

Require Import Picinae_armv8.
Require Import NArith.
Open Scope N.

Definition wcscpy_lo_wcscpy_armv8 : program := fun _ a => match a with

  (* 0x00100000: mov x2,#0x0 *)
| 1048576 => Some (4,
	Move R_X2 (Word 0 64)
)

(* 0x00100004: ldr w3,[x1, x2, LSL #0x0] *)
| 1048580 => Some (4,
	Move (V_TEMP 23040) (Var R_X2) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 0 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 28928))) $;
	Move (V_TEMP 151168) (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 4) $;
	Move R_X3 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 151168)))
)

(* 0x00100008: str w3,[x0, x2, LSL #0x0] *)
| 1048584 => Some (4,
	Move (V_TEMP 238848) (Extract 31 0 (Var R_X3)) $;
	Move (V_TEMP 23040) (Var R_X2) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 0 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 28928))) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 30080)) (Cast CAST_LOW 32 (Var (V_TEMP 238848))) LittleE 4)
)

(* 0x0010000c: add x2,x2,#0x4 *)
| 1048588 => Some (4,
	Move (V_TEMP 73344) (Word 4 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 73344))) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X2 (Var (V_TEMP 73600))
)

(*If Var (V_TEMP 101888) is casted to CAST_LOW of bit width 1,
Loop back, else end*)
(* 0x00100010: cbnz w3,0x00100004 *)
| 1048592 => Some (4,
	Move (V_TEMP 101888) (Cast CAST_UNSIGNED 8 (BinOp OP_NEQ (Extract 31 0 (Var R_X3)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 101888))) (
		Jmp (Word 1048580 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100014: ret *)
| 1048596 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

| _ => None
end.

Check cast.
Print exp.
Theorem welltyped: welltyped_prog arm8typctx wcscpy_lo_wcscpy_armv8. Proof. Picinae_typecheck. Qed.

Definition Init (t:trace) s xs' x0 x1 x2 x3:=
  startof t xs' = (Addr 1048576, s)
  /\ models arm8typctx s
  /\ s R_X0 = x0 /\ s R_X1 = x1 /\ s R_X2 = x2 /\ s R_X3 = x3.

Section Invs.

  Variable x0 : N.
  Variable x1 : N.
  Variable x2 : N.
  Variable x3 : N.

  Definition postcondition : Prop := 
    (N.shiftr x3 0 mod 2 ^ 32 =? 0) = true.

  Definition Invs (t:trace) : option Prop :=
    match t with (Addr a, s)::_ =>
      match a with
      | 1048576 => Some (s R_X0 = x0 /\ s R_X1 = x1 /\ s R_X2 = x2 /\ s R_X3 = x3)
      | 1048592 => Some (True)
      | 1048596 => Some (postcondition)
      | _ => None
      end
    | _ => None end.


End Invs.


Definition exit (t:trace) : bool :=
  match t with (Addr a, _)::_ =>
    match a with
      1048596 => true
    | _ => false
    end
  | _ => false
  end.


Theorem wcscpy_partial_correctness :
  forall s t xs' x0 x1 x2 x3 (INIT: Init t s xs' x0 x1 x2 x3),
    satisfies_all wcscpy_lo_wcscpy_armv8 (Invs x0 x1 x2 x3) exit (xs'::t).
Proof.
  intros s t xs' x0 x1 x2 x3 INIT. destruct INIT as (ENTRY & MDL & R2).
  apply prove_invs.

  (* Base Case *)
  simpl. rewrite ENTRY. arm8_step. assumption.

  (* Inductive Case *)
  intros.
  eapply startof_prefix in ENTRY; try eassumption.
  eapply preservation_exec_prog in MDL; try (eassumption || apply welltyped).
  clear - PRE MDL. rename t1 into t; rename s1 into s.
  destruct_inv 64 PRE.

  (*Set x2 to 0*)
  arm8_step. 
  (*Start loop*)
  arm8_step. arm8_step. arm8_step. reflexivity.
  arm8_step. arm8_step. arm8_step. arm8_step. reflexivity.
  rewrite Bool.negb_false_iff in BC.
  assumption.
  Qed.



