(* Generated by pcode2coq.py
arch: armv8
file: memchr.lo
function: memchr
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition memchr_lo_memchr_armv8 : program := fun _ a => match a with

(* 0x00100000: and w1,w1,#0xff *)
| 1048576 => Some (4,
	Move (V_TEMP 75136) (BinOp OP_AND (Extract 31 0 (Var R_X1)) (Word 255 32)) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 75136)))
)

(* 0x00100004: tst x0,#0x7 *)
| 1048580 => Some (4,
	Move (V_TEMP 261120) (BinOp OP_AND (Var R_X0) (Word 7 64)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Word 0 8) $;
	Move R_OV (Word 0 8)
)

(* 0x00100008: b.eq 0x0010007c *)
| 1048584 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048700 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010000c: cbz x2,0x00100080 *)
| 1048588 => Some (4,
	Move (V_TEMP 102272) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var R_X2) (Word 0 64))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102272))) (
		Jmp (Word 1048704 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100010: ldrb w3,[x0] *)
| 1048592 => Some (4,
	Move (V_TEMP 26240) (Var R_X0) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X3 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100014: cmp w3,w1 *)
| 1048596 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X3)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X3)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100018: b.ne 0x00100070 *)
| 1048600 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048688 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010001c: ldrb w3,[x0] *)
| 1048604 => Some (4,
	Move (V_TEMP 26240) (Var R_X0) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X3 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100020: cmp w3,w1 *)
| 1048608 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X3)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X3)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100024: b.eq 0x0010005c *)
| 1048612 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048668 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100028: sxtw x4,w1 *)
| 1048616 => Some (4,
	Move R_X4 (Cast CAST_SIGNED 64 (Extract 31 0 (Var R_X1)))
)

(* 0x0010002c: orr x3,xzr,#0x101010101010101 *)
| 1048620 => Some (4,
	Move (V_TEMP 1408) (Word 0 64) $;
	Move R_X3 (BinOp OP_OR (Var (V_TEMP 1408)) (Word 72340172838076673 64))
)

(* 0x00100030: orr x6,xzr,#-0x101010101010102 *)
| 1048624 => Some (4,
	Move (V_TEMP 1408) (Word 0 64) $;
	Move R_X6 (BinOp OP_OR (Var (V_TEMP 1408)) (Word 18374403900871474942 64))
)

(* 0x00100034: movk x6,#0xfeff *)
| 1048628 => Some (4,
	Move R_X6 (BinOp OP_AND (Var R_X6) (Word 18446744073709486080 64)) $;
	Move R_X6 (BinOp OP_OR (Var R_X6) (Word 65279 64))
)

(* 0x00100038: mul x4,x4,x3 *)
| 1048632 => Some (4,
	Move R_X4 (BinOp OP_TIMES (Var R_X4) (Var R_X3))
)

(* 0x0010003c: cmp x2,#0x7 *)
| 1048636 => Some (4,
	Move (V_TEMP 117888) (Word 7 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Var (V_TEMP 117888)) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Var R_X2) (Var (V_TEMP 117888))) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Var R_X2) (Var (V_TEMP 117888))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 117888)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 118144) (BinOp OP_MINUS (Var R_X2) (Var (V_TEMP 117888))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118144)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118144)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100040: b.ls 0x0010005c *)
| 1048640 => Some (4,
	Move (V_TEMP 3840) (UnOp OP_NOT (Var R_CY)) $;
	Move (V_TEMP 4096) (BinOp OP_OR (Var (V_TEMP 3840)) (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 4096))) (
		Jmp (Word 1048668 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100044: ldr x3,[x0] *)
| 1048644 => Some (4,
	Move (V_TEMP 26624) (Var R_X0) $;
	Move R_X3 (Load (Var V_MEM64) (Var (V_TEMP 26624)) LittleE 8)
)

(* 0x00100048: eor x3,x4,x3 *)
| 1048648 => Some (4,
	Move R_X3 (BinOp OP_XOR (Var R_X4) (Var R_X3))
)

(* 0x0010004c: add x5,x3,x6 *)
| 1048652 => Some (4,
	Move (V_TEMP 74624) (Var R_X6) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X3) (Var (V_TEMP 74624))) (Var R_X3))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X3) (Var (V_TEMP 74624))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X3) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X3) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 74624)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 74880) (BinOp OP_PLUS (Var R_X3) (Var (V_TEMP 74624))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 74880)) (Word 0 64))) $;
	Move R_X5 (Var (V_TEMP 74880))
)

(* 0x00100050: bic x3,x5,x3 *)
| 1048656 => Some (4,
	Move (V_TEMP 90624) (UnOp OP_NEG (Word 1 64)) $;
	Move (V_TEMP 90880) (BinOp OP_XOR (Var R_X3) (Var (V_TEMP 90624))) $;
	Move R_X3 (BinOp OP_AND (Var R_X5) (Var (V_TEMP 90880)))
)

(* 0x00100054: tst x3,#-0x7f7f7f7f7f7f7f80 *)
| 1048660 => Some (4,
	Move (V_TEMP 261120) (BinOp OP_AND (Var R_X3) (Word 9259542123273814144 64)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 261120)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Word 0 8) $;
	Move R_OV (Word 0 8)
)

(* 0x00100058: b.eq 0x00100088 *)
| 1048664 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048712 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010005c: cbz x2,0x00100080 *)
| 1048668 => Some (4,
	Move (V_TEMP 102272) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var R_X2) (Word 0 64))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102272))) (
		Jmp (Word 1048704 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100060: ldrb w3,[x0] *)
| 1048672 => Some (4,
	Move (V_TEMP 26240) (Var R_X0) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X3 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100064: cmp w3,w1 *)
| 1048676 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X3)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X3)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X1))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100068: b.ne 0x00100094 *)
| 1048680 => Some (4,
	Move (V_TEMP 2560) (UnOp OP_NOT (Var R_ZR)) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 2560))) (
		Jmp (Word 1048724 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010006c: ret *)
| 1048684 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100070: add x0,x0,#0x1 *)
| 1048688 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Var R_X0))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X0 (Var (V_TEMP 73600))
)

(* 0x00100074: sub x2,x2,#0x1 *)
| 1048692 => Some (4,
	Move R_X2 (BinOp OP_MINUS (Var R_X2) (Word 1 64))
)

(* 0x00100078: b 0x00100004 *)
| 1048696 => Some (4,
	Jmp (Word 1048580 64)
)

(* 0x0010007c: cbnz x2,0x0010001c *)
| 1048700 => Some (4,
	Move (V_TEMP 102016) (Cast CAST_UNSIGNED 8 (BinOp OP_NEQ (Var R_X2) (Word 0 64))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102016))) (
		Jmp (Word 1048604 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100080: mov x0,#0x0 *)
| 1048704 => Some (4,
	Move R_X0 (Word 0 64)
)

(* 0x00100084: b 0x0010006c *)
| 1048708 => Some (4,
	Jmp (Word 1048684 64)
)

(* 0x00100088: add x0,x0,#0x8 *)
| 1048712 => Some (4,
	Move (V_TEMP 73344) (Word 8 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Var R_X0))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X0 (Var (V_TEMP 73600))
)

(* 0x0010008c: sub x2,x2,#0x8 *)
| 1048716 => Some (4,
	Move R_X2 (BinOp OP_MINUS (Var R_X2) (Word 8 64))
)

(* 0x00100090: b 0x0010003c *)
| 1048720 => Some (4,
	Jmp (Word 1048636 64)
)

(* 0x00100094: add x0,x0,#0x1 *)
| 1048724 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Var R_X0))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X0) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X0 (Var (V_TEMP 73600))
)

(* 0x00100098: sub x2,x2,#0x1 *)
| 1048728 => Some (4,
	Move R_X2 (BinOp OP_MINUS (Var R_X2) (Word 1 64))
)

(* 0x0010009c: b 0x0010005c *)
| 1048732 => Some (4,
	Jmp (Word 1048668 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx memchr_lo_memchr_armv8. Proof. Picinae_typecheck. Qed.