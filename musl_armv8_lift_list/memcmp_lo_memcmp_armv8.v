(* Generated by pcode2coq.py
arch: armv8
file: memcmp.lo
function: memcmp
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition memcmp_lo_memcmp_armv8 : program := fun _ a => match a with

(* 0x00100000: sub x7,x1,#0x1 *)
| 1048576 => Some (4,
	Move R_X7 (BinOp OP_MINUS (Var R_X1) (Word 1 64))
)

(* 0x00100004: mov x4,#0x0 *)
| 1048580 => Some (4,
	Move R_X4 (Word 0 64)
)

(* 0x00100008: cmp x2,x4 *)
| 1048584 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Var R_X4) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Var R_X2) (Var R_X4)) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Var R_X2) (Var R_X4)) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X4) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 119040) (BinOp OP_MINUS (Var R_X2) (Var R_X4)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 119040)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 119040)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x0010000c: b.eq 0x00100040 *)
| 1048588 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048640 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100010: add x5,x4,#0x1 *)
| 1048592 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X4) (Var (V_TEMP 73344))) (Var R_X4))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X4) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X4) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X4) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X4) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X5 (Var (V_TEMP 73600))
)

(* 0x00100014: ldrb w3,[x0, x4, LSL ] *)
| 1048596 => Some (4,
	Move (V_TEMP 23040) (Var R_X4) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 0 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X0) (Var (V_TEMP 28928))) $;
	Move (V_TEMP 152320) (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 1) $;
	Move R_X3 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152320)))
)

(* 0x00100018: ldrb w6,[x7, x5, LSL ] *)
| 1048600 => Some (4,
	Move (V_TEMP 23040) (Var R_X5) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 0 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X7) (Var (V_TEMP 28928))) $;
	Move (V_TEMP 152320) (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 1) $;
	Move R_X6 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152320)))
)

(* 0x0010001c: cmp w3,w6 *)
| 1048604 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X6)) (Extract 31 0 (Var R_X3)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X3)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X6))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X6))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X6)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X6))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100020: b.eq 0x00100038 *)
| 1048608 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048632 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100024: cmp x2,x4 *)
| 1048612 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Var R_X4) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Var R_X2) (Var R_X4)) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Var R_X2) (Var R_X4)) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X4) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 119040) (BinOp OP_MINUS (Var R_X2) (Var R_X4)) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 119040)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 119040)) (Word 0 64))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100028: b.eq 0x00100040 *)
| 1048616 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048640 64)
	) (* else *) (
		Nop
	)
)

(* 0x0010002c: ldrb w0,[x1, x4, LSL ] *)
| 1048620 => Some (4,
	Move (V_TEMP 23040) (Var R_X4) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 0 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 28928))) $;
	Move (V_TEMP 152320) (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 1) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152320)))
)

(* 0x00100030: sub w0,w3,w0 *)
| 1048624 => Some (4,
	Move (V_TEMP 251008) (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X0))) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 251008)))
)

(* 0x00100034: ret *)
| 1048628 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x00100038: mov x4,x5 *)
| 1048632 => Some (4,
	Move R_X4 (Var R_X5)
)

(* 0x0010003c: b 0x00100008 *)
| 1048636 => Some (4,
	Jmp (Word 1048584 64)
)

(* 0x00100040: mov w0,#0x0 *)
| 1048640 => Some (4,
	Move R_X0 (Word 0 64)
)

(* 0x00100044: b 0x00100034 *)
| 1048644 => Some (4,
	Jmp (Word 1048628 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx memcmp_lo_memcmp_armv8. Proof. Picinae_typecheck. Qed.