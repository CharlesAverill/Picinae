(* Generated by pcode2coq.py + ixb's own hands
arch: armv8
file: strspn_arm8.so
function: __strspn
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition strspn2 : program := fun _ a => match a with

(* 0x00100000: adrp x2,0x100000 *)
| 1048576 => Some (4,
	Move R_X2 (Word 1048576 64)
)

(* 0x00100004: add x2,x2,#0xb0 *)
| 1048580 => Some (4,
	Move (V_TEMP 73344) (Word 176 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 73344))) (Var R_X2))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X2) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X2) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X2 (Var (V_TEMP 73600))
)

(* 0x00100008: sub sp,sp,#0x20 *)
| 1048584 => Some (4,
	Move R_SP (BinOp OP_MINUS (Var R_SP) (Word 32 64))
)

(* 0x0010000c: mov x3,sp *)
| 1048588 => Some (4,
	Move R_X3 (Var R_SP)
)

(* 0x00100010: ld1 {v0.16B,v1.16B},[x2] *)
| 1048592 => Some (4,
  (* Manually edited to combine 32 1 byte loads into 2 16 byte loads *)
	Move (V_TEMP 0) (Var R_X2) $;
	Move R_Z0 (BinOp OP_OR
		(Cast CAST_UNSIGNED 256 (Load (Var V_MEM64) (Var (V_TEMP 0)) LittleE 16))
		(BinOp OP_AND (Var R_Z0) (Word 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 256))) $;
	Move (V_TEMP 0) (BinOp OP_PLUS (Var (V_TEMP 0)) (Word 16 64)) $;
	Move R_Z1 (BinOp OP_OR
		(Cast CAST_UNSIGNED 256 (Load (Var V_MEM64) (Var (V_TEMP 0)) LittleE 16))
		(BinOp OP_AND (Var R_Z1) (Word 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 256)))
)

(* 0x00100014: ldrb w2,[x1] *)
| 1048596 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100018: st1 {v0.16B,v1.16B},[x3] *)
| 1048600 => Some (4,
  (* Manually edited to combine 32 1 byte stores into 2 16 byte stores *)
	Move (V_TEMP 0) (Var R_X3) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 0)) (Cast CAST_LOW 128 (Extract 127 0 (Var R_Z0))) LittleE 16) $;
	Move (V_TEMP 0) (BinOp OP_PLUS (Var (V_TEMP 0)) (Word 16 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 0)) (Cast CAST_LOW 128 (Extract 127 0 (Var R_Z1))) LittleE 16) 
)

(* 0x0010001c: cbz w2,0x0010009c *)
| 1048604 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X2)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048732 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100020: ldrb w4,[x1, #0x1] *)
| 1048608 => Some (4,
	Move (V_TEMP 25088) (BinOp OP_PLUS (Var R_X1) (Word 1 64)) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 25088)) LittleE 1) $;
	Move R_X4 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100024: cbz w4,0x0010006c *)
| 1048612 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X4)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048684 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100028: mov x6,#0x1 *)
| 1048616 => Some (4,
	Move R_X6 (Word 1 64)
)

(* 0x0010002c: ldrb w2,[x1] *)
| 1048620 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X2 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100030: cbz w2,0x00100094 *)
| 1048624 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X2)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048724 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100034: ubfx x4,x2,#0x6,#0x2 *)
| 1048628 => Some (4,
	Move (V_TEMP 269056) (Var R_X2) $;
	Move (V_TEMP 269184) (BinOp OP_RSHIFT (Var (V_TEMP 269056)) (Word 6 64)) $;
	Move (V_TEMP 269312) (BinOp OP_MINUS (Word 64 64) (Word 6 64)) $;
	Move (V_TEMP 269440) (BinOp OP_LSHIFT (Var (V_TEMP 269056)) (Var (V_TEMP 269312))) $;
	Move (V_TEMP 269568) (BinOp OP_OR (Var (V_TEMP 269184)) (Var (V_TEMP 269440))) $;
	Move (V_TEMP 269824) (BinOp OP_AND (Var (V_TEMP 269568)) (Word 18158513697557839875 64)) $;
	Move R_X4 (BinOp OP_AND (Var (V_TEMP 269824)) (Word 3 64))
)

(* 0x00100038: add x1,x1,#0x1 *)
| 1048632 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x0010003c: lsl x2,x6,x2 *)
| 1048636 => Some (4,
	Move (V_TEMP 162816) (BinOp OP_AND (Var R_X2) (Word 63 64)) $;
	Move R_X2 (BinOp OP_LSHIFT (Var R_X6) (Var (V_TEMP 162816)))
)

(* 0x00100040: ldr x5,[x3, x4, LSL #0x3] *)
| 1048640 => Some (4,
	Move (V_TEMP 23040) (Var R_X4) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 3 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X3) (Var (V_TEMP 28928))) $;
	Move R_X5 (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 8)
)

(* 0x00100044: orr x2,x2,x5 *)
| 1048644 => Some (4,
	Move R_X2 (BinOp OP_OR (Var R_X2) (Var R_X5))
)

(* 0x00100048: str x2,[x3, x4, LSL #0x3] *)
| 1048648 => Some (4,
	Move (V_TEMP 238976) (Var R_X2) $;
	Move (V_TEMP 23040) (Var R_X4) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 3 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X3) (Var (V_TEMP 28928))) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 30080)) (Cast CAST_LOW 64 (Var (V_TEMP 238976))) LittleE 8)
)

(* 0x0010004c: b 0x0010002c *)
| 1048652 => Some (4,
	Jmp (Word 1048620 64)
)

(* 0x00100050: add x1,x1,#0x1 *)
| 1048656 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x00100054: ldrb w3,[x1] *)
| 1048660 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X3 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x00100058: cmp w3,w2 *)
| 1048664 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X2)) (Extract 31 0 (Var R_X3)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X3)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X2))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X2))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X2)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X3)) (Extract 31 0 (Var R_X2))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x0010005c: b.eq 0x00100050 *)
| 1048668 => Some (4,
	If (Cast CAST_LOW 1 (Var R_ZR)) (
		Jmp (Word 1048656 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100060: sub x0,x1,x0 *)
| 1048672 => Some (4,
	Move R_X0 (BinOp OP_MINUS (Var R_X1) (Var R_X0))
)

(* 0x00100064: add sp,sp,#0x20 *)
| 1048676 => Some (4,
	Move (V_TEMP 73344) (Word 32 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) (Var R_SP))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_SP) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_SP) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_SP (Var (V_TEMP 73600))
)

(* 0x00100068: ret *)
| 1048680 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

(* 0x0010006c: mov x1,x0 *)
| 1048684 => Some (4,
	Move R_X1 (Var R_X0)
)

(* 0x00100070: b 0x00100054 *)
| 1048688 => Some (4,
	Jmp (Word 1048660 64)
)

(* 0x00100074: add x1,x1,#0x1 *)
| 1048692 => Some (4,
	Move (V_TEMP 73344) (Word 1 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Var R_X1))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_X1) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_X1) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_X1 (Var (V_TEMP 73600))
)

(* 0x00100078: ldrb w4,[x1] *)
| 1048696 => Some (4,
	Move (V_TEMP 26240) (Var R_X1) $;
	Move (V_TEMP 152064) (Load (Var V_MEM64) (Var (V_TEMP 26240)) LittleE 1) $;
	Move R_X4 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 152064)))
)

(* 0x0010007c: cbz w4,0x00100060 *)
| 1048700 => Some (4,
	Move (V_TEMP 102144) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Extract 31 0 (Var R_X4)) (Word 0 32))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 102144))) (
		Jmp (Word 1048672 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100080: ubfx x2,x4,#0x6,#0x2 *)
| 1048704 => Some (4,
	Move (V_TEMP 269056) (Var R_X4) $;
	Move (V_TEMP 269184) (BinOp OP_RSHIFT (Var (V_TEMP 269056)) (Word 6 64)) $;
	Move (V_TEMP 269312) (BinOp OP_MINUS (Word 64 64) (Word 6 64)) $;
	Move (V_TEMP 269440) (BinOp OP_LSHIFT (Var (V_TEMP 269056)) (Var (V_TEMP 269312))) $;
	Move (V_TEMP 269568) (BinOp OP_OR (Var (V_TEMP 269184)) (Var (V_TEMP 269440))) $;
	Move (V_TEMP 269824) (BinOp OP_AND (Var (V_TEMP 269568)) (Word 18158513697557839875 64)) $;
	Move R_X2 (BinOp OP_AND (Var (V_TEMP 269824)) (Word 3 64))
)

(* 0x00100084: ldr x2,[x3, x2, LSL #0x3] *)
| 1048708 => Some (4,
	Move (V_TEMP 23040) (Var R_X2) $;
	Move (V_TEMP 28928) (Var (V_TEMP 23040)) $;
	Move (V_TEMP 28928) (BinOp OP_LSHIFT (Var (V_TEMP 28928)) (Word 3 64)) $;
	Move (V_TEMP 30080) (BinOp OP_PLUS (Var R_X3) (Var (V_TEMP 28928))) $;
	Move R_X2 (Load (Var V_MEM64) (Var (V_TEMP 30080)) LittleE 8)
)

(* 0x00100088: lsr x2,x2,x4 *)
| 1048712 => Some (4,
	Move (V_TEMP 165120) (BinOp OP_AND (Var R_X4) (Word 63 64)) $;
	Move R_X2 (BinOp OP_RSHIFT (Var R_X2) (Var (V_TEMP 165120)))
)

(* 0x0010008c: tbnz w2,#0x0,0x00100074 *)
| 1048716 => Some (4,
	Move (V_TEMP 100608) (BinOp OP_RSHIFT (Extract 31 0 (Var R_X2)) (Word 0 32)) $;
	Move (V_TEMP 100736) (BinOp OP_AND (Var (V_TEMP 100608)) (Word 1 32)) $;
	Move (V_TEMP 100992) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 100736)) (Word 0 32))) $;
	Move (V_TEMP 260352) (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 100992)) (Word 0 8))) $;
	If (Cast CAST_LOW 1 (Var (V_TEMP 260352))) (
		Jmp (Word 1048692 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100090: b 0x00100060 *)
| 1048720 => Some (4,
	Jmp (Word 1048672 64)
)

(* 0x00100094: mov x1,x0 *)
| 1048724 => Some (4,
	Move R_X1 (Var R_X0)
)

(* 0x00100098: b 0x00100078 *)
| 1048728 => Some (4,
	Jmp (Word 1048696 64)
)

(* 0x0010009c: mov x0,#0x0 *)
| 1048732 => Some (4,
	Move R_X0 (Word 0 64)
)

(* 0x001000a0: b 0x00100064 *)
| 1048736 => Some (4,
	Jmp (Word 1048676 64)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx strspn2. 
Proof. Picinae_typecheck. Qed.
