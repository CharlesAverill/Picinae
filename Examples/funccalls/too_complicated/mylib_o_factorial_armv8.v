(* Generated by pcode2coq.py
arch: armv8
file: mylib.o
function: factorial
*)

Require Import Picinae_armv8_pcode.
Require Import NArith.
Open Scope N.

Definition mylib_o_factorial_armv8 : program := fun _ a => match a with

(* 0x0010014c: sub sp,sp,#0x20 *)
| 1048908 => Some (4,
	Move R_SP (BinOp OP_MINUS (Var R_SP) (Word 32 64))
)

(* 0x00100150: str w0,[sp, #0xc] *)
| 1048912 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 12 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25600)) (Cast CAST_LOW 32 (Extract 31 0 (Var R_X0))) LittleE 4)
)

(* 0x00100154: mov w0,#0x1 *)
| 1048916 => Some (4,
	Move R_X0 (Word 1 64)
)

(* 0x00100158: str w0,[sp, #0x1c] *)
| 1048920 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 28 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25600)) (Cast CAST_LOW 32 (Extract 31 0 (Var R_X0))) LittleE 4)
)

(* 0x0010015c: mov w0,#0x1 *)
| 1048924 => Some (4,
	Move R_X0 (Word 1 64)
)

(* 0x00100160: str w0,[sp, #0x18] *)
| 1048928 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 24 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25600)) (Cast CAST_LOW 32 (Extract 31 0 (Var R_X0))) LittleE 4)
)

(* 0x00100164: b 0x00100184 *)
| 1048932 => Some (4,
	Jmp (Word 1048964 64)
)

(* 0x00100168: ldr w0,[sp, #0x18] *)
| 1048936 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 24 64)) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 25600)) LittleE 4) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x0010016c: ldr w1,[sp, #0x1c] *)
| 1048940 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 28 64)) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 25600)) LittleE 4) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x00100170: mul w0,w1,w0 *)
| 1048944 => Some (4,
	Move (V_TEMP 176256) (BinOp OP_TIMES (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X0))) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 176256)))
)

(* 0x00100174: str w0,[sp, #0x1c] *)
| 1048948 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 28 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25600)) (Cast CAST_LOW 32 (Extract 31 0 (Var R_X0))) LittleE 4)
)

(* 0x00100178: ldr w0,[sp, #0x18] *)
| 1048952 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 24 64)) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 25600)) LittleE 4) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x0010017c: add w0,w0,#0x1 *)
| 1048956 => Some (4,
	Move (V_TEMP 72320) (Word 1 32) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Extract 31 0 (Var R_X0)) (Var (V_TEMP 72320))) (Extract 31 0 (Var R_X0)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Extract 31 0 (Var R_X0)) (Var (V_TEMP 72320))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 72320)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 72576) (BinOp OP_PLUS (Extract 31 0 (Var R_X0)) (Var (V_TEMP 72320))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 72576)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 72576)) (Word 0 32))) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 72576)))
)

(* 0x00100180: str w0,[sp, #0x18] *)
| 1048960 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 24 64)) $;
	Move V_MEM64 (Store (Var V_MEM64) (Var (V_TEMP 25600)) (Cast CAST_LOW 32 (Extract 31 0 (Var R_X0))) LittleE 4)
)

(* 0x00100184: ldr w0,[sp, #0x18] *)
| 1048964 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 24 64)) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 25600)) LittleE 4) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x00100188: ldr w1,[sp, #0xc] *)
| 1048968 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 12 64)) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 25600)) LittleE 4) $;
	Move R_X1 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x0010018c: cmp w1,w0 *)
| 1048972 => Some (4,
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LE (Extract 31 0 (Var R_X0)) (Extract 31 0 (Var R_X1)))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X1)) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X0))) (Word 31 32)) (Word 1 32))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_MINUS (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X0))) (Word 31 32)) (Word 1 32)) (BinOp OP_AND (BinOp OP_RSHIFT (Extract 31 0 (Var R_X0)) (Word 31 32)) (Word 1 32))) (Word 1 32)))) $;
	Move (V_TEMP 118784) (BinOp OP_MINUS (Extract 31 0 (Var R_X1)) (Extract 31 0 (Var R_X0))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 118784)) (Word 0 32))) $;
	Move R_NG (Var R_TMPNG) $;
	Move R_ZR (Var R_TMPZR) $;
	Move R_CY (Var R_TMPCY) $;
	Move R_OV (Var R_TMPOV)
)

(* 0x00100190: b.cs 0x00100168 *)
| 1048976 => Some (4,
	If (Cast CAST_LOW 1 (Var R_CY)) (
		Jmp (Word 1048936 64)
	) (* else *) (
		Nop
	)
)

(* 0x00100194: ldr w0,[sp, #0x1c] *)
| 1048980 => Some (4,
	Move (V_TEMP 25600) (BinOp OP_PLUS (Var R_SP) (Word 28 64)) $;
	Move (V_TEMP 149760) (Load (Var V_MEM64) (Var (V_TEMP 25600)) LittleE 4) $;
	Move R_X0 (Cast CAST_UNSIGNED 64 (Var (V_TEMP 149760)))
)

(* 0x00100198: add sp,sp,#0x20 *)
| 1048984 => Some (4,
	Move (V_TEMP 73344) (Word 32 64) $;
	Move R_TMPCY (Cast CAST_UNSIGNED 8 (BinOp OP_LT (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) (Var R_SP))) $;
	Move R_TMPOV (Cast CAST_LOW 8 (BinOp OP_AND (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var R_SP) (Word 63 64)) (Word 1 64))) (BinOp OP_XOR (BinOp OP_XOR (BinOp OP_AND (BinOp OP_RSHIFT (Var R_SP) (Word 63 64)) (Word 1 64)) (BinOp OP_AND (BinOp OP_RSHIFT (Var (V_TEMP 73344)) (Word 63 64)) (Word 1 64))) (Word 1 64)))) $;
	Move (V_TEMP 73600) (BinOp OP_PLUS (Var R_SP) (Var (V_TEMP 73344))) $;
	Move R_TMPNG (Cast CAST_UNSIGNED 8 (BinOp OP_SLT (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_TMPZR (Cast CAST_UNSIGNED 8 (BinOp OP_EQ (Var (V_TEMP 73600)) (Word 0 64))) $;
	Move R_SP (Var (V_TEMP 73600))
)

(* 0x0010019c: ret *)
| 1048988 => Some (4,
	Move R_PC (Var R_X30) $;
	Jmp (Var R_PC)
)

| _ => None
end.

Theorem welltyped: welltyped_prog arm8typctx mylib_o_factorial_armv8. Proof. Picinae_typecheck. Qed.